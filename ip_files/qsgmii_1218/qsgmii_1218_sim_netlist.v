// Copyright 1986-2018 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2018.2 (win64) Build 2258646 Thu Jun 14 20:03:12 MDT 2018
// Date        : Tue Dec 22 10:17:35 2020
// Host        : Belen running 64-bit major release  (build 9200)
// Command     : write_verilog -force -mode funcsim
//               C:/Users/Belen/Desktop/eth_rx_tx/ip_files/qsgmii_1218/qsgmii_1218_sim_netlist.v
// Design      : qsgmii_1218
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xc7k325tffg676-2
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* EXAMPLE_SIMULATION = "0" *) (* X_CORE_INFO = "quadsgmii_v3_4_4,Vivado 2018.2" *) 
(* NotValidForBitStream *)
module qsgmii_1218
   (reset,
    gtrefclk,
    txp,
    txn,
    rxp,
    rxn,
    txoutclk,
    rxoutclk,
    resetdone,
    userclk,
    userclk2,
    rxuserclk,
    rxuserclk2,
    independent_clock_bufg,
    pma_reset,
    mmcm_locked,
    sgmii_clk_en_ch0,
    gmii_txd_ch0,
    gmii_tx_en_ch0,
    gmii_tx_er_ch0,
    gmii_rxd_ch0,
    gmii_rx_dv_ch0,
    gmii_rx_er_ch0,
    configuration_vector_ch0,
    an_interrupt_ch0,
    an_adv_config_vector_ch0,
    an_restart_config_ch0,
    speed_is_10_100_ch0,
    speed_is_100_ch0,
    status_vector_ch0,
    sgmii_clk_en_ch1,
    gmii_txd_ch1,
    gmii_tx_en_ch1,
    gmii_tx_er_ch1,
    gmii_rxd_ch1,
    gmii_rx_dv_ch1,
    gmii_rx_er_ch1,
    configuration_vector_ch1,
    an_interrupt_ch1,
    an_adv_config_vector_ch1,
    an_restart_config_ch1,
    speed_is_10_100_ch1,
    speed_is_100_ch1,
    status_vector_ch1,
    sgmii_clk_en_ch2,
    gmii_txd_ch2,
    gmii_tx_en_ch2,
    gmii_tx_er_ch2,
    gmii_rxd_ch2,
    gmii_rx_dv_ch2,
    gmii_rx_er_ch2,
    configuration_vector_ch2,
    an_interrupt_ch2,
    an_adv_config_vector_ch2,
    an_restart_config_ch2,
    speed_is_10_100_ch2,
    speed_is_100_ch2,
    status_vector_ch2,
    sgmii_clk_en_ch3,
    gmii_txd_ch3,
    gmii_tx_en_ch3,
    gmii_tx_er_ch3,
    gmii_rxd_ch3,
    gmii_rx_dv_ch3,
    gmii_rx_er_ch3,
    configuration_vector_ch3,
    an_interrupt_ch3,
    an_adv_config_vector_ch3,
    an_restart_config_ch3,
    speed_is_10_100_ch3,
    speed_is_100_ch3,
    status_vector_ch3,
    gt0_gttxreset_in,
    gt0_txpmareset_in,
    gt0_txpcsreset_in,
    gt0_rxchariscomma_out,
    gt0_rxcharisk_out,
    gt0_rxbyteisaligned_out,
    gt0_rxbyterealign_out,
    gt0_rxcommadet_out,
    gt0_txpolarity_in,
    gt0_txdiffctrl_in,
    gt0_txpostcursor_in,
    gt0_txprecursor_in,
    gt0_rxpolarity_in,
    gt0_txinhibit_in,
    gt0_rxdfelpmreset_in,
    gt0_rxdfeagcovrden_in,
    gt0_rxlpmen_in,
    gt0_txprbssel_in,
    gt0_txprbsforceerr_in,
    gt0_rxprbscntreset_in,
    gt0_rxprbserr_out,
    gt0_rxprbssel_in,
    gt0_loopback_in,
    gt0_txresetdone_out,
    gt0_rxresetdone_out,
    gt0_gtrxreset_in,
    gt0_rxpmareset_in,
    gt0_rxpcsreset_in,
    gt0_txbufstatus_out,
    gt0_rxbufstatus_out,
    gt0_rxbufreset_in,
    gt0_cplllock_out,
    gt0_rxpmaresetdone_out,
    gt0_drpaddr_in,
    gt0_drpclk_in,
    gt0_drpdi_in,
    gt0_drpdo_out,
    gt0_drpen_in,
    gt0_drprdy_out,
    gt0_drpwe_in,
    gt0_rxdisperr_out,
    gt0_rxnotintable_out,
    gt0_eyescanreset_in,
    gt0_eyescandataerror_out,
    gt0_eyescantrigger_in,
    gt0_rxrate_in,
    gt0_rxcdrhold_in,
    gt0_rxratedone_out,
    gt0_dmonitorout_out,
    gt0_rxmonitorout_out,
    gt0_rxmonitorsel_in,
    gt0_qplloutclk_in,
    gt0_qplloutrefclk_in,
    signal_detect);
  input reset;
  input gtrefclk;
  output txp;
  output txn;
  input rxp;
  input rxn;
  output txoutclk;
  output rxoutclk;
  output resetdone;
  input userclk;
  input userclk2;
  input rxuserclk;
  input rxuserclk2;
  input independent_clock_bufg;
  input pma_reset;
  input mmcm_locked;
  output sgmii_clk_en_ch0;
  input [7:0]gmii_txd_ch0;
  input gmii_tx_en_ch0;
  input gmii_tx_er_ch0;
  output [7:0]gmii_rxd_ch0;
  output gmii_rx_dv_ch0;
  output gmii_rx_er_ch0;
  input [5:0]configuration_vector_ch0;
  output an_interrupt_ch0;
  input [15:0]an_adv_config_vector_ch0;
  input an_restart_config_ch0;
  input speed_is_10_100_ch0;
  input speed_is_100_ch0;
  output [15:0]status_vector_ch0;
  output sgmii_clk_en_ch1;
  input [7:0]gmii_txd_ch1;
  input gmii_tx_en_ch1;
  input gmii_tx_er_ch1;
  output [7:0]gmii_rxd_ch1;
  output gmii_rx_dv_ch1;
  output gmii_rx_er_ch1;
  input [5:0]configuration_vector_ch1;
  output an_interrupt_ch1;
  input [15:0]an_adv_config_vector_ch1;
  input an_restart_config_ch1;
  input speed_is_10_100_ch1;
  input speed_is_100_ch1;
  output [15:0]status_vector_ch1;
  output sgmii_clk_en_ch2;
  input [7:0]gmii_txd_ch2;
  input gmii_tx_en_ch2;
  input gmii_tx_er_ch2;
  output [7:0]gmii_rxd_ch2;
  output gmii_rx_dv_ch2;
  output gmii_rx_er_ch2;
  input [5:0]configuration_vector_ch2;
  output an_interrupt_ch2;
  input [15:0]an_adv_config_vector_ch2;
  input an_restart_config_ch2;
  input speed_is_10_100_ch2;
  input speed_is_100_ch2;
  output [15:0]status_vector_ch2;
  output sgmii_clk_en_ch3;
  input [7:0]gmii_txd_ch3;
  input gmii_tx_en_ch3;
  input gmii_tx_er_ch3;
  output [7:0]gmii_rxd_ch3;
  output gmii_rx_dv_ch3;
  output gmii_rx_er_ch3;
  input [5:0]configuration_vector_ch3;
  output an_interrupt_ch3;
  input [15:0]an_adv_config_vector_ch3;
  input an_restart_config_ch3;
  input speed_is_10_100_ch3;
  input speed_is_100_ch3;
  output [15:0]status_vector_ch3;
  input gt0_gttxreset_in;
  input gt0_txpmareset_in;
  input gt0_txpcsreset_in;
  output [3:0]gt0_rxchariscomma_out;
  output [3:0]gt0_rxcharisk_out;
  output gt0_rxbyteisaligned_out;
  output gt0_rxbyterealign_out;
  output gt0_rxcommadet_out;
  input gt0_txpolarity_in;
  input [3:0]gt0_txdiffctrl_in;
  input [4:0]gt0_txpostcursor_in;
  input [4:0]gt0_txprecursor_in;
  input gt0_rxpolarity_in;
  input gt0_txinhibit_in;
  input gt0_rxdfelpmreset_in;
  input gt0_rxdfeagcovrden_in;
  input gt0_rxlpmen_in;
  input [2:0]gt0_txprbssel_in;
  input gt0_txprbsforceerr_in;
  input gt0_rxprbscntreset_in;
  output gt0_rxprbserr_out;
  input [2:0]gt0_rxprbssel_in;
  input [2:0]gt0_loopback_in;
  output gt0_txresetdone_out;
  output gt0_rxresetdone_out;
  input gt0_gtrxreset_in;
  input gt0_rxpmareset_in;
  input gt0_rxpcsreset_in;
  output [1:0]gt0_txbufstatus_out;
  output [2:0]gt0_rxbufstatus_out;
  input gt0_rxbufreset_in;
  output gt0_cplllock_out;
  output gt0_rxpmaresetdone_out;
  input [8:0]gt0_drpaddr_in;
  input gt0_drpclk_in;
  input [15:0]gt0_drpdi_in;
  output [15:0]gt0_drpdo_out;
  input gt0_drpen_in;
  output gt0_drprdy_out;
  input gt0_drpwe_in;
  output [3:0]gt0_rxdisperr_out;
  output [3:0]gt0_rxnotintable_out;
  input gt0_eyescanreset_in;
  output gt0_eyescandataerror_out;
  input gt0_eyescantrigger_in;
  input [2:0]gt0_rxrate_in;
  input gt0_rxcdrhold_in;
  output gt0_rxratedone_out;
  output [7:0]gt0_dmonitorout_out;
  output [6:0]gt0_rxmonitorout_out;
  input [1:0]gt0_rxmonitorsel_in;
  input gt0_qplloutclk_in;
  input gt0_qplloutrefclk_in;
  input signal_detect;

  wire [15:0]an_adv_config_vector_ch0;
  wire [15:0]an_adv_config_vector_ch1;
  wire [15:0]an_adv_config_vector_ch2;
  wire [15:0]an_adv_config_vector_ch3;
  wire an_interrupt_ch0;
  wire an_interrupt_ch1;
  wire an_interrupt_ch2;
  wire an_interrupt_ch3;
  wire an_restart_config_ch0;
  wire an_restart_config_ch1;
  wire an_restart_config_ch2;
  wire an_restart_config_ch3;
  wire [5:0]configuration_vector_ch0;
  wire [5:0]configuration_vector_ch1;
  wire [5:0]configuration_vector_ch2;
  wire [5:0]configuration_vector_ch3;
  wire gmii_rx_dv_ch0;
  wire gmii_rx_dv_ch1;
  wire gmii_rx_dv_ch2;
  wire gmii_rx_dv_ch3;
  wire gmii_rx_er_ch0;
  wire gmii_rx_er_ch1;
  wire gmii_rx_er_ch2;
  wire gmii_rx_er_ch3;
  wire [7:0]gmii_rxd_ch0;
  wire [7:0]gmii_rxd_ch1;
  wire [7:0]gmii_rxd_ch2;
  wire [7:0]gmii_rxd_ch3;
  wire gmii_tx_en_ch0;
  wire gmii_tx_en_ch1;
  wire gmii_tx_en_ch2;
  wire gmii_tx_en_ch3;
  wire gmii_tx_er_ch0;
  wire gmii_tx_er_ch1;
  wire gmii_tx_er_ch2;
  wire gmii_tx_er_ch3;
  wire [7:0]gmii_txd_ch0;
  wire [7:0]gmii_txd_ch1;
  wire [7:0]gmii_txd_ch2;
  wire [7:0]gmii_txd_ch3;
  wire gt0_cplllock_out;
  wire [7:0]gt0_dmonitorout_out;
  wire [8:0]gt0_drpaddr_in;
  wire gt0_drpclk_in;
  wire [15:0]gt0_drpdi_in;
  wire [15:0]gt0_drpdo_out;
  wire gt0_drpen_in;
  wire gt0_drprdy_out;
  wire gt0_drpwe_in;
  wire gt0_eyescandataerror_out;
  wire gt0_eyescanreset_in;
  wire gt0_eyescantrigger_in;
  wire gt0_gtrxreset_in;
  wire gt0_gttxreset_in;
  wire [2:0]gt0_loopback_in;
  wire gt0_qplloutclk_in;
  wire gt0_qplloutrefclk_in;
  wire gt0_rxbufreset_in;
  wire [2:0]gt0_rxbufstatus_out;
  wire gt0_rxbyteisaligned_out;
  wire gt0_rxbyterealign_out;
  wire gt0_rxcdrhold_in;
  wire [3:0]gt0_rxchariscomma_out;
  wire [3:0]gt0_rxcharisk_out;
  wire gt0_rxcommadet_out;
  wire gt0_rxdfeagcovrden_in;
  wire gt0_rxdfelpmreset_in;
  wire [3:0]gt0_rxdisperr_out;
  wire gt0_rxlpmen_in;
  wire [6:0]gt0_rxmonitorout_out;
  wire [1:0]gt0_rxmonitorsel_in;
  wire [3:0]gt0_rxnotintable_out;
  wire gt0_rxpcsreset_in;
  wire gt0_rxpmareset_in;
  wire gt0_rxpmaresetdone_out;
  wire gt0_rxpolarity_in;
  wire gt0_rxprbscntreset_in;
  wire gt0_rxprbserr_out;
  wire [2:0]gt0_rxprbssel_in;
  wire [2:0]gt0_rxrate_in;
  wire gt0_rxratedone_out;
  wire gt0_rxresetdone_out;
  wire [1:0]gt0_txbufstatus_out;
  wire [3:0]gt0_txdiffctrl_in;
  wire gt0_txinhibit_in;
  wire gt0_txpcsreset_in;
  wire gt0_txpmareset_in;
  wire gt0_txpolarity_in;
  wire [4:0]gt0_txpostcursor_in;
  wire gt0_txprbsforceerr_in;
  wire [2:0]gt0_txprbssel_in;
  wire [4:0]gt0_txprecursor_in;
  wire gt0_txresetdone_out;
  wire gtrefclk;
  wire independent_clock_bufg;
  wire mmcm_locked;
  wire pma_reset;
  wire reset;
  wire resetdone;
  wire rxn;
  wire rxoutclk;
  wire rxp;
  wire rxuserclk;
  wire rxuserclk2;
  wire sgmii_clk_en_ch0;
  wire sgmii_clk_en_ch1;
  wire sgmii_clk_en_ch2;
  wire sgmii_clk_en_ch3;
  wire signal_detect;
  wire speed_is_100_ch0;
  wire speed_is_100_ch1;
  wire speed_is_100_ch2;
  wire speed_is_100_ch3;
  wire speed_is_10_100_ch0;
  wire speed_is_10_100_ch1;
  wire speed_is_10_100_ch2;
  wire speed_is_10_100_ch3;
  wire [15:0]status_vector_ch0;
  wire [15:0]status_vector_ch1;
  wire [15:0]status_vector_ch2;
  wire [15:0]status_vector_ch3;
  wire txn;
  wire txoutclk;
  wire txp;
  wire userclk;
  wire userclk2;

  qsgmii_1218_qsgmii_1218_block inst
       (.an_adv_config_vector_ch0(an_adv_config_vector_ch0),
        .an_adv_config_vector_ch1(an_adv_config_vector_ch1),
        .an_adv_config_vector_ch2(an_adv_config_vector_ch2),
        .an_adv_config_vector_ch3(an_adv_config_vector_ch3),
        .an_interrupt_ch0(an_interrupt_ch0),
        .an_interrupt_ch1(an_interrupt_ch1),
        .an_interrupt_ch2(an_interrupt_ch2),
        .an_interrupt_ch3(an_interrupt_ch3),
        .an_restart_config_ch0(an_restart_config_ch0),
        .an_restart_config_ch1(an_restart_config_ch1),
        .an_restart_config_ch2(an_restart_config_ch2),
        .an_restart_config_ch3(an_restart_config_ch3),
        .configuration_vector_ch0(configuration_vector_ch0),
        .configuration_vector_ch1(configuration_vector_ch1),
        .configuration_vector_ch2(configuration_vector_ch2),
        .configuration_vector_ch3(configuration_vector_ch3),
        .gmii_rx_dv_ch0(gmii_rx_dv_ch0),
        .gmii_rx_dv_ch1(gmii_rx_dv_ch1),
        .gmii_rx_dv_ch2(gmii_rx_dv_ch2),
        .gmii_rx_dv_ch3(gmii_rx_dv_ch3),
        .gmii_rx_er_ch0(gmii_rx_er_ch0),
        .gmii_rx_er_ch1(gmii_rx_er_ch1),
        .gmii_rx_er_ch2(gmii_rx_er_ch2),
        .gmii_rx_er_ch3(gmii_rx_er_ch3),
        .gmii_rxd_ch0(gmii_rxd_ch0),
        .gmii_rxd_ch1(gmii_rxd_ch1),
        .gmii_rxd_ch2(gmii_rxd_ch2),
        .gmii_rxd_ch3(gmii_rxd_ch3),
        .gmii_tx_en_ch0(gmii_tx_en_ch0),
        .gmii_tx_en_ch1(gmii_tx_en_ch1),
        .gmii_tx_en_ch2(gmii_tx_en_ch2),
        .gmii_tx_en_ch3(gmii_tx_en_ch3),
        .gmii_tx_er_ch0(gmii_tx_er_ch0),
        .gmii_tx_er_ch1(gmii_tx_er_ch1),
        .gmii_tx_er_ch2(gmii_tx_er_ch2),
        .gmii_tx_er_ch3(gmii_tx_er_ch3),
        .gmii_txd_ch0(gmii_txd_ch0),
        .gmii_txd_ch1(gmii_txd_ch1),
        .gmii_txd_ch2(gmii_txd_ch2),
        .gmii_txd_ch3(gmii_txd_ch3),
        .gt0_cplllock_out(gt0_cplllock_out),
        .gt0_dmonitorout_out(gt0_dmonitorout_out),
        .gt0_drpaddr_in(gt0_drpaddr_in),
        .gt0_drpclk_in(gt0_drpclk_in),
        .gt0_drpdi_in(gt0_drpdi_in),
        .gt0_drpdo_out(gt0_drpdo_out),
        .gt0_drpen_in(gt0_drpen_in),
        .gt0_drprdy_out(gt0_drprdy_out),
        .gt0_drpwe_in(gt0_drpwe_in),
        .gt0_eyescandataerror_out(gt0_eyescandataerror_out),
        .gt0_eyescanreset_in(gt0_eyescanreset_in),
        .gt0_eyescantrigger_in(gt0_eyescantrigger_in),
        .gt0_gtrxreset_in(gt0_gtrxreset_in),
        .gt0_gttxreset_in(gt0_gttxreset_in),
        .gt0_loopback_in(gt0_loopback_in),
        .gt0_qplloutclk_in(gt0_qplloutclk_in),
        .gt0_qplloutrefclk_in(gt0_qplloutrefclk_in),
        .gt0_rxbufreset_in(gt0_rxbufreset_in),
        .gt0_rxbufstatus_out(gt0_rxbufstatus_out),
        .gt0_rxbyteisaligned_out(gt0_rxbyteisaligned_out),
        .gt0_rxbyterealign_out(gt0_rxbyterealign_out),
        .gt0_rxcdrhold_in(gt0_rxcdrhold_in),
        .gt0_rxchariscomma_out(gt0_rxchariscomma_out),
        .gt0_rxcharisk_out(gt0_rxcharisk_out),
        .gt0_rxcommadet_out(gt0_rxcommadet_out),
        .gt0_rxdfeagcovrden_in(gt0_rxdfeagcovrden_in),
        .gt0_rxdfelpmreset_in(gt0_rxdfelpmreset_in),
        .gt0_rxdisperr_out(gt0_rxdisperr_out),
        .gt0_rxlpmen_in(gt0_rxlpmen_in),
        .gt0_rxmonitorout_out(gt0_rxmonitorout_out),
        .gt0_rxmonitorsel_in(gt0_rxmonitorsel_in),
        .gt0_rxnotintable_out(gt0_rxnotintable_out),
        .gt0_rxpcsreset_in(gt0_rxpcsreset_in),
        .gt0_rxpmareset_in(gt0_rxpmareset_in),
        .gt0_rxpmaresetdone_out(gt0_rxpmaresetdone_out),
        .gt0_rxpolarity_in(gt0_rxpolarity_in),
        .gt0_rxprbscntreset_in(gt0_rxprbscntreset_in),
        .gt0_rxprbserr_out(gt0_rxprbserr_out),
        .gt0_rxprbssel_in(gt0_rxprbssel_in),
        .gt0_rxrate_in(gt0_rxrate_in),
        .gt0_rxratedone_out(gt0_rxratedone_out),
        .gt0_rxresetdone_out(gt0_rxresetdone_out),
        .gt0_txbufstatus_out(gt0_txbufstatus_out),
        .gt0_txdiffctrl_in(gt0_txdiffctrl_in),
        .gt0_txinhibit_in(gt0_txinhibit_in),
        .gt0_txpcsreset_in(gt0_txpcsreset_in),
        .gt0_txpmareset_in(gt0_txpmareset_in),
        .gt0_txpolarity_in(gt0_txpolarity_in),
        .gt0_txpostcursor_in(gt0_txpostcursor_in),
        .gt0_txprbsforceerr_in(gt0_txprbsforceerr_in),
        .gt0_txprbssel_in(gt0_txprbssel_in),
        .gt0_txprecursor_in(gt0_txprecursor_in),
        .gt0_txresetdone_out(gt0_txresetdone_out),
        .gtrefclk(gtrefclk),
        .independent_clock_bufg(independent_clock_bufg),
        .link_timer_value_ch0({1'b0,1'b0,1'b0,1'b1,1'b1,1'b0,1'b0,1'b1,1'b0}),
        .link_timer_value_ch1({1'b0,1'b0,1'b0,1'b1,1'b1,1'b0,1'b0,1'b1,1'b0}),
        .link_timer_value_ch2({1'b0,1'b0,1'b0,1'b1,1'b1,1'b0,1'b0,1'b1,1'b0}),
        .link_timer_value_ch3({1'b0,1'b0,1'b0,1'b1,1'b1,1'b0,1'b0,1'b1,1'b0}),
        .mmcm_locked(mmcm_locked),
        .pma_reset(pma_reset),
        .reset(reset),
        .resetdone(resetdone),
        .rxn(rxn),
        .rxoutclk(rxoutclk),
        .rxp(rxp),
        .rxuserclk(rxuserclk),
        .rxuserclk2(rxuserclk2),
        .sgmii_clk_en_ch0(sgmii_clk_en_ch0),
        .sgmii_clk_en_ch1(sgmii_clk_en_ch1),
        .sgmii_clk_en_ch2(sgmii_clk_en_ch2),
        .sgmii_clk_en_ch3(sgmii_clk_en_ch3),
        .signal_detect(signal_detect),
        .speed_is_100_ch0(speed_is_100_ch0),
        .speed_is_100_ch1(speed_is_100_ch1),
        .speed_is_100_ch2(speed_is_100_ch2),
        .speed_is_100_ch3(speed_is_100_ch3),
        .speed_is_10_100_ch0(speed_is_10_100_ch0),
        .speed_is_10_100_ch1(speed_is_10_100_ch1),
        .speed_is_10_100_ch2(speed_is_10_100_ch2),
        .speed_is_10_100_ch3(speed_is_10_100_ch3),
        .status_vector_ch0(status_vector_ch0),
        .status_vector_ch1(status_vector_ch1),
        .status_vector_ch2(status_vector_ch2),
        .status_vector_ch3(status_vector_ch3),
        .txn(txn),
        .txoutclk(txoutclk),
        .txp(txp),
        .userclk(userclk),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_GTWIZARD" *) 
module qsgmii_1218_qsgmii_1218_GTWIZARD
   (gt0_cplllock_out,
    gt0_drprdy_out,
    gt0_eyescandataerror_out,
    txn,
    txp,
    gt0_rxbyteisaligned_out,
    gt0_rxbyterealign_out,
    gt0_rxcommadet_out,
    rxoutclk,
    gt0_rxprbserr_out,
    gt0_rxratedone_out,
    txoutclk,
    gt0_drpdo_out,
    gt0_txbufstatus_out,
    gt0_rxbufstatus_out,
    rxdata,
    gt0_rxmonitorout_out,
    gt0_dmonitorout_out,
    gt0_rxchariscomma_out,
    gt0_rxcharisk_out,
    gt0_rxdisperr_out,
    gt0_rxnotintable_out,
    data_in,
    gt0_rxresetdone_out,
    resetdone,
    independent_clock_bufg,
    gt0_drpclk_in,
    gt0_drpen_in,
    gt0_drpwe_in,
    gt0_eyescanreset_in,
    gt0_eyescantrigger_in,
    gtrefclk,
    rxn,
    rxp,
    gt0_qplloutclk_in,
    gt0_qplloutrefclk_in,
    gt0_rxbufreset_in,
    gt0_rxcdrhold_in,
    gt0_rxdfeagcovrden_in,
    gt0_rxdfelpmreset_in,
    gt0_rxlpmen_in,
    reset_out,
    rxpcsreset_comb,
    gt0_rxpmareset_in,
    gt0_rxpolarity_in,
    gt0_rxprbscntreset_in,
    rxuserclk,
    rxuserclk2,
    powerdown,
    gt0_txinhibit_in,
    gt0_txpcsreset_in,
    gt0_txpmareset_in,
    gt0_txpolarity_in,
    gt0_txprbsforceerr_in,
    userclk,
    gt0_drpdi_in,
    gt0_rxmonitorsel_in,
    gt0_loopback_in,
    gt0_rxprbssel_in,
    gt0_rxrate_in,
    gt0_txprbssel_in,
    gt0_txdiffctrl_in,
    gt0_txpostcursor_in,
    gt0_txprecursor_in,
    txdata,
    txcharisk,
    gt0_drpaddr_in,
    pma_reset,
    data_out,
    gt0_gtrxreset_in,
    mgt_rx_reset,
    gt0_gttxreset_in,
    mgt_tx_reset);
  output gt0_cplllock_out;
  output gt0_drprdy_out;
  output gt0_eyescandataerror_out;
  output txn;
  output txp;
  output gt0_rxbyteisaligned_out;
  output gt0_rxbyterealign_out;
  output gt0_rxcommadet_out;
  output rxoutclk;
  output gt0_rxprbserr_out;
  output gt0_rxratedone_out;
  output txoutclk;
  output [15:0]gt0_drpdo_out;
  output [1:0]gt0_txbufstatus_out;
  output [2:0]gt0_rxbufstatus_out;
  output [31:0]rxdata;
  output [6:0]gt0_rxmonitorout_out;
  output [7:0]gt0_dmonitorout_out;
  output [3:0]gt0_rxchariscomma_out;
  output [3:0]gt0_rxcharisk_out;
  output [3:0]gt0_rxdisperr_out;
  output [3:0]gt0_rxnotintable_out;
  output data_in;
  output gt0_rxresetdone_out;
  output resetdone;
  input independent_clock_bufg;
  input gt0_drpclk_in;
  input gt0_drpen_in;
  input gt0_drpwe_in;
  input gt0_eyescanreset_in;
  input gt0_eyescantrigger_in;
  input gtrefclk;
  input rxn;
  input rxp;
  input gt0_qplloutclk_in;
  input gt0_qplloutrefclk_in;
  input gt0_rxbufreset_in;
  input gt0_rxcdrhold_in;
  input gt0_rxdfeagcovrden_in;
  input gt0_rxdfelpmreset_in;
  input gt0_rxlpmen_in;
  input reset_out;
  input rxpcsreset_comb;
  input gt0_rxpmareset_in;
  input gt0_rxpolarity_in;
  input gt0_rxprbscntreset_in;
  input rxuserclk;
  input rxuserclk2;
  input powerdown;
  input gt0_txinhibit_in;
  input gt0_txpcsreset_in;
  input gt0_txpmareset_in;
  input gt0_txpolarity_in;
  input gt0_txprbsforceerr_in;
  input userclk;
  input [15:0]gt0_drpdi_in;
  input [1:0]gt0_rxmonitorsel_in;
  input [2:0]gt0_loopback_in;
  input [2:0]gt0_rxprbssel_in;
  input [2:0]gt0_rxrate_in;
  input [2:0]gt0_txprbssel_in;
  input [3:0]gt0_txdiffctrl_in;
  input [4:0]gt0_txpostcursor_in;
  input [4:0]gt0_txprecursor_in;
  input [31:0]txdata;
  input [3:0]txcharisk;
  input [8:0]gt0_drpaddr_in;
  input pma_reset;
  input data_out;
  input gt0_gtrxreset_in;
  input mgt_rx_reset;
  input gt0_gttxreset_in;
  input mgt_tx_reset;

  wire data_in;
  wire data_out;
  wire gt0_cplllock_out;
  wire [7:0]gt0_dmonitorout_out;
  wire [8:0]gt0_drpaddr_in;
  wire gt0_drpclk_in;
  wire [15:0]gt0_drpdi_in;
  wire [15:0]gt0_drpdo_out;
  wire gt0_drpen_in;
  wire gt0_drprdy_out;
  wire gt0_drpwe_in;
  wire gt0_eyescandataerror_out;
  wire gt0_eyescanreset_in;
  wire gt0_eyescantrigger_in;
  wire gt0_gtrxreset_in;
  wire gt0_gttxreset_in;
  wire [2:0]gt0_loopback_in;
  wire gt0_qplloutclk_in;
  wire gt0_qplloutrefclk_in;
  wire gt0_rxbufreset_in;
  wire [2:0]gt0_rxbufstatus_out;
  wire gt0_rxbyteisaligned_out;
  wire gt0_rxbyterealign_out;
  wire gt0_rxcdrhold_in;
  wire [3:0]gt0_rxchariscomma_out;
  wire [3:0]gt0_rxcharisk_out;
  wire gt0_rxcommadet_out;
  wire gt0_rxdfeagcovrden_in;
  wire gt0_rxdfelpmreset_in;
  wire [3:0]gt0_rxdisperr_out;
  wire gt0_rxlpmen_in;
  wire [6:0]gt0_rxmonitorout_out;
  wire [1:0]gt0_rxmonitorsel_in;
  wire [3:0]gt0_rxnotintable_out;
  wire gt0_rxpmareset_in;
  wire gt0_rxpolarity_in;
  wire gt0_rxprbscntreset_in;
  wire gt0_rxprbserr_out;
  wire [2:0]gt0_rxprbssel_in;
  wire [2:0]gt0_rxrate_in;
  wire gt0_rxratedone_out;
  wire gt0_rxresetdone_out;
  wire [1:0]gt0_txbufstatus_out;
  wire [3:0]gt0_txdiffctrl_in;
  wire gt0_txinhibit_in;
  wire gt0_txpcsreset_in;
  wire gt0_txpmareset_in;
  wire gt0_txpolarity_in;
  wire [4:0]gt0_txpostcursor_in;
  wire gt0_txprbsforceerr_in;
  wire [2:0]gt0_txprbssel_in;
  wire [4:0]gt0_txprecursor_in;
  wire gtrefclk;
  wire independent_clock_bufg;
  wire mgt_rx_reset;
  wire mgt_tx_reset;
  wire pma_reset;
  wire powerdown;
  wire reset_out;
  wire resetdone;
  wire [31:0]rxdata;
  wire rxn;
  wire rxoutclk;
  wire rxp;
  wire rxpcsreset_comb;
  wire rxuserclk;
  wire rxuserclk2;
  wire [3:0]txcharisk;
  wire [31:0]txdata;
  wire txn;
  wire txoutclk;
  wire txp;
  wire userclk;

  qsgmii_1218_qsgmii_1218_GTWIZARD_init inst
       (.data_out(data_out),
        .gt0_cplllock_out(gt0_cplllock_out),
        .gt0_dmonitorout_out(gt0_dmonitorout_out),
        .gt0_drpaddr_in(gt0_drpaddr_in),
        .gt0_drpclk_in(gt0_drpclk_in),
        .gt0_drpdi_in(gt0_drpdi_in),
        .gt0_drpdo_out(gt0_drpdo_out),
        .gt0_drpen_in(gt0_drpen_in),
        .gt0_drprdy_out(gt0_drprdy_out),
        .gt0_drpwe_in(gt0_drpwe_in),
        .gt0_eyescandataerror_out(gt0_eyescandataerror_out),
        .gt0_eyescanreset_in(gt0_eyescanreset_in),
        .gt0_eyescantrigger_in(gt0_eyescantrigger_in),
        .gt0_gtrxreset_in(gt0_gtrxreset_in),
        .gt0_gttxreset_in(gt0_gttxreset_in),
        .gt0_loopback_in(gt0_loopback_in),
        .gt0_qplloutclk_in(gt0_qplloutclk_in),
        .gt0_qplloutrefclk_in(gt0_qplloutrefclk_in),
        .gt0_rxbufreset_in(gt0_rxbufreset_in),
        .gt0_rxbufstatus_out(gt0_rxbufstatus_out),
        .gt0_rxbyteisaligned_out(gt0_rxbyteisaligned_out),
        .gt0_rxbyterealign_out(gt0_rxbyterealign_out),
        .gt0_rxcdrhold_in(gt0_rxcdrhold_in),
        .gt0_rxchariscomma_out(gt0_rxchariscomma_out),
        .gt0_rxcharisk_out(gt0_rxcharisk_out),
        .gt0_rxcommadet_out(gt0_rxcommadet_out),
        .gt0_rxdfeagcovrden_in(gt0_rxdfeagcovrden_in),
        .gt0_rxdfelpmreset_in(gt0_rxdfelpmreset_in),
        .gt0_rxdisperr_out(gt0_rxdisperr_out),
        .gt0_rxlpmen_in(gt0_rxlpmen_in),
        .gt0_rxmonitorout_out(gt0_rxmonitorout_out),
        .gt0_rxmonitorsel_in(gt0_rxmonitorsel_in),
        .gt0_rxnotintable_out(gt0_rxnotintable_out),
        .gt0_rxpmareset_in(gt0_rxpmareset_in),
        .gt0_rxpolarity_in(gt0_rxpolarity_in),
        .gt0_rxprbscntreset_in(gt0_rxprbscntreset_in),
        .gt0_rxprbserr_out(gt0_rxprbserr_out),
        .gt0_rxprbssel_in(gt0_rxprbssel_in),
        .gt0_rxrate_in(gt0_rxrate_in),
        .gt0_rxratedone_out(gt0_rxratedone_out),
        .gt0_rxresetdone_out(gt0_rxresetdone_out),
        .gt0_txbufstatus_out(gt0_txbufstatus_out),
        .gt0_txdiffctrl_in(gt0_txdiffctrl_in),
        .gt0_txinhibit_in(gt0_txinhibit_in),
        .gt0_txpcsreset_in(gt0_txpcsreset_in),
        .gt0_txpmareset_in(gt0_txpmareset_in),
        .gt0_txpolarity_in(gt0_txpolarity_in),
        .gt0_txpostcursor_in(gt0_txpostcursor_in),
        .gt0_txprbsforceerr_in(gt0_txprbsforceerr_in),
        .gt0_txprbssel_in(gt0_txprbssel_in),
        .gt0_txprecursor_in(gt0_txprecursor_in),
        .gt0_txresetdone_out(data_in),
        .gtrefclk(gtrefclk),
        .independent_clock_bufg(independent_clock_bufg),
        .mgt_rx_reset(mgt_rx_reset),
        .mgt_tx_reset(mgt_tx_reset),
        .pma_reset(pma_reset),
        .powerdown(powerdown),
        .reset_out(reset_out),
        .resetdone(resetdone),
        .rxdata(rxdata),
        .rxn(rxn),
        .rxoutclk(rxoutclk),
        .rxp(rxp),
        .rxpcsreset_comb(rxpcsreset_comb),
        .rxuserclk(rxuserclk),
        .rxuserclk2(rxuserclk2),
        .txcharisk(txcharisk),
        .txdata(txdata),
        .txn(txn),
        .txoutclk(txoutclk),
        .txp(txp),
        .userclk(userclk));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_GTWIZARD_GT" *) 
module qsgmii_1218_qsgmii_1218_GTWIZARD_GT
   (gt0_cplllock_out,
    gt0_drprdy_out,
    gt0_eyescandataerror_out,
    txn,
    txp,
    gt0_rxbyteisaligned_out,
    gt0_rxbyterealign_out,
    gt0_rxcommadet_out,
    rxoutclk,
    gt0_rxprbserr_out,
    gt0_rxratedone_out,
    data_in,
    txoutclk,
    data_sync_reg1,
    gt0_drpdo_out,
    gt0_txbufstatus_out,
    gt0_rxbufstatus_out,
    rxdata,
    gt0_rxmonitorout_out,
    gt0_dmonitorout_out,
    gt0_rxchariscomma_out,
    gt0_rxcharisk_out,
    gt0_rxdisperr_out,
    gt0_rxnotintable_out,
    independent_clock_bufg,
    gt0_cpllpd_i,
    gt0_cpllreset_i_0,
    gt0_drpclk_in,
    gt0_drpen_in,
    gt0_drpwe_in,
    gt0_eyescanreset_in,
    gt0_eyescantrigger_in,
    gtrefclk,
    gt0_gtrxreset_i,
    gt0_gttxreset_i,
    rxn,
    rxp,
    gt0_qplloutclk_in,
    gt0_qplloutrefclk_in,
    gt0_rxbufreset_in,
    gt0_rxcdrhold_in,
    gt0_rxdfeagcovrden_in,
    gt0_rxdfelpmreset_in,
    gt0_rxlpmen_in,
    reset_out,
    rxpcsreset_comb,
    gt0_rxpmareset_in,
    gt0_rxpolarity_in,
    gt0_rxprbscntreset_in,
    gt0_rxuserrdy_i,
    rxuserclk,
    rxuserclk2,
    powerdown,
    gt0_txinhibit_in,
    gt0_txpcsreset_in,
    gt0_txpmareset_in,
    gt0_txpolarity_in,
    gt0_txprbsforceerr_in,
    gt0_txuserrdy_i,
    userclk,
    gt0_drpdi_in,
    gt0_rxmonitorsel_in,
    gt0_loopback_in,
    gt0_rxprbssel_in,
    gt0_rxrate_in,
    gt0_txprbssel_in,
    gt0_txdiffctrl_in,
    gt0_txpostcursor_in,
    gt0_txprecursor_in,
    txdata,
    txcharisk,
    gt0_drpaddr_in);
  output gt0_cplllock_out;
  output gt0_drprdy_out;
  output gt0_eyescandataerror_out;
  output txn;
  output txp;
  output gt0_rxbyteisaligned_out;
  output gt0_rxbyterealign_out;
  output gt0_rxcommadet_out;
  output rxoutclk;
  output gt0_rxprbserr_out;
  output gt0_rxratedone_out;
  output data_in;
  output txoutclk;
  output data_sync_reg1;
  output [15:0]gt0_drpdo_out;
  output [1:0]gt0_txbufstatus_out;
  output [2:0]gt0_rxbufstatus_out;
  output [31:0]rxdata;
  output [6:0]gt0_rxmonitorout_out;
  output [7:0]gt0_dmonitorout_out;
  output [3:0]gt0_rxchariscomma_out;
  output [3:0]gt0_rxcharisk_out;
  output [3:0]gt0_rxdisperr_out;
  output [3:0]gt0_rxnotintable_out;
  input independent_clock_bufg;
  input gt0_cpllpd_i;
  input gt0_cpllreset_i_0;
  input gt0_drpclk_in;
  input gt0_drpen_in;
  input gt0_drpwe_in;
  input gt0_eyescanreset_in;
  input gt0_eyescantrigger_in;
  input gtrefclk;
  input gt0_gtrxreset_i;
  input gt0_gttxreset_i;
  input rxn;
  input rxp;
  input gt0_qplloutclk_in;
  input gt0_qplloutrefclk_in;
  input gt0_rxbufreset_in;
  input gt0_rxcdrhold_in;
  input gt0_rxdfeagcovrden_in;
  input gt0_rxdfelpmreset_in;
  input gt0_rxlpmen_in;
  input reset_out;
  input rxpcsreset_comb;
  input gt0_rxpmareset_in;
  input gt0_rxpolarity_in;
  input gt0_rxprbscntreset_in;
  input gt0_rxuserrdy_i;
  input rxuserclk;
  input rxuserclk2;
  input powerdown;
  input gt0_txinhibit_in;
  input gt0_txpcsreset_in;
  input gt0_txpmareset_in;
  input gt0_txpolarity_in;
  input gt0_txprbsforceerr_in;
  input gt0_txuserrdy_i;
  input userclk;
  input [15:0]gt0_drpdi_in;
  input [1:0]gt0_rxmonitorsel_in;
  input [2:0]gt0_loopback_in;
  input [2:0]gt0_rxprbssel_in;
  input [2:0]gt0_rxrate_in;
  input [2:0]gt0_txprbssel_in;
  input [3:0]gt0_txdiffctrl_in;
  input [4:0]gt0_txpostcursor_in;
  input [4:0]gt0_txprecursor_in;
  input [31:0]txdata;
  input [3:0]txcharisk;
  input [8:0]gt0_drpaddr_in;

  wire data_in;
  wire data_sync_reg1;
  wire gt0_cplllock_out;
  wire gt0_cpllpd_i;
  wire gt0_cpllrefclklost_i;
  wire gt0_cpllreset_i_0;
  wire [7:0]gt0_dmonitorout_out;
  wire [8:0]gt0_drpaddr_in;
  wire gt0_drpclk_in;
  wire [15:0]gt0_drpdi_in;
  wire [15:0]gt0_drpdo_out;
  wire gt0_drpen_in;
  wire gt0_drprdy_out;
  wire gt0_drpwe_in;
  wire gt0_eyescandataerror_out;
  wire gt0_eyescanreset_in;
  wire gt0_eyescantrigger_in;
  wire gt0_gtrxreset_i;
  wire gt0_gttxreset_i;
  wire [2:0]gt0_loopback_in;
  wire gt0_qplloutclk_in;
  wire gt0_qplloutrefclk_in;
  wire gt0_rxbufreset_in;
  wire [2:0]gt0_rxbufstatus_out;
  wire gt0_rxbyteisaligned_out;
  wire gt0_rxbyterealign_out;
  wire gt0_rxcdrhold_in;
  wire [3:0]gt0_rxchariscomma_out;
  wire [3:0]gt0_rxcharisk_out;
  wire gt0_rxcommadet_out;
  wire gt0_rxdfeagcovrden_in;
  wire gt0_rxdfelpmreset_in;
  wire [3:0]gt0_rxdisperr_out;
  wire gt0_rxlpmen_in;
  wire [6:0]gt0_rxmonitorout_out;
  wire [1:0]gt0_rxmonitorsel_in;
  wire [3:0]gt0_rxnotintable_out;
  wire gt0_rxpmareset_in;
  wire gt0_rxpolarity_in;
  wire gt0_rxprbscntreset_in;
  wire gt0_rxprbserr_out;
  wire [2:0]gt0_rxprbssel_in;
  wire [2:0]gt0_rxrate_in;
  wire gt0_rxratedone_out;
  wire gt0_rxuserrdy_i;
  wire [1:0]gt0_txbufstatus_out;
  wire [3:0]gt0_txdiffctrl_in;
  wire gt0_txinhibit_in;
  wire gt0_txpcsreset_in;
  wire gt0_txpmareset_in;
  wire gt0_txpolarity_in;
  wire [4:0]gt0_txpostcursor_in;
  wire gt0_txprbsforceerr_in;
  wire [2:0]gt0_txprbssel_in;
  wire [4:0]gt0_txprecursor_in;
  wire gt0_txuserrdy_i;
  wire gtrefclk;
  wire gtxe2_i_n_0;
  wire gtxe2_i_n_11;
  wire gtxe2_i_n_38;
  wire gtxe2_i_n_39;
  wire independent_clock_bufg;
  wire powerdown;
  wire reset_out;
  wire [31:0]rxdata;
  wire rxn;
  wire rxoutclk;
  wire rxp;
  wire rxpcsreset_comb;
  wire rxuserclk;
  wire rxuserclk2;
  wire [3:0]txcharisk;
  wire [31:0]txdata;
  wire txn;
  wire txoutclk;
  wire txp;
  wire userclk;
  wire NLW_gtxe2_i_GTREFCLKMONITOR_UNCONNECTED;
  wire NLW_gtxe2_i_PHYSTATUS_UNCONNECTED;
  wire NLW_gtxe2_i_RXCHANBONDSEQ_UNCONNECTED;
  wire NLW_gtxe2_i_RXCHANISALIGNED_UNCONNECTED;
  wire NLW_gtxe2_i_RXCHANREALIGN_UNCONNECTED;
  wire NLW_gtxe2_i_RXCOMINITDET_UNCONNECTED;
  wire NLW_gtxe2_i_RXCOMSASDET_UNCONNECTED;
  wire NLW_gtxe2_i_RXCOMWAKEDET_UNCONNECTED;
  wire NLW_gtxe2_i_RXDATAVALID_UNCONNECTED;
  wire NLW_gtxe2_i_RXDLYSRESETDONE_UNCONNECTED;
  wire NLW_gtxe2_i_RXELECIDLE_UNCONNECTED;
  wire NLW_gtxe2_i_RXHEADERVALID_UNCONNECTED;
  wire NLW_gtxe2_i_RXOUTCLKFABRIC_UNCONNECTED;
  wire NLW_gtxe2_i_RXOUTCLKPCS_UNCONNECTED;
  wire NLW_gtxe2_i_RXPHALIGNDONE_UNCONNECTED;
  wire NLW_gtxe2_i_RXQPISENN_UNCONNECTED;
  wire NLW_gtxe2_i_RXQPISENP_UNCONNECTED;
  wire NLW_gtxe2_i_RXSTARTOFSEQ_UNCONNECTED;
  wire NLW_gtxe2_i_RXVALID_UNCONNECTED;
  wire NLW_gtxe2_i_TXCOMFINISH_UNCONNECTED;
  wire NLW_gtxe2_i_TXDLYSRESETDONE_UNCONNECTED;
  wire NLW_gtxe2_i_TXGEARBOXREADY_UNCONNECTED;
  wire NLW_gtxe2_i_TXPHALIGNDONE_UNCONNECTED;
  wire NLW_gtxe2_i_TXPHINITDONE_UNCONNECTED;
  wire NLW_gtxe2_i_TXQPISENN_UNCONNECTED;
  wire NLW_gtxe2_i_TXQPISENP_UNCONNECTED;
  wire NLW_gtxe2_i_TXRATEDONE_UNCONNECTED;
  wire [15:0]NLW_gtxe2_i_PCSRSVDOUT_UNCONNECTED;
  wire [7:4]NLW_gtxe2_i_RXCHARISCOMMA_UNCONNECTED;
  wire [7:4]NLW_gtxe2_i_RXCHARISK_UNCONNECTED;
  wire [4:0]NLW_gtxe2_i_RXCHBONDO_UNCONNECTED;
  wire [1:0]NLW_gtxe2_i_RXCLKCORCNT_UNCONNECTED;
  wire [63:32]NLW_gtxe2_i_RXDATA_UNCONNECTED;
  wire [7:4]NLW_gtxe2_i_RXDISPERR_UNCONNECTED;
  wire [2:0]NLW_gtxe2_i_RXHEADER_UNCONNECTED;
  wire [7:4]NLW_gtxe2_i_RXNOTINTABLE_UNCONNECTED;
  wire [4:0]NLW_gtxe2_i_RXPHMONITOR_UNCONNECTED;
  wire [4:0]NLW_gtxe2_i_RXPHSLIPMONITOR_UNCONNECTED;
  wire [2:0]NLW_gtxe2_i_RXSTATUS_UNCONNECTED;
  wire [9:0]NLW_gtxe2_i_TSTOUT_UNCONNECTED;

  (* BOX_TYPE = "PRIMITIVE" *) 
  GTXE2_CHANNEL #(
    .ALIGN_COMMA_DOUBLE("FALSE"),
    .ALIGN_COMMA_ENABLE(10'b0001111111),
    .ALIGN_COMMA_WORD(1),
    .ALIGN_MCOMMA_DET("TRUE"),
    .ALIGN_MCOMMA_VALUE(10'b1010000011),
    .ALIGN_PCOMMA_DET("TRUE"),
    .ALIGN_PCOMMA_VALUE(10'b0101111100),
    .CBCC_DATA_SOURCE_SEL("DECODED"),
    .CHAN_BOND_KEEP_ALIGN("FALSE"),
    .CHAN_BOND_MAX_SKEW(1),
    .CHAN_BOND_SEQ_1_1(10'b0000000000),
    .CHAN_BOND_SEQ_1_2(10'b0000000000),
    .CHAN_BOND_SEQ_1_3(10'b0000000000),
    .CHAN_BOND_SEQ_1_4(10'b0000000000),
    .CHAN_BOND_SEQ_1_ENABLE(4'b1111),
    .CHAN_BOND_SEQ_2_1(10'b0000000000),
    .CHAN_BOND_SEQ_2_2(10'b0000000000),
    .CHAN_BOND_SEQ_2_3(10'b0000000000),
    .CHAN_BOND_SEQ_2_4(10'b0000000000),
    .CHAN_BOND_SEQ_2_ENABLE(4'b1111),
    .CHAN_BOND_SEQ_2_USE("FALSE"),
    .CHAN_BOND_SEQ_LEN(1),
    .CLK_CORRECT_USE("FALSE"),
    .CLK_COR_KEEP_IDLE("FALSE"),
    .CLK_COR_MAX_LAT(19),
    .CLK_COR_MIN_LAT(15),
    .CLK_COR_PRECEDENCE("TRUE"),
    .CLK_COR_REPEAT_WAIT(0),
    .CLK_COR_SEQ_1_1(10'b0100000000),
    .CLK_COR_SEQ_1_2(10'b0000000000),
    .CLK_COR_SEQ_1_3(10'b0000000000),
    .CLK_COR_SEQ_1_4(10'b0000000000),
    .CLK_COR_SEQ_1_ENABLE(4'b1111),
    .CLK_COR_SEQ_2_1(10'b0100000000),
    .CLK_COR_SEQ_2_2(10'b0000000000),
    .CLK_COR_SEQ_2_3(10'b0000000000),
    .CLK_COR_SEQ_2_4(10'b0000000000),
    .CLK_COR_SEQ_2_ENABLE(4'b1111),
    .CLK_COR_SEQ_2_USE("FALSE"),
    .CLK_COR_SEQ_LEN(1),
    .CPLL_CFG(24'hBC07DC),
    .CPLL_FBDIV(4),
    .CPLL_FBDIV_45(5),
    .CPLL_INIT_CFG(24'h00001E),
    .CPLL_LOCK_CFG(16'h01E8),
    .CPLL_REFCLK_DIV(1),
    .DEC_MCOMMA_DETECT("TRUE"),
    .DEC_PCOMMA_DETECT("TRUE"),
    .DEC_VALID_COMMA_ONLY("TRUE"),
    .DMONITOR_CFG(24'h000A00),
    .ES_CONTROL(6'b000000),
    .ES_ERRDET_EN("FALSE"),
    .ES_EYE_SCAN_EN("TRUE"),
    .ES_HORZ_OFFSET(12'h000),
    .ES_PMA_CFG(10'b0000000000),
    .ES_PRESCALE(5'b00000),
    .ES_QUALIFIER(80'h00000000000000000000),
    .ES_QUAL_MASK(80'h00000000000000000000),
    .ES_SDATA_MASK(80'h00000000000000000000),
    .ES_VERT_OFFSET(9'b000000000),
    .FTS_DESKEW_SEQ_ENABLE(4'b1111),
    .FTS_LANE_DESKEW_CFG(4'b1111),
    .FTS_LANE_DESKEW_EN("FALSE"),
    .GEARBOX_MODE(3'b000),
    .IS_CPLLLOCKDETCLK_INVERTED(1'b0),
    .IS_DRPCLK_INVERTED(1'b0),
    .IS_GTGREFCLK_INVERTED(1'b0),
    .IS_RXUSRCLK2_INVERTED(1'b0),
    .IS_RXUSRCLK_INVERTED(1'b0),
    .IS_TXPHDLYTSTCLK_INVERTED(1'b0),
    .IS_TXUSRCLK2_INVERTED(1'b0),
    .IS_TXUSRCLK_INVERTED(1'b0),
    .OUTREFCLK_SEL_INV(2'b11),
    .PCS_PCIE_EN("FALSE"),
    .PCS_RSVD_ATTR(48'h000000000000),
    .PD_TRANS_TIME_FROM_P2(12'h03C),
    .PD_TRANS_TIME_NONE_P2(8'h19),
    .PD_TRANS_TIME_TO_P2(8'h64),
    .PMA_RSV(32'h00018480),
    .PMA_RSV2(16'h2050),
    .PMA_RSV3(2'b00),
    .PMA_RSV4(32'h00000000),
    .RXBUFRESET_TIME(5'b00001),
    .RXBUF_ADDR_MODE("FAST"),
    .RXBUF_EIDLE_HI_CNT(4'b1000),
    .RXBUF_EIDLE_LO_CNT(4'b0000),
    .RXBUF_EN("TRUE"),
    .RXBUF_RESET_ON_CB_CHANGE("TRUE"),
    .RXBUF_RESET_ON_COMMAALIGN("FALSE"),
    .RXBUF_RESET_ON_EIDLE("FALSE"),
    .RXBUF_RESET_ON_RATE_CHANGE("TRUE"),
    .RXBUF_THRESH_OVFLW(61),
    .RXBUF_THRESH_OVRD("FALSE"),
    .RXBUF_THRESH_UNDFLW(4),
    .RXCDRFREQRESET_TIME(5'b00001),
    .RXCDRPHRESET_TIME(5'b00001),
    .RXCDR_CFG(72'h03000023FF10400020),
    .RXCDR_FR_RESET_ON_EIDLE(1'b0),
    .RXCDR_HOLD_DURING_EIDLE(1'b0),
    .RXCDR_LOCK_CFG(6'b010101),
    .RXCDR_PH_RESET_ON_EIDLE(1'b0),
    .RXDFELPMRESET_TIME(7'b0001111),
    .RXDLY_CFG(16'h001F),
    .RXDLY_LCFG(9'h030),
    .RXDLY_TAP_CFG(16'h0000),
    .RXGEARBOX_EN("FALSE"),
    .RXISCANRESET_TIME(5'b00001),
    .RXLPM_HF_CFG(14'b00000011110000),
    .RXLPM_LF_CFG(14'b00000011110000),
    .RXOOB_CFG(7'b0000110),
    .RXOUT_DIV(1),
    .RXPCSRESET_TIME(5'b00001),
    .RXPHDLY_CFG(24'h084020),
    .RXPH_CFG(24'h000000),
    .RXPH_MONITOR_SEL(5'b00000),
    .RXPMARESET_TIME(5'b00011),
    .RXPRBS_ERR_LOOPBACK(1'b0),
    .RXSLIDE_AUTO_WAIT(7),
    .RXSLIDE_MODE("OFF"),
    .RX_BIAS_CFG(12'b000000000100),
    .RX_BUFFER_CFG(6'b000000),
    .RX_CLK25_DIV(5),
    .RX_CLKMUX_PD(1'b1),
    .RX_CM_SEL(2'b11),
    .RX_CM_TRIM(3'b010),
    .RX_DATA_WIDTH(40),
    .RX_DDI_SEL(6'b000000),
    .RX_DEBUG_CFG(12'b000000000000),
    .RX_DEFER_RESET_BUF_EN("TRUE"),
    .RX_DFE_GAIN_CFG(23'h020FEA),
    .RX_DFE_H2_CFG(12'b000000000000),
    .RX_DFE_H3_CFG(12'b000001000000),
    .RX_DFE_H4_CFG(11'b00011110000),
    .RX_DFE_H5_CFG(11'b00011100000),
    .RX_DFE_KL_CFG(13'b0000011111110),
    .RX_DFE_KL_CFG2(32'h301148AC),
    .RX_DFE_LPM_CFG(16'h0904),
    .RX_DFE_LPM_HOLD_DURING_EIDLE(1'b0),
    .RX_DFE_UT_CFG(17'b10001111000000000),
    .RX_DFE_VP_CFG(17'b00011111100000011),
    .RX_DFE_XYD_CFG(13'b0000000000000),
    .RX_DISPERR_SEQ_MATCH("TRUE"),
    .RX_INT_DATAWIDTH(1),
    .RX_OS_CFG(13'b0000010000000),
    .RX_SIG_VALID_DLY(10),
    .RX_XCLK_SEL("RXREC"),
    .SAS_MAX_COM(64),
    .SAS_MIN_COM(36),
    .SATA_BURST_SEQ_LEN(4'b0101),
    .SATA_BURST_VAL(3'b100),
    .SATA_CPLL_CFG("VCO_3000MHZ"),
    .SATA_EIDLE_VAL(3'b100),
    .SATA_MAX_BURST(8),
    .SATA_MAX_INIT(21),
    .SATA_MAX_WAKE(7),
    .SATA_MIN_BURST(4),
    .SATA_MIN_INIT(12),
    .SATA_MIN_WAKE(4),
    .SHOW_REALIGN_COMMA("TRUE"),
    .SIM_CPLLREFCLK_SEL(3'b001),
    .SIM_RECEIVER_DETECT_PASS("TRUE"),
    .SIM_RESET_SPEEDUP("TRUE"),
    .SIM_TX_EIDLE_DRIVE_LEVEL("X"),
    .SIM_VERSION("4.0"),
    .TERM_RCAL_CFG(5'b10000),
    .TERM_RCAL_OVRD(1'b0),
    .TRANS_TIME_RATE(8'h0E),
    .TST_RSV(32'h00000000),
    .TXBUF_EN("TRUE"),
    .TXBUF_RESET_ON_RATE_CHANGE("TRUE"),
    .TXDLY_CFG(16'h001F),
    .TXDLY_LCFG(9'h030),
    .TXDLY_TAP_CFG(16'h0000),
    .TXGEARBOX_EN("FALSE"),
    .TXOUT_DIV(1),
    .TXPCSRESET_TIME(5'b00001),
    .TXPHDLY_CFG(24'h084020),
    .TXPH_CFG(16'h0780),
    .TXPH_MONITOR_SEL(5'b00000),
    .TXPMARESET_TIME(5'b00001),
    .TX_CLK25_DIV(5),
    .TX_CLKMUX_PD(1'b1),
    .TX_DATA_WIDTH(40),
    .TX_DEEMPH0(5'b00000),
    .TX_DEEMPH1(5'b00000),
    .TX_DRIVE_MODE("DIRECT"),
    .TX_EIDLE_ASSERT_DELAY(3'b110),
    .TX_EIDLE_DEASSERT_DELAY(3'b100),
    .TX_INT_DATAWIDTH(1),
    .TX_LOOPBACK_DRIVE_HIZ("FALSE"),
    .TX_MAINCURSOR_SEL(1'b0),
    .TX_MARGIN_FULL_0(7'b1001110),
    .TX_MARGIN_FULL_1(7'b1001001),
    .TX_MARGIN_FULL_2(7'b1000101),
    .TX_MARGIN_FULL_3(7'b1000010),
    .TX_MARGIN_FULL_4(7'b1000000),
    .TX_MARGIN_LOW_0(7'b1000110),
    .TX_MARGIN_LOW_1(7'b1000100),
    .TX_MARGIN_LOW_2(7'b1000010),
    .TX_MARGIN_LOW_3(7'b1000000),
    .TX_MARGIN_LOW_4(7'b1000000),
    .TX_PREDRIVER_MODE(1'b0),
    .TX_QPI_STATUS_EN(1'b0),
    .TX_RXDETECT_CFG(14'h1832),
    .TX_RXDETECT_REF(3'b100),
    .TX_XCLK_SEL("TXOUT"),
    .UCODEER_CLR(1'b0)) 
    gtxe2_i
       (.CFGRESET(1'b0),
        .CLKRSVD({1'b0,1'b0,1'b0,1'b0}),
        .CPLLFBCLKLOST(gtxe2_i_n_0),
        .CPLLLOCK(gt0_cplllock_out),
        .CPLLLOCKDETCLK(independent_clock_bufg),
        .CPLLLOCKEN(1'b1),
        .CPLLPD(gt0_cpllpd_i),
        .CPLLREFCLKLOST(gt0_cpllrefclklost_i),
        .CPLLREFCLKSEL({1'b0,1'b0,1'b1}),
        .CPLLRESET(gt0_cpllreset_i_0),
        .DMONITOROUT(gt0_dmonitorout_out),
        .DRPADDR(gt0_drpaddr_in),
        .DRPCLK(gt0_drpclk_in),
        .DRPDI(gt0_drpdi_in),
        .DRPDO(gt0_drpdo_out),
        .DRPEN(gt0_drpen_in),
        .DRPRDY(gt0_drprdy_out),
        .DRPWE(gt0_drpwe_in),
        .EYESCANDATAERROR(gt0_eyescandataerror_out),
        .EYESCANMODE(1'b0),
        .EYESCANRESET(gt0_eyescanreset_in),
        .EYESCANTRIGGER(gt0_eyescantrigger_in),
        .GTGREFCLK(1'b0),
        .GTNORTHREFCLK0(1'b0),
        .GTNORTHREFCLK1(1'b0),
        .GTREFCLK0(gtrefclk),
        .GTREFCLK1(1'b0),
        .GTREFCLKMONITOR(NLW_gtxe2_i_GTREFCLKMONITOR_UNCONNECTED),
        .GTRESETSEL(1'b0),
        .GTRSVD({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .GTRXRESET(gt0_gtrxreset_i),
        .GTSOUTHREFCLK0(1'b0),
        .GTSOUTHREFCLK1(1'b0),
        .GTTXRESET(gt0_gttxreset_i),
        .GTXRXN(rxn),
        .GTXRXP(rxp),
        .GTXTXN(txn),
        .GTXTXP(txp),
        .LOOPBACK(gt0_loopback_in),
        .PCSRSVDIN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCSRSVDIN2({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PCSRSVDOUT(NLW_gtxe2_i_PCSRSVDOUT_UNCONNECTED[15:0]),
        .PHYSTATUS(NLW_gtxe2_i_PHYSTATUS_UNCONNECTED),
        .PMARSVDIN({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .PMARSVDIN2({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .QPLLCLK(gt0_qplloutclk_in),
        .QPLLREFCLK(gt0_qplloutrefclk_in),
        .RESETOVRD(1'b0),
        .RX8B10BEN(1'b1),
        .RXBUFRESET(gt0_rxbufreset_in),
        .RXBUFSTATUS(gt0_rxbufstatus_out),
        .RXBYTEISALIGNED(gt0_rxbyteisaligned_out),
        .RXBYTEREALIGN(gt0_rxbyterealign_out),
        .RXCDRFREQRESET(1'b0),
        .RXCDRHOLD(gt0_rxcdrhold_in),
        .RXCDRLOCK(gtxe2_i_n_11),
        .RXCDROVRDEN(1'b0),
        .RXCDRRESET(1'b0),
        .RXCDRRESETRSV(1'b0),
        .RXCHANBONDSEQ(NLW_gtxe2_i_RXCHANBONDSEQ_UNCONNECTED),
        .RXCHANISALIGNED(NLW_gtxe2_i_RXCHANISALIGNED_UNCONNECTED),
        .RXCHANREALIGN(NLW_gtxe2_i_RXCHANREALIGN_UNCONNECTED),
        .RXCHARISCOMMA({NLW_gtxe2_i_RXCHARISCOMMA_UNCONNECTED[7:4],gt0_rxchariscomma_out}),
        .RXCHARISK({NLW_gtxe2_i_RXCHARISK_UNCONNECTED[7:4],gt0_rxcharisk_out}),
        .RXCHBONDEN(1'b0),
        .RXCHBONDI({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .RXCHBONDLEVEL({1'b0,1'b0,1'b0}),
        .RXCHBONDMASTER(1'b0),
        .RXCHBONDO(NLW_gtxe2_i_RXCHBONDO_UNCONNECTED[4:0]),
        .RXCHBONDSLAVE(1'b0),
        .RXCLKCORCNT(NLW_gtxe2_i_RXCLKCORCNT_UNCONNECTED[1:0]),
        .RXCOMINITDET(NLW_gtxe2_i_RXCOMINITDET_UNCONNECTED),
        .RXCOMMADET(gt0_rxcommadet_out),
        .RXCOMMADETEN(1'b1),
        .RXCOMSASDET(NLW_gtxe2_i_RXCOMSASDET_UNCONNECTED),
        .RXCOMWAKEDET(NLW_gtxe2_i_RXCOMWAKEDET_UNCONNECTED),
        .RXDATA({NLW_gtxe2_i_RXDATA_UNCONNECTED[63:32],rxdata}),
        .RXDATAVALID(NLW_gtxe2_i_RXDATAVALID_UNCONNECTED),
        .RXDDIEN(1'b0),
        .RXDFEAGCHOLD(1'b0),
        .RXDFEAGCOVRDEN(gt0_rxdfeagcovrden_in),
        .RXDFECM1EN(1'b0),
        .RXDFELFHOLD(1'b0),
        .RXDFELFOVRDEN(1'b0),
        .RXDFELPMRESET(gt0_rxdfelpmreset_in),
        .RXDFETAP2HOLD(1'b0),
        .RXDFETAP2OVRDEN(1'b0),
        .RXDFETAP3HOLD(1'b0),
        .RXDFETAP3OVRDEN(1'b0),
        .RXDFETAP4HOLD(1'b0),
        .RXDFETAP4OVRDEN(1'b0),
        .RXDFETAP5HOLD(1'b0),
        .RXDFETAP5OVRDEN(1'b0),
        .RXDFEUTHOLD(1'b0),
        .RXDFEUTOVRDEN(1'b0),
        .RXDFEVPHOLD(1'b0),
        .RXDFEVPOVRDEN(1'b0),
        .RXDFEVSEN(1'b0),
        .RXDFEXYDEN(1'b1),
        .RXDFEXYDHOLD(1'b0),
        .RXDFEXYDOVRDEN(1'b0),
        .RXDISPERR({NLW_gtxe2_i_RXDISPERR_UNCONNECTED[7:4],gt0_rxdisperr_out}),
        .RXDLYBYPASS(1'b1),
        .RXDLYEN(1'b0),
        .RXDLYOVRDEN(1'b0),
        .RXDLYSRESET(1'b0),
        .RXDLYSRESETDONE(NLW_gtxe2_i_RXDLYSRESETDONE_UNCONNECTED),
        .RXELECIDLE(NLW_gtxe2_i_RXELECIDLE_UNCONNECTED),
        .RXELECIDLEMODE({1'b1,1'b1}),
        .RXGEARBOXSLIP(1'b0),
        .RXHEADER(NLW_gtxe2_i_RXHEADER_UNCONNECTED[2:0]),
        .RXHEADERVALID(NLW_gtxe2_i_RXHEADERVALID_UNCONNECTED),
        .RXLPMEN(gt0_rxlpmen_in),
        .RXLPMHFHOLD(1'b0),
        .RXLPMHFOVRDEN(1'b0),
        .RXLPMLFHOLD(1'b0),
        .RXLPMLFKLOVRDEN(1'b0),
        .RXMCOMMAALIGNEN(reset_out),
        .RXMONITOROUT(gt0_rxmonitorout_out),
        .RXMONITORSEL(gt0_rxmonitorsel_in),
        .RXNOTINTABLE({NLW_gtxe2_i_RXNOTINTABLE_UNCONNECTED[7:4],gt0_rxnotintable_out}),
        .RXOOBRESET(1'b0),
        .RXOSHOLD(1'b0),
        .RXOSOVRDEN(1'b0),
        .RXOUTCLK(rxoutclk),
        .RXOUTCLKFABRIC(NLW_gtxe2_i_RXOUTCLKFABRIC_UNCONNECTED),
        .RXOUTCLKPCS(NLW_gtxe2_i_RXOUTCLKPCS_UNCONNECTED),
        .RXOUTCLKSEL({1'b0,1'b1,1'b0}),
        .RXPCOMMAALIGNEN(reset_out),
        .RXPCSRESET(rxpcsreset_comb),
        .RXPD({powerdown,powerdown}),
        .RXPHALIGN(1'b0),
        .RXPHALIGNDONE(NLW_gtxe2_i_RXPHALIGNDONE_UNCONNECTED),
        .RXPHALIGNEN(1'b0),
        .RXPHDLYPD(1'b0),
        .RXPHDLYRESET(1'b0),
        .RXPHMONITOR(NLW_gtxe2_i_RXPHMONITOR_UNCONNECTED[4:0]),
        .RXPHOVRDEN(1'b0),
        .RXPHSLIPMONITOR(NLW_gtxe2_i_RXPHSLIPMONITOR_UNCONNECTED[4:0]),
        .RXPMARESET(gt0_rxpmareset_in),
        .RXPOLARITY(gt0_rxpolarity_in),
        .RXPRBSCNTRESET(gt0_rxprbscntreset_in),
        .RXPRBSERR(gt0_rxprbserr_out),
        .RXPRBSSEL(gt0_rxprbssel_in),
        .RXQPIEN(1'b0),
        .RXQPISENN(NLW_gtxe2_i_RXQPISENN_UNCONNECTED),
        .RXQPISENP(NLW_gtxe2_i_RXQPISENP_UNCONNECTED),
        .RXRATE(gt0_rxrate_in),
        .RXRATEDONE(gt0_rxratedone_out),
        .RXRESETDONE(data_in),
        .RXSLIDE(1'b0),
        .RXSTARTOFSEQ(NLW_gtxe2_i_RXSTARTOFSEQ_UNCONNECTED),
        .RXSTATUS(NLW_gtxe2_i_RXSTATUS_UNCONNECTED[2:0]),
        .RXSYSCLKSEL({1'b0,1'b0}),
        .RXUSERRDY(gt0_rxuserrdy_i),
        .RXUSRCLK(rxuserclk),
        .RXUSRCLK2(rxuserclk2),
        .RXVALID(NLW_gtxe2_i_RXVALID_UNCONNECTED),
        .SETERRSTATUS(1'b0),
        .TSTIN({1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .TSTOUT(NLW_gtxe2_i_TSTOUT_UNCONNECTED[9:0]),
        .TX8B10BBYPASS({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TX8B10BEN(1'b1),
        .TXBUFDIFFCTRL({1'b1,1'b0,1'b0}),
        .TXBUFSTATUS(gt0_txbufstatus_out),
        .TXCHARDISPMODE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXCHARDISPVAL({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXCHARISK({1'b0,1'b0,1'b0,1'b0,txcharisk}),
        .TXCOMFINISH(NLW_gtxe2_i_TXCOMFINISH_UNCONNECTED),
        .TXCOMINIT(1'b0),
        .TXCOMSAS(1'b0),
        .TXCOMWAKE(1'b0),
        .TXDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,txdata}),
        .TXDEEMPH(1'b0),
        .TXDETECTRX(1'b0),
        .TXDIFFCTRL(gt0_txdiffctrl_in),
        .TXDIFFPD(1'b0),
        .TXDLYBYPASS(1'b1),
        .TXDLYEN(1'b0),
        .TXDLYHOLD(1'b0),
        .TXDLYOVRDEN(1'b0),
        .TXDLYSRESET(1'b0),
        .TXDLYSRESETDONE(NLW_gtxe2_i_TXDLYSRESETDONE_UNCONNECTED),
        .TXDLYUPDOWN(1'b0),
        .TXELECIDLE(powerdown),
        .TXGEARBOXREADY(NLW_gtxe2_i_TXGEARBOXREADY_UNCONNECTED),
        .TXHEADER({1'b0,1'b0,1'b0}),
        .TXINHIBIT(gt0_txinhibit_in),
        .TXMAINCURSOR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXMARGIN({1'b0,1'b0,1'b0}),
        .TXOUTCLK(txoutclk),
        .TXOUTCLKFABRIC(gtxe2_i_n_38),
        .TXOUTCLKPCS(gtxe2_i_n_39),
        .TXOUTCLKSEL({1'b0,1'b1,1'b1}),
        .TXPCSRESET(gt0_txpcsreset_in),
        .TXPD({powerdown,powerdown}),
        .TXPDELECIDLEMODE(1'b0),
        .TXPHALIGN(1'b0),
        .TXPHALIGNDONE(NLW_gtxe2_i_TXPHALIGNDONE_UNCONNECTED),
        .TXPHALIGNEN(1'b0),
        .TXPHDLYPD(1'b0),
        .TXPHDLYRESET(1'b0),
        .TXPHDLYTSTCLK(1'b0),
        .TXPHINIT(1'b0),
        .TXPHINITDONE(NLW_gtxe2_i_TXPHINITDONE_UNCONNECTED),
        .TXPHOVRDEN(1'b0),
        .TXPISOPD(1'b0),
        .TXPMARESET(gt0_txpmareset_in),
        .TXPOLARITY(gt0_txpolarity_in),
        .TXPOSTCURSOR(gt0_txpostcursor_in),
        .TXPOSTCURSORINV(1'b0),
        .TXPRBSFORCEERR(gt0_txprbsforceerr_in),
        .TXPRBSSEL(gt0_txprbssel_in),
        .TXPRECURSOR(gt0_txprecursor_in),
        .TXPRECURSORINV(1'b0),
        .TXQPIBIASEN(1'b0),
        .TXQPISENN(NLW_gtxe2_i_TXQPISENN_UNCONNECTED),
        .TXQPISENP(NLW_gtxe2_i_TXQPISENP_UNCONNECTED),
        .TXQPISTRONGPDOWN(1'b0),
        .TXQPIWEAKPUP(1'b0),
        .TXRATE({1'b0,1'b0,1'b0}),
        .TXRATEDONE(NLW_gtxe2_i_TXRATEDONE_UNCONNECTED),
        .TXRESETDONE(data_sync_reg1),
        .TXSEQUENCE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .TXSTARTSEQ(1'b0),
        .TXSWING(1'b0),
        .TXSYSCLKSEL({1'b0,1'b0}),
        .TXUSERRDY(gt0_txuserrdy_i),
        .TXUSRCLK(userclk),
        .TXUSRCLK2(userclk));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_GTWIZARD_RX_STARTUP_FSM" *) 
module qsgmii_1218_qsgmii_1218_GTWIZARD_RX_STARTUP_FSM
   (data_in,
    gt0_rxuserrdy_i,
    gt0_gtrxreset_i,
    independent_clock_bufg,
    rxuserclk,
    pma_reset,
    gt0_rx_cdrlocked_reg,
    gt0_rxprbssel_in,
    gt0_gtrxreset_in,
    mgt_rx_reset,
    \cpllpd_wait_reg[95] ,
    data_out,
    gt0_cplllock_out);
  output data_in;
  output gt0_rxuserrdy_i;
  output gt0_gtrxreset_i;
  input independent_clock_bufg;
  input rxuserclk;
  input pma_reset;
  input gt0_rx_cdrlocked_reg;
  input [2:0]gt0_rxprbssel_in;
  input gt0_gtrxreset_in;
  input mgt_rx_reset;
  input \cpllpd_wait_reg[95] ;
  input data_out;
  input gt0_cplllock_out;

  wire \FSM_sequential_rx_state[0]_i_3_n_0 ;
  wire \FSM_sequential_rx_state[2]_i_1_n_0 ;
  wire \FSM_sequential_rx_state[2]_i_2_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_10_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_11_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_3_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_5_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_8_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_9_n_0 ;
  wire RXUSERRDY_i_1_n_0;
  wire check_tlock_max_i_1_n_0;
  wire check_tlock_max_reg_n_0;
  wire cplllock_sync;
  wire \cpllpd_wait_reg[95] ;
  wire data_in;
  wire data_out;
  wire gt0_cplllock_out;
  wire gt0_gtrxreset_i;
  wire gt0_gtrxreset_in;
  wire gt0_gtrxreset_t;
  wire gt0_rx_cdrlocked_reg;
  wire [2:0]gt0_rxprbssel_in;
  wire gt0_rxuserrdy_i;
  wire gtrxreset_i_i_1_n_0;
  wire independent_clock_bufg;
  wire init_wait_count;
  wire \init_wait_count[0]_i_1__0_n_0 ;
  wire \init_wait_count[7]_i_3__0_n_0 ;
  wire \init_wait_count[7]_i_4__0_n_0 ;
  wire [7:0]init_wait_count_reg__0;
  wire init_wait_done_i_1__0_n_0;
  wire init_wait_done_reg_n_0;
  wire mgt_rx_reset;
  wire \mmcm_lock_count[7]_i_2__0_n_0 ;
  wire \mmcm_lock_count[7]_i_4__0_n_0 ;
  wire [7:0]mmcm_lock_count_reg__0;
  wire mmcm_lock_reclocked;
  wire [7:1]p_0_in__3;
  wire [7:0]p_0_in__4;
  wire pma_reset;
  wire reset_time_out_i_3__0_n_0;
  wire reset_time_out_i_5_n_0;
  wire reset_time_out_i_6_n_0;
  wire reset_time_out_i_7_n_0;
  wire reset_time_out_reg_n_0;
  wire run_phase_alignment_int_i_1__0_n_0;
  wire run_phase_alignment_int_reg_n_0;
  wire run_phase_alignment_int_s2;
  wire run_phase_alignment_int_s3_reg_n_0;
  wire rx_fsm_reset_done_int_s2;
  wire rx_fsm_reset_done_int_s3;
  (* RTL_KEEP = "yes" *) wire [3:0]rx_state;
  wire rxresetdone_s2;
  wire rxresetdone_s3;
  wire rxuserclk;
  wire sync_cplllock_n_0;
  wire sync_data_valid_n_0;
  wire sync_data_valid_n_1;
  wire sync_data_valid_n_2;
  wire sync_data_valid_n_3;
  wire sync_data_valid_n_4;
  wire sync_data_valid_n_5;
  wire sync_mmcm_lock_reclocked_n_0;
  wire sync_mmcm_lock_reclocked_n_1;
  wire time_out_100us_i_1_n_0;
  wire time_out_100us_i_2_n_0;
  wire time_out_100us_reg_n_0;
  wire time_out_1us_i_1_n_0;
  wire time_out_1us_i_2_n_0;
  wire time_out_1us_i_3_n_0;
  wire time_out_1us_i_4_n_0;
  wire time_out_1us_i_5_n_0;
  wire time_out_1us_reg_n_0;
  wire time_out_2ms;
  wire time_out_2ms_i_1_n_0;
  wire time_out_2ms_reg_n_0;
  wire time_out_counter;
  wire \time_out_counter[0]_i_4__0_n_0 ;
  wire \time_out_counter[0]_i_5__0_n_0 ;
  wire \time_out_counter[0]_i_6__0_n_0 ;
  wire \time_out_counter[0]_i_7_n_0 ;
  wire \time_out_counter[0]_i_8_n_0 ;
  wire [18:0]time_out_counter_reg;
  wire \time_out_counter_reg[0]_i_2__0_n_0 ;
  wire \time_out_counter_reg[0]_i_2__0_n_1 ;
  wire \time_out_counter_reg[0]_i_2__0_n_2 ;
  wire \time_out_counter_reg[0]_i_2__0_n_3 ;
  wire \time_out_counter_reg[0]_i_2__0_n_4 ;
  wire \time_out_counter_reg[0]_i_2__0_n_5 ;
  wire \time_out_counter_reg[0]_i_2__0_n_6 ;
  wire \time_out_counter_reg[0]_i_2__0_n_7 ;
  wire \time_out_counter_reg[12]_i_1__0_n_0 ;
  wire \time_out_counter_reg[12]_i_1__0_n_1 ;
  wire \time_out_counter_reg[12]_i_1__0_n_2 ;
  wire \time_out_counter_reg[12]_i_1__0_n_3 ;
  wire \time_out_counter_reg[12]_i_1__0_n_4 ;
  wire \time_out_counter_reg[12]_i_1__0_n_5 ;
  wire \time_out_counter_reg[12]_i_1__0_n_6 ;
  wire \time_out_counter_reg[12]_i_1__0_n_7 ;
  wire \time_out_counter_reg[16]_i_1__0_n_2 ;
  wire \time_out_counter_reg[16]_i_1__0_n_3 ;
  wire \time_out_counter_reg[16]_i_1__0_n_5 ;
  wire \time_out_counter_reg[16]_i_1__0_n_6 ;
  wire \time_out_counter_reg[16]_i_1__0_n_7 ;
  wire \time_out_counter_reg[4]_i_1__0_n_0 ;
  wire \time_out_counter_reg[4]_i_1__0_n_1 ;
  wire \time_out_counter_reg[4]_i_1__0_n_2 ;
  wire \time_out_counter_reg[4]_i_1__0_n_3 ;
  wire \time_out_counter_reg[4]_i_1__0_n_4 ;
  wire \time_out_counter_reg[4]_i_1__0_n_5 ;
  wire \time_out_counter_reg[4]_i_1__0_n_6 ;
  wire \time_out_counter_reg[4]_i_1__0_n_7 ;
  wire \time_out_counter_reg[8]_i_1__0_n_0 ;
  wire \time_out_counter_reg[8]_i_1__0_n_1 ;
  wire \time_out_counter_reg[8]_i_1__0_n_2 ;
  wire \time_out_counter_reg[8]_i_1__0_n_3 ;
  wire \time_out_counter_reg[8]_i_1__0_n_4 ;
  wire \time_out_counter_reg[8]_i_1__0_n_5 ;
  wire \time_out_counter_reg[8]_i_1__0_n_6 ;
  wire \time_out_counter_reg[8]_i_1__0_n_7 ;
  wire time_out_wait_bypass_i_1__0_n_0;
  wire time_out_wait_bypass_reg_n_0;
  wire time_out_wait_bypass_s2;
  wire time_out_wait_bypass_s3;
  wire time_tlock_max;
  wire time_tlock_max_i_1_n_0;
  wire time_tlock_max_i_2_n_0;
  wire time_tlock_max_i_3_n_0;
  wire time_tlock_max_i_4_n_0;
  wire time_tlock_max_i_5_n_0;
  wire time_tlock_max_i_6_n_0;
  wire \wait_bypass_count[0]_i_1__0_n_0 ;
  wire \wait_bypass_count[0]_i_2__0_n_0 ;
  wire \wait_bypass_count[0]_i_4__0_n_0 ;
  wire \wait_bypass_count[0]_i_5__0_n_0 ;
  wire \wait_bypass_count[0]_i_6__0_n_0 ;
  wire \wait_bypass_count[0]_i_7__0_n_0 ;
  wire [12:0]wait_bypass_count_reg;
  wire \wait_bypass_count_reg[0]_i_3__0_n_0 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_1 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_2 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_3 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_4 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_5 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_6 ;
  wire \wait_bypass_count_reg[0]_i_3__0_n_7 ;
  wire \wait_bypass_count_reg[12]_i_1__0_n_7 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_0 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_1 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_2 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_3 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_4 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_5 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_6 ;
  wire \wait_bypass_count_reg[4]_i_1__0_n_7 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_0 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_1 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_2 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_3 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_4 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_5 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_6 ;
  wire \wait_bypass_count_reg[8]_i_1__0_n_7 ;
  wire \wait_time_cnt[0]_i_10__0_n_0 ;
  wire \wait_time_cnt[0]_i_11__0_n_0 ;
  wire \wait_time_cnt[0]_i_1_n_0 ;
  wire \wait_time_cnt[0]_i_2__0_n_0 ;
  wire \wait_time_cnt[0]_i_4__0_n_0 ;
  wire \wait_time_cnt[0]_i_5__0_n_0 ;
  wire \wait_time_cnt[0]_i_6__0_n_0 ;
  wire \wait_time_cnt[0]_i_7__0_n_0 ;
  wire \wait_time_cnt[0]_i_8__0_n_0 ;
  wire \wait_time_cnt[0]_i_9__0_n_0 ;
  wire \wait_time_cnt[12]_i_2__0_n_0 ;
  wire \wait_time_cnt[12]_i_3__0_n_0 ;
  wire \wait_time_cnt[12]_i_4__0_n_0 ;
  wire \wait_time_cnt[12]_i_5__0_n_0 ;
  wire \wait_time_cnt[4]_i_2__0_n_0 ;
  wire \wait_time_cnt[4]_i_3__0_n_0 ;
  wire \wait_time_cnt[4]_i_4__0_n_0 ;
  wire \wait_time_cnt[4]_i_5__0_n_0 ;
  wire \wait_time_cnt[8]_i_2__0_n_0 ;
  wire \wait_time_cnt[8]_i_3__0_n_0 ;
  wire \wait_time_cnt[8]_i_4__0_n_0 ;
  wire \wait_time_cnt[8]_i_5__0_n_0 ;
  wire [15:0]wait_time_cnt_reg;
  wire \wait_time_cnt_reg[0]_i_3__0_n_0 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_1 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_2 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_3 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_4 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_5 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_6 ;
  wire \wait_time_cnt_reg[0]_i_3__0_n_7 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_1 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_2 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_3 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_4 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_5 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_6 ;
  wire \wait_time_cnt_reg[12]_i_1__0_n_7 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_0 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_1 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_2 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_3 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_4 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_5 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_6 ;
  wire \wait_time_cnt_reg[4]_i_1__0_n_7 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_0 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_1 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_2 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_3 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_4 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_5 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_6 ;
  wire \wait_time_cnt_reg[8]_i_1__0_n_7 ;
  wire [3:2]\NLW_time_out_counter_reg[16]_i_1__0_CO_UNCONNECTED ;
  wire [3:3]\NLW_time_out_counter_reg[16]_i_1__0_O_UNCONNECTED ;
  wire [3:0]\NLW_wait_bypass_count_reg[12]_i_1__0_CO_UNCONNECTED ;
  wire [3:1]\NLW_wait_bypass_count_reg[12]_i_1__0_O_UNCONNECTED ;
  wire [3:3]\NLW_wait_time_cnt_reg[12]_i_1__0_CO_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h0000FFB000FFFFFF)) 
    \FSM_sequential_rx_state[0]_i_3 
       (.I0(reset_time_out_reg_n_0),
        .I1(time_tlock_max),
        .I2(rx_state[0]),
        .I3(rx_state[3]),
        .I4(rx_state[1]),
        .I5(rx_state[2]),
        .O(\FSM_sequential_rx_state[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h000000000FAF3000)) 
    \FSM_sequential_rx_state[2]_i_1 
       (.I0(\FSM_sequential_rx_state[2]_i_2_n_0 ),
        .I1(time_out_2ms_reg_n_0),
        .I2(rx_state[0]),
        .I3(rx_state[1]),
        .I4(rx_state[2]),
        .I5(rx_state[3]),
        .O(\FSM_sequential_rx_state[2]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \FSM_sequential_rx_state[2]_i_2 
       (.I0(reset_time_out_reg_n_0),
        .I1(time_tlock_max),
        .O(\FSM_sequential_rx_state[2]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0001)) 
    \FSM_sequential_rx_state[3]_i_10 
       (.I0(rx_state[2]),
        .I1(rx_state[1]),
        .I2(rx_state[0]),
        .I3(init_wait_done_reg_n_0),
        .I4(rx_state[3]),
        .O(\FSM_sequential_rx_state[3]_i_10_n_0 ));
  LUT6 #(
    .INIT(64'h4040FF4040FFFFFF)) 
    \FSM_sequential_rx_state[3]_i_11 
       (.I0(reset_time_out_reg_n_0),
        .I1(time_tlock_max),
        .I2(rx_state[0]),
        .I3(rx_state[3]),
        .I4(rx_state[1]),
        .I5(rx_state[2]),
        .O(\FSM_sequential_rx_state[3]_i_11_n_0 ));
  LUT6 #(
    .INIT(64'hAAAAAAABABABAAAB)) 
    \FSM_sequential_rx_state[3]_i_3 
       (.I0(\FSM_sequential_rx_state[3]_i_10_n_0 ),
        .I1(\FSM_sequential_rx_state[3]_i_11_n_0 ),
        .I2(rx_state[1]),
        .I3(gt0_rx_cdrlocked_reg),
        .I4(rx_state[0]),
        .I5(mmcm_lock_reclocked),
        .O(\FSM_sequential_rx_state[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hBABAFFFFBAFFFFFF)) 
    \FSM_sequential_rx_state[3]_i_5 
       (.I0(rxresetdone_s3),
        .I1(reset_time_out_reg_n_0),
        .I2(time_out_2ms_reg_n_0),
        .I3(rx_state[3]),
        .I4(rx_state[1]),
        .I5(rx_state[2]),
        .O(\FSM_sequential_rx_state[3]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h5DFF)) 
    \FSM_sequential_rx_state[3]_i_8 
       (.I0(rx_state[1]),
        .I1(time_out_2ms_reg_n_0),
        .I2(reset_time_out_reg_n_0),
        .I3(rx_state[0]),
        .O(\FSM_sequential_rx_state[3]_i_8_n_0 ));
  LUT3 #(
    .INIT(8'h35)) 
    \FSM_sequential_rx_state[3]_i_9 
       (.I0(rx_state[2]),
        .I1(rx_state[1]),
        .I2(rx_state[3]),
        .O(\FSM_sequential_rx_state[3]_i_9_n_0 ));
  (* FSM_ENCODED_STATES = "RELEASE_PLL_RESET:0011,VERIFY_RECCLK_STABLE:0100,WAIT_FOR_PLL_LOCK:0010,FSM_DONE:1010,ASSERT_ALL_RESETS:0001,INIT:0000,WAIT_RESET_DONE:0111,MONITOR_DATA_VALID:1001,WAIT_FOR_RXUSRCLK:0110,DO_PHASE_ALIGNMENT:1000,RELEASE_MMCM_RESET:0101" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_rx_state_reg[0] 
       (.C(independent_clock_bufg),
        .CE(sync_cplllock_n_0),
        .D(sync_data_valid_n_4),
        .Q(rx_state[0]),
        .R(pma_reset));
  (* FSM_ENCODED_STATES = "RELEASE_PLL_RESET:0011,VERIFY_RECCLK_STABLE:0100,WAIT_FOR_PLL_LOCK:0010,FSM_DONE:1010,ASSERT_ALL_RESETS:0001,INIT:0000,WAIT_RESET_DONE:0111,MONITOR_DATA_VALID:1001,WAIT_FOR_RXUSRCLK:0110,DO_PHASE_ALIGNMENT:1000,RELEASE_MMCM_RESET:0101" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_rx_state_reg[1] 
       (.C(independent_clock_bufg),
        .CE(sync_cplllock_n_0),
        .D(sync_data_valid_n_3),
        .Q(rx_state[1]),
        .R(pma_reset));
  (* FSM_ENCODED_STATES = "RELEASE_PLL_RESET:0011,VERIFY_RECCLK_STABLE:0100,WAIT_FOR_PLL_LOCK:0010,FSM_DONE:1010,ASSERT_ALL_RESETS:0001,INIT:0000,WAIT_RESET_DONE:0111,MONITOR_DATA_VALID:1001,WAIT_FOR_RXUSRCLK:0110,DO_PHASE_ALIGNMENT:1000,RELEASE_MMCM_RESET:0101" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_rx_state_reg[2] 
       (.C(independent_clock_bufg),
        .CE(sync_cplllock_n_0),
        .D(\FSM_sequential_rx_state[2]_i_1_n_0 ),
        .Q(rx_state[2]),
        .R(pma_reset));
  (* FSM_ENCODED_STATES = "RELEASE_PLL_RESET:0011,VERIFY_RECCLK_STABLE:0100,WAIT_FOR_PLL_LOCK:0010,FSM_DONE:1010,ASSERT_ALL_RESETS:0001,INIT:0000,WAIT_RESET_DONE:0111,MONITOR_DATA_VALID:1001,WAIT_FOR_RXUSRCLK:0110,DO_PHASE_ALIGNMENT:1000,RELEASE_MMCM_RESET:0101" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_rx_state_reg[3] 
       (.C(independent_clock_bufg),
        .CE(sync_cplllock_n_0),
        .D(sync_data_valid_n_2),
        .Q(rx_state[3]),
        .R(pma_reset));
  LUT5 #(
    .INIT(32'hFFFD2000)) 
    RXUSERRDY_i_1
       (.I0(rx_state[0]),
        .I1(rx_state[3]),
        .I2(rx_state[1]),
        .I3(rx_state[2]),
        .I4(gt0_rxuserrdy_i),
        .O(RXUSERRDY_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    RXUSERRDY_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(RXUSERRDY_i_1_n_0),
        .Q(gt0_rxuserrdy_i),
        .R(pma_reset));
  LUT5 #(
    .INIT(32'hFFEF0020)) 
    check_tlock_max_i_1
       (.I0(rx_state[2]),
        .I1(rx_state[1]),
        .I2(rx_state[0]),
        .I3(rx_state[3]),
        .I4(check_tlock_max_reg_n_0),
        .O(check_tlock_max_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    check_tlock_max_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(check_tlock_max_i_1_n_0),
        .Q(check_tlock_max_reg_n_0),
        .R(pma_reset));
  LUT5 #(
    .INIT(32'hFEFF0010)) 
    gtrxreset_i_i_1
       (.I0(rx_state[3]),
        .I1(rx_state[1]),
        .I2(rx_state[0]),
        .I3(rx_state[2]),
        .I4(gt0_gtrxreset_t),
        .O(gtrxreset_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    gtrxreset_i_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gtrxreset_i_i_1_n_0),
        .Q(gt0_gtrxreset_t),
        .R(pma_reset));
  LUT4 #(
    .INIT(16'hFEEE)) 
    gtxe2_i_i_2
       (.I0(gt0_gtrxreset_t),
        .I1(gt0_gtrxreset_in),
        .I2(mgt_rx_reset),
        .I3(data_in),
        .O(gt0_gtrxreset_i));
  LUT1 #(
    .INIT(2'h1)) 
    \init_wait_count[0]_i_1__0 
       (.I0(init_wait_count_reg__0[0]),
        .O(\init_wait_count[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair401" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \init_wait_count[1]_i_1__0 
       (.I0(init_wait_count_reg__0[1]),
        .I1(init_wait_count_reg__0[0]),
        .O(p_0_in__3[1]));
  (* SOFT_HLUTNM = "soft_lutpair401" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \init_wait_count[2]_i_1__0 
       (.I0(init_wait_count_reg__0[2]),
        .I1(init_wait_count_reg__0[0]),
        .I2(init_wait_count_reg__0[1]),
        .O(p_0_in__3[2]));
  (* SOFT_HLUTNM = "soft_lutpair396" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \init_wait_count[3]_i_1__0 
       (.I0(init_wait_count_reg__0[0]),
        .I1(init_wait_count_reg__0[1]),
        .I2(init_wait_count_reg__0[2]),
        .I3(init_wait_count_reg__0[3]),
        .O(p_0_in__3[3]));
  (* SOFT_HLUTNM = "soft_lutpair393" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \init_wait_count[4]_i_1__0 
       (.I0(init_wait_count_reg__0[4]),
        .I1(init_wait_count_reg__0[0]),
        .I2(init_wait_count_reg__0[1]),
        .I3(init_wait_count_reg__0[2]),
        .I4(init_wait_count_reg__0[3]),
        .O(p_0_in__3[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \init_wait_count[5]_i_1__0 
       (.I0(init_wait_count_reg__0[5]),
        .I1(init_wait_count_reg__0[3]),
        .I2(init_wait_count_reg__0[2]),
        .I3(init_wait_count_reg__0[1]),
        .I4(init_wait_count_reg__0[0]),
        .I5(init_wait_count_reg__0[4]),
        .O(p_0_in__3[5]));
  (* SOFT_HLUTNM = "soft_lutpair394" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \init_wait_count[6]_i_1__0 
       (.I0(init_wait_count_reg__0[6]),
        .I1(init_wait_count_reg__0[4]),
        .I2(\init_wait_count[7]_i_4__0_n_0 ),
        .I3(init_wait_count_reg__0[5]),
        .O(p_0_in__3[6]));
  LUT5 #(
    .INIT(32'hFFDFFFFF)) 
    \init_wait_count[7]_i_1__0 
       (.I0(\init_wait_count[7]_i_3__0_n_0 ),
        .I1(init_wait_count_reg__0[7]),
        .I2(init_wait_count_reg__0[6]),
        .I3(init_wait_count_reg__0[4]),
        .I4(init_wait_count_reg__0[5]),
        .O(init_wait_count));
  (* SOFT_HLUTNM = "soft_lutpair394" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \init_wait_count[7]_i_2__0 
       (.I0(init_wait_count_reg__0[7]),
        .I1(init_wait_count_reg__0[5]),
        .I2(\init_wait_count[7]_i_4__0_n_0 ),
        .I3(init_wait_count_reg__0[4]),
        .I4(init_wait_count_reg__0[6]),
        .O(p_0_in__3[7]));
  (* SOFT_HLUTNM = "soft_lutpair393" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \init_wait_count[7]_i_3__0 
       (.I0(init_wait_count_reg__0[0]),
        .I1(init_wait_count_reg__0[1]),
        .I2(init_wait_count_reg__0[3]),
        .I3(init_wait_count_reg__0[2]),
        .O(\init_wait_count[7]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair396" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \init_wait_count[7]_i_4__0 
       (.I0(init_wait_count_reg__0[3]),
        .I1(init_wait_count_reg__0[2]),
        .I2(init_wait_count_reg__0[1]),
        .I3(init_wait_count_reg__0[0]),
        .O(\init_wait_count[7]_i_4__0_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[0] 
       (.C(independent_clock_bufg),
        .CE(init_wait_count),
        .CLR(pma_reset),
        .D(\init_wait_count[0]_i_1__0_n_0 ),
        .Q(init_wait_count_reg__0[0]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[1] 
       (.C(independent_clock_bufg),
        .CE(init_wait_count),
        .CLR(pma_reset),
        .D(p_0_in__3[1]),
        .Q(init_wait_count_reg__0[1]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[2] 
       (.C(independent_clock_bufg),
        .CE(init_wait_count),
        .CLR(pma_reset),
        .D(p_0_in__3[2]),
        .Q(init_wait_count_reg__0[2]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[3] 
       (.C(independent_clock_bufg),
        .CE(init_wait_count),
        .CLR(pma_reset),
        .D(p_0_in__3[3]),
        .Q(init_wait_count_reg__0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[4] 
       (.C(independent_clock_bufg),
        .CE(init_wait_count),
        .CLR(pma_reset),
        .D(p_0_in__3[4]),
        .Q(init_wait_count_reg__0[4]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[5] 
       (.C(independent_clock_bufg),
        .CE(init_wait_count),
        .CLR(pma_reset),
        .D(p_0_in__3[5]),
        .Q(init_wait_count_reg__0[5]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[6] 
       (.C(independent_clock_bufg),
        .CE(init_wait_count),
        .CLR(pma_reset),
        .D(p_0_in__3[6]),
        .Q(init_wait_count_reg__0[6]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[7] 
       (.C(independent_clock_bufg),
        .CE(init_wait_count),
        .CLR(pma_reset),
        .D(p_0_in__3[7]),
        .Q(init_wait_count_reg__0[7]));
  LUT6 #(
    .INIT(64'hFFFFFFFF00200000)) 
    init_wait_done_i_1__0
       (.I0(\init_wait_count[7]_i_3__0_n_0 ),
        .I1(init_wait_count_reg__0[7]),
        .I2(init_wait_count_reg__0[6]),
        .I3(init_wait_count_reg__0[4]),
        .I4(init_wait_count_reg__0[5]),
        .I5(init_wait_done_reg_n_0),
        .O(init_wait_done_i_1__0_n_0));
  FDCE #(
    .INIT(1'b0)) 
    init_wait_done_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .CLR(pma_reset),
        .D(init_wait_done_i_1__0_n_0),
        .Q(init_wait_done_reg_n_0));
  (* SOFT_HLUTNM = "soft_lutpair402" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \mmcm_lock_count[0]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[0]),
        .O(p_0_in__4[0]));
  (* SOFT_HLUTNM = "soft_lutpair402" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \mmcm_lock_count[1]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[0]),
        .I1(mmcm_lock_count_reg__0[1]),
        .O(p_0_in__4[1]));
  (* SOFT_HLUTNM = "soft_lutpair399" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \mmcm_lock_count[2]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[2]),
        .I1(mmcm_lock_count_reg__0[1]),
        .I2(mmcm_lock_count_reg__0[0]),
        .O(p_0_in__4[2]));
  (* SOFT_HLUTNM = "soft_lutpair399" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \mmcm_lock_count[3]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[3]),
        .I1(mmcm_lock_count_reg__0[2]),
        .I2(mmcm_lock_count_reg__0[0]),
        .I3(mmcm_lock_count_reg__0[1]),
        .O(p_0_in__4[3]));
  (* SOFT_HLUTNM = "soft_lutpair391" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \mmcm_lock_count[4]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[4]),
        .I1(mmcm_lock_count_reg__0[3]),
        .I2(mmcm_lock_count_reg__0[1]),
        .I3(mmcm_lock_count_reg__0[0]),
        .I4(mmcm_lock_count_reg__0[2]),
        .O(p_0_in__4[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \mmcm_lock_count[5]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[5]),
        .I1(mmcm_lock_count_reg__0[2]),
        .I2(mmcm_lock_count_reg__0[0]),
        .I3(mmcm_lock_count_reg__0[1]),
        .I4(mmcm_lock_count_reg__0[3]),
        .I5(mmcm_lock_count_reg__0[4]),
        .O(p_0_in__4[5]));
  (* SOFT_HLUTNM = "soft_lutpair398" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \mmcm_lock_count[6]_i_1__0 
       (.I0(mmcm_lock_count_reg__0[6]),
        .I1(\mmcm_lock_count[7]_i_4__0_n_0 ),
        .I2(mmcm_lock_count_reg__0[5]),
        .O(p_0_in__4[6]));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \mmcm_lock_count[7]_i_2__0 
       (.I0(mmcm_lock_count_reg__0[6]),
        .I1(\mmcm_lock_count[7]_i_4__0_n_0 ),
        .I2(mmcm_lock_count_reg__0[5]),
        .I3(mmcm_lock_count_reg__0[7]),
        .O(\mmcm_lock_count[7]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair398" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \mmcm_lock_count[7]_i_3__0 
       (.I0(mmcm_lock_count_reg__0[7]),
        .I1(mmcm_lock_count_reg__0[5]),
        .I2(\mmcm_lock_count[7]_i_4__0_n_0 ),
        .I3(mmcm_lock_count_reg__0[6]),
        .O(p_0_in__4[7]));
  (* SOFT_HLUTNM = "soft_lutpair391" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \mmcm_lock_count[7]_i_4__0 
       (.I0(mmcm_lock_count_reg__0[4]),
        .I1(mmcm_lock_count_reg__0[3]),
        .I2(mmcm_lock_count_reg__0[1]),
        .I3(mmcm_lock_count_reg__0[0]),
        .I4(mmcm_lock_count_reg__0[2]),
        .O(\mmcm_lock_count[7]_i_4__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[0] 
       (.C(independent_clock_bufg),
        .CE(\mmcm_lock_count[7]_i_2__0_n_0 ),
        .D(p_0_in__4[0]),
        .Q(mmcm_lock_count_reg__0[0]),
        .R(sync_mmcm_lock_reclocked_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[1] 
       (.C(independent_clock_bufg),
        .CE(\mmcm_lock_count[7]_i_2__0_n_0 ),
        .D(p_0_in__4[1]),
        .Q(mmcm_lock_count_reg__0[1]),
        .R(sync_mmcm_lock_reclocked_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[2] 
       (.C(independent_clock_bufg),
        .CE(\mmcm_lock_count[7]_i_2__0_n_0 ),
        .D(p_0_in__4[2]),
        .Q(mmcm_lock_count_reg__0[2]),
        .R(sync_mmcm_lock_reclocked_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[3] 
       (.C(independent_clock_bufg),
        .CE(\mmcm_lock_count[7]_i_2__0_n_0 ),
        .D(p_0_in__4[3]),
        .Q(mmcm_lock_count_reg__0[3]),
        .R(sync_mmcm_lock_reclocked_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[4] 
       (.C(independent_clock_bufg),
        .CE(\mmcm_lock_count[7]_i_2__0_n_0 ),
        .D(p_0_in__4[4]),
        .Q(mmcm_lock_count_reg__0[4]),
        .R(sync_mmcm_lock_reclocked_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[5] 
       (.C(independent_clock_bufg),
        .CE(\mmcm_lock_count[7]_i_2__0_n_0 ),
        .D(p_0_in__4[5]),
        .Q(mmcm_lock_count_reg__0[5]),
        .R(sync_mmcm_lock_reclocked_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[6] 
       (.C(independent_clock_bufg),
        .CE(\mmcm_lock_count[7]_i_2__0_n_0 ),
        .D(p_0_in__4[6]),
        .Q(mmcm_lock_count_reg__0[6]),
        .R(sync_mmcm_lock_reclocked_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[7] 
       (.C(independent_clock_bufg),
        .CE(\mmcm_lock_count[7]_i_2__0_n_0 ),
        .D(p_0_in__4[7]),
        .Q(mmcm_lock_count_reg__0[7]),
        .R(sync_mmcm_lock_reclocked_n_1));
  FDRE #(
    .INIT(1'b0)) 
    mmcm_lock_reclocked_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(sync_mmcm_lock_reclocked_n_0),
        .Q(mmcm_lock_reclocked),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00FF00B8000000B8)) 
    reset_time_out_i_3__0
       (.I0(mmcm_lock_reclocked),
        .I1(rx_state[0]),
        .I2(gt0_rx_cdrlocked_reg),
        .I3(reset_time_out_i_7_n_0),
        .I4(rx_state[1]),
        .I5(rxresetdone_s3),
        .O(reset_time_out_i_3__0_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    reset_time_out_i_5
       (.I0(rx_state[0]),
        .I1(rx_state[1]),
        .O(reset_time_out_i_5_n_0));
  LUT5 #(
    .INIT(32'h37371C0C)) 
    reset_time_out_i_6
       (.I0(rx_state[1]),
        .I1(rx_state[3]),
        .I2(rx_state[2]),
        .I3(gt0_rx_cdrlocked_reg),
        .I4(rx_state[0]),
        .O(reset_time_out_i_6_n_0));
  LUT2 #(
    .INIT(4'hB)) 
    reset_time_out_i_7
       (.I0(rx_state[3]),
        .I1(rx_state[2]),
        .O(reset_time_out_i_7_n_0));
  FDSE #(
    .INIT(1'b0)) 
    reset_time_out_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(sync_data_valid_n_0),
        .Q(reset_time_out_reg_n_0),
        .S(pma_reset));
  LUT5 #(
    .INIT(32'hFFEF0100)) 
    run_phase_alignment_int_i_1__0
       (.I0(rx_state[2]),
        .I1(rx_state[1]),
        .I2(rx_state[0]),
        .I3(rx_state[3]),
        .I4(run_phase_alignment_int_reg_n_0),
        .O(run_phase_alignment_int_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    run_phase_alignment_int_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(run_phase_alignment_int_i_1__0_n_0),
        .Q(run_phase_alignment_int_reg_n_0),
        .R(pma_reset));
  FDRE #(
    .INIT(1'b0)) 
    run_phase_alignment_int_s3_reg
       (.C(rxuserclk),
        .CE(1'b1),
        .D(run_phase_alignment_int_s2),
        .Q(run_phase_alignment_int_s3_reg_n_0),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    rx_fsm_reset_done_int_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(sync_data_valid_n_1),
        .Q(data_in),
        .R(pma_reset));
  FDRE #(
    .INIT(1'b0)) 
    rx_fsm_reset_done_int_s3_reg
       (.C(rxuserclk),
        .CE(1'b1),
        .D(rx_fsm_reset_done_int_s2),
        .Q(rx_fsm_reset_done_int_s3),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    rxresetdone_s3_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(rxresetdone_s2),
        .Q(rxresetdone_s3),
        .R(1'b0));
  qsgmii_1218_qsgmii_1218_sync_block_10 sync_RXRESETDONE
       (.\cpllpd_wait_reg[95] (\cpllpd_wait_reg[95] ),
        .data_out(rxresetdone_s2),
        .independent_clock_bufg(independent_clock_bufg));
  qsgmii_1218_qsgmii_1218_sync_block_11 sync_cplllock
       (.E(sync_cplllock_n_0),
        .\FSM_sequential_rx_state_reg[1] (\FSM_sequential_rx_state[3]_i_3_n_0 ),
        .\FSM_sequential_rx_state_reg[3] (sync_data_valid_n_5),
        .data_out(cplllock_sync),
        .gt0_cplllock_out(gt0_cplllock_out),
        .independent_clock_bufg(independent_clock_bufg),
        .out(rx_state),
        .rxresetdone_s3_reg(\FSM_sequential_rx_state[3]_i_5_n_0 ),
        .time_out_2ms_reg(time_out_2ms_reg_n_0),
        .\wait_time_cnt_reg[7] (\wait_time_cnt[0]_i_2__0_n_0 ));
  qsgmii_1218_qsgmii_1218_sync_block_12 sync_data_valid
       (.D({sync_data_valid_n_2,sync_data_valid_n_3,sync_data_valid_n_4}),
        .\FSM_sequential_rx_state_reg[0] (sync_data_valid_n_5),
        .\FSM_sequential_rx_state_reg[0]_0 (reset_time_out_i_5_n_0),
        .\FSM_sequential_rx_state_reg[1] (reset_time_out_i_6_n_0),
        .\FSM_sequential_rx_state_reg[1]_0 (\FSM_sequential_rx_state[3]_i_8_n_0 ),
        .\FSM_sequential_rx_state_reg[2] (\FSM_sequential_rx_state[3]_i_9_n_0 ),
        .data_in(data_in),
        .data_out(cplllock_sync),
        .data_sync_reg6_0(data_out),
        .gt0_rxprbssel_in(gt0_rxprbssel_in),
        .independent_clock_bufg(independent_clock_bufg),
        .mmcm_lock_reclocked_reg(reset_time_out_i_3__0_n_0),
        .out(rx_state),
        .reset_time_out_reg(sync_data_valid_n_0),
        .reset_time_out_reg_0(reset_time_out_reg_n_0),
        .reset_time_out_reg_1(\FSM_sequential_rx_state[0]_i_3_n_0 ),
        .reset_time_out_reg_2(\FSM_sequential_rx_state[2]_i_2_n_0 ),
        .rx_fsm_reset_done_int_reg(sync_data_valid_n_1),
        .time_out_100us_reg(time_out_100us_reg_n_0),
        .time_out_1us_reg(time_out_1us_reg_n_0),
        .time_out_2ms_reg(time_out_2ms_reg_n_0),
        .time_out_wait_bypass_s3(time_out_wait_bypass_s3));
  qsgmii_1218_qsgmii_1218_sync_block_13 sync_mmcm_lock_reclocked
       (.Q(mmcm_lock_count_reg__0[7:5]),
        .SR(sync_mmcm_lock_reclocked_n_1),
        .independent_clock_bufg(independent_clock_bufg),
        .\mmcm_lock_count_reg[4] (\mmcm_lock_count[7]_i_4__0_n_0 ),
        .mmcm_lock_reclocked(mmcm_lock_reclocked),
        .mmcm_lock_reclocked_reg(sync_mmcm_lock_reclocked_n_0));
  qsgmii_1218_qsgmii_1218_sync_block_14 sync_run_phase_alignment_int
       (.data_in(run_phase_alignment_int_reg_n_0),
        .data_out(run_phase_alignment_int_s2),
        .rxuserclk(rxuserclk));
  qsgmii_1218_qsgmii_1218_sync_block_15 sync_rx_fsm_reset_done_int
       (.data_in(data_in),
        .data_out(rx_fsm_reset_done_int_s2),
        .rxuserclk(rxuserclk));
  qsgmii_1218_qsgmii_1218_sync_block_16 sync_time_out_wait_bypass
       (.data_in(time_out_wait_bypass_reg_n_0),
        .data_out(time_out_wait_bypass_s2),
        .independent_clock_bufg(independent_clock_bufg));
  LUT6 #(
    .INIT(64'hFFFFFFFF40000000)) 
    time_out_100us_i_1
       (.I0(time_tlock_max_i_2_n_0),
        .I1(time_out_counter_reg[5]),
        .I2(time_out_counter_reg[14]),
        .I3(time_out_100us_i_2_n_0),
        .I4(time_tlock_max_i_5_n_0),
        .I5(time_out_100us_reg_n_0),
        .O(time_out_100us_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair400" *) 
  LUT3 #(
    .INIT(8'h80)) 
    time_out_100us_i_2
       (.I0(time_out_counter_reg[11]),
        .I1(time_out_counter_reg[10]),
        .I2(time_out_counter_reg[9]),
        .O(time_out_100us_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_100us_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(time_out_100us_i_1_n_0),
        .Q(time_out_100us_reg_n_0),
        .R(reset_time_out_reg_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF01000000)) 
    time_out_1us_i_1
       (.I0(time_out_1us_i_2_n_0),
        .I1(time_out_counter_reg[11]),
        .I2(time_out_counter_reg[12]),
        .I3(time_out_1us_i_3_n_0),
        .I4(time_out_1us_i_4_n_0),
        .I5(time_out_1us_reg_n_0),
        .O(time_out_1us_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair397" *) 
  LUT2 #(
    .INIT(4'hE)) 
    time_out_1us_i_2
       (.I0(time_out_counter_reg[18]),
        .I1(time_out_counter_reg[17]),
        .O(time_out_1us_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair400" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    time_out_1us_i_3
       (.I0(time_out_counter_reg[10]),
        .I1(time_out_counter_reg[9]),
        .I2(time_out_counter_reg[8]),
        .I3(time_out_counter_reg[7]),
        .O(time_out_1us_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000000100000)) 
    time_out_1us_i_4
       (.I0(time_out_1us_i_5_n_0),
        .I1(time_out_counter_reg[4]),
        .I2(time_out_counter_reg[3]),
        .I3(time_out_counter_reg[5]),
        .I4(time_out_counter_reg[6]),
        .I5(\time_out_counter[0]_i_7_n_0 ),
        .O(time_out_1us_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair392" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    time_out_1us_i_5
       (.I0(time_out_counter_reg[1]),
        .I1(time_out_counter_reg[0]),
        .I2(time_out_counter_reg[2]),
        .O(time_out_1us_i_5_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_1us_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(time_out_1us_i_1_n_0),
        .Q(time_out_1us_reg_n_0),
        .R(reset_time_out_reg_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    time_out_2ms_i_1
       (.I0(time_out_2ms),
        .I1(time_out_2ms_reg_n_0),
        .O(time_out_2ms_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_2ms_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(time_out_2ms_i_1_n_0),
        .Q(time_out_2ms_reg_n_0),
        .R(reset_time_out_reg_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    \time_out_counter[0]_i_1 
       (.I0(time_out_2ms),
        .O(time_out_counter));
  LUT6 #(
    .INIT(64'h0000000800000000)) 
    \time_out_counter[0]_i_3 
       (.I0(\time_out_counter[0]_i_5__0_n_0 ),
        .I1(\time_out_counter[0]_i_6__0_n_0 ),
        .I2(time_out_counter_reg[5]),
        .I3(time_out_counter_reg[6]),
        .I4(\time_out_counter[0]_i_7_n_0 ),
        .I5(\time_out_counter[0]_i_8_n_0 ),
        .O(time_out_2ms));
  LUT1 #(
    .INIT(2'h1)) 
    \time_out_counter[0]_i_4__0 
       (.I0(time_out_counter_reg[0]),
        .O(\time_out_counter[0]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h2000000000000000)) 
    \time_out_counter[0]_i_5__0 
       (.I0(time_out_counter_reg[9]),
        .I1(time_out_counter_reg[10]),
        .I2(time_out_counter_reg[11]),
        .I3(time_out_counter_reg[12]),
        .I4(time_out_counter_reg[18]),
        .I5(time_out_counter_reg[17]),
        .O(\time_out_counter[0]_i_5__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair395" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \time_out_counter[0]_i_6__0 
       (.I0(time_out_counter_reg[7]),
        .I1(time_out_counter_reg[8]),
        .O(\time_out_counter[0]_i_6__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \time_out_counter[0]_i_7 
       (.I0(time_out_counter_reg[16]),
        .I1(time_out_counter_reg[15]),
        .I2(time_out_counter_reg[14]),
        .I3(time_out_counter_reg[13]),
        .O(\time_out_counter[0]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair392" *) 
  LUT5 #(
    .INIT(32'h00000001)) 
    \time_out_counter[0]_i_8 
       (.I0(time_out_counter_reg[4]),
        .I1(time_out_counter_reg[3]),
        .I2(time_out_counter_reg[2]),
        .I3(time_out_counter_reg[0]),
        .I4(time_out_counter_reg[1]),
        .O(\time_out_counter[0]_i_8_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[0] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2__0_n_7 ),
        .Q(time_out_counter_reg[0]),
        .R(reset_time_out_reg_n_0));
  CARRY4 \time_out_counter_reg[0]_i_2__0 
       (.CI(1'b0),
        .CO({\time_out_counter_reg[0]_i_2__0_n_0 ,\time_out_counter_reg[0]_i_2__0_n_1 ,\time_out_counter_reg[0]_i_2__0_n_2 ,\time_out_counter_reg[0]_i_2__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\time_out_counter_reg[0]_i_2__0_n_4 ,\time_out_counter_reg[0]_i_2__0_n_5 ,\time_out_counter_reg[0]_i_2__0_n_6 ,\time_out_counter_reg[0]_i_2__0_n_7 }),
        .S({time_out_counter_reg[3:1],\time_out_counter[0]_i_4__0_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[10] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1__0_n_5 ),
        .Q(time_out_counter_reg[10]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[11] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1__0_n_4 ),
        .Q(time_out_counter_reg[11]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[12] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1__0_n_7 ),
        .Q(time_out_counter_reg[12]),
        .R(reset_time_out_reg_n_0));
  CARRY4 \time_out_counter_reg[12]_i_1__0 
       (.CI(\time_out_counter_reg[8]_i_1__0_n_0 ),
        .CO({\time_out_counter_reg[12]_i_1__0_n_0 ,\time_out_counter_reg[12]_i_1__0_n_1 ,\time_out_counter_reg[12]_i_1__0_n_2 ,\time_out_counter_reg[12]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\time_out_counter_reg[12]_i_1__0_n_4 ,\time_out_counter_reg[12]_i_1__0_n_5 ,\time_out_counter_reg[12]_i_1__0_n_6 ,\time_out_counter_reg[12]_i_1__0_n_7 }),
        .S(time_out_counter_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[13] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1__0_n_6 ),
        .Q(time_out_counter_reg[13]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[14] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1__0_n_5 ),
        .Q(time_out_counter_reg[14]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[15] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1__0_n_4 ),
        .Q(time_out_counter_reg[15]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[16] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[16]_i_1__0_n_7 ),
        .Q(time_out_counter_reg[16]),
        .R(reset_time_out_reg_n_0));
  CARRY4 \time_out_counter_reg[16]_i_1__0 
       (.CI(\time_out_counter_reg[12]_i_1__0_n_0 ),
        .CO({\NLW_time_out_counter_reg[16]_i_1__0_CO_UNCONNECTED [3:2],\time_out_counter_reg[16]_i_1__0_n_2 ,\time_out_counter_reg[16]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_time_out_counter_reg[16]_i_1__0_O_UNCONNECTED [3],\time_out_counter_reg[16]_i_1__0_n_5 ,\time_out_counter_reg[16]_i_1__0_n_6 ,\time_out_counter_reg[16]_i_1__0_n_7 }),
        .S({1'b0,time_out_counter_reg[18:16]}));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[17] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[16]_i_1__0_n_6 ),
        .Q(time_out_counter_reg[17]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[18] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[16]_i_1__0_n_5 ),
        .Q(time_out_counter_reg[18]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[1] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2__0_n_6 ),
        .Q(time_out_counter_reg[1]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[2] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2__0_n_5 ),
        .Q(time_out_counter_reg[2]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[3] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2__0_n_4 ),
        .Q(time_out_counter_reg[3]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[4] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1__0_n_7 ),
        .Q(time_out_counter_reg[4]),
        .R(reset_time_out_reg_n_0));
  CARRY4 \time_out_counter_reg[4]_i_1__0 
       (.CI(\time_out_counter_reg[0]_i_2__0_n_0 ),
        .CO({\time_out_counter_reg[4]_i_1__0_n_0 ,\time_out_counter_reg[4]_i_1__0_n_1 ,\time_out_counter_reg[4]_i_1__0_n_2 ,\time_out_counter_reg[4]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\time_out_counter_reg[4]_i_1__0_n_4 ,\time_out_counter_reg[4]_i_1__0_n_5 ,\time_out_counter_reg[4]_i_1__0_n_6 ,\time_out_counter_reg[4]_i_1__0_n_7 }),
        .S(time_out_counter_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[5] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1__0_n_6 ),
        .Q(time_out_counter_reg[5]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[6] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1__0_n_5 ),
        .Q(time_out_counter_reg[6]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[7] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1__0_n_4 ),
        .Q(time_out_counter_reg[7]),
        .R(reset_time_out_reg_n_0));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[8] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1__0_n_7 ),
        .Q(time_out_counter_reg[8]),
        .R(reset_time_out_reg_n_0));
  CARRY4 \time_out_counter_reg[8]_i_1__0 
       (.CI(\time_out_counter_reg[4]_i_1__0_n_0 ),
        .CO({\time_out_counter_reg[8]_i_1__0_n_0 ,\time_out_counter_reg[8]_i_1__0_n_1 ,\time_out_counter_reg[8]_i_1__0_n_2 ,\time_out_counter_reg[8]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\time_out_counter_reg[8]_i_1__0_n_4 ,\time_out_counter_reg[8]_i_1__0_n_5 ,\time_out_counter_reg[8]_i_1__0_n_6 ,\time_out_counter_reg[8]_i_1__0_n_7 }),
        .S(time_out_counter_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[9] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1__0_n_6 ),
        .Q(time_out_counter_reg[9]),
        .R(reset_time_out_reg_n_0));
  LUT4 #(
    .INIT(16'hAB00)) 
    time_out_wait_bypass_i_1__0
       (.I0(time_out_wait_bypass_reg_n_0),
        .I1(rx_fsm_reset_done_int_s3),
        .I2(\wait_bypass_count[0]_i_4__0_n_0 ),
        .I3(run_phase_alignment_int_s3_reg_n_0),
        .O(time_out_wait_bypass_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_wait_bypass_reg
       (.C(rxuserclk),
        .CE(1'b1),
        .D(time_out_wait_bypass_i_1__0_n_0),
        .Q(time_out_wait_bypass_reg_n_0),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_wait_bypass_s3_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(time_out_wait_bypass_s2),
        .Q(time_out_wait_bypass_s3),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFFFFFFFF8888888A)) 
    time_tlock_max_i_1
       (.I0(check_tlock_max_reg_n_0),
        .I1(time_tlock_max_i_2_n_0),
        .I2(time_tlock_max_i_3_n_0),
        .I3(time_tlock_max_i_4_n_0),
        .I4(time_tlock_max_i_5_n_0),
        .I5(time_tlock_max),
        .O(time_tlock_max_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair397" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    time_tlock_max_i_2
       (.I0(time_out_counter_reg[17]),
        .I1(time_out_counter_reg[18]),
        .I2(time_out_counter_reg[16]),
        .I3(time_out_counter_reg[15]),
        .O(time_tlock_max_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000007FFFFFFFFF)) 
    time_tlock_max_i_3
       (.I0(time_out_counter_reg[11]),
        .I1(time_out_counter_reg[10]),
        .I2(time_out_counter_reg[9]),
        .I3(time_out_counter_reg[13]),
        .I4(time_out_counter_reg[12]),
        .I5(time_out_counter_reg[14]),
        .O(time_tlock_max_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    time_tlock_max_i_4
       (.I0(time_out_counter_reg[7]),
        .I1(time_out_counter_reg[6]),
        .I2(time_out_counter_reg[12]),
        .I3(time_out_counter_reg[13]),
        .I4(time_out_counter_reg[8]),
        .I5(time_out_counter_reg[5]),
        .O(time_tlock_max_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    time_tlock_max_i_5
       (.I0(time_out_counter_reg[1]),
        .I1(time_out_counter_reg[0]),
        .I2(time_out_counter_reg[2]),
        .I3(time_out_counter_reg[3]),
        .I4(time_out_counter_reg[4]),
        .I5(time_tlock_max_i_6_n_0),
        .O(time_tlock_max_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair395" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    time_tlock_max_i_6
       (.I0(time_out_counter_reg[8]),
        .I1(time_out_counter_reg[13]),
        .I2(time_out_counter_reg[12]),
        .I3(time_out_counter_reg[6]),
        .I4(time_out_counter_reg[7]),
        .O(time_tlock_max_i_6_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_tlock_max_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(time_tlock_max_i_1_n_0),
        .Q(time_tlock_max),
        .R(reset_time_out_reg_n_0));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_bypass_count[0]_i_1__0 
       (.I0(run_phase_alignment_int_s3_reg_n_0),
        .O(\wait_bypass_count[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \wait_bypass_count[0]_i_2__0 
       (.I0(\wait_bypass_count[0]_i_4__0_n_0 ),
        .I1(rx_fsm_reset_done_int_s3),
        .O(\wait_bypass_count[0]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hBFFFFFFF)) 
    \wait_bypass_count[0]_i_4__0 
       (.I0(\wait_bypass_count[0]_i_6__0_n_0 ),
        .I1(wait_bypass_count_reg[1]),
        .I2(wait_bypass_count_reg[8]),
        .I3(wait_bypass_count_reg[0]),
        .I4(\wait_bypass_count[0]_i_7__0_n_0 ),
        .O(\wait_bypass_count[0]_i_4__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_bypass_count[0]_i_5__0 
       (.I0(wait_bypass_count_reg[0]),
        .O(\wait_bypass_count[0]_i_5__0_n_0 ));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \wait_bypass_count[0]_i_6__0 
       (.I0(wait_bypass_count_reg[3]),
        .I1(wait_bypass_count_reg[5]),
        .I2(wait_bypass_count_reg[9]),
        .I3(wait_bypass_count_reg[7]),
        .O(\wait_bypass_count[0]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000008)) 
    \wait_bypass_count[0]_i_7__0 
       (.I0(wait_bypass_count_reg[2]),
        .I1(wait_bypass_count_reg[12]),
        .I2(wait_bypass_count_reg[4]),
        .I3(wait_bypass_count_reg[10]),
        .I4(wait_bypass_count_reg[6]),
        .I5(wait_bypass_count_reg[11]),
        .O(\wait_bypass_count[0]_i_7__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[0] 
       (.C(rxuserclk),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[0]_i_3__0_n_7 ),
        .Q(wait_bypass_count_reg[0]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  CARRY4 \wait_bypass_count_reg[0]_i_3__0 
       (.CI(1'b0),
        .CO({\wait_bypass_count_reg[0]_i_3__0_n_0 ,\wait_bypass_count_reg[0]_i_3__0_n_1 ,\wait_bypass_count_reg[0]_i_3__0_n_2 ,\wait_bypass_count_reg[0]_i_3__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\wait_bypass_count_reg[0]_i_3__0_n_4 ,\wait_bypass_count_reg[0]_i_3__0_n_5 ,\wait_bypass_count_reg[0]_i_3__0_n_6 ,\wait_bypass_count_reg[0]_i_3__0_n_7 }),
        .S({wait_bypass_count_reg[3:1],\wait_bypass_count[0]_i_5__0_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[10] 
       (.C(rxuserclk),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[8]_i_1__0_n_5 ),
        .Q(wait_bypass_count_reg[10]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[11] 
       (.C(rxuserclk),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[8]_i_1__0_n_4 ),
        .Q(wait_bypass_count_reg[11]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[12] 
       (.C(rxuserclk),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[12]_i_1__0_n_7 ),
        .Q(wait_bypass_count_reg[12]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  CARRY4 \wait_bypass_count_reg[12]_i_1__0 
       (.CI(\wait_bypass_count_reg[8]_i_1__0_n_0 ),
        .CO(\NLW_wait_bypass_count_reg[12]_i_1__0_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_wait_bypass_count_reg[12]_i_1__0_O_UNCONNECTED [3:1],\wait_bypass_count_reg[12]_i_1__0_n_7 }),
        .S({1'b0,1'b0,1'b0,wait_bypass_count_reg[12]}));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[1] 
       (.C(rxuserclk),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[0]_i_3__0_n_6 ),
        .Q(wait_bypass_count_reg[1]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[2] 
       (.C(rxuserclk),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[0]_i_3__0_n_5 ),
        .Q(wait_bypass_count_reg[2]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[3] 
       (.C(rxuserclk),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[0]_i_3__0_n_4 ),
        .Q(wait_bypass_count_reg[3]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[4] 
       (.C(rxuserclk),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[4]_i_1__0_n_7 ),
        .Q(wait_bypass_count_reg[4]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  CARRY4 \wait_bypass_count_reg[4]_i_1__0 
       (.CI(\wait_bypass_count_reg[0]_i_3__0_n_0 ),
        .CO({\wait_bypass_count_reg[4]_i_1__0_n_0 ,\wait_bypass_count_reg[4]_i_1__0_n_1 ,\wait_bypass_count_reg[4]_i_1__0_n_2 ,\wait_bypass_count_reg[4]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\wait_bypass_count_reg[4]_i_1__0_n_4 ,\wait_bypass_count_reg[4]_i_1__0_n_5 ,\wait_bypass_count_reg[4]_i_1__0_n_6 ,\wait_bypass_count_reg[4]_i_1__0_n_7 }),
        .S(wait_bypass_count_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[5] 
       (.C(rxuserclk),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[4]_i_1__0_n_6 ),
        .Q(wait_bypass_count_reg[5]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[6] 
       (.C(rxuserclk),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[4]_i_1__0_n_5 ),
        .Q(wait_bypass_count_reg[6]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[7] 
       (.C(rxuserclk),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[4]_i_1__0_n_4 ),
        .Q(wait_bypass_count_reg[7]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[8] 
       (.C(rxuserclk),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[8]_i_1__0_n_7 ),
        .Q(wait_bypass_count_reg[8]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  CARRY4 \wait_bypass_count_reg[8]_i_1__0 
       (.CI(\wait_bypass_count_reg[4]_i_1__0_n_0 ),
        .CO({\wait_bypass_count_reg[8]_i_1__0_n_0 ,\wait_bypass_count_reg[8]_i_1__0_n_1 ,\wait_bypass_count_reg[8]_i_1__0_n_2 ,\wait_bypass_count_reg[8]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\wait_bypass_count_reg[8]_i_1__0_n_4 ,\wait_bypass_count_reg[8]_i_1__0_n_5 ,\wait_bypass_count_reg[8]_i_1__0_n_6 ,\wait_bypass_count_reg[8]_i_1__0_n_7 }),
        .S(wait_bypass_count_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[9] 
       (.C(rxuserclk),
        .CE(\wait_bypass_count[0]_i_2__0_n_0 ),
        .D(\wait_bypass_count_reg[8]_i_1__0_n_6 ),
        .Q(wait_bypass_count_reg[9]),
        .R(\wait_bypass_count[0]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'h04)) 
    \wait_time_cnt[0]_i_1 
       (.I0(rx_state[1]),
        .I1(rx_state[0]),
        .I2(rx_state[3]),
        .O(\wait_time_cnt[0]_i_1_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_10__0 
       (.I0(wait_time_cnt_reg[1]),
        .O(\wait_time_cnt[0]_i_10__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_11__0 
       (.I0(wait_time_cnt_reg[0]),
        .O(\wait_time_cnt[0]_i_11__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wait_time_cnt[0]_i_2__0 
       (.I0(\wait_time_cnt[0]_i_4__0_n_0 ),
        .I1(\wait_time_cnt[0]_i_5__0_n_0 ),
        .I2(\wait_time_cnt[0]_i_6__0_n_0 ),
        .I3(\wait_time_cnt[0]_i_7__0_n_0 ),
        .O(\wait_time_cnt[0]_i_2__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wait_time_cnt[0]_i_4__0 
       (.I0(wait_time_cnt_reg[7]),
        .I1(wait_time_cnt_reg[4]),
        .I2(wait_time_cnt_reg[6]),
        .I3(wait_time_cnt_reg[5]),
        .O(\wait_time_cnt[0]_i_4__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wait_time_cnt[0]_i_5__0 
       (.I0(wait_time_cnt_reg[8]),
        .I1(wait_time_cnt_reg[11]),
        .I2(wait_time_cnt_reg[1]),
        .I3(wait_time_cnt_reg[2]),
        .O(\wait_time_cnt[0]_i_5__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wait_time_cnt[0]_i_6__0 
       (.I0(wait_time_cnt_reg[14]),
        .I1(wait_time_cnt_reg[12]),
        .I2(wait_time_cnt_reg[9]),
        .I3(wait_time_cnt_reg[10]),
        .O(\wait_time_cnt[0]_i_6__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wait_time_cnt[0]_i_7__0 
       (.I0(wait_time_cnt_reg[15]),
        .I1(wait_time_cnt_reg[13]),
        .I2(wait_time_cnt_reg[0]),
        .I3(wait_time_cnt_reg[3]),
        .O(\wait_time_cnt[0]_i_7__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_8__0 
       (.I0(wait_time_cnt_reg[3]),
        .O(\wait_time_cnt[0]_i_8__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_9__0 
       (.I0(wait_time_cnt_reg[2]),
        .O(\wait_time_cnt[0]_i_9__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_2__0 
       (.I0(wait_time_cnt_reg[15]),
        .O(\wait_time_cnt[12]_i_2__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_3__0 
       (.I0(wait_time_cnt_reg[14]),
        .O(\wait_time_cnt[12]_i_3__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_4__0 
       (.I0(wait_time_cnt_reg[13]),
        .O(\wait_time_cnt[12]_i_4__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_5__0 
       (.I0(wait_time_cnt_reg[12]),
        .O(\wait_time_cnt[12]_i_5__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_2__0 
       (.I0(wait_time_cnt_reg[7]),
        .O(\wait_time_cnt[4]_i_2__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_3__0 
       (.I0(wait_time_cnt_reg[6]),
        .O(\wait_time_cnt[4]_i_3__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_4__0 
       (.I0(wait_time_cnt_reg[5]),
        .O(\wait_time_cnt[4]_i_4__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_5__0 
       (.I0(wait_time_cnt_reg[4]),
        .O(\wait_time_cnt[4]_i_5__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_2__0 
       (.I0(wait_time_cnt_reg[11]),
        .O(\wait_time_cnt[8]_i_2__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_3__0 
       (.I0(wait_time_cnt_reg[10]),
        .O(\wait_time_cnt[8]_i_3__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_4__0 
       (.I0(wait_time_cnt_reg[9]),
        .O(\wait_time_cnt[8]_i_4__0_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_5__0 
       (.I0(wait_time_cnt_reg[8]),
        .O(\wait_time_cnt[8]_i_5__0_n_0 ));
  FDRE \wait_time_cnt_reg[0] 
       (.C(independent_clock_bufg),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[0]_i_3__0_n_7 ),
        .Q(wait_time_cnt_reg[0]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  CARRY4 \wait_time_cnt_reg[0]_i_3__0 
       (.CI(1'b0),
        .CO({\wait_time_cnt_reg[0]_i_3__0_n_0 ,\wait_time_cnt_reg[0]_i_3__0_n_1 ,\wait_time_cnt_reg[0]_i_3__0_n_2 ,\wait_time_cnt_reg[0]_i_3__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[0]_i_3__0_n_4 ,\wait_time_cnt_reg[0]_i_3__0_n_5 ,\wait_time_cnt_reg[0]_i_3__0_n_6 ,\wait_time_cnt_reg[0]_i_3__0_n_7 }),
        .S({\wait_time_cnt[0]_i_8__0_n_0 ,\wait_time_cnt[0]_i_9__0_n_0 ,\wait_time_cnt[0]_i_10__0_n_0 ,\wait_time_cnt[0]_i_11__0_n_0 }));
  FDSE \wait_time_cnt_reg[10] 
       (.C(independent_clock_bufg),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[8]_i_1__0_n_5 ),
        .Q(wait_time_cnt_reg[10]),
        .S(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[11] 
       (.C(independent_clock_bufg),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[8]_i_1__0_n_4 ),
        .Q(wait_time_cnt_reg[11]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[12] 
       (.C(independent_clock_bufg),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[12]_i_1__0_n_7 ),
        .Q(wait_time_cnt_reg[12]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  CARRY4 \wait_time_cnt_reg[12]_i_1__0 
       (.CI(\wait_time_cnt_reg[8]_i_1__0_n_0 ),
        .CO({\NLW_wait_time_cnt_reg[12]_i_1__0_CO_UNCONNECTED [3],\wait_time_cnt_reg[12]_i_1__0_n_1 ,\wait_time_cnt_reg[12]_i_1__0_n_2 ,\wait_time_cnt_reg[12]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[12]_i_1__0_n_4 ,\wait_time_cnt_reg[12]_i_1__0_n_5 ,\wait_time_cnt_reg[12]_i_1__0_n_6 ,\wait_time_cnt_reg[12]_i_1__0_n_7 }),
        .S({\wait_time_cnt[12]_i_2__0_n_0 ,\wait_time_cnt[12]_i_3__0_n_0 ,\wait_time_cnt[12]_i_4__0_n_0 ,\wait_time_cnt[12]_i_5__0_n_0 }));
  FDRE \wait_time_cnt_reg[13] 
       (.C(independent_clock_bufg),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[12]_i_1__0_n_6 ),
        .Q(wait_time_cnt_reg[13]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[14] 
       (.C(independent_clock_bufg),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[12]_i_1__0_n_5 ),
        .Q(wait_time_cnt_reg[14]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[15] 
       (.C(independent_clock_bufg),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[12]_i_1__0_n_4 ),
        .Q(wait_time_cnt_reg[15]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[1] 
       (.C(independent_clock_bufg),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[0]_i_3__0_n_6 ),
        .Q(wait_time_cnt_reg[1]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[2] 
       (.C(independent_clock_bufg),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[0]_i_3__0_n_5 ),
        .Q(wait_time_cnt_reg[2]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDRE \wait_time_cnt_reg[3] 
       (.C(independent_clock_bufg),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[0]_i_3__0_n_4 ),
        .Q(wait_time_cnt_reg[3]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDSE \wait_time_cnt_reg[4] 
       (.C(independent_clock_bufg),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[4]_i_1__0_n_7 ),
        .Q(wait_time_cnt_reg[4]),
        .S(\wait_time_cnt[0]_i_1_n_0 ));
  CARRY4 \wait_time_cnt_reg[4]_i_1__0 
       (.CI(\wait_time_cnt_reg[0]_i_3__0_n_0 ),
        .CO({\wait_time_cnt_reg[4]_i_1__0_n_0 ,\wait_time_cnt_reg[4]_i_1__0_n_1 ,\wait_time_cnt_reg[4]_i_1__0_n_2 ,\wait_time_cnt_reg[4]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[4]_i_1__0_n_4 ,\wait_time_cnt_reg[4]_i_1__0_n_5 ,\wait_time_cnt_reg[4]_i_1__0_n_6 ,\wait_time_cnt_reg[4]_i_1__0_n_7 }),
        .S({\wait_time_cnt[4]_i_2__0_n_0 ,\wait_time_cnt[4]_i_3__0_n_0 ,\wait_time_cnt[4]_i_4__0_n_0 ,\wait_time_cnt[4]_i_5__0_n_0 }));
  FDRE \wait_time_cnt_reg[5] 
       (.C(independent_clock_bufg),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[4]_i_1__0_n_6 ),
        .Q(wait_time_cnt_reg[5]),
        .R(\wait_time_cnt[0]_i_1_n_0 ));
  FDSE \wait_time_cnt_reg[6] 
       (.C(independent_clock_bufg),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[4]_i_1__0_n_5 ),
        .Q(wait_time_cnt_reg[6]),
        .S(\wait_time_cnt[0]_i_1_n_0 ));
  FDSE \wait_time_cnt_reg[7] 
       (.C(independent_clock_bufg),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[4]_i_1__0_n_4 ),
        .Q(wait_time_cnt_reg[7]),
        .S(\wait_time_cnt[0]_i_1_n_0 ));
  FDSE \wait_time_cnt_reg[8] 
       (.C(independent_clock_bufg),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[8]_i_1__0_n_7 ),
        .Q(wait_time_cnt_reg[8]),
        .S(\wait_time_cnt[0]_i_1_n_0 ));
  CARRY4 \wait_time_cnt_reg[8]_i_1__0 
       (.CI(\wait_time_cnt_reg[4]_i_1__0_n_0 ),
        .CO({\wait_time_cnt_reg[8]_i_1__0_n_0 ,\wait_time_cnt_reg[8]_i_1__0_n_1 ,\wait_time_cnt_reg[8]_i_1__0_n_2 ,\wait_time_cnt_reg[8]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[8]_i_1__0_n_4 ,\wait_time_cnt_reg[8]_i_1__0_n_5 ,\wait_time_cnt_reg[8]_i_1__0_n_6 ,\wait_time_cnt_reg[8]_i_1__0_n_7 }),
        .S({\wait_time_cnt[8]_i_2__0_n_0 ,\wait_time_cnt[8]_i_3__0_n_0 ,\wait_time_cnt[8]_i_4__0_n_0 ,\wait_time_cnt[8]_i_5__0_n_0 }));
  FDSE \wait_time_cnt_reg[9] 
       (.C(independent_clock_bufg),
        .CE(\wait_time_cnt[0]_i_2__0_n_0 ),
        .D(\wait_time_cnt_reg[8]_i_1__0_n_6 ),
        .Q(wait_time_cnt_reg[9]),
        .S(\wait_time_cnt[0]_i_1_n_0 ));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_GTWIZARD_TX_STARTUP_FSM" *) 
module qsgmii_1218_qsgmii_1218_GTWIZARD_TX_STARTUP_FSM
   (gt0_cpllreset_i,
    data_in,
    gt0_txuserrdy_i,
    gt0_gttxreset_i,
    resetdone,
    independent_clock_bufg,
    userclk,
    pma_reset,
    gt0_gttxreset_in,
    mgt_tx_reset,
    rx_fsm_reset_done_int_reg,
    \cpllpd_wait_reg[95] ,
    gt0_cplllock_out);
  output gt0_cpllreset_i;
  output data_in;
  output gt0_txuserrdy_i;
  output gt0_gttxreset_i;
  output resetdone;
  input independent_clock_bufg;
  input userclk;
  input pma_reset;
  input gt0_gttxreset_in;
  input mgt_tx_reset;
  input rx_fsm_reset_done_int_reg;
  input \cpllpd_wait_reg[95] ;
  input gt0_cplllock_out;

  wire CPLL_RESET_i_1_n_0;
  wire \FSM_sequential_tx_state[0]_i_1_n_0 ;
  wire \FSM_sequential_tx_state[0]_i_2_n_0 ;
  wire \FSM_sequential_tx_state[0]_i_3_n_0 ;
  wire \FSM_sequential_tx_state[1]_i_1_n_0 ;
  wire \FSM_sequential_tx_state[2]_i_1_n_0 ;
  wire \FSM_sequential_tx_state[2]_i_2_n_0 ;
  wire \FSM_sequential_tx_state[3]_i_2_n_0 ;
  wire \FSM_sequential_tx_state[3]_i_4_n_0 ;
  wire \FSM_sequential_tx_state[3]_i_5_n_0 ;
  wire \FSM_sequential_tx_state[3]_i_7_n_0 ;
  wire TXUSERRDY_i_1_n_0;
  wire clear;
  wire \cpllpd_wait_reg[95] ;
  wire data_in;
  wire gt0_cplllock_out;
  wire gt0_cpllreset_i;
  wire gt0_gttxreset_i;
  wire gt0_gttxreset_in;
  wire gt0_gttxreset_t;
  wire gt0_txuserrdy_i;
  wire gttxreset_i_i_1_n_0;
  wire independent_clock_bufg;
  wire init_wait_count;
  wire \init_wait_count[0]_i_1_n_0 ;
  wire \init_wait_count[7]_i_3_n_0 ;
  wire \init_wait_count[7]_i_4_n_0 ;
  wire [7:0]init_wait_count_reg__0;
  wire init_wait_done_i_1_n_0;
  wire init_wait_done_reg_n_0;
  wire mgt_tx_reset;
  wire \mmcm_lock_count[7]_i_2_n_0 ;
  wire \mmcm_lock_count[7]_i_4_n_0 ;
  wire [7:0]mmcm_lock_count_reg__0;
  wire mmcm_lock_reclocked;
  wire [7:1]p_0_in__1;
  wire [7:0]p_0_in__2;
  wire pll_reset_asserted_i_1_n_0;
  wire pll_reset_asserted_reg_n_0;
  wire pma_reset;
  wire reset_time_out;
  wire reset_time_out_i_3_n_0;
  wire resetdone;
  wire run_phase_alignment_int_i_1_n_0;
  wire run_phase_alignment_int_reg_n_0;
  wire run_phase_alignment_int_s2;
  wire run_phase_alignment_int_s3;
  wire rx_fsm_reset_done_int_reg;
  wire sel;
  wire sync_cplllock_n_0;
  wire sync_cplllock_n_1;
  wire sync_mmcm_lock_reclocked_n_0;
  wire sync_mmcm_lock_reclocked_n_1;
  wire time_out_2ms;
  wire time_out_2ms_i_1__0_n_0;
  wire time_out_2ms_reg_n_0;
  wire time_out_500us_i_1_n_0;
  wire time_out_500us_i_2_n_0;
  wire time_out_500us_i_3_n_0;
  wire time_out_500us_reg_n_0;
  wire time_out_counter;
  wire \time_out_counter[0]_i_4_n_0 ;
  wire \time_out_counter[0]_i_5_n_0 ;
  wire \time_out_counter[0]_i_6_n_0 ;
  wire \time_out_counter[0]_i_7__0_n_0 ;
  wire \time_out_counter[0]_i_8__0_n_0 ;
  wire [18:0]time_out_counter_reg;
  wire \time_out_counter_reg[0]_i_2_n_0 ;
  wire \time_out_counter_reg[0]_i_2_n_1 ;
  wire \time_out_counter_reg[0]_i_2_n_2 ;
  wire \time_out_counter_reg[0]_i_2_n_3 ;
  wire \time_out_counter_reg[0]_i_2_n_4 ;
  wire \time_out_counter_reg[0]_i_2_n_5 ;
  wire \time_out_counter_reg[0]_i_2_n_6 ;
  wire \time_out_counter_reg[0]_i_2_n_7 ;
  wire \time_out_counter_reg[12]_i_1_n_0 ;
  wire \time_out_counter_reg[12]_i_1_n_1 ;
  wire \time_out_counter_reg[12]_i_1_n_2 ;
  wire \time_out_counter_reg[12]_i_1_n_3 ;
  wire \time_out_counter_reg[12]_i_1_n_4 ;
  wire \time_out_counter_reg[12]_i_1_n_5 ;
  wire \time_out_counter_reg[12]_i_1_n_6 ;
  wire \time_out_counter_reg[12]_i_1_n_7 ;
  wire \time_out_counter_reg[16]_i_1_n_2 ;
  wire \time_out_counter_reg[16]_i_1_n_3 ;
  wire \time_out_counter_reg[16]_i_1_n_5 ;
  wire \time_out_counter_reg[16]_i_1_n_6 ;
  wire \time_out_counter_reg[16]_i_1_n_7 ;
  wire \time_out_counter_reg[4]_i_1_n_0 ;
  wire \time_out_counter_reg[4]_i_1_n_1 ;
  wire \time_out_counter_reg[4]_i_1_n_2 ;
  wire \time_out_counter_reg[4]_i_1_n_3 ;
  wire \time_out_counter_reg[4]_i_1_n_4 ;
  wire \time_out_counter_reg[4]_i_1_n_5 ;
  wire \time_out_counter_reg[4]_i_1_n_6 ;
  wire \time_out_counter_reg[4]_i_1_n_7 ;
  wire \time_out_counter_reg[8]_i_1_n_0 ;
  wire \time_out_counter_reg[8]_i_1_n_1 ;
  wire \time_out_counter_reg[8]_i_1_n_2 ;
  wire \time_out_counter_reg[8]_i_1_n_3 ;
  wire \time_out_counter_reg[8]_i_1_n_4 ;
  wire \time_out_counter_reg[8]_i_1_n_5 ;
  wire \time_out_counter_reg[8]_i_1_n_6 ;
  wire \time_out_counter_reg[8]_i_1_n_7 ;
  wire time_out_wait_bypass_i_1_n_0;
  wire time_out_wait_bypass_reg_n_0;
  wire time_out_wait_bypass_s2;
  wire time_out_wait_bypass_s3;
  wire time_tlock_max_i_1__0_n_0;
  wire time_tlock_max_i_2__0_n_0;
  wire time_tlock_max_i_3__0_n_0;
  wire time_tlock_max_i_4__0_n_0;
  wire time_tlock_max_i_5__0_n_0;
  wire time_tlock_max_reg_n_0;
  wire tx_fsm_reset_done_int_i_1_n_0;
  wire tx_fsm_reset_done_int_s2;
  wire tx_fsm_reset_done_int_s3;
  (* RTL_KEEP = "yes" *) wire [3:0]tx_state;
  wire txresetdone_s2;
  wire txresetdone_s3;
  wire userclk;
  wire \wait_bypass_count[0]_i_2_n_0 ;
  wire \wait_bypass_count[0]_i_4_n_0 ;
  wire \wait_bypass_count[0]_i_5_n_0 ;
  wire \wait_bypass_count[0]_i_6_n_0 ;
  wire \wait_bypass_count[0]_i_7_n_0 ;
  wire \wait_bypass_count[0]_i_8_n_0 ;
  wire \wait_bypass_count[0]_i_9_n_0 ;
  wire [16:0]wait_bypass_count_reg;
  wire \wait_bypass_count_reg[0]_i_3_n_0 ;
  wire \wait_bypass_count_reg[0]_i_3_n_1 ;
  wire \wait_bypass_count_reg[0]_i_3_n_2 ;
  wire \wait_bypass_count_reg[0]_i_3_n_3 ;
  wire \wait_bypass_count_reg[0]_i_3_n_4 ;
  wire \wait_bypass_count_reg[0]_i_3_n_5 ;
  wire \wait_bypass_count_reg[0]_i_3_n_6 ;
  wire \wait_bypass_count_reg[0]_i_3_n_7 ;
  wire \wait_bypass_count_reg[12]_i_1_n_0 ;
  wire \wait_bypass_count_reg[12]_i_1_n_1 ;
  wire \wait_bypass_count_reg[12]_i_1_n_2 ;
  wire \wait_bypass_count_reg[12]_i_1_n_3 ;
  wire \wait_bypass_count_reg[12]_i_1_n_4 ;
  wire \wait_bypass_count_reg[12]_i_1_n_5 ;
  wire \wait_bypass_count_reg[12]_i_1_n_6 ;
  wire \wait_bypass_count_reg[12]_i_1_n_7 ;
  wire \wait_bypass_count_reg[16]_i_1_n_7 ;
  wire \wait_bypass_count_reg[4]_i_1_n_0 ;
  wire \wait_bypass_count_reg[4]_i_1_n_1 ;
  wire \wait_bypass_count_reg[4]_i_1_n_2 ;
  wire \wait_bypass_count_reg[4]_i_1_n_3 ;
  wire \wait_bypass_count_reg[4]_i_1_n_4 ;
  wire \wait_bypass_count_reg[4]_i_1_n_5 ;
  wire \wait_bypass_count_reg[4]_i_1_n_6 ;
  wire \wait_bypass_count_reg[4]_i_1_n_7 ;
  wire \wait_bypass_count_reg[8]_i_1_n_0 ;
  wire \wait_bypass_count_reg[8]_i_1_n_1 ;
  wire \wait_bypass_count_reg[8]_i_1_n_2 ;
  wire \wait_bypass_count_reg[8]_i_1_n_3 ;
  wire \wait_bypass_count_reg[8]_i_1_n_4 ;
  wire \wait_bypass_count_reg[8]_i_1_n_5 ;
  wire \wait_bypass_count_reg[8]_i_1_n_6 ;
  wire \wait_bypass_count_reg[8]_i_1_n_7 ;
  wire \wait_time_cnt[0]_i_10_n_0 ;
  wire \wait_time_cnt[0]_i_11_n_0 ;
  wire \wait_time_cnt[0]_i_1__0_n_0 ;
  wire \wait_time_cnt[0]_i_4_n_0 ;
  wire \wait_time_cnt[0]_i_5_n_0 ;
  wire \wait_time_cnt[0]_i_6_n_0 ;
  wire \wait_time_cnt[0]_i_7_n_0 ;
  wire \wait_time_cnt[0]_i_8_n_0 ;
  wire \wait_time_cnt[0]_i_9_n_0 ;
  wire \wait_time_cnt[12]_i_2_n_0 ;
  wire \wait_time_cnt[12]_i_3_n_0 ;
  wire \wait_time_cnt[12]_i_4_n_0 ;
  wire \wait_time_cnt[12]_i_5_n_0 ;
  wire \wait_time_cnt[4]_i_2_n_0 ;
  wire \wait_time_cnt[4]_i_3_n_0 ;
  wire \wait_time_cnt[4]_i_4_n_0 ;
  wire \wait_time_cnt[4]_i_5_n_0 ;
  wire \wait_time_cnt[8]_i_2_n_0 ;
  wire \wait_time_cnt[8]_i_3_n_0 ;
  wire \wait_time_cnt[8]_i_4_n_0 ;
  wire \wait_time_cnt[8]_i_5_n_0 ;
  wire [15:0]wait_time_cnt_reg;
  wire \wait_time_cnt_reg[0]_i_3_n_0 ;
  wire \wait_time_cnt_reg[0]_i_3_n_1 ;
  wire \wait_time_cnt_reg[0]_i_3_n_2 ;
  wire \wait_time_cnt_reg[0]_i_3_n_3 ;
  wire \wait_time_cnt_reg[0]_i_3_n_4 ;
  wire \wait_time_cnt_reg[0]_i_3_n_5 ;
  wire \wait_time_cnt_reg[0]_i_3_n_6 ;
  wire \wait_time_cnt_reg[0]_i_3_n_7 ;
  wire \wait_time_cnt_reg[12]_i_1_n_1 ;
  wire \wait_time_cnt_reg[12]_i_1_n_2 ;
  wire \wait_time_cnt_reg[12]_i_1_n_3 ;
  wire \wait_time_cnt_reg[12]_i_1_n_4 ;
  wire \wait_time_cnt_reg[12]_i_1_n_5 ;
  wire \wait_time_cnt_reg[12]_i_1_n_6 ;
  wire \wait_time_cnt_reg[12]_i_1_n_7 ;
  wire \wait_time_cnt_reg[4]_i_1_n_0 ;
  wire \wait_time_cnt_reg[4]_i_1_n_1 ;
  wire \wait_time_cnt_reg[4]_i_1_n_2 ;
  wire \wait_time_cnt_reg[4]_i_1_n_3 ;
  wire \wait_time_cnt_reg[4]_i_1_n_4 ;
  wire \wait_time_cnt_reg[4]_i_1_n_5 ;
  wire \wait_time_cnt_reg[4]_i_1_n_6 ;
  wire \wait_time_cnt_reg[4]_i_1_n_7 ;
  wire \wait_time_cnt_reg[8]_i_1_n_0 ;
  wire \wait_time_cnt_reg[8]_i_1_n_1 ;
  wire \wait_time_cnt_reg[8]_i_1_n_2 ;
  wire \wait_time_cnt_reg[8]_i_1_n_3 ;
  wire \wait_time_cnt_reg[8]_i_1_n_4 ;
  wire \wait_time_cnt_reg[8]_i_1_n_5 ;
  wire \wait_time_cnt_reg[8]_i_1_n_6 ;
  wire \wait_time_cnt_reg[8]_i_1_n_7 ;
  wire [3:2]\NLW_time_out_counter_reg[16]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_time_out_counter_reg[16]_i_1_O_UNCONNECTED ;
  wire [3:0]\NLW_wait_bypass_count_reg[16]_i_1_CO_UNCONNECTED ;
  wire [3:1]\NLW_wait_bypass_count_reg[16]_i_1_O_UNCONNECTED ;
  wire [3:3]\NLW_wait_time_cnt_reg[12]_i_1_CO_UNCONNECTED ;

  LUT6 #(
    .INIT(64'hFFFFFFDF00000010)) 
    CPLL_RESET_i_1
       (.I0(pll_reset_asserted_reg_n_0),
        .I1(tx_state[3]),
        .I2(tx_state[0]),
        .I3(tx_state[2]),
        .I4(tx_state[1]),
        .I5(gt0_cpllreset_i),
        .O(CPLL_RESET_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    CPLL_RESET_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(CPLL_RESET_i_1_n_0),
        .Q(gt0_cpllreset_i),
        .R(pma_reset));
  LUT6 #(
    .INIT(64'h4505450545004505)) 
    \FSM_sequential_tx_state[0]_i_1 
       (.I0(\FSM_sequential_tx_state[3]_i_5_n_0 ),
        .I1(time_out_2ms_reg_n_0),
        .I2(\FSM_sequential_tx_state[0]_i_2_n_0 ),
        .I3(tx_state[1]),
        .I4(tx_state[0]),
        .I5(\FSM_sequential_tx_state[0]_i_3_n_0 ),
        .O(\FSM_sequential_tx_state[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h02)) 
    \FSM_sequential_tx_state[0]_i_2 
       (.I0(tx_state[0]),
        .I1(tx_state[3]),
        .I2(tx_state[2]),
        .O(\FSM_sequential_tx_state[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF04FF)) 
    \FSM_sequential_tx_state[0]_i_3 
       (.I0(mmcm_lock_reclocked),
        .I1(time_tlock_max_reg_n_0),
        .I2(reset_time_out),
        .I3(tx_state[2]),
        .I4(tx_state[3]),
        .O(\FSM_sequential_tx_state[0]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h00070F00)) 
    \FSM_sequential_tx_state[1]_i_1 
       (.I0(\FSM_sequential_tx_state[2]_i_2_n_0 ),
        .I1(tx_state[2]),
        .I2(tx_state[3]),
        .I3(tx_state[1]),
        .I4(tx_state[0]),
        .O(\FSM_sequential_tx_state[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000C003C004C004C)) 
    \FSM_sequential_tx_state[2]_i_1 
       (.I0(\FSM_sequential_tx_state[2]_i_2_n_0 ),
        .I1(tx_state[2]),
        .I2(tx_state[0]),
        .I3(tx_state[3]),
        .I4(time_out_2ms_reg_n_0),
        .I5(tx_state[1]),
        .O(\FSM_sequential_tx_state[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair406" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \FSM_sequential_tx_state[2]_i_2 
       (.I0(reset_time_out),
        .I1(time_tlock_max_reg_n_0),
        .I2(mmcm_lock_reclocked),
        .O(\FSM_sequential_tx_state[2]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'hF4)) 
    \FSM_sequential_tx_state[3]_i_2 
       (.I0(time_out_wait_bypass_s3),
        .I1(tx_state[3]),
        .I2(\FSM_sequential_tx_state[3]_i_5_n_0 ),
        .O(\FSM_sequential_tx_state[3]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'h1)) 
    \FSM_sequential_tx_state[3]_i_4 
       (.I0(tx_state[1]),
        .I1(tx_state[2]),
        .O(\FSM_sequential_tx_state[3]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h00000000D0000000)) 
    \FSM_sequential_tx_state[3]_i_5 
       (.I0(time_out_500us_reg_n_0),
        .I1(reset_time_out),
        .I2(tx_state[0]),
        .I3(tx_state[1]),
        .I4(tx_state[2]),
        .I5(tx_state[3]),
        .O(\FSM_sequential_tx_state[3]_i_5_n_0 ));
  LUT5 #(
    .INIT(32'h40004040)) 
    \FSM_sequential_tx_state[3]_i_7 
       (.I0(txresetdone_s3),
        .I1(tx_state[1]),
        .I2(tx_state[2]),
        .I3(reset_time_out),
        .I4(time_out_500us_reg_n_0),
        .O(\FSM_sequential_tx_state[3]_i_7_n_0 ));
  (* FSM_ENCODED_STATES = "WAIT_FOR_TXOUTCLK:0100,RELEASE_PLL_RESET:0011,WAIT_FOR_PLL_LOCK:0010,ASSERT_ALL_RESETS:0001,INIT:0000,WAIT_RESET_DONE:0111,RESET_FSM_DONE:1001,WAIT_FOR_TXUSRCLK:0110,DO_PHASE_ALIGNMENT:1000,RELEASE_MMCM_RESET:0101" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_tx_state_reg[0] 
       (.C(independent_clock_bufg),
        .CE(sync_cplllock_n_1),
        .D(\FSM_sequential_tx_state[0]_i_1_n_0 ),
        .Q(tx_state[0]),
        .R(pma_reset));
  (* FSM_ENCODED_STATES = "WAIT_FOR_TXOUTCLK:0100,RELEASE_PLL_RESET:0011,WAIT_FOR_PLL_LOCK:0010,ASSERT_ALL_RESETS:0001,INIT:0000,WAIT_RESET_DONE:0111,RESET_FSM_DONE:1001,WAIT_FOR_TXUSRCLK:0110,DO_PHASE_ALIGNMENT:1000,RELEASE_MMCM_RESET:0101" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_tx_state_reg[1] 
       (.C(independent_clock_bufg),
        .CE(sync_cplllock_n_1),
        .D(\FSM_sequential_tx_state[1]_i_1_n_0 ),
        .Q(tx_state[1]),
        .R(pma_reset));
  (* FSM_ENCODED_STATES = "WAIT_FOR_TXOUTCLK:0100,RELEASE_PLL_RESET:0011,WAIT_FOR_PLL_LOCK:0010,ASSERT_ALL_RESETS:0001,INIT:0000,WAIT_RESET_DONE:0111,RESET_FSM_DONE:1001,WAIT_FOR_TXUSRCLK:0110,DO_PHASE_ALIGNMENT:1000,RELEASE_MMCM_RESET:0101" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_tx_state_reg[2] 
       (.C(independent_clock_bufg),
        .CE(sync_cplllock_n_1),
        .D(\FSM_sequential_tx_state[2]_i_1_n_0 ),
        .Q(tx_state[2]),
        .R(pma_reset));
  (* FSM_ENCODED_STATES = "WAIT_FOR_TXOUTCLK:0100,RELEASE_PLL_RESET:0011,WAIT_FOR_PLL_LOCK:0010,ASSERT_ALL_RESETS:0001,INIT:0000,WAIT_RESET_DONE:0111,RESET_FSM_DONE:1001,WAIT_FOR_TXUSRCLK:0110,DO_PHASE_ALIGNMENT:1000,RELEASE_MMCM_RESET:0101" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_sequential_tx_state_reg[3] 
       (.C(independent_clock_bufg),
        .CE(sync_cplllock_n_1),
        .D(\FSM_sequential_tx_state[3]_i_2_n_0 ),
        .Q(tx_state[3]),
        .R(pma_reset));
  LUT5 #(
    .INIT(32'hFFFD2000)) 
    TXUSERRDY_i_1
       (.I0(tx_state[0]),
        .I1(tx_state[3]),
        .I2(tx_state[1]),
        .I3(tx_state[2]),
        .I4(gt0_txuserrdy_i),
        .O(TXUSERRDY_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    TXUSERRDY_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(TXUSERRDY_i_1_n_0),
        .Q(gt0_txuserrdy_i),
        .R(pma_reset));
  LUT5 #(
    .INIT(32'hFEFF0010)) 
    gttxreset_i_i_1
       (.I0(tx_state[3]),
        .I1(tx_state[1]),
        .I2(tx_state[0]),
        .I3(tx_state[2]),
        .I4(gt0_gttxreset_t),
        .O(gttxreset_i_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    gttxreset_i_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gttxreset_i_i_1_n_0),
        .Q(gt0_gttxreset_t),
        .R(pma_reset));
  (* SOFT_HLUTNM = "soft_lutpair411" *) 
  LUT4 #(
    .INIT(16'hFEEE)) 
    gtxe2_i_i_3
       (.I0(gt0_gttxreset_t),
        .I1(gt0_gttxreset_in),
        .I2(mgt_tx_reset),
        .I3(data_in),
        .O(gt0_gttxreset_i));
  LUT1 #(
    .INIT(2'h1)) 
    \init_wait_count[0]_i_1 
       (.I0(init_wait_count_reg__0[0]),
        .O(\init_wait_count[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair412" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \init_wait_count[1]_i_1 
       (.I0(init_wait_count_reg__0[1]),
        .I1(init_wait_count_reg__0[0]),
        .O(p_0_in__1[1]));
  (* SOFT_HLUTNM = "soft_lutpair412" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \init_wait_count[2]_i_1 
       (.I0(init_wait_count_reg__0[2]),
        .I1(init_wait_count_reg__0[0]),
        .I2(init_wait_count_reg__0[1]),
        .O(p_0_in__1[2]));
  (* SOFT_HLUTNM = "soft_lutpair409" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \init_wait_count[3]_i_1 
       (.I0(init_wait_count_reg__0[0]),
        .I1(init_wait_count_reg__0[1]),
        .I2(init_wait_count_reg__0[2]),
        .I3(init_wait_count_reg__0[3]),
        .O(p_0_in__1[3]));
  (* SOFT_HLUTNM = "soft_lutpair405" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \init_wait_count[4]_i_1 
       (.I0(init_wait_count_reg__0[4]),
        .I1(init_wait_count_reg__0[0]),
        .I2(init_wait_count_reg__0[1]),
        .I3(init_wait_count_reg__0[2]),
        .I4(init_wait_count_reg__0[3]),
        .O(p_0_in__1[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \init_wait_count[5]_i_1 
       (.I0(init_wait_count_reg__0[5]),
        .I1(init_wait_count_reg__0[3]),
        .I2(init_wait_count_reg__0[2]),
        .I3(init_wait_count_reg__0[1]),
        .I4(init_wait_count_reg__0[0]),
        .I5(init_wait_count_reg__0[4]),
        .O(p_0_in__1[5]));
  (* SOFT_HLUTNM = "soft_lutpair403" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \init_wait_count[6]_i_1 
       (.I0(init_wait_count_reg__0[6]),
        .I1(init_wait_count_reg__0[4]),
        .I2(\init_wait_count[7]_i_4_n_0 ),
        .I3(init_wait_count_reg__0[5]),
        .O(p_0_in__1[6]));
  LUT5 #(
    .INIT(32'hFFDFFFFF)) 
    \init_wait_count[7]_i_1 
       (.I0(\init_wait_count[7]_i_3_n_0 ),
        .I1(init_wait_count_reg__0[7]),
        .I2(init_wait_count_reg__0[6]),
        .I3(init_wait_count_reg__0[4]),
        .I4(init_wait_count_reg__0[5]),
        .O(init_wait_count));
  (* SOFT_HLUTNM = "soft_lutpair403" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \init_wait_count[7]_i_2 
       (.I0(init_wait_count_reg__0[7]),
        .I1(init_wait_count_reg__0[5]),
        .I2(\init_wait_count[7]_i_4_n_0 ),
        .I3(init_wait_count_reg__0[4]),
        .I4(init_wait_count_reg__0[6]),
        .O(p_0_in__1[7]));
  (* SOFT_HLUTNM = "soft_lutpair405" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \init_wait_count[7]_i_3 
       (.I0(init_wait_count_reg__0[0]),
        .I1(init_wait_count_reg__0[1]),
        .I2(init_wait_count_reg__0[3]),
        .I3(init_wait_count_reg__0[2]),
        .O(\init_wait_count[7]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair409" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \init_wait_count[7]_i_4 
       (.I0(init_wait_count_reg__0[3]),
        .I1(init_wait_count_reg__0[2]),
        .I2(init_wait_count_reg__0[1]),
        .I3(init_wait_count_reg__0[0]),
        .O(\init_wait_count[7]_i_4_n_0 ));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[0] 
       (.C(independent_clock_bufg),
        .CE(init_wait_count),
        .CLR(pma_reset),
        .D(\init_wait_count[0]_i_1_n_0 ),
        .Q(init_wait_count_reg__0[0]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[1] 
       (.C(independent_clock_bufg),
        .CE(init_wait_count),
        .CLR(pma_reset),
        .D(p_0_in__1[1]),
        .Q(init_wait_count_reg__0[1]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[2] 
       (.C(independent_clock_bufg),
        .CE(init_wait_count),
        .CLR(pma_reset),
        .D(p_0_in__1[2]),
        .Q(init_wait_count_reg__0[2]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[3] 
       (.C(independent_clock_bufg),
        .CE(init_wait_count),
        .CLR(pma_reset),
        .D(p_0_in__1[3]),
        .Q(init_wait_count_reg__0[3]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[4] 
       (.C(independent_clock_bufg),
        .CE(init_wait_count),
        .CLR(pma_reset),
        .D(p_0_in__1[4]),
        .Q(init_wait_count_reg__0[4]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[5] 
       (.C(independent_clock_bufg),
        .CE(init_wait_count),
        .CLR(pma_reset),
        .D(p_0_in__1[5]),
        .Q(init_wait_count_reg__0[5]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[6] 
       (.C(independent_clock_bufg),
        .CE(init_wait_count),
        .CLR(pma_reset),
        .D(p_0_in__1[6]),
        .Q(init_wait_count_reg__0[6]));
  FDCE #(
    .INIT(1'b0)) 
    \init_wait_count_reg[7] 
       (.C(independent_clock_bufg),
        .CE(init_wait_count),
        .CLR(pma_reset),
        .D(p_0_in__1[7]),
        .Q(init_wait_count_reg__0[7]));
  LUT6 #(
    .INIT(64'hFFFFFFFF00200000)) 
    init_wait_done_i_1
       (.I0(\init_wait_count[7]_i_3_n_0 ),
        .I1(init_wait_count_reg__0[7]),
        .I2(init_wait_count_reg__0[6]),
        .I3(init_wait_count_reg__0[4]),
        .I4(init_wait_count_reg__0[5]),
        .I5(init_wait_done_reg_n_0),
        .O(init_wait_done_i_1_n_0));
  FDCE #(
    .INIT(1'b0)) 
    init_wait_done_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .CLR(pma_reset),
        .D(init_wait_done_i_1_n_0),
        .Q(init_wait_done_reg_n_0));
  (* SOFT_HLUTNM = "soft_lutpair413" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \mmcm_lock_count[0]_i_1 
       (.I0(mmcm_lock_count_reg__0[0]),
        .O(p_0_in__2[0]));
  (* SOFT_HLUTNM = "soft_lutpair413" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \mmcm_lock_count[1]_i_1 
       (.I0(mmcm_lock_count_reg__0[0]),
        .I1(mmcm_lock_count_reg__0[1]),
        .O(p_0_in__2[1]));
  (* SOFT_HLUTNM = "soft_lutpair410" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \mmcm_lock_count[2]_i_1 
       (.I0(mmcm_lock_count_reg__0[2]),
        .I1(mmcm_lock_count_reg__0[1]),
        .I2(mmcm_lock_count_reg__0[0]),
        .O(p_0_in__2[2]));
  (* SOFT_HLUTNM = "soft_lutpair410" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \mmcm_lock_count[3]_i_1 
       (.I0(mmcm_lock_count_reg__0[3]),
        .I1(mmcm_lock_count_reg__0[2]),
        .I2(mmcm_lock_count_reg__0[0]),
        .I3(mmcm_lock_count_reg__0[1]),
        .O(p_0_in__2[3]));
  (* SOFT_HLUTNM = "soft_lutpair404" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \mmcm_lock_count[4]_i_1 
       (.I0(mmcm_lock_count_reg__0[4]),
        .I1(mmcm_lock_count_reg__0[3]),
        .I2(mmcm_lock_count_reg__0[1]),
        .I3(mmcm_lock_count_reg__0[0]),
        .I4(mmcm_lock_count_reg__0[2]),
        .O(p_0_in__2[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \mmcm_lock_count[5]_i_1 
       (.I0(mmcm_lock_count_reg__0[5]),
        .I1(mmcm_lock_count_reg__0[2]),
        .I2(mmcm_lock_count_reg__0[0]),
        .I3(mmcm_lock_count_reg__0[1]),
        .I4(mmcm_lock_count_reg__0[3]),
        .I5(mmcm_lock_count_reg__0[4]),
        .O(p_0_in__2[5]));
  (* SOFT_HLUTNM = "soft_lutpair408" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \mmcm_lock_count[6]_i_1 
       (.I0(mmcm_lock_count_reg__0[6]),
        .I1(\mmcm_lock_count[7]_i_4_n_0 ),
        .I2(mmcm_lock_count_reg__0[5]),
        .O(p_0_in__2[6]));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \mmcm_lock_count[7]_i_2 
       (.I0(mmcm_lock_count_reg__0[6]),
        .I1(\mmcm_lock_count[7]_i_4_n_0 ),
        .I2(mmcm_lock_count_reg__0[5]),
        .I3(mmcm_lock_count_reg__0[7]),
        .O(\mmcm_lock_count[7]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair408" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \mmcm_lock_count[7]_i_3 
       (.I0(mmcm_lock_count_reg__0[7]),
        .I1(mmcm_lock_count_reg__0[5]),
        .I2(\mmcm_lock_count[7]_i_4_n_0 ),
        .I3(mmcm_lock_count_reg__0[6]),
        .O(p_0_in__2[7]));
  (* SOFT_HLUTNM = "soft_lutpair404" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \mmcm_lock_count[7]_i_4 
       (.I0(mmcm_lock_count_reg__0[4]),
        .I1(mmcm_lock_count_reg__0[3]),
        .I2(mmcm_lock_count_reg__0[1]),
        .I3(mmcm_lock_count_reg__0[0]),
        .I4(mmcm_lock_count_reg__0[2]),
        .O(\mmcm_lock_count[7]_i_4_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[0] 
       (.C(independent_clock_bufg),
        .CE(\mmcm_lock_count[7]_i_2_n_0 ),
        .D(p_0_in__2[0]),
        .Q(mmcm_lock_count_reg__0[0]),
        .R(sync_mmcm_lock_reclocked_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[1] 
       (.C(independent_clock_bufg),
        .CE(\mmcm_lock_count[7]_i_2_n_0 ),
        .D(p_0_in__2[1]),
        .Q(mmcm_lock_count_reg__0[1]),
        .R(sync_mmcm_lock_reclocked_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[2] 
       (.C(independent_clock_bufg),
        .CE(\mmcm_lock_count[7]_i_2_n_0 ),
        .D(p_0_in__2[2]),
        .Q(mmcm_lock_count_reg__0[2]),
        .R(sync_mmcm_lock_reclocked_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[3] 
       (.C(independent_clock_bufg),
        .CE(\mmcm_lock_count[7]_i_2_n_0 ),
        .D(p_0_in__2[3]),
        .Q(mmcm_lock_count_reg__0[3]),
        .R(sync_mmcm_lock_reclocked_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[4] 
       (.C(independent_clock_bufg),
        .CE(\mmcm_lock_count[7]_i_2_n_0 ),
        .D(p_0_in__2[4]),
        .Q(mmcm_lock_count_reg__0[4]),
        .R(sync_mmcm_lock_reclocked_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[5] 
       (.C(independent_clock_bufg),
        .CE(\mmcm_lock_count[7]_i_2_n_0 ),
        .D(p_0_in__2[5]),
        .Q(mmcm_lock_count_reg__0[5]),
        .R(sync_mmcm_lock_reclocked_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[6] 
       (.C(independent_clock_bufg),
        .CE(\mmcm_lock_count[7]_i_2_n_0 ),
        .D(p_0_in__2[6]),
        .Q(mmcm_lock_count_reg__0[6]),
        .R(sync_mmcm_lock_reclocked_n_1));
  FDRE #(
    .INIT(1'b0)) 
    \mmcm_lock_count_reg[7] 
       (.C(independent_clock_bufg),
        .CE(\mmcm_lock_count[7]_i_2_n_0 ),
        .D(p_0_in__2[7]),
        .Q(mmcm_lock_count_reg__0[7]),
        .R(sync_mmcm_lock_reclocked_n_1));
  FDRE #(
    .INIT(1'b0)) 
    mmcm_lock_reclocked_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(sync_mmcm_lock_reclocked_n_0),
        .Q(mmcm_lock_reclocked),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hAAAAAA3A)) 
    pll_reset_asserted_i_1
       (.I0(pll_reset_asserted_reg_n_0),
        .I1(tx_state[1]),
        .I2(tx_state[0]),
        .I3(tx_state[3]),
        .I4(tx_state[2]),
        .O(pll_reset_asserted_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    pll_reset_asserted_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(pll_reset_asserted_i_1_n_0),
        .Q(pll_reset_asserted_reg_n_0),
        .R(pma_reset));
  LUT6 #(
    .INIT(64'h50505D0D00005D0D)) 
    reset_time_out_i_3
       (.I0(tx_state[3]),
        .I1(tx_state[0]),
        .I2(tx_state[2]),
        .I3(mmcm_lock_reclocked),
        .I4(tx_state[1]),
        .I5(txresetdone_s3),
        .O(reset_time_out_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    reset_time_out_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(sync_cplllock_n_0),
        .Q(reset_time_out),
        .R(pma_reset));
  (* SOFT_HLUTNM = "soft_lutpair411" *) 
  LUT2 #(
    .INIT(4'h8)) 
    resetdone_INST_0
       (.I0(data_in),
        .I1(rx_fsm_reset_done_int_reg),
        .O(resetdone));
  LUT5 #(
    .INIT(32'hFFEF0100)) 
    run_phase_alignment_int_i_1
       (.I0(tx_state[1]),
        .I1(tx_state[2]),
        .I2(tx_state[0]),
        .I3(tx_state[3]),
        .I4(run_phase_alignment_int_reg_n_0),
        .O(run_phase_alignment_int_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    run_phase_alignment_int_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(run_phase_alignment_int_i_1_n_0),
        .Q(run_phase_alignment_int_reg_n_0),
        .R(pma_reset));
  FDRE #(
    .INIT(1'b0)) 
    run_phase_alignment_int_s3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(run_phase_alignment_int_s2),
        .Q(run_phase_alignment_int_s3),
        .R(1'b0));
  qsgmii_1218_qsgmii_1218_sync_block_4 sync_TXRESETDONE
       (.\cpllpd_wait_reg[95] (\cpllpd_wait_reg[95] ),
        .data_out(txresetdone_s2),
        .independent_clock_bufg(independent_clock_bufg));
  qsgmii_1218_qsgmii_1218_sync_block_5 sync_cplllock
       (.E(sync_cplllock_n_1),
        .\FSM_sequential_tx_state_reg[1] (\FSM_sequential_tx_state[3]_i_4_n_0 ),
        .\FSM_sequential_tx_state_reg[3] (reset_time_out_i_3_n_0),
        .gt0_cplllock_out(gt0_cplllock_out),
        .independent_clock_bufg(independent_clock_bufg),
        .init_wait_done_reg(init_wait_done_reg_n_0),
        .mmcm_lock_reclocked(mmcm_lock_reclocked),
        .out(tx_state),
        .pll_reset_asserted_reg(pll_reset_asserted_reg_n_0),
        .reset_time_out(reset_time_out),
        .reset_time_out_reg(sync_cplllock_n_0),
        .sel(sel),
        .time_out_2ms_reg(time_out_2ms_reg_n_0),
        .time_tlock_max_reg(time_tlock_max_reg_n_0),
        .txresetdone_s3_reg(\FSM_sequential_tx_state[3]_i_7_n_0 ));
  qsgmii_1218_qsgmii_1218_sync_block_6 sync_mmcm_lock_reclocked
       (.Q(mmcm_lock_count_reg__0[7:5]),
        .SR(sync_mmcm_lock_reclocked_n_1),
        .independent_clock_bufg(independent_clock_bufg),
        .\mmcm_lock_count_reg[4] (\mmcm_lock_count[7]_i_4_n_0 ),
        .mmcm_lock_reclocked(mmcm_lock_reclocked),
        .mmcm_lock_reclocked_reg(sync_mmcm_lock_reclocked_n_0));
  qsgmii_1218_qsgmii_1218_sync_block_7 sync_run_phase_alignment_int
       (.data_in(run_phase_alignment_int_reg_n_0),
        .data_out(run_phase_alignment_int_s2),
        .userclk(userclk));
  qsgmii_1218_qsgmii_1218_sync_block_8 sync_time_out_wait_bypass
       (.data_in(time_out_wait_bypass_reg_n_0),
        .data_out(time_out_wait_bypass_s2),
        .independent_clock_bufg(independent_clock_bufg));
  qsgmii_1218_qsgmii_1218_sync_block_9 sync_tx_fsm_reset_done_int
       (.data_out(tx_fsm_reset_done_int_s2),
        .tx_fsm_reset_done_int_reg(data_in),
        .userclk(userclk));
  LUT3 #(
    .INIT(8'h0E)) 
    time_out_2ms_i_1__0
       (.I0(time_out_2ms_reg_n_0),
        .I1(time_out_2ms),
        .I2(reset_time_out),
        .O(time_out_2ms_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_2ms_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(time_out_2ms_i_1__0_n_0),
        .Q(time_out_2ms_reg_n_0),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h0000BAAA)) 
    time_out_500us_i_1
       (.I0(time_out_500us_reg_n_0),
        .I1(time_out_500us_i_2_n_0),
        .I2(time_out_500us_i_3_n_0),
        .I3(time_tlock_max_i_3__0_n_0),
        .I4(reset_time_out),
        .O(time_out_500us_i_1_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    time_out_500us_i_2
       (.I0(time_out_counter_reg[14]),
        .I1(time_out_counter_reg[13]),
        .I2(time_out_counter_reg[4]),
        .I3(time_out_counter_reg[0]),
        .O(time_out_500us_i_2_n_0));
  LUT6 #(
    .INIT(64'h1000000000000000)) 
    time_out_500us_i_3
       (.I0(time_out_counter_reg[11]),
        .I1(time_out_counter_reg[12]),
        .I2(time_out_counter_reg[15]),
        .I3(time_out_counter_reg[16]),
        .I4(time_out_counter_reg[5]),
        .I5(\time_out_counter[0]_i_6_n_0 ),
        .O(time_out_500us_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_500us_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(time_out_500us_i_1_n_0),
        .Q(time_out_500us_reg_n_0),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \time_out_counter[0]_i_1__0 
       (.I0(time_out_2ms),
        .O(time_out_counter));
  LUT6 #(
    .INIT(64'h0020000000000000)) 
    \time_out_counter[0]_i_3__0 
       (.I0(\time_out_counter[0]_i_5_n_0 ),
        .I1(time_out_counter_reg[5]),
        .I2(\time_out_counter[0]_i_6_n_0 ),
        .I3(time_out_500us_i_2_n_0),
        .I4(\time_out_counter[0]_i_7__0_n_0 ),
        .I5(\time_out_counter[0]_i_8__0_n_0 ),
        .O(time_out_2ms));
  LUT1 #(
    .INIT(2'h1)) 
    \time_out_counter[0]_i_4 
       (.I0(time_out_counter_reg[0]),
        .O(\time_out_counter[0]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h0001)) 
    \time_out_counter[0]_i_5 
       (.I0(time_out_counter_reg[2]),
        .I1(time_out_counter_reg[1]),
        .I2(time_out_counter_reg[8]),
        .I3(time_out_counter_reg[3]),
        .O(\time_out_counter[0]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair407" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \time_out_counter[0]_i_6 
       (.I0(time_out_counter_reg[7]),
        .I1(time_out_counter_reg[6]),
        .O(\time_out_counter[0]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'h0800)) 
    \time_out_counter[0]_i_7__0 
       (.I0(time_out_counter_reg[12]),
        .I1(time_out_counter_reg[11]),
        .I2(time_out_counter_reg[10]),
        .I3(time_out_counter_reg[9]),
        .O(\time_out_counter[0]_i_7__0_n_0 ));
  LUT4 #(
    .INIT(16'h0008)) 
    \time_out_counter[0]_i_8__0 
       (.I0(time_out_counter_reg[18]),
        .I1(time_out_counter_reg[17]),
        .I2(time_out_counter_reg[16]),
        .I3(time_out_counter_reg[15]),
        .O(\time_out_counter[0]_i_8__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[0] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2_n_7 ),
        .Q(time_out_counter_reg[0]),
        .R(reset_time_out));
  CARRY4 \time_out_counter_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\time_out_counter_reg[0]_i_2_n_0 ,\time_out_counter_reg[0]_i_2_n_1 ,\time_out_counter_reg[0]_i_2_n_2 ,\time_out_counter_reg[0]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\time_out_counter_reg[0]_i_2_n_4 ,\time_out_counter_reg[0]_i_2_n_5 ,\time_out_counter_reg[0]_i_2_n_6 ,\time_out_counter_reg[0]_i_2_n_7 }),
        .S({time_out_counter_reg[3:1],\time_out_counter[0]_i_4_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[10] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1_n_5 ),
        .Q(time_out_counter_reg[10]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[11] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1_n_4 ),
        .Q(time_out_counter_reg[11]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[12] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1_n_7 ),
        .Q(time_out_counter_reg[12]),
        .R(reset_time_out));
  CARRY4 \time_out_counter_reg[12]_i_1 
       (.CI(\time_out_counter_reg[8]_i_1_n_0 ),
        .CO({\time_out_counter_reg[12]_i_1_n_0 ,\time_out_counter_reg[12]_i_1_n_1 ,\time_out_counter_reg[12]_i_1_n_2 ,\time_out_counter_reg[12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\time_out_counter_reg[12]_i_1_n_4 ,\time_out_counter_reg[12]_i_1_n_5 ,\time_out_counter_reg[12]_i_1_n_6 ,\time_out_counter_reg[12]_i_1_n_7 }),
        .S(time_out_counter_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[13] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1_n_6 ),
        .Q(time_out_counter_reg[13]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[14] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1_n_5 ),
        .Q(time_out_counter_reg[14]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[15] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[12]_i_1_n_4 ),
        .Q(time_out_counter_reg[15]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[16] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[16]_i_1_n_7 ),
        .Q(time_out_counter_reg[16]),
        .R(reset_time_out));
  CARRY4 \time_out_counter_reg[16]_i_1 
       (.CI(\time_out_counter_reg[12]_i_1_n_0 ),
        .CO({\NLW_time_out_counter_reg[16]_i_1_CO_UNCONNECTED [3:2],\time_out_counter_reg[16]_i_1_n_2 ,\time_out_counter_reg[16]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_time_out_counter_reg[16]_i_1_O_UNCONNECTED [3],\time_out_counter_reg[16]_i_1_n_5 ,\time_out_counter_reg[16]_i_1_n_6 ,\time_out_counter_reg[16]_i_1_n_7 }),
        .S({1'b0,time_out_counter_reg[18:16]}));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[17] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[16]_i_1_n_6 ),
        .Q(time_out_counter_reg[17]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[18] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[16]_i_1_n_5 ),
        .Q(time_out_counter_reg[18]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[1] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2_n_6 ),
        .Q(time_out_counter_reg[1]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[2] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2_n_5 ),
        .Q(time_out_counter_reg[2]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[3] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[0]_i_2_n_4 ),
        .Q(time_out_counter_reg[3]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[4] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1_n_7 ),
        .Q(time_out_counter_reg[4]),
        .R(reset_time_out));
  CARRY4 \time_out_counter_reg[4]_i_1 
       (.CI(\time_out_counter_reg[0]_i_2_n_0 ),
        .CO({\time_out_counter_reg[4]_i_1_n_0 ,\time_out_counter_reg[4]_i_1_n_1 ,\time_out_counter_reg[4]_i_1_n_2 ,\time_out_counter_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\time_out_counter_reg[4]_i_1_n_4 ,\time_out_counter_reg[4]_i_1_n_5 ,\time_out_counter_reg[4]_i_1_n_6 ,\time_out_counter_reg[4]_i_1_n_7 }),
        .S(time_out_counter_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[5] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1_n_6 ),
        .Q(time_out_counter_reg[5]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[6] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1_n_5 ),
        .Q(time_out_counter_reg[6]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[7] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[4]_i_1_n_4 ),
        .Q(time_out_counter_reg[7]),
        .R(reset_time_out));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[8] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1_n_7 ),
        .Q(time_out_counter_reg[8]),
        .R(reset_time_out));
  CARRY4 \time_out_counter_reg[8]_i_1 
       (.CI(\time_out_counter_reg[4]_i_1_n_0 ),
        .CO({\time_out_counter_reg[8]_i_1_n_0 ,\time_out_counter_reg[8]_i_1_n_1 ,\time_out_counter_reg[8]_i_1_n_2 ,\time_out_counter_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\time_out_counter_reg[8]_i_1_n_4 ,\time_out_counter_reg[8]_i_1_n_5 ,\time_out_counter_reg[8]_i_1_n_6 ,\time_out_counter_reg[8]_i_1_n_7 }),
        .S(time_out_counter_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \time_out_counter_reg[9] 
       (.C(independent_clock_bufg),
        .CE(time_out_counter),
        .D(\time_out_counter_reg[8]_i_1_n_6 ),
        .Q(time_out_counter_reg[9]),
        .R(reset_time_out));
  LUT4 #(
    .INIT(16'hAB00)) 
    time_out_wait_bypass_i_1
       (.I0(time_out_wait_bypass_reg_n_0),
        .I1(\wait_bypass_count[0]_i_4_n_0 ),
        .I2(tx_fsm_reset_done_int_s3),
        .I3(run_phase_alignment_int_s3),
        .O(time_out_wait_bypass_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_wait_bypass_reg
       (.C(userclk),
        .CE(1'b1),
        .D(time_out_wait_bypass_i_1_n_0),
        .Q(time_out_wait_bypass_reg_n_0),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    time_out_wait_bypass_s3_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(time_out_wait_bypass_s2),
        .Q(time_out_wait_bypass_s3),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair406" *) 
  LUT4 #(
    .INIT(16'h00EA)) 
    time_tlock_max_i_1__0
       (.I0(time_tlock_max_reg_n_0),
        .I1(time_tlock_max_i_2__0_n_0),
        .I2(time_tlock_max_i_3__0_n_0),
        .I3(reset_time_out),
        .O(time_tlock_max_i_1__0_n_0));
  LUT5 #(
    .INIT(32'h00000800)) 
    time_tlock_max_i_2__0
       (.I0(time_tlock_max_i_4__0_n_0),
        .I1(time_tlock_max_i_5__0_n_0),
        .I2(time_out_counter_reg[0]),
        .I3(time_out_counter_reg[5]),
        .I4(time_out_counter_reg[4]),
        .O(time_tlock_max_i_2__0_n_0));
  LUT5 #(
    .INIT(32'h10000000)) 
    time_tlock_max_i_3__0
       (.I0(time_out_counter_reg[17]),
        .I1(time_out_counter_reg[18]),
        .I2(time_out_counter_reg[9]),
        .I3(time_out_counter_reg[10]),
        .I4(\time_out_counter[0]_i_5_n_0 ),
        .O(time_tlock_max_i_3__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair407" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    time_tlock_max_i_4__0
       (.I0(time_out_counter_reg[12]),
        .I1(time_out_counter_reg[11]),
        .I2(time_out_counter_reg[7]),
        .I3(time_out_counter_reg[6]),
        .O(time_tlock_max_i_4__0_n_0));
  LUT4 #(
    .INIT(16'h0100)) 
    time_tlock_max_i_5__0
       (.I0(time_out_counter_reg[16]),
        .I1(time_out_counter_reg[15]),
        .I2(time_out_counter_reg[13]),
        .I3(time_out_counter_reg[14]),
        .O(time_tlock_max_i_5__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    time_tlock_max_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(time_tlock_max_i_1__0_n_0),
        .Q(time_tlock_max_reg_n_0),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFFFF0200)) 
    tx_fsm_reset_done_int_i_1
       (.I0(tx_state[0]),
        .I1(tx_state[2]),
        .I2(tx_state[1]),
        .I3(tx_state[3]),
        .I4(data_in),
        .O(tx_fsm_reset_done_int_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    tx_fsm_reset_done_int_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(tx_fsm_reset_done_int_i_1_n_0),
        .Q(data_in),
        .R(pma_reset));
  FDRE #(
    .INIT(1'b0)) 
    tx_fsm_reset_done_int_s3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(tx_fsm_reset_done_int_s2),
        .Q(tx_fsm_reset_done_int_s3),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    txresetdone_s3_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(txresetdone_s2),
        .Q(txresetdone_s3),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_bypass_count[0]_i_1 
       (.I0(run_phase_alignment_int_s3),
        .O(clear));
  LUT2 #(
    .INIT(4'h2)) 
    \wait_bypass_count[0]_i_2 
       (.I0(\wait_bypass_count[0]_i_4_n_0 ),
        .I1(tx_fsm_reset_done_int_s3),
        .O(\wait_bypass_count[0]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wait_bypass_count[0]_i_4 
       (.I0(\wait_bypass_count[0]_i_6_n_0 ),
        .I1(\wait_bypass_count[0]_i_7_n_0 ),
        .I2(\wait_bypass_count[0]_i_8_n_0 ),
        .I3(\wait_bypass_count[0]_i_9_n_0 ),
        .O(\wait_bypass_count[0]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_bypass_count[0]_i_5 
       (.I0(wait_bypass_count_reg[0]),
        .O(\wait_bypass_count[0]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \wait_bypass_count[0]_i_6 
       (.I0(wait_bypass_count_reg[4]),
        .I1(wait_bypass_count_reg[3]),
        .I2(wait_bypass_count_reg[6]),
        .I3(wait_bypass_count_reg[5]),
        .O(\wait_bypass_count[0]_i_6_n_0 ));
  LUT5 #(
    .INIT(32'hDFFFFFFF)) 
    \wait_bypass_count[0]_i_7 
       (.I0(wait_bypass_count_reg[0]),
        .I1(wait_bypass_count_reg[16]),
        .I2(wait_bypass_count_reg[15]),
        .I3(wait_bypass_count_reg[2]),
        .I4(wait_bypass_count_reg[1]),
        .O(\wait_bypass_count[0]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'hFFDF)) 
    \wait_bypass_count[0]_i_8 
       (.I0(wait_bypass_count_reg[12]),
        .I1(wait_bypass_count_reg[11]),
        .I2(wait_bypass_count_reg[13]),
        .I3(wait_bypass_count_reg[14]),
        .O(\wait_bypass_count[0]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'hFFDF)) 
    \wait_bypass_count[0]_i_9 
       (.I0(wait_bypass_count_reg[7]),
        .I1(wait_bypass_count_reg[8]),
        .I2(wait_bypass_count_reg[9]),
        .I3(wait_bypass_count_reg[10]),
        .O(\wait_bypass_count[0]_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[0] 
       (.C(userclk),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[0]_i_3_n_7 ),
        .Q(wait_bypass_count_reg[0]),
        .R(clear));
  CARRY4 \wait_bypass_count_reg[0]_i_3 
       (.CI(1'b0),
        .CO({\wait_bypass_count_reg[0]_i_3_n_0 ,\wait_bypass_count_reg[0]_i_3_n_1 ,\wait_bypass_count_reg[0]_i_3_n_2 ,\wait_bypass_count_reg[0]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\wait_bypass_count_reg[0]_i_3_n_4 ,\wait_bypass_count_reg[0]_i_3_n_5 ,\wait_bypass_count_reg[0]_i_3_n_6 ,\wait_bypass_count_reg[0]_i_3_n_7 }),
        .S({wait_bypass_count_reg[3:1],\wait_bypass_count[0]_i_5_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[10] 
       (.C(userclk),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[8]_i_1_n_5 ),
        .Q(wait_bypass_count_reg[10]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[11] 
       (.C(userclk),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[8]_i_1_n_4 ),
        .Q(wait_bypass_count_reg[11]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[12] 
       (.C(userclk),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[12]_i_1_n_7 ),
        .Q(wait_bypass_count_reg[12]),
        .R(clear));
  CARRY4 \wait_bypass_count_reg[12]_i_1 
       (.CI(\wait_bypass_count_reg[8]_i_1_n_0 ),
        .CO({\wait_bypass_count_reg[12]_i_1_n_0 ,\wait_bypass_count_reg[12]_i_1_n_1 ,\wait_bypass_count_reg[12]_i_1_n_2 ,\wait_bypass_count_reg[12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\wait_bypass_count_reg[12]_i_1_n_4 ,\wait_bypass_count_reg[12]_i_1_n_5 ,\wait_bypass_count_reg[12]_i_1_n_6 ,\wait_bypass_count_reg[12]_i_1_n_7 }),
        .S(wait_bypass_count_reg[15:12]));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[13] 
       (.C(userclk),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[12]_i_1_n_6 ),
        .Q(wait_bypass_count_reg[13]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[14] 
       (.C(userclk),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[12]_i_1_n_5 ),
        .Q(wait_bypass_count_reg[14]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[15] 
       (.C(userclk),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[12]_i_1_n_4 ),
        .Q(wait_bypass_count_reg[15]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[16] 
       (.C(userclk),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[16]_i_1_n_7 ),
        .Q(wait_bypass_count_reg[16]),
        .R(clear));
  CARRY4 \wait_bypass_count_reg[16]_i_1 
       (.CI(\wait_bypass_count_reg[12]_i_1_n_0 ),
        .CO(\NLW_wait_bypass_count_reg[16]_i_1_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\NLW_wait_bypass_count_reg[16]_i_1_O_UNCONNECTED [3:1],\wait_bypass_count_reg[16]_i_1_n_7 }),
        .S({1'b0,1'b0,1'b0,wait_bypass_count_reg[16]}));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[1] 
       (.C(userclk),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[0]_i_3_n_6 ),
        .Q(wait_bypass_count_reg[1]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[2] 
       (.C(userclk),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[0]_i_3_n_5 ),
        .Q(wait_bypass_count_reg[2]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[3] 
       (.C(userclk),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[0]_i_3_n_4 ),
        .Q(wait_bypass_count_reg[3]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[4] 
       (.C(userclk),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[4]_i_1_n_7 ),
        .Q(wait_bypass_count_reg[4]),
        .R(clear));
  CARRY4 \wait_bypass_count_reg[4]_i_1 
       (.CI(\wait_bypass_count_reg[0]_i_3_n_0 ),
        .CO({\wait_bypass_count_reg[4]_i_1_n_0 ,\wait_bypass_count_reg[4]_i_1_n_1 ,\wait_bypass_count_reg[4]_i_1_n_2 ,\wait_bypass_count_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\wait_bypass_count_reg[4]_i_1_n_4 ,\wait_bypass_count_reg[4]_i_1_n_5 ,\wait_bypass_count_reg[4]_i_1_n_6 ,\wait_bypass_count_reg[4]_i_1_n_7 }),
        .S(wait_bypass_count_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[5] 
       (.C(userclk),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[4]_i_1_n_6 ),
        .Q(wait_bypass_count_reg[5]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[6] 
       (.C(userclk),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[4]_i_1_n_5 ),
        .Q(wait_bypass_count_reg[6]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[7] 
       (.C(userclk),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[4]_i_1_n_4 ),
        .Q(wait_bypass_count_reg[7]),
        .R(clear));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[8] 
       (.C(userclk),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[8]_i_1_n_7 ),
        .Q(wait_bypass_count_reg[8]),
        .R(clear));
  CARRY4 \wait_bypass_count_reg[8]_i_1 
       (.CI(\wait_bypass_count_reg[4]_i_1_n_0 ),
        .CO({\wait_bypass_count_reg[8]_i_1_n_0 ,\wait_bypass_count_reg[8]_i_1_n_1 ,\wait_bypass_count_reg[8]_i_1_n_2 ,\wait_bypass_count_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\wait_bypass_count_reg[8]_i_1_n_4 ,\wait_bypass_count_reg[8]_i_1_n_5 ,\wait_bypass_count_reg[8]_i_1_n_6 ,\wait_bypass_count_reg[8]_i_1_n_7 }),
        .S(wait_bypass_count_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \wait_bypass_count_reg[9] 
       (.C(userclk),
        .CE(\wait_bypass_count[0]_i_2_n_0 ),
        .D(\wait_bypass_count_reg[8]_i_1_n_6 ),
        .Q(wait_bypass_count_reg[9]),
        .R(clear));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_10 
       (.I0(wait_time_cnt_reg[1]),
        .O(\wait_time_cnt[0]_i_10_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_11 
       (.I0(wait_time_cnt_reg[0]),
        .O(\wait_time_cnt[0]_i_11_n_0 ));
  LUT4 #(
    .INIT(16'h0700)) 
    \wait_time_cnt[0]_i_1__0 
       (.I0(tx_state[2]),
        .I1(tx_state[1]),
        .I2(tx_state[3]),
        .I3(tx_state[0]),
        .O(\wait_time_cnt[0]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wait_time_cnt[0]_i_2 
       (.I0(\wait_time_cnt[0]_i_4_n_0 ),
        .I1(\wait_time_cnt[0]_i_5_n_0 ),
        .I2(\wait_time_cnt[0]_i_6_n_0 ),
        .I3(\wait_time_cnt[0]_i_7_n_0 ),
        .O(sel));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wait_time_cnt[0]_i_4 
       (.I0(wait_time_cnt_reg[15]),
        .I1(wait_time_cnt_reg[12]),
        .I2(wait_time_cnt_reg[9]),
        .I3(wait_time_cnt_reg[10]),
        .O(\wait_time_cnt[0]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wait_time_cnt[0]_i_5 
       (.I0(wait_time_cnt_reg[8]),
        .I1(wait_time_cnt_reg[1]),
        .I2(wait_time_cnt_reg[11]),
        .I3(wait_time_cnt_reg[2]),
        .O(\wait_time_cnt[0]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wait_time_cnt[0]_i_6 
       (.I0(wait_time_cnt_reg[6]),
        .I1(wait_time_cnt_reg[3]),
        .I2(wait_time_cnt_reg[14]),
        .I3(wait_time_cnt_reg[7]),
        .O(\wait_time_cnt[0]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \wait_time_cnt[0]_i_7 
       (.I0(wait_time_cnt_reg[0]),
        .I1(wait_time_cnt_reg[5]),
        .I2(wait_time_cnt_reg[13]),
        .I3(wait_time_cnt_reg[4]),
        .O(\wait_time_cnt[0]_i_7_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_8 
       (.I0(wait_time_cnt_reg[3]),
        .O(\wait_time_cnt[0]_i_8_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[0]_i_9 
       (.I0(wait_time_cnt_reg[2]),
        .O(\wait_time_cnt[0]_i_9_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_2 
       (.I0(wait_time_cnt_reg[15]),
        .O(\wait_time_cnt[12]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_3 
       (.I0(wait_time_cnt_reg[14]),
        .O(\wait_time_cnt[12]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_4 
       (.I0(wait_time_cnt_reg[13]),
        .O(\wait_time_cnt[12]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[12]_i_5 
       (.I0(wait_time_cnt_reg[12]),
        .O(\wait_time_cnt[12]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_2 
       (.I0(wait_time_cnt_reg[7]),
        .O(\wait_time_cnt[4]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_3 
       (.I0(wait_time_cnt_reg[6]),
        .O(\wait_time_cnt[4]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_4 
       (.I0(wait_time_cnt_reg[5]),
        .O(\wait_time_cnt[4]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[4]_i_5 
       (.I0(wait_time_cnt_reg[4]),
        .O(\wait_time_cnt[4]_i_5_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_2 
       (.I0(wait_time_cnt_reg[11]),
        .O(\wait_time_cnt[8]_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_3 
       (.I0(wait_time_cnt_reg[10]),
        .O(\wait_time_cnt[8]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_4 
       (.I0(wait_time_cnt_reg[9]),
        .O(\wait_time_cnt[8]_i_4_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \wait_time_cnt[8]_i_5 
       (.I0(wait_time_cnt_reg[8]),
        .O(\wait_time_cnt[8]_i_5_n_0 ));
  FDRE \wait_time_cnt_reg[0] 
       (.C(independent_clock_bufg),
        .CE(sel),
        .D(\wait_time_cnt_reg[0]_i_3_n_7 ),
        .Q(wait_time_cnt_reg[0]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  CARRY4 \wait_time_cnt_reg[0]_i_3 
       (.CI(1'b0),
        .CO({\wait_time_cnt_reg[0]_i_3_n_0 ,\wait_time_cnt_reg[0]_i_3_n_1 ,\wait_time_cnt_reg[0]_i_3_n_2 ,\wait_time_cnt_reg[0]_i_3_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[0]_i_3_n_4 ,\wait_time_cnt_reg[0]_i_3_n_5 ,\wait_time_cnt_reg[0]_i_3_n_6 ,\wait_time_cnt_reg[0]_i_3_n_7 }),
        .S({\wait_time_cnt[0]_i_8_n_0 ,\wait_time_cnt[0]_i_9_n_0 ,\wait_time_cnt[0]_i_10_n_0 ,\wait_time_cnt[0]_i_11_n_0 }));
  FDSE \wait_time_cnt_reg[10] 
       (.C(independent_clock_bufg),
        .CE(sel),
        .D(\wait_time_cnt_reg[8]_i_1_n_5 ),
        .Q(wait_time_cnt_reg[10]),
        .S(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[11] 
       (.C(independent_clock_bufg),
        .CE(sel),
        .D(\wait_time_cnt_reg[8]_i_1_n_4 ),
        .Q(wait_time_cnt_reg[11]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[12] 
       (.C(independent_clock_bufg),
        .CE(sel),
        .D(\wait_time_cnt_reg[12]_i_1_n_7 ),
        .Q(wait_time_cnt_reg[12]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  CARRY4 \wait_time_cnt_reg[12]_i_1 
       (.CI(\wait_time_cnt_reg[8]_i_1_n_0 ),
        .CO({\NLW_wait_time_cnt_reg[12]_i_1_CO_UNCONNECTED [3],\wait_time_cnt_reg[12]_i_1_n_1 ,\wait_time_cnt_reg[12]_i_1_n_2 ,\wait_time_cnt_reg[12]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[12]_i_1_n_4 ,\wait_time_cnt_reg[12]_i_1_n_5 ,\wait_time_cnt_reg[12]_i_1_n_6 ,\wait_time_cnt_reg[12]_i_1_n_7 }),
        .S({\wait_time_cnt[12]_i_2_n_0 ,\wait_time_cnt[12]_i_3_n_0 ,\wait_time_cnt[12]_i_4_n_0 ,\wait_time_cnt[12]_i_5_n_0 }));
  FDRE \wait_time_cnt_reg[13] 
       (.C(independent_clock_bufg),
        .CE(sel),
        .D(\wait_time_cnt_reg[12]_i_1_n_6 ),
        .Q(wait_time_cnt_reg[13]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[14] 
       (.C(independent_clock_bufg),
        .CE(sel),
        .D(\wait_time_cnt_reg[12]_i_1_n_5 ),
        .Q(wait_time_cnt_reg[14]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[15] 
       (.C(independent_clock_bufg),
        .CE(sel),
        .D(\wait_time_cnt_reg[12]_i_1_n_4 ),
        .Q(wait_time_cnt_reg[15]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[1] 
       (.C(independent_clock_bufg),
        .CE(sel),
        .D(\wait_time_cnt_reg[0]_i_3_n_6 ),
        .Q(wait_time_cnt_reg[1]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[2] 
       (.C(independent_clock_bufg),
        .CE(sel),
        .D(\wait_time_cnt_reg[0]_i_3_n_5 ),
        .Q(wait_time_cnt_reg[2]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDRE \wait_time_cnt_reg[3] 
       (.C(independent_clock_bufg),
        .CE(sel),
        .D(\wait_time_cnt_reg[0]_i_3_n_4 ),
        .Q(wait_time_cnt_reg[3]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDSE \wait_time_cnt_reg[4] 
       (.C(independent_clock_bufg),
        .CE(sel),
        .D(\wait_time_cnt_reg[4]_i_1_n_7 ),
        .Q(wait_time_cnt_reg[4]),
        .S(\wait_time_cnt[0]_i_1__0_n_0 ));
  CARRY4 \wait_time_cnt_reg[4]_i_1 
       (.CI(\wait_time_cnt_reg[0]_i_3_n_0 ),
        .CO({\wait_time_cnt_reg[4]_i_1_n_0 ,\wait_time_cnt_reg[4]_i_1_n_1 ,\wait_time_cnt_reg[4]_i_1_n_2 ,\wait_time_cnt_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[4]_i_1_n_4 ,\wait_time_cnt_reg[4]_i_1_n_5 ,\wait_time_cnt_reg[4]_i_1_n_6 ,\wait_time_cnt_reg[4]_i_1_n_7 }),
        .S({\wait_time_cnt[4]_i_2_n_0 ,\wait_time_cnt[4]_i_3_n_0 ,\wait_time_cnt[4]_i_4_n_0 ,\wait_time_cnt[4]_i_5_n_0 }));
  FDRE \wait_time_cnt_reg[5] 
       (.C(independent_clock_bufg),
        .CE(sel),
        .D(\wait_time_cnt_reg[4]_i_1_n_6 ),
        .Q(wait_time_cnt_reg[5]),
        .R(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDSE \wait_time_cnt_reg[6] 
       (.C(independent_clock_bufg),
        .CE(sel),
        .D(\wait_time_cnt_reg[4]_i_1_n_5 ),
        .Q(wait_time_cnt_reg[6]),
        .S(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDSE \wait_time_cnt_reg[7] 
       (.C(independent_clock_bufg),
        .CE(sel),
        .D(\wait_time_cnt_reg[4]_i_1_n_4 ),
        .Q(wait_time_cnt_reg[7]),
        .S(\wait_time_cnt[0]_i_1__0_n_0 ));
  FDSE \wait_time_cnt_reg[8] 
       (.C(independent_clock_bufg),
        .CE(sel),
        .D(\wait_time_cnt_reg[8]_i_1_n_7 ),
        .Q(wait_time_cnt_reg[8]),
        .S(\wait_time_cnt[0]_i_1__0_n_0 ));
  CARRY4 \wait_time_cnt_reg[8]_i_1 
       (.CI(\wait_time_cnt_reg[4]_i_1_n_0 ),
        .CO({\wait_time_cnt_reg[8]_i_1_n_0 ,\wait_time_cnt_reg[8]_i_1_n_1 ,\wait_time_cnt_reg[8]_i_1_n_2 ,\wait_time_cnt_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O({\wait_time_cnt_reg[8]_i_1_n_4 ,\wait_time_cnt_reg[8]_i_1_n_5 ,\wait_time_cnt_reg[8]_i_1_n_6 ,\wait_time_cnt_reg[8]_i_1_n_7 }),
        .S({\wait_time_cnt[8]_i_2_n_0 ,\wait_time_cnt[8]_i_3_n_0 ,\wait_time_cnt[8]_i_4_n_0 ,\wait_time_cnt[8]_i_5_n_0 }));
  FDSE \wait_time_cnt_reg[9] 
       (.C(independent_clock_bufg),
        .CE(sel),
        .D(\wait_time_cnt_reg[8]_i_1_n_6 ),
        .Q(wait_time_cnt_reg[9]),
        .S(\wait_time_cnt[0]_i_1__0_n_0 ));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_GTWIZARD_cpll_railing" *) 
module qsgmii_1218_qsgmii_1218_GTWIZARD_cpll_railing
   (gt0_cpllpd_i,
    gt0_cpllreset_i_0,
    gtrefclk,
    gt0_cpllreset_i);
  output gt0_cpllpd_i;
  output gt0_cpllreset_i_0;
  input gtrefclk;
  input gt0_cpllreset_i;

  wire cpll_reset0_i;
  wire \cpllpd_wait_reg[31]_srl32_n_1 ;
  wire \cpllpd_wait_reg[63]_srl32_n_1 ;
  wire \cpllpd_wait_reg[94]_srl31_n_0 ;
  wire \cpllreset_wait_reg[126]_srl31_n_0 ;
  wire \cpllreset_wait_reg[31]_srl32_n_1 ;
  wire \cpllreset_wait_reg[63]_srl32_n_1 ;
  wire \cpllreset_wait_reg[95]_srl32_n_1 ;
  wire gt0_cpllpd_i;
  wire gt0_cpllreset_i;
  wire gt0_cpllreset_i_0;
  wire gtrefclk;
  wire refclk_buf_n_0;
  wire \NLW_cpllpd_wait_reg[31]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllpd_wait_reg[63]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllpd_wait_reg[94]_srl31_Q31_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[126]_srl31_Q31_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[31]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[63]_srl32_Q_UNCONNECTED ;
  wire \NLW_cpllreset_wait_reg[95]_srl32_Q_UNCONNECTED ;

  (* srl_bus_name = "inst/\transceiver_inst/gtwizard_inst/inst/GTWIZARD_i/cpll_railing0_i/cpllpd_wait_reg " *) 
  (* srl_name = "inst/\transceiver_inst/gtwizard_inst/inst/GTWIZARD_i/cpll_railing0_i/cpllpd_wait_reg[31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'hFFFFFFFF)) 
    \cpllpd_wait_reg[31]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(refclk_buf_n_0),
        .D(1'b0),
        .Q(\NLW_cpllpd_wait_reg[31]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllpd_wait_reg[31]_srl32_n_1 ));
  (* srl_bus_name = "inst/\transceiver_inst/gtwizard_inst/inst/GTWIZARD_i/cpll_railing0_i/cpllpd_wait_reg " *) 
  (* srl_name = "inst/\transceiver_inst/gtwizard_inst/inst/GTWIZARD_i/cpll_railing0_i/cpllpd_wait_reg[63]_srl32 " *) 
  SRLC32E #(
    .INIT(32'hFFFFFFFF)) 
    \cpllpd_wait_reg[63]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(refclk_buf_n_0),
        .D(\cpllpd_wait_reg[31]_srl32_n_1 ),
        .Q(\NLW_cpllpd_wait_reg[63]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllpd_wait_reg[63]_srl32_n_1 ));
  (* srl_bus_name = "inst/\transceiver_inst/gtwizard_inst/inst/GTWIZARD_i/cpll_railing0_i/cpllpd_wait_reg " *) 
  (* srl_name = "inst/\transceiver_inst/gtwizard_inst/inst/GTWIZARD_i/cpll_railing0_i/cpllpd_wait_reg[94]_srl31 " *) 
  SRLC32E #(
    .INIT(32'h7FFFFFFF)) 
    \cpllpd_wait_reg[94]_srl31 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b0}),
        .CE(1'b1),
        .CLK(refclk_buf_n_0),
        .D(\cpllpd_wait_reg[63]_srl32_n_1 ),
        .Q(\cpllpd_wait_reg[94]_srl31_n_0 ),
        .Q31(\NLW_cpllpd_wait_reg[94]_srl31_Q31_UNCONNECTED ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b1)) 
    \cpllpd_wait_reg[95] 
       (.C(refclk_buf_n_0),
        .CE(1'b1),
        .D(\cpllpd_wait_reg[94]_srl31_n_0 ),
        .Q(gt0_cpllpd_i),
        .R(1'b0));
  (* srl_bus_name = "inst/\transceiver_inst/gtwizard_inst/inst/GTWIZARD_i/cpll_railing0_i/cpllreset_wait_reg " *) 
  (* srl_name = "inst/\transceiver_inst/gtwizard_inst/inst/GTWIZARD_i/cpll_railing0_i/cpllreset_wait_reg[126]_srl31 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_wait_reg[126]_srl31 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b0}),
        .CE(1'b1),
        .CLK(refclk_buf_n_0),
        .D(\cpllreset_wait_reg[95]_srl32_n_1 ),
        .Q(\cpllreset_wait_reg[126]_srl31_n_0 ),
        .Q31(\NLW_cpllreset_wait_reg[126]_srl31_Q31_UNCONNECTED ));
  (* equivalent_register_removal = "no" *) 
  FDRE #(
    .INIT(1'b0)) 
    \cpllreset_wait_reg[127] 
       (.C(refclk_buf_n_0),
        .CE(1'b1),
        .D(\cpllreset_wait_reg[126]_srl31_n_0 ),
        .Q(cpll_reset0_i),
        .R(1'b0));
  (* srl_bus_name = "inst/\transceiver_inst/gtwizard_inst/inst/GTWIZARD_i/cpll_railing0_i/cpllreset_wait_reg " *) 
  (* srl_name = "inst/\transceiver_inst/gtwizard_inst/inst/GTWIZARD_i/cpll_railing0_i/cpllreset_wait_reg[31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h000000FF)) 
    \cpllreset_wait_reg[31]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(refclk_buf_n_0),
        .D(1'b0),
        .Q(\NLW_cpllreset_wait_reg[31]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_wait_reg[31]_srl32_n_1 ));
  (* srl_bus_name = "inst/\transceiver_inst/gtwizard_inst/inst/GTWIZARD_i/cpll_railing0_i/cpllreset_wait_reg " *) 
  (* srl_name = "inst/\transceiver_inst/gtwizard_inst/inst/GTWIZARD_i/cpll_railing0_i/cpllreset_wait_reg[63]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_wait_reg[63]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(refclk_buf_n_0),
        .D(\cpllreset_wait_reg[31]_srl32_n_1 ),
        .Q(\NLW_cpllreset_wait_reg[63]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_wait_reg[63]_srl32_n_1 ));
  (* srl_bus_name = "inst/\transceiver_inst/gtwizard_inst/inst/GTWIZARD_i/cpll_railing0_i/cpllreset_wait_reg " *) 
  (* srl_name = "inst/\transceiver_inst/gtwizard_inst/inst/GTWIZARD_i/cpll_railing0_i/cpllreset_wait_reg[95]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \cpllreset_wait_reg[95]_srl32 
       (.A({1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CE(1'b1),
        .CLK(refclk_buf_n_0),
        .D(\cpllreset_wait_reg[63]_srl32_n_1 ),
        .Q(\NLW_cpllreset_wait_reg[95]_srl32_Q_UNCONNECTED ),
        .Q31(\cpllreset_wait_reg[95]_srl32_n_1 ));
  LUT2 #(
    .INIT(4'hE)) 
    gtxe2_i_i_1
       (.I0(cpll_reset0_i),
        .I1(gt0_cpllreset_i),
        .O(gt0_cpllreset_i_0));
  (* BOX_TYPE = "PRIMITIVE" *) 
  BUFG refclk_buf
       (.I(gtrefclk),
        .O(refclk_buf_n_0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_GTWIZARD_init" *) 
module qsgmii_1218_qsgmii_1218_GTWIZARD_init
   (gt0_cplllock_out,
    gt0_drprdy_out,
    gt0_eyescandataerror_out,
    txn,
    txp,
    gt0_rxbyteisaligned_out,
    gt0_rxbyterealign_out,
    gt0_rxcommadet_out,
    rxoutclk,
    gt0_rxprbserr_out,
    gt0_rxratedone_out,
    txoutclk,
    gt0_drpdo_out,
    gt0_txbufstatus_out,
    gt0_rxbufstatus_out,
    rxdata,
    gt0_rxmonitorout_out,
    gt0_dmonitorout_out,
    gt0_rxchariscomma_out,
    gt0_rxcharisk_out,
    gt0_rxdisperr_out,
    gt0_rxnotintable_out,
    gt0_txresetdone_out,
    gt0_rxresetdone_out,
    resetdone,
    independent_clock_bufg,
    gt0_drpclk_in,
    gt0_drpen_in,
    gt0_drpwe_in,
    gt0_eyescanreset_in,
    gt0_eyescantrigger_in,
    gtrefclk,
    rxn,
    rxp,
    gt0_qplloutclk_in,
    gt0_qplloutrefclk_in,
    gt0_rxbufreset_in,
    gt0_rxcdrhold_in,
    gt0_rxdfeagcovrden_in,
    gt0_rxdfelpmreset_in,
    gt0_rxlpmen_in,
    reset_out,
    rxpcsreset_comb,
    gt0_rxpmareset_in,
    gt0_rxpolarity_in,
    gt0_rxprbscntreset_in,
    rxuserclk,
    rxuserclk2,
    powerdown,
    gt0_txinhibit_in,
    gt0_txpcsreset_in,
    gt0_txpmareset_in,
    gt0_txpolarity_in,
    gt0_txprbsforceerr_in,
    userclk,
    gt0_drpdi_in,
    gt0_rxmonitorsel_in,
    gt0_loopback_in,
    gt0_rxprbssel_in,
    gt0_rxrate_in,
    gt0_txprbssel_in,
    gt0_txdiffctrl_in,
    gt0_txpostcursor_in,
    gt0_txprecursor_in,
    txdata,
    txcharisk,
    gt0_drpaddr_in,
    pma_reset,
    data_out,
    gt0_gtrxreset_in,
    mgt_rx_reset,
    gt0_gttxreset_in,
    mgt_tx_reset);
  output gt0_cplllock_out;
  output gt0_drprdy_out;
  output gt0_eyescandataerror_out;
  output txn;
  output txp;
  output gt0_rxbyteisaligned_out;
  output gt0_rxbyterealign_out;
  output gt0_rxcommadet_out;
  output rxoutclk;
  output gt0_rxprbserr_out;
  output gt0_rxratedone_out;
  output txoutclk;
  output [15:0]gt0_drpdo_out;
  output [1:0]gt0_txbufstatus_out;
  output [2:0]gt0_rxbufstatus_out;
  output [31:0]rxdata;
  output [6:0]gt0_rxmonitorout_out;
  output [7:0]gt0_dmonitorout_out;
  output [3:0]gt0_rxchariscomma_out;
  output [3:0]gt0_rxcharisk_out;
  output [3:0]gt0_rxdisperr_out;
  output [3:0]gt0_rxnotintable_out;
  output gt0_txresetdone_out;
  output gt0_rxresetdone_out;
  output resetdone;
  input independent_clock_bufg;
  input gt0_drpclk_in;
  input gt0_drpen_in;
  input gt0_drpwe_in;
  input gt0_eyescanreset_in;
  input gt0_eyescantrigger_in;
  input gtrefclk;
  input rxn;
  input rxp;
  input gt0_qplloutclk_in;
  input gt0_qplloutrefclk_in;
  input gt0_rxbufreset_in;
  input gt0_rxcdrhold_in;
  input gt0_rxdfeagcovrden_in;
  input gt0_rxdfelpmreset_in;
  input gt0_rxlpmen_in;
  input reset_out;
  input rxpcsreset_comb;
  input gt0_rxpmareset_in;
  input gt0_rxpolarity_in;
  input gt0_rxprbscntreset_in;
  input rxuserclk;
  input rxuserclk2;
  input powerdown;
  input gt0_txinhibit_in;
  input gt0_txpcsreset_in;
  input gt0_txpmareset_in;
  input gt0_txpolarity_in;
  input gt0_txprbsforceerr_in;
  input userclk;
  input [15:0]gt0_drpdi_in;
  input [1:0]gt0_rxmonitorsel_in;
  input [2:0]gt0_loopback_in;
  input [2:0]gt0_rxprbssel_in;
  input [2:0]gt0_rxrate_in;
  input [2:0]gt0_txprbssel_in;
  input [3:0]gt0_txdiffctrl_in;
  input [4:0]gt0_txpostcursor_in;
  input [4:0]gt0_txprecursor_in;
  input [31:0]txdata;
  input [3:0]txcharisk;
  input [8:0]gt0_drpaddr_in;
  input pma_reset;
  input data_out;
  input gt0_gtrxreset_in;
  input mgt_rx_reset;
  input gt0_gttxreset_in;
  input mgt_tx_reset;

  wire GTWIZARD_i_n_11;
  wire GTWIZARD_i_n_13;
  wire [31:1]data0;
  wire data_out;
  wire gt0_cplllock_out;
  wire gt0_cpllreset_i;
  wire [7:0]gt0_dmonitorout_out;
  wire [8:0]gt0_drpaddr_in;
  wire gt0_drpclk_in;
  wire [15:0]gt0_drpdi_in;
  wire [15:0]gt0_drpdo_out;
  wire gt0_drpen_in;
  wire gt0_drprdy_out;
  wire gt0_drpwe_in;
  wire gt0_eyescandataerror_out;
  wire gt0_eyescanreset_in;
  wire gt0_eyescantrigger_in;
  wire gt0_gtrxreset_i;
  wire gt0_gtrxreset_i_sync;
  wire gt0_gtrxreset_in;
  wire gt0_gttxreset_i;
  wire gt0_gttxreset_in;
  wire [2:0]gt0_loopback_in;
  wire gt0_qplloutclk_in;
  wire gt0_qplloutrefclk_in;
  wire [31:0]gt0_rx_cdrlock_counter;
  wire gt0_rx_cdrlock_counter0_carry__0_n_0;
  wire gt0_rx_cdrlock_counter0_carry__0_n_1;
  wire gt0_rx_cdrlock_counter0_carry__0_n_2;
  wire gt0_rx_cdrlock_counter0_carry__0_n_3;
  wire gt0_rx_cdrlock_counter0_carry__1_n_0;
  wire gt0_rx_cdrlock_counter0_carry__1_n_1;
  wire gt0_rx_cdrlock_counter0_carry__1_n_2;
  wire gt0_rx_cdrlock_counter0_carry__1_n_3;
  wire gt0_rx_cdrlock_counter0_carry__2_n_0;
  wire gt0_rx_cdrlock_counter0_carry__2_n_1;
  wire gt0_rx_cdrlock_counter0_carry__2_n_2;
  wire gt0_rx_cdrlock_counter0_carry__2_n_3;
  wire gt0_rx_cdrlock_counter0_carry__3_n_0;
  wire gt0_rx_cdrlock_counter0_carry__3_n_1;
  wire gt0_rx_cdrlock_counter0_carry__3_n_2;
  wire gt0_rx_cdrlock_counter0_carry__3_n_3;
  wire gt0_rx_cdrlock_counter0_carry__4_n_0;
  wire gt0_rx_cdrlock_counter0_carry__4_n_1;
  wire gt0_rx_cdrlock_counter0_carry__4_n_2;
  wire gt0_rx_cdrlock_counter0_carry__4_n_3;
  wire gt0_rx_cdrlock_counter0_carry__5_n_0;
  wire gt0_rx_cdrlock_counter0_carry__5_n_1;
  wire gt0_rx_cdrlock_counter0_carry__5_n_2;
  wire gt0_rx_cdrlock_counter0_carry__5_n_3;
  wire gt0_rx_cdrlock_counter0_carry__6_n_2;
  wire gt0_rx_cdrlock_counter0_carry__6_n_3;
  wire gt0_rx_cdrlock_counter0_carry_n_0;
  wire gt0_rx_cdrlock_counter0_carry_n_1;
  wire gt0_rx_cdrlock_counter0_carry_n_2;
  wire gt0_rx_cdrlock_counter0_carry_n_3;
  wire \gt0_rx_cdrlock_counter[0]_i_1_n_0 ;
  wire \gt0_rx_cdrlock_counter[31]_i_2_n_0 ;
  wire \gt0_rx_cdrlock_counter[31]_i_3_n_0 ;
  wire \gt0_rx_cdrlock_counter[31]_i_4_n_0 ;
  wire \gt0_rx_cdrlock_counter[31]_i_5_n_0 ;
  wire \gt0_rx_cdrlock_counter[31]_i_6_n_0 ;
  wire \gt0_rx_cdrlock_counter[31]_i_7_n_0 ;
  wire \gt0_rx_cdrlock_counter[31]_i_8_n_0 ;
  wire \gt0_rx_cdrlock_counter[31]_i_9_n_0 ;
  wire [31:1]gt0_rx_cdrlock_counter_0;
  wire gt0_rx_cdrlocked_i_1_n_0;
  wire gt0_rx_cdrlocked_reg_n_0;
  wire gt0_rxbufreset_in;
  wire [2:0]gt0_rxbufstatus_out;
  wire gt0_rxbyteisaligned_out;
  wire gt0_rxbyterealign_out;
  wire gt0_rxcdrhold_in;
  wire [3:0]gt0_rxchariscomma_out;
  wire [3:0]gt0_rxcharisk_out;
  wire gt0_rxcommadet_out;
  wire gt0_rxdfeagcovrden_in;
  wire gt0_rxdfelpmreset_in;
  wire [3:0]gt0_rxdisperr_out;
  wire gt0_rxlpmen_in;
  wire [6:0]gt0_rxmonitorout_out;
  wire [1:0]gt0_rxmonitorsel_in;
  wire [3:0]gt0_rxnotintable_out;
  wire gt0_rxpmareset_in;
  wire gt0_rxpolarity_in;
  wire gt0_rxprbscntreset_in;
  wire gt0_rxprbserr_out;
  wire [2:0]gt0_rxprbssel_in;
  wire [2:0]gt0_rxrate_in;
  wire gt0_rxratedone_out;
  wire gt0_rxresetdone_out;
  wire gt0_rxuserrdy_i;
  wire [1:0]gt0_txbufstatus_out;
  wire [3:0]gt0_txdiffctrl_in;
  wire gt0_txinhibit_in;
  wire gt0_txpcsreset_in;
  wire gt0_txpmareset_in;
  wire gt0_txpolarity_in;
  wire [4:0]gt0_txpostcursor_in;
  wire gt0_txprbsforceerr_in;
  wire [2:0]gt0_txprbssel_in;
  wire [4:0]gt0_txprecursor_in;
  wire gt0_txresetdone_out;
  wire gt0_txuserrdy_i;
  wire gtrefclk;
  wire independent_clock_bufg;
  wire mgt_rx_reset;
  wire mgt_tx_reset;
  wire pma_reset;
  wire powerdown;
  wire reset_out;
  wire resetdone;
  wire [31:0]rxdata;
  wire rxn;
  wire rxoutclk;
  wire rxp;
  wire rxpcsreset_comb;
  wire rxuserclk;
  wire rxuserclk2;
  wire [3:0]txcharisk;
  wire [31:0]txdata;
  wire txn;
  wire txoutclk;
  wire txp;
  wire userclk;
  wire [3:2]NLW_gt0_rx_cdrlock_counter0_carry__6_CO_UNCONNECTED;
  wire [3:3]NLW_gt0_rx_cdrlock_counter0_carry__6_O_UNCONNECTED;

  qsgmii_1218_qsgmii_1218_GTWIZARD_multi_gt GTWIZARD_i
       (.data_in(GTWIZARD_i_n_11),
        .data_sync_reg1(GTWIZARD_i_n_13),
        .gt0_cplllock_out(gt0_cplllock_out),
        .gt0_cpllreset_i(gt0_cpllreset_i),
        .gt0_dmonitorout_out(gt0_dmonitorout_out),
        .gt0_drpaddr_in(gt0_drpaddr_in),
        .gt0_drpclk_in(gt0_drpclk_in),
        .gt0_drpdi_in(gt0_drpdi_in),
        .gt0_drpdo_out(gt0_drpdo_out),
        .gt0_drpen_in(gt0_drpen_in),
        .gt0_drprdy_out(gt0_drprdy_out),
        .gt0_drpwe_in(gt0_drpwe_in),
        .gt0_eyescandataerror_out(gt0_eyescandataerror_out),
        .gt0_eyescanreset_in(gt0_eyescanreset_in),
        .gt0_eyescantrigger_in(gt0_eyescantrigger_in),
        .gt0_gtrxreset_i(gt0_gtrxreset_i),
        .gt0_gttxreset_i(gt0_gttxreset_i),
        .gt0_loopback_in(gt0_loopback_in),
        .gt0_qplloutclk_in(gt0_qplloutclk_in),
        .gt0_qplloutrefclk_in(gt0_qplloutrefclk_in),
        .gt0_rxbufreset_in(gt0_rxbufreset_in),
        .gt0_rxbufstatus_out(gt0_rxbufstatus_out),
        .gt0_rxbyteisaligned_out(gt0_rxbyteisaligned_out),
        .gt0_rxbyterealign_out(gt0_rxbyterealign_out),
        .gt0_rxcdrhold_in(gt0_rxcdrhold_in),
        .gt0_rxchariscomma_out(gt0_rxchariscomma_out),
        .gt0_rxcharisk_out(gt0_rxcharisk_out),
        .gt0_rxcommadet_out(gt0_rxcommadet_out),
        .gt0_rxdfeagcovrden_in(gt0_rxdfeagcovrden_in),
        .gt0_rxdfelpmreset_in(gt0_rxdfelpmreset_in),
        .gt0_rxdisperr_out(gt0_rxdisperr_out),
        .gt0_rxlpmen_in(gt0_rxlpmen_in),
        .gt0_rxmonitorout_out(gt0_rxmonitorout_out),
        .gt0_rxmonitorsel_in(gt0_rxmonitorsel_in),
        .gt0_rxnotintable_out(gt0_rxnotintable_out),
        .gt0_rxpmareset_in(gt0_rxpmareset_in),
        .gt0_rxpolarity_in(gt0_rxpolarity_in),
        .gt0_rxprbscntreset_in(gt0_rxprbscntreset_in),
        .gt0_rxprbserr_out(gt0_rxprbserr_out),
        .gt0_rxprbssel_in(gt0_rxprbssel_in),
        .gt0_rxrate_in(gt0_rxrate_in),
        .gt0_rxratedone_out(gt0_rxratedone_out),
        .gt0_rxuserrdy_i(gt0_rxuserrdy_i),
        .gt0_txbufstatus_out(gt0_txbufstatus_out),
        .gt0_txdiffctrl_in(gt0_txdiffctrl_in),
        .gt0_txinhibit_in(gt0_txinhibit_in),
        .gt0_txpcsreset_in(gt0_txpcsreset_in),
        .gt0_txpmareset_in(gt0_txpmareset_in),
        .gt0_txpolarity_in(gt0_txpolarity_in),
        .gt0_txpostcursor_in(gt0_txpostcursor_in),
        .gt0_txprbsforceerr_in(gt0_txprbsforceerr_in),
        .gt0_txprbssel_in(gt0_txprbssel_in),
        .gt0_txprecursor_in(gt0_txprecursor_in),
        .gt0_txuserrdy_i(gt0_txuserrdy_i),
        .gtrefclk(gtrefclk),
        .independent_clock_bufg(independent_clock_bufg),
        .powerdown(powerdown),
        .reset_out(reset_out),
        .rxdata(rxdata),
        .rxn(rxn),
        .rxoutclk(rxoutclk),
        .rxp(rxp),
        .rxpcsreset_comb(rxpcsreset_comb),
        .rxuserclk(rxuserclk),
        .rxuserclk2(rxuserclk2),
        .txcharisk(txcharisk),
        .txdata(txdata),
        .txn(txn),
        .txoutclk(txoutclk),
        .txp(txp),
        .userclk(userclk));
  CARRY4 gt0_rx_cdrlock_counter0_carry
       (.CI(1'b0),
        .CO({gt0_rx_cdrlock_counter0_carry_n_0,gt0_rx_cdrlock_counter0_carry_n_1,gt0_rx_cdrlock_counter0_carry_n_2,gt0_rx_cdrlock_counter0_carry_n_3}),
        .CYINIT(gt0_rx_cdrlock_counter[0]),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[4:1]),
        .S(gt0_rx_cdrlock_counter[4:1]));
  CARRY4 gt0_rx_cdrlock_counter0_carry__0
       (.CI(gt0_rx_cdrlock_counter0_carry_n_0),
        .CO({gt0_rx_cdrlock_counter0_carry__0_n_0,gt0_rx_cdrlock_counter0_carry__0_n_1,gt0_rx_cdrlock_counter0_carry__0_n_2,gt0_rx_cdrlock_counter0_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[8:5]),
        .S(gt0_rx_cdrlock_counter[8:5]));
  CARRY4 gt0_rx_cdrlock_counter0_carry__1
       (.CI(gt0_rx_cdrlock_counter0_carry__0_n_0),
        .CO({gt0_rx_cdrlock_counter0_carry__1_n_0,gt0_rx_cdrlock_counter0_carry__1_n_1,gt0_rx_cdrlock_counter0_carry__1_n_2,gt0_rx_cdrlock_counter0_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[12:9]),
        .S(gt0_rx_cdrlock_counter[12:9]));
  CARRY4 gt0_rx_cdrlock_counter0_carry__2
       (.CI(gt0_rx_cdrlock_counter0_carry__1_n_0),
        .CO({gt0_rx_cdrlock_counter0_carry__2_n_0,gt0_rx_cdrlock_counter0_carry__2_n_1,gt0_rx_cdrlock_counter0_carry__2_n_2,gt0_rx_cdrlock_counter0_carry__2_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[16:13]),
        .S(gt0_rx_cdrlock_counter[16:13]));
  CARRY4 gt0_rx_cdrlock_counter0_carry__3
       (.CI(gt0_rx_cdrlock_counter0_carry__2_n_0),
        .CO({gt0_rx_cdrlock_counter0_carry__3_n_0,gt0_rx_cdrlock_counter0_carry__3_n_1,gt0_rx_cdrlock_counter0_carry__3_n_2,gt0_rx_cdrlock_counter0_carry__3_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[20:17]),
        .S(gt0_rx_cdrlock_counter[20:17]));
  CARRY4 gt0_rx_cdrlock_counter0_carry__4
       (.CI(gt0_rx_cdrlock_counter0_carry__3_n_0),
        .CO({gt0_rx_cdrlock_counter0_carry__4_n_0,gt0_rx_cdrlock_counter0_carry__4_n_1,gt0_rx_cdrlock_counter0_carry__4_n_2,gt0_rx_cdrlock_counter0_carry__4_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[24:21]),
        .S(gt0_rx_cdrlock_counter[24:21]));
  CARRY4 gt0_rx_cdrlock_counter0_carry__5
       (.CI(gt0_rx_cdrlock_counter0_carry__4_n_0),
        .CO({gt0_rx_cdrlock_counter0_carry__5_n_0,gt0_rx_cdrlock_counter0_carry__5_n_1,gt0_rx_cdrlock_counter0_carry__5_n_2,gt0_rx_cdrlock_counter0_carry__5_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(data0[28:25]),
        .S(gt0_rx_cdrlock_counter[28:25]));
  CARRY4 gt0_rx_cdrlock_counter0_carry__6
       (.CI(gt0_rx_cdrlock_counter0_carry__5_n_0),
        .CO({NLW_gt0_rx_cdrlock_counter0_carry__6_CO_UNCONNECTED[3:2],gt0_rx_cdrlock_counter0_carry__6_n_2,gt0_rx_cdrlock_counter0_carry__6_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({NLW_gt0_rx_cdrlock_counter0_carry__6_O_UNCONNECTED[3],data0[31:29]}),
        .S({1'b0,gt0_rx_cdrlock_counter[31:29]}));
  LUT5 #(
    .INIT(32'h0000FFFE)) 
    \gt0_rx_cdrlock_counter[0]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(gt0_rx_cdrlock_counter[0]),
        .O(\gt0_rx_cdrlock_counter[0]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hAAAAAAAB)) 
    \gt0_rx_cdrlock_counter[10]_i_1 
       (.I0(data0[10]),
        .I1(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I4(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .O(gt0_rx_cdrlock_counter_0[10]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[11]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[11]),
        .O(gt0_rx_cdrlock_counter_0[11]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[12]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[12]),
        .O(gt0_rx_cdrlock_counter_0[12]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[13]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[13]),
        .O(gt0_rx_cdrlock_counter_0[13]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[14]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[14]),
        .O(gt0_rx_cdrlock_counter_0[14]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[15]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[15]),
        .O(gt0_rx_cdrlock_counter_0[15]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[16]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[16]),
        .O(gt0_rx_cdrlock_counter_0[16]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[17]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[17]),
        .O(gt0_rx_cdrlock_counter_0[17]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[18]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[18]),
        .O(gt0_rx_cdrlock_counter_0[18]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[19]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[19]),
        .O(gt0_rx_cdrlock_counter_0[19]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[1]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[1]),
        .O(gt0_rx_cdrlock_counter_0[1]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[20]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[20]),
        .O(gt0_rx_cdrlock_counter_0[20]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[21]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[21]),
        .O(gt0_rx_cdrlock_counter_0[21]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[22]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[22]),
        .O(gt0_rx_cdrlock_counter_0[22]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[23]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[23]),
        .O(gt0_rx_cdrlock_counter_0[23]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[24]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[24]),
        .O(gt0_rx_cdrlock_counter_0[24]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[25]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[25]),
        .O(gt0_rx_cdrlock_counter_0[25]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[26]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[26]),
        .O(gt0_rx_cdrlock_counter_0[26]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[27]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[27]),
        .O(gt0_rx_cdrlock_counter_0[27]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[28]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[28]),
        .O(gt0_rx_cdrlock_counter_0[28]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[29]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[29]),
        .O(gt0_rx_cdrlock_counter_0[29]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[2]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[2]),
        .O(gt0_rx_cdrlock_counter_0[2]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[30]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[30]),
        .O(gt0_rx_cdrlock_counter_0[30]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[31]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[31]),
        .O(gt0_rx_cdrlock_counter_0[31]));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \gt0_rx_cdrlock_counter[31]_i_2 
       (.I0(gt0_rx_cdrlock_counter[18]),
        .I1(gt0_rx_cdrlock_counter[19]),
        .I2(gt0_rx_cdrlock_counter[16]),
        .I3(gt0_rx_cdrlock_counter[17]),
        .I4(\gt0_rx_cdrlock_counter[31]_i_6_n_0 ),
        .O(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \gt0_rx_cdrlock_counter[31]_i_3 
       (.I0(gt0_rx_cdrlock_counter[26]),
        .I1(gt0_rx_cdrlock_counter[27]),
        .I2(gt0_rx_cdrlock_counter[24]),
        .I3(gt0_rx_cdrlock_counter[25]),
        .I4(\gt0_rx_cdrlock_counter[31]_i_7_n_0 ),
        .O(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \gt0_rx_cdrlock_counter[31]_i_4 
       (.I0(gt0_rx_cdrlock_counter[2]),
        .I1(gt0_rx_cdrlock_counter[3]),
        .I2(gt0_rx_cdrlock_counter[0]),
        .I3(gt0_rx_cdrlock_counter[1]),
        .I4(\gt0_rx_cdrlock_counter[31]_i_8_n_0 ),
        .O(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFBFFF)) 
    \gt0_rx_cdrlock_counter[31]_i_5 
       (.I0(gt0_rx_cdrlock_counter[11]),
        .I1(gt0_rx_cdrlock_counter[10]),
        .I2(gt0_rx_cdrlock_counter[8]),
        .I3(gt0_rx_cdrlock_counter[9]),
        .I4(\gt0_rx_cdrlock_counter[31]_i_9_n_0 ),
        .O(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \gt0_rx_cdrlock_counter[31]_i_6 
       (.I0(gt0_rx_cdrlock_counter[21]),
        .I1(gt0_rx_cdrlock_counter[20]),
        .I2(gt0_rx_cdrlock_counter[23]),
        .I3(gt0_rx_cdrlock_counter[22]),
        .O(\gt0_rx_cdrlock_counter[31]_i_6_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \gt0_rx_cdrlock_counter[31]_i_7 
       (.I0(gt0_rx_cdrlock_counter[29]),
        .I1(gt0_rx_cdrlock_counter[28]),
        .I2(gt0_rx_cdrlock_counter[31]),
        .I3(gt0_rx_cdrlock_counter[30]),
        .O(\gt0_rx_cdrlock_counter[31]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'hDFFF)) 
    \gt0_rx_cdrlock_counter[31]_i_8 
       (.I0(gt0_rx_cdrlock_counter[4]),
        .I1(gt0_rx_cdrlock_counter[5]),
        .I2(gt0_rx_cdrlock_counter[7]),
        .I3(gt0_rx_cdrlock_counter[6]),
        .O(\gt0_rx_cdrlock_counter[31]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \gt0_rx_cdrlock_counter[31]_i_9 
       (.I0(gt0_rx_cdrlock_counter[13]),
        .I1(gt0_rx_cdrlock_counter[12]),
        .I2(gt0_rx_cdrlock_counter[15]),
        .I3(gt0_rx_cdrlock_counter[14]),
        .O(\gt0_rx_cdrlock_counter[31]_i_9_n_0 ));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[3]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[3]),
        .O(gt0_rx_cdrlock_counter_0[3]));
  LUT5 #(
    .INIT(32'hAAAAAAAB)) 
    \gt0_rx_cdrlock_counter[4]_i_1 
       (.I0(data0[4]),
        .I1(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I4(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .O(gt0_rx_cdrlock_counter_0[4]));
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \gt0_rx_cdrlock_counter[5]_i_1 
       (.I0(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I1(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .I4(data0[5]),
        .O(gt0_rx_cdrlock_counter_0[5]));
  LUT5 #(
    .INIT(32'hAAAAAAAB)) 
    \gt0_rx_cdrlock_counter[6]_i_1 
       (.I0(data0[6]),
        .I1(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I4(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .O(gt0_rx_cdrlock_counter_0[6]));
  LUT5 #(
    .INIT(32'hAAAAAAAB)) 
    \gt0_rx_cdrlock_counter[7]_i_1 
       (.I0(data0[7]),
        .I1(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I4(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .O(gt0_rx_cdrlock_counter_0[7]));
  LUT5 #(
    .INIT(32'hAAAAAAAB)) 
    \gt0_rx_cdrlock_counter[8]_i_1 
       (.I0(data0[8]),
        .I1(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I4(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .O(gt0_rx_cdrlock_counter_0[8]));
  LUT5 #(
    .INIT(32'hAAAAAAAB)) 
    \gt0_rx_cdrlock_counter[9]_i_1 
       (.I0(data0[9]),
        .I1(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I4(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .O(gt0_rx_cdrlock_counter_0[9]));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[0] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(\gt0_rx_cdrlock_counter[0]_i_1_n_0 ),
        .Q(gt0_rx_cdrlock_counter[0]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[10] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[10]),
        .Q(gt0_rx_cdrlock_counter[10]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[11] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[11]),
        .Q(gt0_rx_cdrlock_counter[11]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[12] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[12]),
        .Q(gt0_rx_cdrlock_counter[12]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[13] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[13]),
        .Q(gt0_rx_cdrlock_counter[13]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[14] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[14]),
        .Q(gt0_rx_cdrlock_counter[14]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[15] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[15]),
        .Q(gt0_rx_cdrlock_counter[15]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[16] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[16]),
        .Q(gt0_rx_cdrlock_counter[16]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[17] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[17]),
        .Q(gt0_rx_cdrlock_counter[17]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[18] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[18]),
        .Q(gt0_rx_cdrlock_counter[18]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[19] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[19]),
        .Q(gt0_rx_cdrlock_counter[19]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[1] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[1]),
        .Q(gt0_rx_cdrlock_counter[1]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[20] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[20]),
        .Q(gt0_rx_cdrlock_counter[20]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[21] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[21]),
        .Q(gt0_rx_cdrlock_counter[21]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[22] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[22]),
        .Q(gt0_rx_cdrlock_counter[22]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[23] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[23]),
        .Q(gt0_rx_cdrlock_counter[23]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[24] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[24]),
        .Q(gt0_rx_cdrlock_counter[24]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[25] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[25]),
        .Q(gt0_rx_cdrlock_counter[25]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[26] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[26]),
        .Q(gt0_rx_cdrlock_counter[26]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[27] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[27]),
        .Q(gt0_rx_cdrlock_counter[27]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[28] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[28]),
        .Q(gt0_rx_cdrlock_counter[28]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[29] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[29]),
        .Q(gt0_rx_cdrlock_counter[29]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[2] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[2]),
        .Q(gt0_rx_cdrlock_counter[2]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[30] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[30]),
        .Q(gt0_rx_cdrlock_counter[30]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[31] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[31]),
        .Q(gt0_rx_cdrlock_counter[31]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[3] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[3]),
        .Q(gt0_rx_cdrlock_counter[3]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[4] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[4]),
        .Q(gt0_rx_cdrlock_counter[4]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[5] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[5]),
        .Q(gt0_rx_cdrlock_counter[5]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[6] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[6]),
        .Q(gt0_rx_cdrlock_counter[6]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[7] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[7]),
        .Q(gt0_rx_cdrlock_counter[7]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[8] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[8]),
        .Q(gt0_rx_cdrlock_counter[8]),
        .R(gt0_gtrxreset_i_sync));
  FDRE #(
    .INIT(1'b0)) 
    \gt0_rx_cdrlock_counter_reg[9] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlock_counter_0[9]),
        .Q(gt0_rx_cdrlock_counter[9]),
        .R(gt0_gtrxreset_i_sync));
  LUT5 #(
    .INIT(32'hAAAAAAAB)) 
    gt0_rx_cdrlocked_i_1
       (.I0(gt0_rx_cdrlocked_reg_n_0),
        .I1(\gt0_rx_cdrlock_counter[31]_i_2_n_0 ),
        .I2(\gt0_rx_cdrlock_counter[31]_i_3_n_0 ),
        .I3(\gt0_rx_cdrlock_counter[31]_i_4_n_0 ),
        .I4(\gt0_rx_cdrlock_counter[31]_i_5_n_0 ),
        .O(gt0_rx_cdrlocked_i_1_n_0));
  FDRE gt0_rx_cdrlocked_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_rx_cdrlocked_i_1_n_0),
        .Q(gt0_rx_cdrlocked_reg_n_0),
        .R(gt0_gtrxreset_i_sync));
  qsgmii_1218_qsgmii_1218_GTWIZARD_RX_STARTUP_FSM gt0_rxresetfsm_i
       (.\cpllpd_wait_reg[95] (GTWIZARD_i_n_11),
        .data_in(gt0_rxresetdone_out),
        .data_out(data_out),
        .gt0_cplllock_out(gt0_cplllock_out),
        .gt0_gtrxreset_i(gt0_gtrxreset_i),
        .gt0_gtrxreset_in(gt0_gtrxreset_in),
        .gt0_rx_cdrlocked_reg(gt0_rx_cdrlocked_reg_n_0),
        .gt0_rxprbssel_in(gt0_rxprbssel_in),
        .gt0_rxuserrdy_i(gt0_rxuserrdy_i),
        .independent_clock_bufg(independent_clock_bufg),
        .mgt_rx_reset(mgt_rx_reset),
        .pma_reset(pma_reset),
        .rxuserclk(rxuserclk));
  qsgmii_1218_qsgmii_1218_GTWIZARD_TX_STARTUP_FSM gt0_txresetfsm_i
       (.\cpllpd_wait_reg[95] (GTWIZARD_i_n_13),
        .data_in(gt0_txresetdone_out),
        .gt0_cplllock_out(gt0_cplllock_out),
        .gt0_cpllreset_i(gt0_cpllreset_i),
        .gt0_gttxreset_i(gt0_gttxreset_i),
        .gt0_gttxreset_in(gt0_gttxreset_in),
        .gt0_txuserrdy_i(gt0_txuserrdy_i),
        .independent_clock_bufg(independent_clock_bufg),
        .mgt_tx_reset(mgt_tx_reset),
        .pma_reset(pma_reset),
        .resetdone(resetdone),
        .rx_fsm_reset_done_int_reg(gt0_rxresetdone_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_1218_reset_sync_3 sync_block_gtrxreset
       (.gt0_gtrxreset_i(gt0_gtrxreset_i),
        .independent_clock_bufg(independent_clock_bufg),
        .reset_out(gt0_gtrxreset_i_sync));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_GTWIZARD_multi_gt" *) 
module qsgmii_1218_qsgmii_1218_GTWIZARD_multi_gt
   (gt0_cplllock_out,
    gt0_drprdy_out,
    gt0_eyescandataerror_out,
    txn,
    txp,
    gt0_rxbyteisaligned_out,
    gt0_rxbyterealign_out,
    gt0_rxcommadet_out,
    rxoutclk,
    gt0_rxprbserr_out,
    gt0_rxratedone_out,
    data_in,
    txoutclk,
    data_sync_reg1,
    gt0_drpdo_out,
    gt0_txbufstatus_out,
    gt0_rxbufstatus_out,
    rxdata,
    gt0_rxmonitorout_out,
    gt0_dmonitorout_out,
    gt0_rxchariscomma_out,
    gt0_rxcharisk_out,
    gt0_rxdisperr_out,
    gt0_rxnotintable_out,
    independent_clock_bufg,
    gt0_drpclk_in,
    gt0_drpen_in,
    gt0_drpwe_in,
    gt0_eyescanreset_in,
    gt0_eyescantrigger_in,
    gtrefclk,
    gt0_gtrxreset_i,
    gt0_gttxreset_i,
    rxn,
    rxp,
    gt0_qplloutclk_in,
    gt0_qplloutrefclk_in,
    gt0_rxbufreset_in,
    gt0_rxcdrhold_in,
    gt0_rxdfeagcovrden_in,
    gt0_rxdfelpmreset_in,
    gt0_rxlpmen_in,
    reset_out,
    rxpcsreset_comb,
    gt0_rxpmareset_in,
    gt0_rxpolarity_in,
    gt0_rxprbscntreset_in,
    gt0_rxuserrdy_i,
    rxuserclk,
    rxuserclk2,
    powerdown,
    gt0_txinhibit_in,
    gt0_txpcsreset_in,
    gt0_txpmareset_in,
    gt0_txpolarity_in,
    gt0_txprbsforceerr_in,
    gt0_txuserrdy_i,
    userclk,
    gt0_drpdi_in,
    gt0_rxmonitorsel_in,
    gt0_loopback_in,
    gt0_rxprbssel_in,
    gt0_rxrate_in,
    gt0_txprbssel_in,
    gt0_txdiffctrl_in,
    gt0_txpostcursor_in,
    gt0_txprecursor_in,
    txdata,
    txcharisk,
    gt0_drpaddr_in,
    gt0_cpllreset_i);
  output gt0_cplllock_out;
  output gt0_drprdy_out;
  output gt0_eyescandataerror_out;
  output txn;
  output txp;
  output gt0_rxbyteisaligned_out;
  output gt0_rxbyterealign_out;
  output gt0_rxcommadet_out;
  output rxoutclk;
  output gt0_rxprbserr_out;
  output gt0_rxratedone_out;
  output data_in;
  output txoutclk;
  output data_sync_reg1;
  output [15:0]gt0_drpdo_out;
  output [1:0]gt0_txbufstatus_out;
  output [2:0]gt0_rxbufstatus_out;
  output [31:0]rxdata;
  output [6:0]gt0_rxmonitorout_out;
  output [7:0]gt0_dmonitorout_out;
  output [3:0]gt0_rxchariscomma_out;
  output [3:0]gt0_rxcharisk_out;
  output [3:0]gt0_rxdisperr_out;
  output [3:0]gt0_rxnotintable_out;
  input independent_clock_bufg;
  input gt0_drpclk_in;
  input gt0_drpen_in;
  input gt0_drpwe_in;
  input gt0_eyescanreset_in;
  input gt0_eyescantrigger_in;
  input gtrefclk;
  input gt0_gtrxreset_i;
  input gt0_gttxreset_i;
  input rxn;
  input rxp;
  input gt0_qplloutclk_in;
  input gt0_qplloutrefclk_in;
  input gt0_rxbufreset_in;
  input gt0_rxcdrhold_in;
  input gt0_rxdfeagcovrden_in;
  input gt0_rxdfelpmreset_in;
  input gt0_rxlpmen_in;
  input reset_out;
  input rxpcsreset_comb;
  input gt0_rxpmareset_in;
  input gt0_rxpolarity_in;
  input gt0_rxprbscntreset_in;
  input gt0_rxuserrdy_i;
  input rxuserclk;
  input rxuserclk2;
  input powerdown;
  input gt0_txinhibit_in;
  input gt0_txpcsreset_in;
  input gt0_txpmareset_in;
  input gt0_txpolarity_in;
  input gt0_txprbsforceerr_in;
  input gt0_txuserrdy_i;
  input userclk;
  input [15:0]gt0_drpdi_in;
  input [1:0]gt0_rxmonitorsel_in;
  input [2:0]gt0_loopback_in;
  input [2:0]gt0_rxprbssel_in;
  input [2:0]gt0_rxrate_in;
  input [2:0]gt0_txprbssel_in;
  input [3:0]gt0_txdiffctrl_in;
  input [4:0]gt0_txpostcursor_in;
  input [4:0]gt0_txprecursor_in;
  input [31:0]txdata;
  input [3:0]txcharisk;
  input [8:0]gt0_drpaddr_in;
  input gt0_cpllreset_i;

  wire data_in;
  wire data_sync_reg1;
  wire gt0_cplllock_out;
  wire gt0_cpllpd_i;
  wire gt0_cpllreset_i;
  wire gt0_cpllreset_i_0;
  wire [7:0]gt0_dmonitorout_out;
  wire [8:0]gt0_drpaddr_in;
  wire gt0_drpclk_in;
  wire [15:0]gt0_drpdi_in;
  wire [15:0]gt0_drpdo_out;
  wire gt0_drpen_in;
  wire gt0_drprdy_out;
  wire gt0_drpwe_in;
  wire gt0_eyescandataerror_out;
  wire gt0_eyescanreset_in;
  wire gt0_eyescantrigger_in;
  wire gt0_gtrxreset_i;
  wire gt0_gttxreset_i;
  wire [2:0]gt0_loopback_in;
  wire gt0_qplloutclk_in;
  wire gt0_qplloutrefclk_in;
  wire gt0_rxbufreset_in;
  wire [2:0]gt0_rxbufstatus_out;
  wire gt0_rxbyteisaligned_out;
  wire gt0_rxbyterealign_out;
  wire gt0_rxcdrhold_in;
  wire [3:0]gt0_rxchariscomma_out;
  wire [3:0]gt0_rxcharisk_out;
  wire gt0_rxcommadet_out;
  wire gt0_rxdfeagcovrden_in;
  wire gt0_rxdfelpmreset_in;
  wire [3:0]gt0_rxdisperr_out;
  wire gt0_rxlpmen_in;
  wire [6:0]gt0_rxmonitorout_out;
  wire [1:0]gt0_rxmonitorsel_in;
  wire [3:0]gt0_rxnotintable_out;
  wire gt0_rxpmareset_in;
  wire gt0_rxpolarity_in;
  wire gt0_rxprbscntreset_in;
  wire gt0_rxprbserr_out;
  wire [2:0]gt0_rxprbssel_in;
  wire [2:0]gt0_rxrate_in;
  wire gt0_rxratedone_out;
  wire gt0_rxuserrdy_i;
  wire [1:0]gt0_txbufstatus_out;
  wire [3:0]gt0_txdiffctrl_in;
  wire gt0_txinhibit_in;
  wire gt0_txpcsreset_in;
  wire gt0_txpmareset_in;
  wire gt0_txpolarity_in;
  wire [4:0]gt0_txpostcursor_in;
  wire gt0_txprbsforceerr_in;
  wire [2:0]gt0_txprbssel_in;
  wire [4:0]gt0_txprecursor_in;
  wire gt0_txuserrdy_i;
  wire gtrefclk;
  wire independent_clock_bufg;
  wire powerdown;
  wire reset_out;
  wire [31:0]rxdata;
  wire rxn;
  wire rxoutclk;
  wire rxp;
  wire rxpcsreset_comb;
  wire rxuserclk;
  wire rxuserclk2;
  wire [3:0]txcharisk;
  wire [31:0]txdata;
  wire txn;
  wire txoutclk;
  wire txp;
  wire userclk;

  qsgmii_1218_qsgmii_1218_GTWIZARD_cpll_railing cpll_railing0_i
       (.gt0_cpllpd_i(gt0_cpllpd_i),
        .gt0_cpllreset_i(gt0_cpllreset_i),
        .gt0_cpllreset_i_0(gt0_cpllreset_i_0),
        .gtrefclk(gtrefclk));
  qsgmii_1218_qsgmii_1218_GTWIZARD_GT gt0_GTWIZARD_i
       (.data_in(data_in),
        .data_sync_reg1(data_sync_reg1),
        .gt0_cplllock_out(gt0_cplllock_out),
        .gt0_cpllpd_i(gt0_cpllpd_i),
        .gt0_cpllreset_i_0(gt0_cpllreset_i_0),
        .gt0_dmonitorout_out(gt0_dmonitorout_out),
        .gt0_drpaddr_in(gt0_drpaddr_in),
        .gt0_drpclk_in(gt0_drpclk_in),
        .gt0_drpdi_in(gt0_drpdi_in),
        .gt0_drpdo_out(gt0_drpdo_out),
        .gt0_drpen_in(gt0_drpen_in),
        .gt0_drprdy_out(gt0_drprdy_out),
        .gt0_drpwe_in(gt0_drpwe_in),
        .gt0_eyescandataerror_out(gt0_eyescandataerror_out),
        .gt0_eyescanreset_in(gt0_eyescanreset_in),
        .gt0_eyescantrigger_in(gt0_eyescantrigger_in),
        .gt0_gtrxreset_i(gt0_gtrxreset_i),
        .gt0_gttxreset_i(gt0_gttxreset_i),
        .gt0_loopback_in(gt0_loopback_in),
        .gt0_qplloutclk_in(gt0_qplloutclk_in),
        .gt0_qplloutrefclk_in(gt0_qplloutrefclk_in),
        .gt0_rxbufreset_in(gt0_rxbufreset_in),
        .gt0_rxbufstatus_out(gt0_rxbufstatus_out),
        .gt0_rxbyteisaligned_out(gt0_rxbyteisaligned_out),
        .gt0_rxbyterealign_out(gt0_rxbyterealign_out),
        .gt0_rxcdrhold_in(gt0_rxcdrhold_in),
        .gt0_rxchariscomma_out(gt0_rxchariscomma_out),
        .gt0_rxcharisk_out(gt0_rxcharisk_out),
        .gt0_rxcommadet_out(gt0_rxcommadet_out),
        .gt0_rxdfeagcovrden_in(gt0_rxdfeagcovrden_in),
        .gt0_rxdfelpmreset_in(gt0_rxdfelpmreset_in),
        .gt0_rxdisperr_out(gt0_rxdisperr_out),
        .gt0_rxlpmen_in(gt0_rxlpmen_in),
        .gt0_rxmonitorout_out(gt0_rxmonitorout_out),
        .gt0_rxmonitorsel_in(gt0_rxmonitorsel_in),
        .gt0_rxnotintable_out(gt0_rxnotintable_out),
        .gt0_rxpmareset_in(gt0_rxpmareset_in),
        .gt0_rxpolarity_in(gt0_rxpolarity_in),
        .gt0_rxprbscntreset_in(gt0_rxprbscntreset_in),
        .gt0_rxprbserr_out(gt0_rxprbserr_out),
        .gt0_rxprbssel_in(gt0_rxprbssel_in),
        .gt0_rxrate_in(gt0_rxrate_in),
        .gt0_rxratedone_out(gt0_rxratedone_out),
        .gt0_rxuserrdy_i(gt0_rxuserrdy_i),
        .gt0_txbufstatus_out(gt0_txbufstatus_out),
        .gt0_txdiffctrl_in(gt0_txdiffctrl_in),
        .gt0_txinhibit_in(gt0_txinhibit_in),
        .gt0_txpcsreset_in(gt0_txpcsreset_in),
        .gt0_txpmareset_in(gt0_txpmareset_in),
        .gt0_txpolarity_in(gt0_txpolarity_in),
        .gt0_txpostcursor_in(gt0_txpostcursor_in),
        .gt0_txprbsforceerr_in(gt0_txprbsforceerr_in),
        .gt0_txprbssel_in(gt0_txprbssel_in),
        .gt0_txprecursor_in(gt0_txprecursor_in),
        .gt0_txuserrdy_i(gt0_txuserrdy_i),
        .gtrefclk(gtrefclk),
        .independent_clock_bufg(independent_clock_bufg),
        .powerdown(powerdown),
        .reset_out(reset_out),
        .rxdata(rxdata),
        .rxn(rxn),
        .rxoutclk(rxoutclk),
        .rxp(rxp),
        .rxpcsreset_comb(rxpcsreset_comb),
        .rxuserclk(rxuserclk),
        .rxuserclk2(rxuserclk2),
        .txcharisk(txcharisk),
        .txdata(txdata),
        .txn(txn),
        .txoutclk(txoutclk),
        .txp(txp),
        .userclk(userclk));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_block" *) 
module qsgmii_1218_qsgmii_1218_block
   (reset,
    gtrefclk,
    txp,
    txn,
    rxp,
    rxn,
    txoutclk,
    rxoutclk,
    resetdone,
    userclk,
    userclk2,
    rxuserclk,
    rxuserclk2,
    independent_clock_bufg,
    pma_reset,
    mmcm_locked,
    sgmii_clk_en_ch0,
    gmii_txd_ch0,
    gmii_tx_en_ch0,
    gmii_tx_er_ch0,
    gmii_rxd_ch0,
    gmii_rx_dv_ch0,
    gmii_rx_er_ch0,
    configuration_vector_ch0,
    an_interrupt_ch0,
    link_timer_value_ch0,
    an_adv_config_vector_ch0,
    an_restart_config_ch0,
    speed_is_10_100_ch0,
    speed_is_100_ch0,
    status_vector_ch0,
    sgmii_clk_en_ch1,
    gmii_txd_ch1,
    gmii_tx_en_ch1,
    gmii_tx_er_ch1,
    gmii_rxd_ch1,
    gmii_rx_dv_ch1,
    gmii_rx_er_ch1,
    configuration_vector_ch1,
    an_interrupt_ch1,
    link_timer_value_ch1,
    an_adv_config_vector_ch1,
    an_restart_config_ch1,
    speed_is_10_100_ch1,
    speed_is_100_ch1,
    status_vector_ch1,
    sgmii_clk_en_ch2,
    gmii_txd_ch2,
    gmii_tx_en_ch2,
    gmii_tx_er_ch2,
    gmii_rxd_ch2,
    gmii_rx_dv_ch2,
    gmii_rx_er_ch2,
    configuration_vector_ch2,
    an_interrupt_ch2,
    link_timer_value_ch2,
    an_adv_config_vector_ch2,
    an_restart_config_ch2,
    speed_is_10_100_ch2,
    speed_is_100_ch2,
    status_vector_ch2,
    sgmii_clk_en_ch3,
    gmii_txd_ch3,
    gmii_tx_en_ch3,
    gmii_tx_er_ch3,
    gmii_rxd_ch3,
    gmii_rx_dv_ch3,
    gmii_rx_er_ch3,
    configuration_vector_ch3,
    an_interrupt_ch3,
    link_timer_value_ch3,
    an_adv_config_vector_ch3,
    an_restart_config_ch3,
    speed_is_10_100_ch3,
    speed_is_100_ch3,
    status_vector_ch3,
    gt0_gttxreset_in,
    gt0_gtrxreset_in,
    gt0_txpmareset_in,
    gt0_txpcsreset_in,
    gt0_rxchariscomma_out,
    gt0_rxcharisk_out,
    gt0_rxbyteisaligned_out,
    gt0_rxbyterealign_out,
    gt0_rxcommadet_out,
    gt0_txpolarity_in,
    gt0_txdiffctrl_in,
    gt0_txpostcursor_in,
    gt0_txprecursor_in,
    gt0_rxpolarity_in,
    gt0_txinhibit_in,
    gt0_rxdfelpmreset_in,
    gt0_rxdfeagcovrden_in,
    gt0_rxlpmen_in,
    gt0_txprbssel_in,
    gt0_txprbsforceerr_in,
    gt0_rxprbscntreset_in,
    gt0_rxprbserr_out,
    gt0_rxprbssel_in,
    gt0_loopback_in,
    gt0_txresetdone_out,
    gt0_rxresetdone_out,
    gt0_rxpmareset_in,
    gt0_rxpcsreset_in,
    gt0_txbufstatus_out,
    gt0_rxbufstatus_out,
    gt0_rxbufreset_in,
    gt0_cplllock_out,
    gt0_rxpmaresetdone_out,
    gt0_drpaddr_in,
    gt0_drpclk_in,
    gt0_drpdi_in,
    gt0_drpdo_out,
    gt0_drpen_in,
    gt0_drprdy_out,
    gt0_drpwe_in,
    gt0_rxdisperr_out,
    gt0_rxnotintable_out,
    gt0_eyescanreset_in,
    gt0_eyescandataerror_out,
    gt0_eyescantrigger_in,
    gt0_rxrate_in,
    gt0_rxcdrhold_in,
    gt0_rxratedone_out,
    gt0_dmonitorout_out,
    gt0_rxmonitorout_out,
    gt0_rxmonitorsel_in,
    gt0_qplloutclk_in,
    gt0_qplloutrefclk_in,
    signal_detect);
  input reset;
  input gtrefclk;
  output txp;
  output txn;
  input rxp;
  input rxn;
  output txoutclk;
  output rxoutclk;
  output resetdone;
  input userclk;
  input userclk2;
  input rxuserclk;
  input rxuserclk2;
  input independent_clock_bufg;
  input pma_reset;
  input mmcm_locked;
  output sgmii_clk_en_ch0;
  input [7:0]gmii_txd_ch0;
  input gmii_tx_en_ch0;
  input gmii_tx_er_ch0;
  output [7:0]gmii_rxd_ch0;
  output gmii_rx_dv_ch0;
  output gmii_rx_er_ch0;
  input [5:0]configuration_vector_ch0;
  output an_interrupt_ch0;
  input [8:0]link_timer_value_ch0;
  input [15:0]an_adv_config_vector_ch0;
  input an_restart_config_ch0;
  input speed_is_10_100_ch0;
  input speed_is_100_ch0;
  output [15:0]status_vector_ch0;
  output sgmii_clk_en_ch1;
  input [7:0]gmii_txd_ch1;
  input gmii_tx_en_ch1;
  input gmii_tx_er_ch1;
  output [7:0]gmii_rxd_ch1;
  output gmii_rx_dv_ch1;
  output gmii_rx_er_ch1;
  input [5:0]configuration_vector_ch1;
  output an_interrupt_ch1;
  input [8:0]link_timer_value_ch1;
  input [15:0]an_adv_config_vector_ch1;
  input an_restart_config_ch1;
  input speed_is_10_100_ch1;
  input speed_is_100_ch1;
  output [15:0]status_vector_ch1;
  output sgmii_clk_en_ch2;
  input [7:0]gmii_txd_ch2;
  input gmii_tx_en_ch2;
  input gmii_tx_er_ch2;
  output [7:0]gmii_rxd_ch2;
  output gmii_rx_dv_ch2;
  output gmii_rx_er_ch2;
  input [5:0]configuration_vector_ch2;
  output an_interrupt_ch2;
  input [8:0]link_timer_value_ch2;
  input [15:0]an_adv_config_vector_ch2;
  input an_restart_config_ch2;
  input speed_is_10_100_ch2;
  input speed_is_100_ch2;
  output [15:0]status_vector_ch2;
  output sgmii_clk_en_ch3;
  input [7:0]gmii_txd_ch3;
  input gmii_tx_en_ch3;
  input gmii_tx_er_ch3;
  output [7:0]gmii_rxd_ch3;
  output gmii_rx_dv_ch3;
  output gmii_rx_er_ch3;
  input [5:0]configuration_vector_ch3;
  output an_interrupt_ch3;
  input [8:0]link_timer_value_ch3;
  input [15:0]an_adv_config_vector_ch3;
  input an_restart_config_ch3;
  input speed_is_10_100_ch3;
  input speed_is_100_ch3;
  output [15:0]status_vector_ch3;
  input gt0_gttxreset_in;
  input gt0_gtrxreset_in;
  input gt0_txpmareset_in;
  input gt0_txpcsreset_in;
  output [3:0]gt0_rxchariscomma_out;
  output [3:0]gt0_rxcharisk_out;
  output gt0_rxbyteisaligned_out;
  output gt0_rxbyterealign_out;
  output gt0_rxcommadet_out;
  input gt0_txpolarity_in;
  input [3:0]gt0_txdiffctrl_in;
  input [4:0]gt0_txpostcursor_in;
  input [4:0]gt0_txprecursor_in;
  input gt0_rxpolarity_in;
  input gt0_txinhibit_in;
  input gt0_rxdfelpmreset_in;
  input gt0_rxdfeagcovrden_in;
  input gt0_rxlpmen_in;
  input [2:0]gt0_txprbssel_in;
  input gt0_txprbsforceerr_in;
  input gt0_rxprbscntreset_in;
  output gt0_rxprbserr_out;
  input [2:0]gt0_rxprbssel_in;
  input [2:0]gt0_loopback_in;
  output gt0_txresetdone_out;
  output gt0_rxresetdone_out;
  input gt0_rxpmareset_in;
  input gt0_rxpcsreset_in;
  output [1:0]gt0_txbufstatus_out;
  output [2:0]gt0_rxbufstatus_out;
  input gt0_rxbufreset_in;
  output gt0_cplllock_out;
  output gt0_rxpmaresetdone_out;
  input [8:0]gt0_drpaddr_in;
  input gt0_drpclk_in;
  input [15:0]gt0_drpdi_in;
  output [15:0]gt0_drpdo_out;
  input gt0_drpen_in;
  output gt0_drprdy_out;
  input gt0_drpwe_in;
  output [3:0]gt0_rxdisperr_out;
  output [3:0]gt0_rxnotintable_out;
  input gt0_eyescanreset_in;
  output gt0_eyescandataerror_out;
  input gt0_eyescantrigger_in;
  input [2:0]gt0_rxrate_in;
  input gt0_rxcdrhold_in;
  output gt0_rxratedone_out;
  output [7:0]gt0_dmonitorout_out;
  output [6:0]gt0_rxmonitorout_out;
  input [1:0]gt0_rxmonitorsel_in;
  input gt0_qplloutclk_in;
  input gt0_qplloutrefclk_in;
  input signal_detect;

  wire \<const0> ;
  wire \<const1> ;
  wire [15:0]an_adv_config_vector_ch0;
  wire [15:0]an_adv_config_vector_ch1;
  wire [15:0]an_adv_config_vector_ch2;
  wire [15:0]an_adv_config_vector_ch3;
  wire an_interrupt_ch0;
  wire an_interrupt_ch1;
  wire an_interrupt_ch2;
  wire an_interrupt_ch3;
  wire an_restart_config_ch0;
  wire an_restart_config_ch1;
  wire an_restart_config_ch2;
  wire an_restart_config_ch3;
  wire [5:0]configuration_vector_ch0;
  wire [5:0]configuration_vector_ch1;
  wire [5:0]configuration_vector_ch2;
  wire [5:0]configuration_vector_ch3;
  wire enablealign;
  wire gmii_rx_dv_ch0;
  wire gmii_rx_dv_ch0_int;
  wire gmii_rx_dv_ch1;
  wire gmii_rx_dv_ch1_int;
  wire gmii_rx_dv_ch2;
  wire gmii_rx_dv_ch2_int;
  wire gmii_rx_dv_ch3;
  wire gmii_rx_dv_ch3_int;
  wire gmii_rx_dv_out;
  wire gmii_rx_er_ch0;
  wire gmii_rx_er_ch0_int;
  wire gmii_rx_er_ch1;
  wire gmii_rx_er_ch1_int;
  wire gmii_rx_er_ch2;
  wire gmii_rx_er_ch2_int;
  wire gmii_rx_er_ch3;
  wire gmii_rx_er_ch3_int;
  wire gmii_rx_er_out;
  wire [7:0]gmii_rxd_ch0;
  wire [7:0]gmii_rxd_ch0_int;
  wire [7:0]gmii_rxd_ch1;
  wire [7:0]gmii_rxd_ch1_int;
  wire [7:0]gmii_rxd_ch2;
  wire [7:0]gmii_rxd_ch2_int;
  wire [7:0]gmii_rxd_ch3;
  wire [7:0]gmii_rxd_ch3_int;
  wire [7:0]gmii_rxd_out;
  wire gmii_tx_en_ch0;
  wire gmii_tx_en_ch0_int;
  wire gmii_tx_en_ch0_int1;
  wire gmii_tx_en_ch1;
  wire gmii_tx_en_ch1_int;
  wire gmii_tx_en_ch1_int1;
  wire gmii_tx_en_ch2;
  wire gmii_tx_en_ch2_int;
  wire gmii_tx_en_ch2_int1;
  wire gmii_tx_en_ch3;
  wire gmii_tx_en_ch3_int;
  wire gmii_tx_en_ch3_int1;
  wire gmii_tx_er_ch0;
  wire gmii_tx_er_ch0_int;
  wire gmii_tx_er_ch0_int1;
  wire gmii_tx_er_ch1;
  wire gmii_tx_er_ch1_int;
  wire gmii_tx_er_ch1_int1;
  wire gmii_tx_er_ch2;
  wire gmii_tx_er_ch2_int;
  wire gmii_tx_er_ch2_int1;
  wire gmii_tx_er_ch3;
  wire gmii_tx_er_ch3_int;
  wire gmii_tx_er_ch3_int1;
  wire [7:0]gmii_txd_ch0;
  wire [7:0]gmii_txd_ch0_int;
  wire [7:0]gmii_txd_ch0_int1;
  wire [7:0]gmii_txd_ch1;
  wire [7:0]gmii_txd_ch1_int;
  wire [7:0]gmii_txd_ch1_int1;
  wire [7:0]gmii_txd_ch2;
  wire [7:0]gmii_txd_ch2_int;
  wire [7:0]gmii_txd_ch2_int1;
  wire [7:0]gmii_txd_ch3;
  wire [7:0]gmii_txd_ch3_int;
  wire [7:0]gmii_txd_ch3_int1;
  wire gt0_cplllock_out;
  wire [7:0]gt0_dmonitorout_out;
  wire [8:0]gt0_drpaddr_in;
  wire gt0_drpclk_in;
  wire [15:0]gt0_drpdi_in;
  wire [15:0]gt0_drpdo_out;
  wire gt0_drpen_in;
  wire gt0_drprdy_out;
  wire gt0_drpwe_in;
  wire gt0_eyescandataerror_out;
  wire gt0_eyescanreset_in;
  wire gt0_eyescantrigger_in;
  wire gt0_gtrxreset_in;
  wire gt0_gttxreset_in;
  wire [2:0]gt0_loopback_in;
  wire gt0_qplloutclk_in;
  wire gt0_qplloutrefclk_in;
  wire gt0_resetdone_out_sig;
  wire gt0_rxbufreset_in;
  wire [2:0]gt0_rxbufstatus_out;
  wire gt0_rxbyteisaligned_out;
  wire gt0_rxbyterealign_out;
  wire gt0_rxcdrhold_in;
  wire [3:0]gt0_rxchariscomma_out;
  wire [3:0]gt0_rxcharisk_out;
  wire gt0_rxcommadet_out;
  wire gt0_rxdfeagcovrden_in;
  wire gt0_rxdfelpmreset_in;
  wire [3:0]gt0_rxdisperr_out;
  wire gt0_rxlpmen_in;
  wire [6:0]gt0_rxmonitorout_out;
  wire [1:0]gt0_rxmonitorsel_in;
  wire [3:0]gt0_rxnotintable_out;
  wire gt0_rxpcsreset_in;
  wire gt0_rxpmareset_in;
  wire gt0_rxpolarity_in;
  wire gt0_rxprbscntreset_in;
  wire gt0_rxprbserr_out;
  wire [2:0]gt0_rxprbssel_in;
  wire [2:0]gt0_rxrate_in;
  wire gt0_rxratedone_out;
  wire gt0_rxresetdone_out;
  wire gt0_rxresetdone_out_sync;
  wire [1:0]gt0_txbufstatus_out;
  wire [3:0]gt0_txdiffctrl_in;
  wire gt0_txinhibit_in;
  wire gt0_txpcsreset_in;
  wire gt0_txpmareset_in;
  wire gt0_txpolarity_in;
  wire [4:0]gt0_txpostcursor_in;
  wire gt0_txprbsforceerr_in;
  wire [2:0]gt0_txprbssel_in;
  wire [4:0]gt0_txprecursor_in;
  wire gt0_txresetdone_out;
  wire gtrefclk;
  wire independent_clock_bufg;
  wire [8:0]link_timer_value_ch0;
  wire [8:0]link_timer_value_ch1;
  wire [8:0]link_timer_value_ch2;
  wire [8:0]link_timer_value_ch3;
  wire mgt_rx_reset;
  wire mgt_tx_reset;
  wire pma_reset;
  wire powerdown;
  wire qsgmii_logic_rx_n_16;
  wire qsgmii_logic_rx_n_17;
  wire qsgmii_logic_rx_n_18;
  wire qsgmii_logic_rx_n_19;
  wire qsgmii_logic_rx_n_2;
  wire qsgmii_logic_rx_n_20;
  wire qsgmii_logic_rx_n_21;
  wire qsgmii_logic_rx_n_22;
  wire qsgmii_logic_rx_n_23;
  wire qsgmii_logic_rx_n_24;
  wire qsgmii_logic_rx_n_25;
  wire qsgmii_logic_rx_n_26;
  wire qsgmii_logic_rx_n_27;
  wire qsgmii_logic_rx_n_28;
  wire qsgmii_logic_rx_n_29;
  wire qsgmii_logic_rx_n_3;
  wire qsgmii_logic_rx_n_30;
  wire qsgmii_logic_rx_n_31;
  wire qsgmii_logic_rx_n_32;
  wire qsgmii_logic_rx_n_33;
  wire qsgmii_logic_rx_n_34;
  wire qsgmii_logic_rx_n_35;
  wire qsgmii_logic_rx_n_36;
  wire qsgmii_logic_rx_n_37;
  wire qsgmii_logic_rx_n_38;
  wire qsgmii_logic_rx_n_39;
  wire qsgmii_logic_rx_n_4;
  wire qsgmii_logic_rx_n_5;
  wire qsgmii_logic_rx_n_6;
  wire qsgmii_logic_rx_n_7;
  wire reset;
  wire resetdone;
  wire [31:0]rxdata;
  wire rxn;
  wire rxoutclk;
  wire rxp;
  wire rxuserclk;
  wire rxuserclk2;
  wire sgmii_clk_en_ch0;
  wire sgmii_clk_en_ch0_int;
  wire sgmii_clk_en_ch1;
  wire sgmii_clk_en_ch1_int;
  wire sgmii_clk_en_ch2;
  wire sgmii_clk_en_ch2_int;
  wire sgmii_clk_en_ch3;
  wire sgmii_clk_en_ch3_int;
  wire signal_detect;
  wire speed_is_100_ch0;
  wire speed_is_100_ch1;
  wire speed_is_100_ch2;
  wire speed_is_100_ch3;
  wire speed_is_10_100_ch0;
  wire speed_is_10_100_ch1;
  wire speed_is_10_100_ch2;
  wire speed_is_10_100_ch3;
  wire [13:0]\^status_vector_ch0 ;
  wire [13:0]\^status_vector_ch1 ;
  wire [13:0]\^status_vector_ch2 ;
  wire [13:0]\^status_vector_ch3 ;
  wire txbuferr;
  wire [3:0]txcharisk;
  wire [31:0]txdata;
  wire txn;
  wire txoutclk;
  wire txp;
  wire userclk;
  wire userclk2;
  wire NLW_qsgmii_1218_core_gmii_isolate_ch0_UNCONNECTED;
  wire NLW_qsgmii_1218_core_gmii_isolate_ch1_UNCONNECTED;
  wire NLW_qsgmii_1218_core_gmii_isolate_ch2_UNCONNECTED;
  wire NLW_qsgmii_1218_core_gmii_isolate_ch3_UNCONNECTED;
  wire NLW_qsgmii_1218_core_gt_channel_valid_ch0_UNCONNECTED;
  wire NLW_qsgmii_1218_core_gt_channel_valid_ch1_UNCONNECTED;
  wire NLW_qsgmii_1218_core_gt_channel_valid_ch2_UNCONNECTED;
  wire NLW_qsgmii_1218_core_gt_channel_valid_ch3_UNCONNECTED;
  wire NLW_qsgmii_1218_core_mdio_out_ch0_UNCONNECTED;
  wire NLW_qsgmii_1218_core_mdio_out_ch1_UNCONNECTED;
  wire NLW_qsgmii_1218_core_mdio_out_ch2_UNCONNECTED;
  wire NLW_qsgmii_1218_core_mdio_out_ch3_UNCONNECTED;
  wire NLW_qsgmii_1218_core_mdio_tri_ch0_UNCONNECTED;
  wire NLW_qsgmii_1218_core_mdio_tri_ch1_UNCONNECTED;
  wire NLW_qsgmii_1218_core_mdio_tri_ch2_UNCONNECTED;
  wire NLW_qsgmii_1218_core_mdio_tri_ch3_UNCONNECTED;
  wire [15:8]NLW_qsgmii_1218_core_status_vector_ch0_UNCONNECTED;
  wire [15:8]NLW_qsgmii_1218_core_status_vector_ch1_UNCONNECTED;
  wire [15:8]NLW_qsgmii_1218_core_status_vector_ch2_UNCONNECTED;
  wire [15:8]NLW_qsgmii_1218_core_status_vector_ch3_UNCONNECTED;
  wire [3:0]NLW_qsgmii_1218_core_txchardispmode_UNCONNECTED;
  wire [3:0]NLW_qsgmii_1218_core_txchardispval_UNCONNECTED;

  assign gt0_rxpmaresetdone_out = \<const1> ;
  assign status_vector_ch0[15] = \<const0> ;
  assign status_vector_ch0[14] = \<const0> ;
  assign status_vector_ch0[13:9] = \^status_vector_ch0 [13:9];
  assign status_vector_ch0[8] = \<const0> ;
  assign status_vector_ch0[7:0] = \^status_vector_ch0 [7:0];
  assign status_vector_ch1[15] = \<const0> ;
  assign status_vector_ch1[14] = \<const0> ;
  assign status_vector_ch1[13:9] = \^status_vector_ch1 [13:9];
  assign status_vector_ch1[8] = \<const0> ;
  assign status_vector_ch1[7:0] = \^status_vector_ch1 [7:0];
  assign status_vector_ch2[15] = \<const0> ;
  assign status_vector_ch2[14] = \<const0> ;
  assign status_vector_ch2[13:9] = \^status_vector_ch2 [13:9];
  assign status_vector_ch2[8] = \<const0> ;
  assign status_vector_ch2[7:0] = \^status_vector_ch2 [7:0];
  assign status_vector_ch3[15] = \<const0> ;
  assign status_vector_ch3[14] = \<const0> ;
  assign status_vector_ch3[13:9] = \^status_vector_ch3 [13:9];
  assign status_vector_ch3[8] = \<const0> ;
  assign status_vector_ch3[7:0] = \^status_vector_ch3 [7:0];
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  FDRE gmii_rx_dv_ch0_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rx_dv_out),
        .Q(gmii_rx_dv_ch0),
        .R(1'b0));
  FDRE gmii_rx_dv_ch1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_2),
        .Q(gmii_rx_dv_ch1),
        .R(1'b0));
  FDRE gmii_rx_dv_ch2_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_4),
        .Q(gmii_rx_dv_ch2),
        .R(1'b0));
  FDRE gmii_rx_dv_ch3_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_6),
        .Q(gmii_rx_dv_ch3),
        .R(1'b0));
  FDRE gmii_rx_er_ch0_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rx_er_out),
        .Q(gmii_rx_er_ch0),
        .R(1'b0));
  FDRE gmii_rx_er_ch1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_3),
        .Q(gmii_rx_er_ch1),
        .R(1'b0));
  FDRE gmii_rx_er_ch2_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_5),
        .Q(gmii_rx_er_ch2),
        .R(1'b0));
  FDRE gmii_rx_er_ch3_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_7),
        .Q(gmii_rx_er_ch3),
        .R(1'b0));
  FDRE \gmii_rxd_ch0_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rxd_out[0]),
        .Q(gmii_rxd_ch0[0]),
        .R(1'b0));
  FDRE \gmii_rxd_ch0_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rxd_out[1]),
        .Q(gmii_rxd_ch0[1]),
        .R(1'b0));
  FDRE \gmii_rxd_ch0_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rxd_out[2]),
        .Q(gmii_rxd_ch0[2]),
        .R(1'b0));
  FDRE \gmii_rxd_ch0_reg[3] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rxd_out[3]),
        .Q(gmii_rxd_ch0[3]),
        .R(1'b0));
  FDRE \gmii_rxd_ch0_reg[4] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rxd_out[4]),
        .Q(gmii_rxd_ch0[4]),
        .R(1'b0));
  FDRE \gmii_rxd_ch0_reg[5] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rxd_out[5]),
        .Q(gmii_rxd_ch0[5]),
        .R(1'b0));
  FDRE \gmii_rxd_ch0_reg[6] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rxd_out[6]),
        .Q(gmii_rxd_ch0[6]),
        .R(1'b0));
  FDRE \gmii_rxd_ch0_reg[7] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_rxd_out[7]),
        .Q(gmii_rxd_ch0[7]),
        .R(1'b0));
  FDRE \gmii_rxd_ch1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_23),
        .Q(gmii_rxd_ch1[0]),
        .R(1'b0));
  FDRE \gmii_rxd_ch1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_22),
        .Q(gmii_rxd_ch1[1]),
        .R(1'b0));
  FDRE \gmii_rxd_ch1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_21),
        .Q(gmii_rxd_ch1[2]),
        .R(1'b0));
  FDRE \gmii_rxd_ch1_reg[3] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_20),
        .Q(gmii_rxd_ch1[3]),
        .R(1'b0));
  FDRE \gmii_rxd_ch1_reg[4] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_19),
        .Q(gmii_rxd_ch1[4]),
        .R(1'b0));
  FDRE \gmii_rxd_ch1_reg[5] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_18),
        .Q(gmii_rxd_ch1[5]),
        .R(1'b0));
  FDRE \gmii_rxd_ch1_reg[6] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_17),
        .Q(gmii_rxd_ch1[6]),
        .R(1'b0));
  FDRE \gmii_rxd_ch1_reg[7] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_16),
        .Q(gmii_rxd_ch1[7]),
        .R(1'b0));
  FDRE \gmii_rxd_ch2_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_31),
        .Q(gmii_rxd_ch2[0]),
        .R(1'b0));
  FDRE \gmii_rxd_ch2_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_30),
        .Q(gmii_rxd_ch2[1]),
        .R(1'b0));
  FDRE \gmii_rxd_ch2_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_29),
        .Q(gmii_rxd_ch2[2]),
        .R(1'b0));
  FDRE \gmii_rxd_ch2_reg[3] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_28),
        .Q(gmii_rxd_ch2[3]),
        .R(1'b0));
  FDRE \gmii_rxd_ch2_reg[4] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_27),
        .Q(gmii_rxd_ch2[4]),
        .R(1'b0));
  FDRE \gmii_rxd_ch2_reg[5] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_26),
        .Q(gmii_rxd_ch2[5]),
        .R(1'b0));
  FDRE \gmii_rxd_ch2_reg[6] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_25),
        .Q(gmii_rxd_ch2[6]),
        .R(1'b0));
  FDRE \gmii_rxd_ch2_reg[7] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_24),
        .Q(gmii_rxd_ch2[7]),
        .R(1'b0));
  FDRE \gmii_rxd_ch3_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_39),
        .Q(gmii_rxd_ch3[0]),
        .R(1'b0));
  FDRE \gmii_rxd_ch3_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_38),
        .Q(gmii_rxd_ch3[1]),
        .R(1'b0));
  FDRE \gmii_rxd_ch3_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_37),
        .Q(gmii_rxd_ch3[2]),
        .R(1'b0));
  FDRE \gmii_rxd_ch3_reg[3] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_36),
        .Q(gmii_rxd_ch3[3]),
        .R(1'b0));
  FDRE \gmii_rxd_ch3_reg[4] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_35),
        .Q(gmii_rxd_ch3[4]),
        .R(1'b0));
  FDRE \gmii_rxd_ch3_reg[5] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_34),
        .Q(gmii_rxd_ch3[5]),
        .R(1'b0));
  FDRE \gmii_rxd_ch3_reg[6] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_33),
        .Q(gmii_rxd_ch3[6]),
        .R(1'b0));
  FDRE \gmii_rxd_ch3_reg[7] 
       (.C(userclk2),
        .CE(1'b1),
        .D(qsgmii_logic_rx_n_32),
        .Q(gmii_rxd_ch3[7]),
        .R(1'b0));
  FDRE gmii_tx_en_ch0_int1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_tx_en_ch0),
        .Q(gmii_tx_en_ch0_int1),
        .R(1'b0));
  FDRE gmii_tx_en_ch1_int1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_tx_en_ch1),
        .Q(gmii_tx_en_ch1_int1),
        .R(1'b0));
  FDRE gmii_tx_en_ch2_int1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_tx_en_ch2),
        .Q(gmii_tx_en_ch2_int1),
        .R(1'b0));
  FDRE gmii_tx_en_ch3_int1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_tx_en_ch3),
        .Q(gmii_tx_en_ch3_int1),
        .R(1'b0));
  FDRE gmii_tx_er_ch0_int1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_tx_er_ch0),
        .Q(gmii_tx_er_ch0_int1),
        .R(1'b0));
  FDRE gmii_tx_er_ch1_int1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_tx_er_ch1),
        .Q(gmii_tx_er_ch1_int1),
        .R(1'b0));
  FDRE gmii_tx_er_ch2_int1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_tx_er_ch2),
        .Q(gmii_tx_er_ch2_int1),
        .R(1'b0));
  FDRE gmii_tx_er_ch3_int1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_tx_er_ch3),
        .Q(gmii_tx_er_ch3_int1),
        .R(1'b0));
  FDRE \gmii_txd_ch0_int1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch0[0]),
        .Q(gmii_txd_ch0_int1[0]),
        .R(1'b0));
  FDRE \gmii_txd_ch0_int1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch0[1]),
        .Q(gmii_txd_ch0_int1[1]),
        .R(1'b0));
  FDRE \gmii_txd_ch0_int1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch0[2]),
        .Q(gmii_txd_ch0_int1[2]),
        .R(1'b0));
  FDRE \gmii_txd_ch0_int1_reg[3] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch0[3]),
        .Q(gmii_txd_ch0_int1[3]),
        .R(1'b0));
  FDRE \gmii_txd_ch0_int1_reg[4] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch0[4]),
        .Q(gmii_txd_ch0_int1[4]),
        .R(1'b0));
  FDRE \gmii_txd_ch0_int1_reg[5] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch0[5]),
        .Q(gmii_txd_ch0_int1[5]),
        .R(1'b0));
  FDRE \gmii_txd_ch0_int1_reg[6] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch0[6]),
        .Q(gmii_txd_ch0_int1[6]),
        .R(1'b0));
  FDRE \gmii_txd_ch0_int1_reg[7] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch0[7]),
        .Q(gmii_txd_ch0_int1[7]),
        .R(1'b0));
  FDRE \gmii_txd_ch1_int1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch1[0]),
        .Q(gmii_txd_ch1_int1[0]),
        .R(1'b0));
  FDRE \gmii_txd_ch1_int1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch1[1]),
        .Q(gmii_txd_ch1_int1[1]),
        .R(1'b0));
  FDRE \gmii_txd_ch1_int1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch1[2]),
        .Q(gmii_txd_ch1_int1[2]),
        .R(1'b0));
  FDRE \gmii_txd_ch1_int1_reg[3] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch1[3]),
        .Q(gmii_txd_ch1_int1[3]),
        .R(1'b0));
  FDRE \gmii_txd_ch1_int1_reg[4] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch1[4]),
        .Q(gmii_txd_ch1_int1[4]),
        .R(1'b0));
  FDRE \gmii_txd_ch1_int1_reg[5] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch1[5]),
        .Q(gmii_txd_ch1_int1[5]),
        .R(1'b0));
  FDRE \gmii_txd_ch1_int1_reg[6] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch1[6]),
        .Q(gmii_txd_ch1_int1[6]),
        .R(1'b0));
  FDRE \gmii_txd_ch1_int1_reg[7] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch1[7]),
        .Q(gmii_txd_ch1_int1[7]),
        .R(1'b0));
  FDRE \gmii_txd_ch2_int1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch2[0]),
        .Q(gmii_txd_ch2_int1[0]),
        .R(1'b0));
  FDRE \gmii_txd_ch2_int1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch2[1]),
        .Q(gmii_txd_ch2_int1[1]),
        .R(1'b0));
  FDRE \gmii_txd_ch2_int1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch2[2]),
        .Q(gmii_txd_ch2_int1[2]),
        .R(1'b0));
  FDRE \gmii_txd_ch2_int1_reg[3] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch2[3]),
        .Q(gmii_txd_ch2_int1[3]),
        .R(1'b0));
  FDRE \gmii_txd_ch2_int1_reg[4] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch2[4]),
        .Q(gmii_txd_ch2_int1[4]),
        .R(1'b0));
  FDRE \gmii_txd_ch2_int1_reg[5] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch2[5]),
        .Q(gmii_txd_ch2_int1[5]),
        .R(1'b0));
  FDRE \gmii_txd_ch2_int1_reg[6] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch2[6]),
        .Q(gmii_txd_ch2_int1[6]),
        .R(1'b0));
  FDRE \gmii_txd_ch2_int1_reg[7] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch2[7]),
        .Q(gmii_txd_ch2_int1[7]),
        .R(1'b0));
  FDRE \gmii_txd_ch3_int1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch3[0]),
        .Q(gmii_txd_ch3_int1[0]),
        .R(1'b0));
  FDRE \gmii_txd_ch3_int1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch3[1]),
        .Q(gmii_txd_ch3_int1[1]),
        .R(1'b0));
  FDRE \gmii_txd_ch3_int1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch3[2]),
        .Q(gmii_txd_ch3_int1[2]),
        .R(1'b0));
  FDRE \gmii_txd_ch3_int1_reg[3] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch3[3]),
        .Q(gmii_txd_ch3_int1[3]),
        .R(1'b0));
  FDRE \gmii_txd_ch3_int1_reg[4] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch3[4]),
        .Q(gmii_txd_ch3_int1[4]),
        .R(1'b0));
  FDRE \gmii_txd_ch3_int1_reg[5] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch3[5]),
        .Q(gmii_txd_ch3_int1[5]),
        .R(1'b0));
  FDRE \gmii_txd_ch3_int1_reg[6] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch3[6]),
        .Q(gmii_txd_ch3_int1[6]),
        .R(1'b0));
  FDRE \gmii_txd_ch3_int1_reg[7] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gmii_txd_ch3[7]),
        .Q(gmii_txd_ch3_int1[7]),
        .R(1'b0));
  (* C_FAMILY = "kintex7" *) 
  (* C_HAS_AN = "TRUE" *) 
  (* C_HAS_MDIO = "FALSE" *) 
  (* C_QSGMII_PHY_MODE = "FALSE" *) 
  (* C_RX_GMII_CLK = "TXOUTCLK" *) 
  (* c_component_name = "qsgmii_1218" *) 
  (* c_elaboration_transient_dir = "BlankString" *) 
  (* c_gmii_or_mii_mode = "TRUE" *) 
  qsgmii_1218_quadsgmii_v3_4_4 qsgmii_1218_core
       (.an_adv_config_val_ch0(1'b0),
        .an_adv_config_val_ch1(1'b0),
        .an_adv_config_val_ch2(1'b0),
        .an_adv_config_val_ch3(1'b0),
        .an_adv_config_vector_ch0({1'b0,1'b0,1'b0,1'b0,an_adv_config_vector_ch0[11],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .an_adv_config_vector_ch1({1'b0,1'b0,1'b0,1'b0,an_adv_config_vector_ch1[11],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .an_adv_config_vector_ch2({1'b0,1'b0,1'b0,1'b0,an_adv_config_vector_ch2[11],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .an_adv_config_vector_ch3({1'b0,1'b0,1'b0,1'b0,an_adv_config_vector_ch3[11],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .an_interrupt_ch0(an_interrupt_ch0),
        .an_interrupt_ch1(an_interrupt_ch1),
        .an_interrupt_ch2(an_interrupt_ch2),
        .an_interrupt_ch3(an_interrupt_ch3),
        .an_restart_config_ch0(an_restart_config_ch0),
        .an_restart_config_ch1(an_restart_config_ch1),
        .an_restart_config_ch2(an_restart_config_ch2),
        .an_restart_config_ch3(an_restart_config_ch3),
        .configuration_valid_ch0(1'b0),
        .configuration_valid_ch1(1'b0),
        .configuration_valid_ch2(1'b0),
        .configuration_valid_ch3(1'b0),
        .configuration_vector_ch0(configuration_vector_ch0[4:0]),
        .configuration_vector_ch1(configuration_vector_ch1[4:0]),
        .configuration_vector_ch2(configuration_vector_ch2[4:0]),
        .configuration_vector_ch3(configuration_vector_ch3[4:0]),
        .dcm_locked(gt0_cplllock_out),
        .enablealign(enablealign),
        .gmii_isolate_ch0(NLW_qsgmii_1218_core_gmii_isolate_ch0_UNCONNECTED),
        .gmii_isolate_ch1(NLW_qsgmii_1218_core_gmii_isolate_ch1_UNCONNECTED),
        .gmii_isolate_ch2(NLW_qsgmii_1218_core_gmii_isolate_ch2_UNCONNECTED),
        .gmii_isolate_ch3(NLW_qsgmii_1218_core_gmii_isolate_ch3_UNCONNECTED),
        .gmii_rx_dv_ch0(gmii_rx_dv_ch0_int),
        .gmii_rx_dv_ch1(gmii_rx_dv_ch1_int),
        .gmii_rx_dv_ch2(gmii_rx_dv_ch2_int),
        .gmii_rx_dv_ch3(gmii_rx_dv_ch3_int),
        .gmii_rx_er_ch0(gmii_rx_er_ch0_int),
        .gmii_rx_er_ch1(gmii_rx_er_ch1_int),
        .gmii_rx_er_ch2(gmii_rx_er_ch2_int),
        .gmii_rx_er_ch3(gmii_rx_er_ch3_int),
        .gmii_rxd_ch0(gmii_rxd_ch0_int),
        .gmii_rxd_ch1(gmii_rxd_ch1_int),
        .gmii_rxd_ch2(gmii_rxd_ch2_int),
        .gmii_rxd_ch3(gmii_rxd_ch3_int),
        .gmii_tx_en_ch0(gmii_tx_en_ch0_int),
        .gmii_tx_en_ch1(gmii_tx_en_ch1_int),
        .gmii_tx_en_ch2(gmii_tx_en_ch2_int),
        .gmii_tx_en_ch3(gmii_tx_en_ch3_int),
        .gmii_tx_er_ch0(gmii_tx_er_ch0_int),
        .gmii_tx_er_ch1(gmii_tx_er_ch1_int),
        .gmii_tx_er_ch2(gmii_tx_er_ch2_int),
        .gmii_tx_er_ch3(gmii_tx_er_ch3_int),
        .gmii_txd_ch0(gmii_txd_ch0_int),
        .gmii_txd_ch1(gmii_txd_ch1_int),
        .gmii_txd_ch2(gmii_txd_ch2_int),
        .gmii_txd_ch3(gmii_txd_ch3_int),
        .gt_channel_valid_ch0(NLW_qsgmii_1218_core_gt_channel_valid_ch0_UNCONNECTED),
        .gt_channel_valid_ch1(NLW_qsgmii_1218_core_gt_channel_valid_ch1_UNCONNECTED),
        .gt_channel_valid_ch2(NLW_qsgmii_1218_core_gt_channel_valid_ch2_UNCONNECTED),
        .gt_channel_valid_ch3(NLW_qsgmii_1218_core_gt_channel_valid_ch3_UNCONNECTED),
        .link_timer_value_ch0(link_timer_value_ch0),
        .link_timer_value_ch1(link_timer_value_ch1),
        .link_timer_value_ch2(link_timer_value_ch2),
        .link_timer_value_ch3(link_timer_value_ch3),
        .mdc_ch0(1'b0),
        .mdc_ch1(1'b0),
        .mdc_ch2(1'b0),
        .mdc_ch3(1'b0),
        .mdio_in_ch0(1'b0),
        .mdio_in_ch1(1'b0),
        .mdio_in_ch2(1'b0),
        .mdio_in_ch3(1'b0),
        .mdio_out_ch0(NLW_qsgmii_1218_core_mdio_out_ch0_UNCONNECTED),
        .mdio_out_ch1(NLW_qsgmii_1218_core_mdio_out_ch1_UNCONNECTED),
        .mdio_out_ch2(NLW_qsgmii_1218_core_mdio_out_ch2_UNCONNECTED),
        .mdio_out_ch3(NLW_qsgmii_1218_core_mdio_out_ch3_UNCONNECTED),
        .mdio_tri_ch0(NLW_qsgmii_1218_core_mdio_tri_ch0_UNCONNECTED),
        .mdio_tri_ch1(NLW_qsgmii_1218_core_mdio_tri_ch1_UNCONNECTED),
        .mdio_tri_ch2(NLW_qsgmii_1218_core_mdio_tri_ch2_UNCONNECTED),
        .mdio_tri_ch3(NLW_qsgmii_1218_core_mdio_tri_ch3_UNCONNECTED),
        .mgt_rx_reset(mgt_rx_reset),
        .mgt_tx_reset(mgt_tx_reset),
        .phyad_ch0({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .phyad_ch1({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .phyad_ch2({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .phyad_ch3({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .powerdown(powerdown),
        .reset(reset),
        .reset_done(gt0_resetdone_out_sig),
        .rxchariscomma(gt0_rxchariscomma_out),
        .rxcharisk(gt0_rxcharisk_out),
        .rxclkcorcnt({1'b0,1'b0,1'b0}),
        .rxdata(rxdata),
        .rxdisperr({1'b0,1'b0,1'b0,1'b0}),
        .rxnotintable(gt0_rxnotintable_out),
        .rxrecclk(rxuserclk2),
        .rxrundisp({1'b0,1'b0,1'b0,1'b0}),
        .signal_detect(signal_detect),
        .status_vector_ch0({NLW_qsgmii_1218_core_status_vector_ch0_UNCONNECTED[15:14],\^status_vector_ch0 }),
        .status_vector_ch1({NLW_qsgmii_1218_core_status_vector_ch1_UNCONNECTED[15:14],\^status_vector_ch1 }),
        .status_vector_ch2({NLW_qsgmii_1218_core_status_vector_ch2_UNCONNECTED[15:14],\^status_vector_ch2 }),
        .status_vector_ch3({NLW_qsgmii_1218_core_status_vector_ch3_UNCONNECTED[15:14],\^status_vector_ch3 }),
        .txbuferr(txbuferr),
        .txchardispmode(NLW_qsgmii_1218_core_txchardispmode_UNCONNECTED[3:0]),
        .txchardispval(NLW_qsgmii_1218_core_txchardispval_UNCONNECTED[3:0]),
        .txcharisk(txcharisk),
        .txdata(txdata),
        .userclk(userclk2),
        .userclk2(1'b0));
  qsgmii_1218_qsgmii_1218_qsgmii_adapt qsgmii_logic_rx
       (.D(gmii_rxd_ch0_int),
        .Q(gmii_rxd_out),
        .\RXD_reg[7] (gmii_rxd_ch1_int),
        .\RXD_reg[7]_0 (gmii_rxd_ch2_int),
        .\RXD_reg[7]_1 (gmii_rxd_ch3_int),
        .gmii_rx_dv_ch0(gmii_rx_dv_ch0_int),
        .gmii_rx_dv_ch1(gmii_rx_dv_ch1_int),
        .gmii_rx_dv_ch1_reg(qsgmii_logic_rx_n_2),
        .gmii_rx_dv_ch2(gmii_rx_dv_ch2_int),
        .gmii_rx_dv_ch2_reg(qsgmii_logic_rx_n_4),
        .gmii_rx_dv_ch3(gmii_rx_dv_ch3_int),
        .gmii_rx_dv_ch3_reg(qsgmii_logic_rx_n_6),
        .gmii_rx_dv_out(gmii_rx_dv_out),
        .gmii_rx_er_ch0(gmii_rx_er_ch0_int),
        .gmii_rx_er_ch1(gmii_rx_er_ch1_int),
        .gmii_rx_er_ch1_reg(qsgmii_logic_rx_n_3),
        .gmii_rx_er_ch2(gmii_rx_er_ch2_int),
        .gmii_rx_er_ch2_reg(qsgmii_logic_rx_n_5),
        .gmii_rx_er_ch3(gmii_rx_er_ch3_int),
        .gmii_rx_er_ch3_reg(qsgmii_logic_rx_n_7),
        .gmii_rx_er_out(gmii_rx_er_out),
        .\gmii_rxd_ch1_reg[7] ({qsgmii_logic_rx_n_16,qsgmii_logic_rx_n_17,qsgmii_logic_rx_n_18,qsgmii_logic_rx_n_19,qsgmii_logic_rx_n_20,qsgmii_logic_rx_n_21,qsgmii_logic_rx_n_22,qsgmii_logic_rx_n_23}),
        .\gmii_rxd_ch2_reg[7] ({qsgmii_logic_rx_n_24,qsgmii_logic_rx_n_25,qsgmii_logic_rx_n_26,qsgmii_logic_rx_n_27,qsgmii_logic_rx_n_28,qsgmii_logic_rx_n_29,qsgmii_logic_rx_n_30,qsgmii_logic_rx_n_31}),
        .\gmii_rxd_ch3_reg[7] ({qsgmii_logic_rx_n_32,qsgmii_logic_rx_n_33,qsgmii_logic_rx_n_34,qsgmii_logic_rx_n_35,qsgmii_logic_rx_n_36,qsgmii_logic_rx_n_37,qsgmii_logic_rx_n_38,qsgmii_logic_rx_n_39}),
        .reset(reset),
        .speed_is_100_ch0(speed_is_100_ch0),
        .speed_is_100_ch1(speed_is_100_ch1),
        .speed_is_100_ch2(speed_is_100_ch2),
        .speed_is_100_ch3(speed_is_100_ch3),
        .speed_is_10_100_ch0(speed_is_10_100_ch0),
        .speed_is_10_100_ch1(speed_is_10_100_ch1),
        .speed_is_10_100_ch2(speed_is_10_100_ch2),
        .speed_is_10_100_ch3(speed_is_10_100_ch3),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_qsgmii_adapt_0 qsgmii_logic_tx
       (.E(sgmii_clk_en_ch0_int),
        .Q(gmii_txd_ch0_int),
        .\TXD_REG1_reg[7] (gmii_txd_ch1_int),
        .\TXD_REG1_reg[7]_0 (gmii_txd_ch2_int),
        .\TXD_REG1_reg[7]_1 (gmii_txd_ch3_int),
        .gmii_tx_en_ch0(gmii_tx_en_ch0_int),
        .gmii_tx_en_ch0_int1(gmii_tx_en_ch0_int1),
        .gmii_tx_en_ch1(gmii_tx_en_ch1_int),
        .gmii_tx_en_ch1_int1(gmii_tx_en_ch1_int1),
        .gmii_tx_en_ch2(gmii_tx_en_ch2_int),
        .gmii_tx_en_ch2_int1(gmii_tx_en_ch2_int1),
        .gmii_tx_en_ch3(gmii_tx_en_ch3_int),
        .gmii_tx_en_ch3_int1(gmii_tx_en_ch3_int1),
        .gmii_tx_er_ch0(gmii_tx_er_ch0_int),
        .gmii_tx_er_ch0_int1(gmii_tx_er_ch0_int1),
        .gmii_tx_er_ch1(gmii_tx_er_ch1_int),
        .gmii_tx_er_ch1_int1(gmii_tx_er_ch1_int1),
        .gmii_tx_er_ch2(gmii_tx_er_ch2_int),
        .gmii_tx_er_ch2_int1(gmii_tx_er_ch2_int1),
        .gmii_tx_er_ch3(gmii_tx_er_ch3_int),
        .gmii_tx_er_ch3_int1(gmii_tx_er_ch3_int1),
        .\gmii_txd_ch0_int1_reg[7] (gmii_txd_ch0_int1),
        .\gmii_txd_ch1_int1_reg[7] (gmii_txd_ch1_int1),
        .\gmii_txd_ch2_int1_reg[7] (gmii_txd_ch2_int1),
        .\gmii_txd_ch3_int1_reg[7] (gmii_txd_ch3_int1),
        .\gmii_txd_out_reg[7] (sgmii_clk_en_ch1_int),
        .\gmii_txd_out_reg[7]_0 (sgmii_clk_en_ch2_int),
        .\gmii_txd_out_reg[7]_1 (sgmii_clk_en_ch3_int),
        .reset(reset),
        .speed_is_100_ch0(speed_is_100_ch0),
        .speed_is_100_ch1(speed_is_100_ch1),
        .speed_is_100_ch2(speed_is_100_ch2),
        .speed_is_100_ch3(speed_is_100_ch3),
        .speed_is_10_100_ch0(speed_is_10_100_ch0),
        .speed_is_10_100_ch1(speed_is_10_100_ch1),
        .speed_is_10_100_ch2(speed_is_10_100_ch2),
        .speed_is_10_100_ch3(speed_is_10_100_ch3),
        .userclk2(userclk2));
  FDRE sgmii_clk_en_ch0_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_ch0_int),
        .Q(sgmii_clk_en_ch0),
        .R(1'b0));
  FDRE sgmii_clk_en_ch1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_ch1_int),
        .Q(sgmii_clk_en_ch1),
        .R(1'b0));
  FDRE sgmii_clk_en_ch2_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_ch2_int),
        .Q(sgmii_clk_en_ch2),
        .R(1'b0));
  FDRE sgmii_clk_en_ch3_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_ch3_int),
        .Q(sgmii_clk_en_ch3),
        .R(1'b0));
  qsgmii_1218_qsgmii_1218_sync_block sync_rxresetdone_i
       (.data_out(gt0_rxresetdone_out_sync),
        .rx_fsm_reset_done_int_reg(gt0_rxresetdone_out),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sync_block_1 sync_txresetdone_i
       (.data_out(gt0_rxresetdone_out_sync),
        .reset_done(gt0_resetdone_out_sig),
        .tx_fsm_reset_done_int_reg(gt0_txresetdone_out),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_transceiver transceiver_inst
       (.configuration_vector_ch0(configuration_vector_ch0[5]),
        .configuration_vector_ch1(configuration_vector_ch1[5]),
        .configuration_vector_ch2(configuration_vector_ch2[5]),
        .configuration_vector_ch3(configuration_vector_ch3[5]),
        .enablealign(enablealign),
        .gt0_cplllock_out(gt0_cplllock_out),
        .gt0_dmonitorout_out(gt0_dmonitorout_out),
        .gt0_drpaddr_in(gt0_drpaddr_in),
        .gt0_drpclk_in(gt0_drpclk_in),
        .gt0_drpdi_in(gt0_drpdi_in),
        .gt0_drpdo_out(gt0_drpdo_out),
        .gt0_drpen_in(gt0_drpen_in),
        .gt0_drprdy_out(gt0_drprdy_out),
        .gt0_drpwe_in(gt0_drpwe_in),
        .gt0_eyescandataerror_out(gt0_eyescandataerror_out),
        .gt0_eyescanreset_in(gt0_eyescanreset_in),
        .gt0_eyescantrigger_in(gt0_eyescantrigger_in),
        .gt0_gtrxreset_in(gt0_gtrxreset_in),
        .gt0_gttxreset_in(gt0_gttxreset_in),
        .gt0_loopback_in(gt0_loopback_in),
        .gt0_qplloutclk_in(gt0_qplloutclk_in),
        .gt0_qplloutrefclk_in(gt0_qplloutrefclk_in),
        .gt0_rxbufreset_in(gt0_rxbufreset_in),
        .gt0_rxbufstatus_out(gt0_rxbufstatus_out),
        .gt0_rxbyteisaligned_out(gt0_rxbyteisaligned_out),
        .gt0_rxbyterealign_out(gt0_rxbyterealign_out),
        .gt0_rxcdrhold_in(gt0_rxcdrhold_in),
        .gt0_rxchariscomma_out(gt0_rxchariscomma_out),
        .gt0_rxcharisk_out(gt0_rxcharisk_out),
        .gt0_rxcommadet_out(gt0_rxcommadet_out),
        .gt0_rxdfeagcovrden_in(gt0_rxdfeagcovrden_in),
        .gt0_rxdfelpmreset_in(gt0_rxdfelpmreset_in),
        .gt0_rxdisperr_out(gt0_rxdisperr_out),
        .gt0_rxlpmen_in(gt0_rxlpmen_in),
        .gt0_rxmonitorout_out(gt0_rxmonitorout_out),
        .gt0_rxmonitorsel_in(gt0_rxmonitorsel_in),
        .gt0_rxnotintable_out(gt0_rxnotintable_out),
        .gt0_rxpcsreset_in(gt0_rxpcsreset_in),
        .gt0_rxpmareset_in(gt0_rxpmareset_in),
        .gt0_rxpolarity_in(gt0_rxpolarity_in),
        .gt0_rxprbscntreset_in(gt0_rxprbscntreset_in),
        .gt0_rxprbserr_out(gt0_rxprbserr_out),
        .gt0_rxprbssel_in(gt0_rxprbssel_in),
        .gt0_rxrate_in(gt0_rxrate_in),
        .gt0_rxratedone_out(gt0_rxratedone_out),
        .gt0_rxresetdone_out(gt0_rxresetdone_out),
        .gt0_txbufstatus_out(gt0_txbufstatus_out),
        .gt0_txdiffctrl_in(gt0_txdiffctrl_in),
        .gt0_txinhibit_in(gt0_txinhibit_in),
        .gt0_txpcsreset_in(gt0_txpcsreset_in),
        .gt0_txpmareset_in(gt0_txpmareset_in),
        .gt0_txpolarity_in(gt0_txpolarity_in),
        .gt0_txpostcursor_in(gt0_txpostcursor_in),
        .gt0_txprbsforceerr_in(gt0_txprbsforceerr_in),
        .gt0_txprbssel_in(gt0_txprbssel_in),
        .gt0_txprecursor_in(gt0_txprecursor_in),
        .gt0_txresetdone_out(gt0_txresetdone_out),
        .gtrefclk(gtrefclk),
        .independent_clock_bufg(independent_clock_bufg),
        .mgt_rx_reset(mgt_rx_reset),
        .mgt_tx_reset(mgt_tx_reset),
        .pma_reset(pma_reset),
        .powerdown(powerdown),
        .resetdone(resetdone),
        .rxdata(rxdata),
        .rxn(rxn),
        .rxoutclk(rxoutclk),
        .rxp(rxp),
        .rxuserclk(rxuserclk),
        .rxuserclk2(rxuserclk2),
        .status_vector_ch0(\^status_vector_ch0 [1]),
        .status_vector_ch1(\^status_vector_ch1 [1]),
        .status_vector_ch2(\^status_vector_ch2 [1]),
        .status_vector_ch3(\^status_vector_ch3 [1]),
        .txbuferr(txbuferr),
        .txcharisk(txcharisk),
        .txdata(txdata),
        .txn(txn),
        .txoutclk(txoutclk),
        .txp(txp),
        .userclk(userclk),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_clk_gen" *) 
module qsgmii_1218_qsgmii_1218_clk_gen
   (E,
    data_out,
    data_sync_reg6,
    reset_out,
    userclk2);
  output [0:0]E;
  input data_out;
  input data_sync_reg6;
  input reset_out;
  input userclk2;

  wire [0:0]E;
  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_rise;
  wire clk_div1_25_n_1;
  wire clk_en_1_25_fall;
  wire data_out;
  wire data_sync_reg6;
  wire reset_out;
  wire sgmii_clk_en_n_0;
  wire userclk2;

  FDRE clk1_25_reg_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk1_25),
        .Q(clk1_25_reg),
        .R(reset_out));
  qsgmii_1218_qsgmii_1218_johnson_cntr clk_div1_25
       (.clk1_25(clk1_25),
        .clk1_25_reg(clk1_25_reg),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .clk_en_1_25_fall_reg(clk_div1_25_n_1),
        .reset_out(reset_out),
        .userclk2(userclk2));
  FDRE clk_en_1_25_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div1_25_n_1),
        .Q(clk_en_1_25_fall),
        .R(reset_out));
  qsgmii_1218_qsgmii_1218_clock_div clock_div_stg1
       (.clk_div10_plse_fall(clk_div10_plse_fall),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  LUT4 #(
    .INIT(16'hE2FF)) 
    sgmii_clk_en
       (.I0(clk_en_1_25_fall),
        .I1(data_out),
        .I2(clk_div10_plse_fall),
        .I3(data_sync_reg6),
        .O(sgmii_clk_en_n_0));
  FDRE sgmii_clk_en_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_n_0),
        .Q(E),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_clk_gen" *) 
module qsgmii_1218_qsgmii_1218_clk_gen_23
   (E,
    data_out,
    data_sync_reg6,
    reset_out,
    userclk2);
  output [0:0]E;
  input data_out;
  input data_sync_reg6;
  input reset_out;
  input userclk2;

  wire [0:0]E;
  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_rise;
  wire clk_div1_25_n_1;
  wire clk_en_1_25_fall;
  wire data_out;
  wire data_sync_reg6;
  wire reset_out;
  wire sgmii_clk_en_n_0;
  wire userclk2;

  FDRE clk1_25_reg_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk1_25),
        .Q(clk1_25_reg),
        .R(reset_out));
  qsgmii_1218_qsgmii_1218_johnson_cntr_27 clk_div1_25
       (.clk1_25(clk1_25),
        .clk1_25_reg(clk1_25_reg),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .clk_en_1_25_fall_reg(clk_div1_25_n_1),
        .reset_out(reset_out),
        .userclk2(userclk2));
  FDRE clk_en_1_25_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div1_25_n_1),
        .Q(clk_en_1_25_fall),
        .R(reset_out));
  qsgmii_1218_qsgmii_1218_clock_div_28 clock_div_stg1
       (.clk_div10_plse_fall(clk_div10_plse_fall),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  LUT4 #(
    .INIT(16'hE2FF)) 
    sgmii_clk_en
       (.I0(clk_en_1_25_fall),
        .I1(data_out),
        .I2(clk_div10_plse_fall),
        .I3(data_sync_reg6),
        .O(sgmii_clk_en_n_0));
  FDRE sgmii_clk_en_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_n_0),
        .Q(E),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_clk_gen" *) 
module qsgmii_1218_qsgmii_1218_clk_gen_29
   (E,
    data_out,
    data_sync_reg6,
    reset_out,
    userclk2);
  output [0:0]E;
  input data_out;
  input data_sync_reg6;
  input reset_out;
  input userclk2;

  wire [0:0]E;
  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_rise;
  wire clk_div1_25_n_1;
  wire clk_en_1_25_fall;
  wire data_out;
  wire data_sync_reg6;
  wire reset_out;
  wire sgmii_clk_en_n_0;
  wire userclk2;

  FDRE clk1_25_reg_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk1_25),
        .Q(clk1_25_reg),
        .R(reset_out));
  qsgmii_1218_qsgmii_1218_johnson_cntr_33 clk_div1_25
       (.clk1_25(clk1_25),
        .clk1_25_reg(clk1_25_reg),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .clk_en_1_25_fall_reg(clk_div1_25_n_1),
        .reset_out(reset_out),
        .userclk2(userclk2));
  FDRE clk_en_1_25_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div1_25_n_1),
        .Q(clk_en_1_25_fall),
        .R(reset_out));
  qsgmii_1218_qsgmii_1218_clock_div_34 clock_div_stg1
       (.clk_div10_plse_fall(clk_div10_plse_fall),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  LUT4 #(
    .INIT(16'hE2FF)) 
    sgmii_clk_en
       (.I0(clk_en_1_25_fall),
        .I1(data_out),
        .I2(clk_div10_plse_fall),
        .I3(data_sync_reg6),
        .O(sgmii_clk_en_n_0));
  FDRE sgmii_clk_en_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_n_0),
        .Q(E),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_clk_gen" *) 
module qsgmii_1218_qsgmii_1218_clk_gen_35
   (E,
    data_out,
    data_sync_reg6,
    reset_out,
    userclk2);
  output [0:0]E;
  input data_out;
  input data_sync_reg6;
  input reset_out;
  input userclk2;

  wire [0:0]E;
  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_rise;
  wire clk_div1_25_n_1;
  wire clk_en_1_25_fall;
  wire data_out;
  wire data_sync_reg6;
  wire reset_out;
  wire sgmii_clk_en_n_0;
  wire userclk2;

  FDRE clk1_25_reg_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk1_25),
        .Q(clk1_25_reg),
        .R(reset_out));
  qsgmii_1218_qsgmii_1218_johnson_cntr_39 clk_div1_25
       (.clk1_25(clk1_25),
        .clk1_25_reg(clk1_25_reg),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .clk_en_1_25_fall_reg(clk_div1_25_n_1),
        .reset_out(reset_out),
        .userclk2(userclk2));
  FDRE clk_en_1_25_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div1_25_n_1),
        .Q(clk_en_1_25_fall),
        .R(reset_out));
  qsgmii_1218_qsgmii_1218_clock_div_40 clock_div_stg1
       (.clk_div10_plse_fall(clk_div10_plse_fall),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  LUT4 #(
    .INIT(16'hE2FF)) 
    sgmii_clk_en
       (.I0(clk_en_1_25_fall),
        .I1(data_out),
        .I2(clk_div10_plse_fall),
        .I3(data_sync_reg6),
        .O(sgmii_clk_en_n_0));
  FDRE sgmii_clk_en_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_n_0),
        .Q(E),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_clk_gen" *) 
module qsgmii_1218_qsgmii_1218_clk_gen_46
   (rx_er_aligned_reg,
    data_out,
    data_sync_reg6,
    reset_out,
    userclk2);
  output rx_er_aligned_reg;
  input data_out;
  input data_sync_reg6;
  input reset_out;
  input userclk2;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_rise;
  wire clk_div1_25_n_1;
  wire clk_en_1_25_fall;
  wire data_out;
  wire data_sync_reg6;
  wire reset_out;
  wire rx_er_aligned_reg;
  wire sgmii_clk_en_n_0;
  wire userclk2;

  FDRE clk1_25_reg_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk1_25),
        .Q(clk1_25_reg),
        .R(reset_out));
  qsgmii_1218_qsgmii_1218_johnson_cntr_49 clk_div1_25
       (.clk1_25(clk1_25),
        .clk1_25_reg(clk1_25_reg),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .clk_en_1_25_fall_reg(clk_div1_25_n_1),
        .reset_out(reset_out),
        .userclk2(userclk2));
  FDRE clk_en_1_25_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div1_25_n_1),
        .Q(clk_en_1_25_fall),
        .R(reset_out));
  qsgmii_1218_qsgmii_1218_clock_div_50 clock_div_stg1
       (.clk_div10_plse_fall(clk_div10_plse_fall),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  LUT4 #(
    .INIT(16'hE2FF)) 
    sgmii_clk_en
       (.I0(clk_en_1_25_fall),
        .I1(data_out),
        .I2(clk_div10_plse_fall),
        .I3(data_sync_reg6),
        .O(sgmii_clk_en_n_0));
  FDRE sgmii_clk_en_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_n_0),
        .Q(rx_er_aligned_reg),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_clk_gen" *) 
module qsgmii_1218_qsgmii_1218_clk_gen_51
   (rx_er_aligned_reg,
    data_out,
    data_sync_reg6,
    reset_out,
    userclk2);
  output rx_er_aligned_reg;
  input data_out;
  input data_sync_reg6;
  input reset_out;
  input userclk2;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_rise;
  wire clk_div1_25_n_1;
  wire clk_en_1_25_fall;
  wire data_out;
  wire data_sync_reg6;
  wire reset_out;
  wire rx_er_aligned_reg;
  wire sgmii_clk_en_n_0;
  wire userclk2;

  FDRE clk1_25_reg_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk1_25),
        .Q(clk1_25_reg),
        .R(reset_out));
  qsgmii_1218_qsgmii_1218_johnson_cntr_55 clk_div1_25
       (.clk1_25(clk1_25),
        .clk1_25_reg(clk1_25_reg),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .clk_en_1_25_fall_reg(clk_div1_25_n_1),
        .reset_out(reset_out),
        .userclk2(userclk2));
  FDRE clk_en_1_25_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div1_25_n_1),
        .Q(clk_en_1_25_fall),
        .R(reset_out));
  qsgmii_1218_qsgmii_1218_clock_div_56 clock_div_stg1
       (.clk_div10_plse_fall(clk_div10_plse_fall),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  LUT4 #(
    .INIT(16'hE2FF)) 
    sgmii_clk_en
       (.I0(clk_en_1_25_fall),
        .I1(data_out),
        .I2(clk_div10_plse_fall),
        .I3(data_sync_reg6),
        .O(sgmii_clk_en_n_0));
  FDRE sgmii_clk_en_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_n_0),
        .Q(rx_er_aligned_reg),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_clk_gen" *) 
module qsgmii_1218_qsgmii_1218_clk_gen_57
   (rx_er_aligned_reg,
    data_out,
    data_sync_reg6,
    reset_out,
    userclk2);
  output rx_er_aligned_reg;
  input data_out;
  input data_sync_reg6;
  input reset_out;
  input userclk2;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_rise;
  wire clk_div1_25_n_1;
  wire clk_en_1_25_fall;
  wire data_out;
  wire data_sync_reg6;
  wire reset_out;
  wire rx_er_aligned_reg;
  wire sgmii_clk_en_n_0;
  wire userclk2;

  FDRE clk1_25_reg_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk1_25),
        .Q(clk1_25_reg),
        .R(reset_out));
  qsgmii_1218_qsgmii_1218_johnson_cntr_61 clk_div1_25
       (.clk1_25(clk1_25),
        .clk1_25_reg(clk1_25_reg),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .clk_en_1_25_fall_reg(clk_div1_25_n_1),
        .reset_out(reset_out),
        .userclk2(userclk2));
  FDRE clk_en_1_25_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div1_25_n_1),
        .Q(clk_en_1_25_fall),
        .R(reset_out));
  qsgmii_1218_qsgmii_1218_clock_div_62 clock_div_stg1
       (.clk_div10_plse_fall(clk_div10_plse_fall),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  LUT4 #(
    .INIT(16'hE2FF)) 
    sgmii_clk_en
       (.I0(clk_en_1_25_fall),
        .I1(data_out),
        .I2(clk_div10_plse_fall),
        .I3(data_sync_reg6),
        .O(sgmii_clk_en_n_0));
  FDRE sgmii_clk_en_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_n_0),
        .Q(rx_er_aligned_reg),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_clk_gen" *) 
module qsgmii_1218_qsgmii_1218_clk_gen_63
   (rx_er_aligned_reg,
    data_out,
    data_sync_reg6,
    reset_out,
    userclk2);
  output rx_er_aligned_reg;
  input data_out;
  input data_sync_reg6;
  input reset_out;
  input userclk2;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_rise;
  wire clk_div1_25_n_1;
  wire clk_en_1_25_fall;
  wire data_out;
  wire data_sync_reg6;
  wire reset_out;
  wire rx_er_aligned_reg;
  wire sgmii_clk_en_n_0;
  wire userclk2;

  FDRE clk1_25_reg_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk1_25),
        .Q(clk1_25_reg),
        .R(reset_out));
  qsgmii_1218_qsgmii_1218_johnson_cntr_67 clk_div1_25
       (.clk1_25(clk1_25),
        .clk1_25_reg(clk1_25_reg),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .clk_en_1_25_fall_reg(clk_div1_25_n_1),
        .reset_out(reset_out),
        .userclk2(userclk2));
  FDRE clk_en_1_25_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div1_25_n_1),
        .Q(clk_en_1_25_fall),
        .R(reset_out));
  qsgmii_1218_qsgmii_1218_clock_div_68 clock_div_stg1
       (.clk_div10_plse_fall(clk_div10_plse_fall),
        .clk_div10_plse_rise(clk_div10_plse_rise),
        .reset_out(reset_out),
        .userclk2(userclk2));
  LUT4 #(
    .INIT(16'hE2FF)) 
    sgmii_clk_en
       (.I0(clk_en_1_25_fall),
        .I1(data_out),
        .I2(clk_div10_plse_fall),
        .I3(data_sync_reg6),
        .O(sgmii_clk_en_n_0));
  FDRE sgmii_clk_en_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sgmii_clk_en_n_0),
        .Q(rx_er_aligned_reg),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_clock_div" *) 
module qsgmii_1218_qsgmii_1218_clock_div
   (clk_div10_plse_rise,
    clk_div10_plse_fall,
    reset_out,
    userclk2);
  output clk_div10_plse_rise;
  output clk_div10_plse_fall;
  input reset_out;
  input userclk2;

  wire [2:0]clk_counter_neg_stg1;
  wire [2:0]clk_counter_pos_stg1;
  wire \clk_counter_pos_stg1[0]_i_1__2_n_0 ;
  wire \clk_counter_pos_stg1[1]_i_1_n_0 ;
  wire \clk_counter_pos_stg1[2]_i_1_n_0 ;
  wire clk_div10_i_1__2_n_0;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_fall_i_1__2_n_0;
  wire clk_div10_plse_rise;
  wire clk_div10_plse_rise0;
  wire clk_div10_reg1;
  wire clk_div10_reg_n_0;
  wire clk_div5_pos_i_1__2_n_0;
  wire clk_div5_pos_reg_n_0;
  wire clk_div5_reg1;
  wire reset_out;
  wire userclk2;

  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[0]),
        .Q(clk_counter_neg_stg1[0]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[1]),
        .Q(clk_counter_neg_stg1[1]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[2]),
        .Q(clk_counter_neg_stg1[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair389" *) 
  LUT3 #(
    .INIT(8'h0B)) 
    \clk_counter_pos_stg1[0]_i_1__2 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[2]),
        .I2(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[0]_i_1__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \clk_counter_pos_stg1[1]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair389" *) 
  LUT3 #(
    .INIT(8'h68)) 
    \clk_counter_pos_stg1[2]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .I2(clk_counter_pos_stg1[2]),
        .O(\clk_counter_pos_stg1[2]_i_1_n_0 ));
  FDRE \clk_counter_pos_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[0]_i_1__2_n_0 ),
        .Q(clk_counter_pos_stg1[0]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[1]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[1]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[2]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[2]),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair388" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    clk_div10_i_1__2
       (.I0(clk_div5_reg1),
        .I1(clk_div5_pos_reg_n_0),
        .I2(clk_div10_reg_n_0),
        .O(clk_div10_i_1__2_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_fall_i_1__2
       (.I0(clk_div10_reg1),
        .I1(clk_div10_reg_n_0),
        .O(clk_div10_plse_fall_i_1__2_n_0));
  FDRE clk_div10_plse_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_fall_i_1__2_n_0),
        .Q(clk_div10_plse_fall),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair388" *) 
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_rise_i_1__2
       (.I0(clk_div10_reg_n_0),
        .I1(clk_div10_reg1),
        .O(clk_div10_plse_rise0));
  FDRE clk_div10_plse_rise_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_rise0),
        .Q(clk_div10_plse_rise),
        .R(reset_out));
  FDRE clk_div10_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_i_1__2_n_0),
        .Q(clk_div10_reg_n_0),
        .R(reset_out));
  FDRE clk_div10_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_reg_n_0),
        .Q(clk_div10_reg1),
        .R(reset_out));
  LUT4 #(
    .INIT(16'hFD04)) 
    clk_div5_pos_i_1__2
       (.I0(clk_counter_neg_stg1[2]),
        .I1(clk_counter_neg_stg1[0]),
        .I2(clk_counter_neg_stg1[1]),
        .I3(clk_div5_pos_reg_n_0),
        .O(clk_div5_pos_i_1__2_n_0));
  FDRE clk_div5_pos_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_i_1__2_n_0),
        .Q(clk_div5_pos_reg_n_0),
        .R(reset_out));
  FDRE clk_div5_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_reg_n_0),
        .Q(clk_div5_reg1),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_clock_div" *) 
module qsgmii_1218_qsgmii_1218_clock_div_28
   (clk_div10_plse_rise,
    clk_div10_plse_fall,
    reset_out,
    userclk2);
  output clk_div10_plse_rise;
  output clk_div10_plse_fall;
  input reset_out;
  input userclk2;

  wire [2:0]clk_counter_neg_stg1;
  wire [2:0]clk_counter_pos_stg1;
  wire \clk_counter_pos_stg1[0]_i_1__1_n_0 ;
  wire \clk_counter_pos_stg1[1]_i_1_n_0 ;
  wire \clk_counter_pos_stg1[2]_i_1_n_0 ;
  wire clk_div10_i_1__1_n_0;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_fall_i_1__1_n_0;
  wire clk_div10_plse_rise;
  wire clk_div10_plse_rise0;
  wire clk_div10_reg1;
  wire clk_div10_reg_n_0;
  wire clk_div5_pos_i_1__1_n_0;
  wire clk_div5_pos_reg_n_0;
  wire clk_div5_reg1;
  wire reset_out;
  wire userclk2;

  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[0]),
        .Q(clk_counter_neg_stg1[0]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[1]),
        .Q(clk_counter_neg_stg1[1]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[2]),
        .Q(clk_counter_neg_stg1[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair387" *) 
  LUT3 #(
    .INIT(8'h0B)) 
    \clk_counter_pos_stg1[0]_i_1__1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[2]),
        .I2(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[0]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \clk_counter_pos_stg1[1]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair387" *) 
  LUT3 #(
    .INIT(8'h68)) 
    \clk_counter_pos_stg1[2]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .I2(clk_counter_pos_stg1[2]),
        .O(\clk_counter_pos_stg1[2]_i_1_n_0 ));
  FDRE \clk_counter_pos_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[0]_i_1__1_n_0 ),
        .Q(clk_counter_pos_stg1[0]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[1]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[1]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[2]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[2]),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair386" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    clk_div10_i_1__1
       (.I0(clk_div5_reg1),
        .I1(clk_div5_pos_reg_n_0),
        .I2(clk_div10_reg_n_0),
        .O(clk_div10_i_1__1_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_fall_i_1__1
       (.I0(clk_div10_reg1),
        .I1(clk_div10_reg_n_0),
        .O(clk_div10_plse_fall_i_1__1_n_0));
  FDRE clk_div10_plse_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_fall_i_1__1_n_0),
        .Q(clk_div10_plse_fall),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair386" *) 
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_rise_i_1__1
       (.I0(clk_div10_reg_n_0),
        .I1(clk_div10_reg1),
        .O(clk_div10_plse_rise0));
  FDRE clk_div10_plse_rise_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_rise0),
        .Q(clk_div10_plse_rise),
        .R(reset_out));
  FDRE clk_div10_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_i_1__1_n_0),
        .Q(clk_div10_reg_n_0),
        .R(reset_out));
  FDRE clk_div10_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_reg_n_0),
        .Q(clk_div10_reg1),
        .R(reset_out));
  LUT4 #(
    .INIT(16'hFD04)) 
    clk_div5_pos_i_1__1
       (.I0(clk_counter_neg_stg1[2]),
        .I1(clk_counter_neg_stg1[0]),
        .I2(clk_counter_neg_stg1[1]),
        .I3(clk_div5_pos_reg_n_0),
        .O(clk_div5_pos_i_1__1_n_0));
  FDRE clk_div5_pos_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_i_1__1_n_0),
        .Q(clk_div5_pos_reg_n_0),
        .R(reset_out));
  FDRE clk_div5_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_reg_n_0),
        .Q(clk_div5_reg1),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_clock_div" *) 
module qsgmii_1218_qsgmii_1218_clock_div_34
   (clk_div10_plse_rise,
    clk_div10_plse_fall,
    reset_out,
    userclk2);
  output clk_div10_plse_rise;
  output clk_div10_plse_fall;
  input reset_out;
  input userclk2;

  wire [2:0]clk_counter_neg_stg1;
  wire [2:0]clk_counter_pos_stg1;
  wire \clk_counter_pos_stg1[0]_i_1__0_n_0 ;
  wire \clk_counter_pos_stg1[1]_i_1_n_0 ;
  wire \clk_counter_pos_stg1[2]_i_1_n_0 ;
  wire clk_div10_i_1__0_n_0;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_fall_i_1__0_n_0;
  wire clk_div10_plse_rise;
  wire clk_div10_plse_rise0;
  wire clk_div10_reg1;
  wire clk_div10_reg_n_0;
  wire clk_div5_pos_i_1__0_n_0;
  wire clk_div5_pos_reg_n_0;
  wire clk_div5_reg1;
  wire reset_out;
  wire userclk2;

  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[0]),
        .Q(clk_counter_neg_stg1[0]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[1]),
        .Q(clk_counter_neg_stg1[1]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[2]),
        .Q(clk_counter_neg_stg1[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair385" *) 
  LUT3 #(
    .INIT(8'h0B)) 
    \clk_counter_pos_stg1[0]_i_1__0 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[2]),
        .I2(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \clk_counter_pos_stg1[1]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair385" *) 
  LUT3 #(
    .INIT(8'h68)) 
    \clk_counter_pos_stg1[2]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .I2(clk_counter_pos_stg1[2]),
        .O(\clk_counter_pos_stg1[2]_i_1_n_0 ));
  FDRE \clk_counter_pos_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[0]_i_1__0_n_0 ),
        .Q(clk_counter_pos_stg1[0]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[1]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[1]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[2]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[2]),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair384" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    clk_div10_i_1__0
       (.I0(clk_div5_reg1),
        .I1(clk_div5_pos_reg_n_0),
        .I2(clk_div10_reg_n_0),
        .O(clk_div10_i_1__0_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_fall_i_1__0
       (.I0(clk_div10_reg1),
        .I1(clk_div10_reg_n_0),
        .O(clk_div10_plse_fall_i_1__0_n_0));
  FDRE clk_div10_plse_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_fall_i_1__0_n_0),
        .Q(clk_div10_plse_fall),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair384" *) 
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_rise_i_1__0
       (.I0(clk_div10_reg_n_0),
        .I1(clk_div10_reg1),
        .O(clk_div10_plse_rise0));
  FDRE clk_div10_plse_rise_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_rise0),
        .Q(clk_div10_plse_rise),
        .R(reset_out));
  FDRE clk_div10_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_i_1__0_n_0),
        .Q(clk_div10_reg_n_0),
        .R(reset_out));
  FDRE clk_div10_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_reg_n_0),
        .Q(clk_div10_reg1),
        .R(reset_out));
  LUT4 #(
    .INIT(16'hFD04)) 
    clk_div5_pos_i_1__0
       (.I0(clk_counter_neg_stg1[2]),
        .I1(clk_counter_neg_stg1[0]),
        .I2(clk_counter_neg_stg1[1]),
        .I3(clk_div5_pos_reg_n_0),
        .O(clk_div5_pos_i_1__0_n_0));
  FDRE clk_div5_pos_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_i_1__0_n_0),
        .Q(clk_div5_pos_reg_n_0),
        .R(reset_out));
  FDRE clk_div5_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_reg_n_0),
        .Q(clk_div5_reg1),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_clock_div" *) 
module qsgmii_1218_qsgmii_1218_clock_div_40
   (clk_div10_plse_rise,
    clk_div10_plse_fall,
    reset_out,
    userclk2);
  output clk_div10_plse_rise;
  output clk_div10_plse_fall;
  input reset_out;
  input userclk2;

  wire [2:0]clk_counter_neg_stg1;
  wire [2:0]clk_counter_pos_stg1;
  wire \clk_counter_pos_stg1[0]_i_1_n_0 ;
  wire \clk_counter_pos_stg1[1]_i_1_n_0 ;
  wire \clk_counter_pos_stg1[2]_i_1_n_0 ;
  wire clk_div10_i_1_n_0;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_fall_i_1_n_0;
  wire clk_div10_plse_rise;
  wire clk_div10_plse_rise0;
  wire clk_div10_reg1;
  wire clk_div10_reg_n_0;
  wire clk_div5_pos_i_1_n_0;
  wire clk_div5_pos_reg_n_0;
  wire clk_div5_reg1;
  wire reset_out;
  wire userclk2;

  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[0]),
        .Q(clk_counter_neg_stg1[0]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[1]),
        .Q(clk_counter_neg_stg1[1]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[2]),
        .Q(clk_counter_neg_stg1[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair383" *) 
  LUT3 #(
    .INIT(8'h0B)) 
    \clk_counter_pos_stg1[0]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[2]),
        .I2(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \clk_counter_pos_stg1[1]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair383" *) 
  LUT3 #(
    .INIT(8'h68)) 
    \clk_counter_pos_stg1[2]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .I2(clk_counter_pos_stg1[2]),
        .O(\clk_counter_pos_stg1[2]_i_1_n_0 ));
  FDRE \clk_counter_pos_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[0]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[0]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[1]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[1]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[2]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[2]),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair382" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    clk_div10_i_1
       (.I0(clk_div5_reg1),
        .I1(clk_div5_pos_reg_n_0),
        .I2(clk_div10_reg_n_0),
        .O(clk_div10_i_1_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_fall_i_1
       (.I0(clk_div10_reg1),
        .I1(clk_div10_reg_n_0),
        .O(clk_div10_plse_fall_i_1_n_0));
  FDRE clk_div10_plse_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_fall_i_1_n_0),
        .Q(clk_div10_plse_fall),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair382" *) 
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_rise_i_1
       (.I0(clk_div10_reg_n_0),
        .I1(clk_div10_reg1),
        .O(clk_div10_plse_rise0));
  FDRE clk_div10_plse_rise_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_rise0),
        .Q(clk_div10_plse_rise),
        .R(reset_out));
  FDRE clk_div10_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_i_1_n_0),
        .Q(clk_div10_reg_n_0),
        .R(reset_out));
  FDRE clk_div10_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_reg_n_0),
        .Q(clk_div10_reg1),
        .R(reset_out));
  LUT4 #(
    .INIT(16'hFD04)) 
    clk_div5_pos_i_1
       (.I0(clk_counter_neg_stg1[2]),
        .I1(clk_counter_neg_stg1[0]),
        .I2(clk_counter_neg_stg1[1]),
        .I3(clk_div5_pos_reg_n_0),
        .O(clk_div5_pos_i_1_n_0));
  FDRE clk_div5_pos_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_i_1_n_0),
        .Q(clk_div5_pos_reg_n_0),
        .R(reset_out));
  FDRE clk_div5_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_reg_n_0),
        .Q(clk_div5_reg1),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_clock_div" *) 
module qsgmii_1218_qsgmii_1218_clock_div_50
   (clk_div10_plse_rise,
    clk_div10_plse_fall,
    reset_out,
    userclk2);
  output clk_div10_plse_rise;
  output clk_div10_plse_fall;
  input reset_out;
  input userclk2;

  wire [2:0]clk_counter_neg_stg1;
  wire [2:0]clk_counter_pos_stg1;
  wire \clk_counter_pos_stg1[0]_i_1__6_n_0 ;
  wire \clk_counter_pos_stg1[1]_i_1_n_0 ;
  wire \clk_counter_pos_stg1[2]_i_1_n_0 ;
  wire clk_div10_i_1__6_n_0;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_fall_i_1__6_n_0;
  wire clk_div10_plse_rise;
  wire clk_div10_plse_rise0;
  wire clk_div10_reg1;
  wire clk_div10_reg_n_0;
  wire clk_div5_pos_i_1__6_n_0;
  wire clk_div5_pos_reg_n_0;
  wire clk_div5_reg1;
  wire reset_out;
  wire userclk2;

  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[0]),
        .Q(clk_counter_neg_stg1[0]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[1]),
        .Q(clk_counter_neg_stg1[1]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[2]),
        .Q(clk_counter_neg_stg1[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair376" *) 
  LUT3 #(
    .INIT(8'h0B)) 
    \clk_counter_pos_stg1[0]_i_1__6 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[2]),
        .I2(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[0]_i_1__6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \clk_counter_pos_stg1[1]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair376" *) 
  LUT3 #(
    .INIT(8'h68)) 
    \clk_counter_pos_stg1[2]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .I2(clk_counter_pos_stg1[2]),
        .O(\clk_counter_pos_stg1[2]_i_1_n_0 ));
  FDRE \clk_counter_pos_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[0]_i_1__6_n_0 ),
        .Q(clk_counter_pos_stg1[0]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[1]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[1]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[2]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[2]),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair375" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    clk_div10_i_1__6
       (.I0(clk_div5_reg1),
        .I1(clk_div5_pos_reg_n_0),
        .I2(clk_div10_reg_n_0),
        .O(clk_div10_i_1__6_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_fall_i_1__6
       (.I0(clk_div10_reg1),
        .I1(clk_div10_reg_n_0),
        .O(clk_div10_plse_fall_i_1__6_n_0));
  FDRE clk_div10_plse_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_fall_i_1__6_n_0),
        .Q(clk_div10_plse_fall),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair375" *) 
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_rise_i_1__6
       (.I0(clk_div10_reg_n_0),
        .I1(clk_div10_reg1),
        .O(clk_div10_plse_rise0));
  FDRE clk_div10_plse_rise_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_rise0),
        .Q(clk_div10_plse_rise),
        .R(reset_out));
  FDRE clk_div10_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_i_1__6_n_0),
        .Q(clk_div10_reg_n_0),
        .R(reset_out));
  FDRE clk_div10_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_reg_n_0),
        .Q(clk_div10_reg1),
        .R(reset_out));
  LUT4 #(
    .INIT(16'hFD04)) 
    clk_div5_pos_i_1__6
       (.I0(clk_counter_neg_stg1[2]),
        .I1(clk_counter_neg_stg1[0]),
        .I2(clk_counter_neg_stg1[1]),
        .I3(clk_div5_pos_reg_n_0),
        .O(clk_div5_pos_i_1__6_n_0));
  FDRE clk_div5_pos_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_i_1__6_n_0),
        .Q(clk_div5_pos_reg_n_0),
        .R(reset_out));
  FDRE clk_div5_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_reg_n_0),
        .Q(clk_div5_reg1),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_clock_div" *) 
module qsgmii_1218_qsgmii_1218_clock_div_56
   (clk_div10_plse_rise,
    clk_div10_plse_fall,
    reset_out,
    userclk2);
  output clk_div10_plse_rise;
  output clk_div10_plse_fall;
  input reset_out;
  input userclk2;

  wire [2:0]clk_counter_neg_stg1;
  wire [2:0]clk_counter_pos_stg1;
  wire \clk_counter_pos_stg1[0]_i_1__5_n_0 ;
  wire \clk_counter_pos_stg1[1]_i_1_n_0 ;
  wire \clk_counter_pos_stg1[2]_i_1_n_0 ;
  wire clk_div10_i_1__5_n_0;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_fall_i_1__5_n_0;
  wire clk_div10_plse_rise;
  wire clk_div10_plse_rise0;
  wire clk_div10_reg1;
  wire clk_div10_reg_n_0;
  wire clk_div5_pos_i_1__5_n_0;
  wire clk_div5_pos_reg_n_0;
  wire clk_div5_reg1;
  wire reset_out;
  wire userclk2;

  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[0]),
        .Q(clk_counter_neg_stg1[0]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[1]),
        .Q(clk_counter_neg_stg1[1]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[2]),
        .Q(clk_counter_neg_stg1[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair369" *) 
  LUT3 #(
    .INIT(8'h0B)) 
    \clk_counter_pos_stg1[0]_i_1__5 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[2]),
        .I2(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[0]_i_1__5_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \clk_counter_pos_stg1[1]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair369" *) 
  LUT3 #(
    .INIT(8'h68)) 
    \clk_counter_pos_stg1[2]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .I2(clk_counter_pos_stg1[2]),
        .O(\clk_counter_pos_stg1[2]_i_1_n_0 ));
  FDRE \clk_counter_pos_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[0]_i_1__5_n_0 ),
        .Q(clk_counter_pos_stg1[0]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[1]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[1]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[2]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[2]),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair368" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    clk_div10_i_1__5
       (.I0(clk_div5_reg1),
        .I1(clk_div5_pos_reg_n_0),
        .I2(clk_div10_reg_n_0),
        .O(clk_div10_i_1__5_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_fall_i_1__5
       (.I0(clk_div10_reg1),
        .I1(clk_div10_reg_n_0),
        .O(clk_div10_plse_fall_i_1__5_n_0));
  FDRE clk_div10_plse_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_fall_i_1__5_n_0),
        .Q(clk_div10_plse_fall),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair368" *) 
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_rise_i_1__5
       (.I0(clk_div10_reg_n_0),
        .I1(clk_div10_reg1),
        .O(clk_div10_plse_rise0));
  FDRE clk_div10_plse_rise_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_rise0),
        .Q(clk_div10_plse_rise),
        .R(reset_out));
  FDRE clk_div10_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_i_1__5_n_0),
        .Q(clk_div10_reg_n_0),
        .R(reset_out));
  FDRE clk_div10_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_reg_n_0),
        .Q(clk_div10_reg1),
        .R(reset_out));
  LUT4 #(
    .INIT(16'hFD04)) 
    clk_div5_pos_i_1__5
       (.I0(clk_counter_neg_stg1[2]),
        .I1(clk_counter_neg_stg1[0]),
        .I2(clk_counter_neg_stg1[1]),
        .I3(clk_div5_pos_reg_n_0),
        .O(clk_div5_pos_i_1__5_n_0));
  FDRE clk_div5_pos_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_i_1__5_n_0),
        .Q(clk_div5_pos_reg_n_0),
        .R(reset_out));
  FDRE clk_div5_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_reg_n_0),
        .Q(clk_div5_reg1),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_clock_div" *) 
module qsgmii_1218_qsgmii_1218_clock_div_62
   (clk_div10_plse_rise,
    clk_div10_plse_fall,
    reset_out,
    userclk2);
  output clk_div10_plse_rise;
  output clk_div10_plse_fall;
  input reset_out;
  input userclk2;

  wire [2:0]clk_counter_neg_stg1;
  wire [2:0]clk_counter_pos_stg1;
  wire \clk_counter_pos_stg1[0]_i_1__4_n_0 ;
  wire \clk_counter_pos_stg1[1]_i_1_n_0 ;
  wire \clk_counter_pos_stg1[2]_i_1_n_0 ;
  wire clk_div10_i_1__4_n_0;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_fall_i_1__4_n_0;
  wire clk_div10_plse_rise;
  wire clk_div10_plse_rise0;
  wire clk_div10_reg1;
  wire clk_div10_reg_n_0;
  wire clk_div5_pos_i_1__4_n_0;
  wire clk_div5_pos_reg_n_0;
  wire clk_div5_reg1;
  wire reset_out;
  wire userclk2;

  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[0]),
        .Q(clk_counter_neg_stg1[0]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[1]),
        .Q(clk_counter_neg_stg1[1]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[2]),
        .Q(clk_counter_neg_stg1[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair362" *) 
  LUT3 #(
    .INIT(8'h0B)) 
    \clk_counter_pos_stg1[0]_i_1__4 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[2]),
        .I2(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[0]_i_1__4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \clk_counter_pos_stg1[1]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair362" *) 
  LUT3 #(
    .INIT(8'h68)) 
    \clk_counter_pos_stg1[2]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .I2(clk_counter_pos_stg1[2]),
        .O(\clk_counter_pos_stg1[2]_i_1_n_0 ));
  FDRE \clk_counter_pos_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[0]_i_1__4_n_0 ),
        .Q(clk_counter_pos_stg1[0]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[1]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[1]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[2]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[2]),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair361" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    clk_div10_i_1__4
       (.I0(clk_div5_reg1),
        .I1(clk_div5_pos_reg_n_0),
        .I2(clk_div10_reg_n_0),
        .O(clk_div10_i_1__4_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_fall_i_1__4
       (.I0(clk_div10_reg1),
        .I1(clk_div10_reg_n_0),
        .O(clk_div10_plse_fall_i_1__4_n_0));
  FDRE clk_div10_plse_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_fall_i_1__4_n_0),
        .Q(clk_div10_plse_fall),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair361" *) 
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_rise_i_1__4
       (.I0(clk_div10_reg_n_0),
        .I1(clk_div10_reg1),
        .O(clk_div10_plse_rise0));
  FDRE clk_div10_plse_rise_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_rise0),
        .Q(clk_div10_plse_rise),
        .R(reset_out));
  FDRE clk_div10_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_i_1__4_n_0),
        .Q(clk_div10_reg_n_0),
        .R(reset_out));
  FDRE clk_div10_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_reg_n_0),
        .Q(clk_div10_reg1),
        .R(reset_out));
  LUT4 #(
    .INIT(16'hFD04)) 
    clk_div5_pos_i_1__4
       (.I0(clk_counter_neg_stg1[2]),
        .I1(clk_counter_neg_stg1[0]),
        .I2(clk_counter_neg_stg1[1]),
        .I3(clk_div5_pos_reg_n_0),
        .O(clk_div5_pos_i_1__4_n_0));
  FDRE clk_div5_pos_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_i_1__4_n_0),
        .Q(clk_div5_pos_reg_n_0),
        .R(reset_out));
  FDRE clk_div5_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_reg_n_0),
        .Q(clk_div5_reg1),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_clock_div" *) 
module qsgmii_1218_qsgmii_1218_clock_div_68
   (clk_div10_plse_rise,
    clk_div10_plse_fall,
    reset_out,
    userclk2);
  output clk_div10_plse_rise;
  output clk_div10_plse_fall;
  input reset_out;
  input userclk2;

  wire [2:0]clk_counter_neg_stg1;
  wire [2:0]clk_counter_pos_stg1;
  wire \clk_counter_pos_stg1[0]_i_1__3_n_0 ;
  wire \clk_counter_pos_stg1[1]_i_1_n_0 ;
  wire \clk_counter_pos_stg1[2]_i_1_n_0 ;
  wire clk_div10_i_1__3_n_0;
  wire clk_div10_plse_fall;
  wire clk_div10_plse_fall_i_1__3_n_0;
  wire clk_div10_plse_rise;
  wire clk_div10_plse_rise0;
  wire clk_div10_reg1;
  wire clk_div10_reg_n_0;
  wire clk_div5_pos_i_1__3_n_0;
  wire clk_div5_pos_reg_n_0;
  wire clk_div5_reg1;
  wire reset_out;
  wire userclk2;

  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[0]),
        .Q(clk_counter_neg_stg1[0]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[1]),
        .Q(clk_counter_neg_stg1[1]),
        .R(1'b0));
  FDRE #(
    .IS_C_INVERTED(1'b1)) 
    \clk_counter_neg_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_counter_pos_stg1[2]),
        .Q(clk_counter_neg_stg1[2]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair355" *) 
  LUT3 #(
    .INIT(8'h0B)) 
    \clk_counter_pos_stg1[0]_i_1__3 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[2]),
        .I2(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[0]_i_1__3_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \clk_counter_pos_stg1[1]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .O(\clk_counter_pos_stg1[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair355" *) 
  LUT3 #(
    .INIT(8'h68)) 
    \clk_counter_pos_stg1[2]_i_1 
       (.I0(clk_counter_pos_stg1[1]),
        .I1(clk_counter_pos_stg1[0]),
        .I2(clk_counter_pos_stg1[2]),
        .O(\clk_counter_pos_stg1[2]_i_1_n_0 ));
  FDRE \clk_counter_pos_stg1_reg[0] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[0]_i_1__3_n_0 ),
        .Q(clk_counter_pos_stg1[0]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[1]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[1]),
        .R(reset_out));
  FDRE \clk_counter_pos_stg1_reg[2] 
       (.C(userclk2),
        .CE(1'b1),
        .D(\clk_counter_pos_stg1[2]_i_1_n_0 ),
        .Q(clk_counter_pos_stg1[2]),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair354" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    clk_div10_i_1__3
       (.I0(clk_div5_reg1),
        .I1(clk_div5_pos_reg_n_0),
        .I2(clk_div10_reg_n_0),
        .O(clk_div10_i_1__3_n_0));
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_fall_i_1__3
       (.I0(clk_div10_reg1),
        .I1(clk_div10_reg_n_0),
        .O(clk_div10_plse_fall_i_1__3_n_0));
  FDRE clk_div10_plse_fall_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_fall_i_1__3_n_0),
        .Q(clk_div10_plse_fall),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair354" *) 
  LUT2 #(
    .INIT(4'h2)) 
    clk_div10_plse_rise_i_1__3
       (.I0(clk_div10_reg_n_0),
        .I1(clk_div10_reg1),
        .O(clk_div10_plse_rise0));
  FDRE clk_div10_plse_rise_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_plse_rise0),
        .Q(clk_div10_plse_rise),
        .R(reset_out));
  FDRE clk_div10_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_i_1__3_n_0),
        .Q(clk_div10_reg_n_0),
        .R(reset_out));
  FDRE clk_div10_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div10_reg_n_0),
        .Q(clk_div10_reg1),
        .R(reset_out));
  LUT4 #(
    .INIT(16'hFD04)) 
    clk_div5_pos_i_1__3
       (.I0(clk_counter_neg_stg1[2]),
        .I1(clk_counter_neg_stg1[0]),
        .I2(clk_counter_neg_stg1[1]),
        .I3(clk_div5_pos_reg_n_0),
        .O(clk_div5_pos_i_1__3_n_0));
  FDRE clk_div5_pos_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_i_1__3_n_0),
        .Q(clk_div5_pos_reg_n_0),
        .R(reset_out));
  FDRE clk_div5_reg1_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(clk_div5_pos_reg_n_0),
        .Q(clk_div5_reg1),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_johnson_cntr" *) 
module qsgmii_1218_qsgmii_1218_johnson_cntr
   (clk1_25,
    clk_en_1_25_fall_reg,
    clk_div10_plse_rise,
    userclk2,
    clk1_25_reg,
    reset_out);
  output clk1_25;
  output clk_en_1_25_fall_reg;
  input clk_div10_plse_rise;
  input userclk2;
  input clk1_25_reg;
  input reset_out;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_rise;
  wire clk_en_1_25_fall_reg;
  wire reg1_i_1__2_n_0;
  wire reg1_reg_n_0;
  wire reg2_reg_n_0;
  wire reg4;
  wire reg5;
  wire reg5_reg_n_0;
  wire reset_out;
  wire userclk2;

  LUT2 #(
    .INIT(4'h2)) 
    clk_en_1_25_fall_i_1__2
       (.I0(clk1_25_reg),
        .I1(clk1_25),
        .O(clk_en_1_25_fall_reg));
  LUT1 #(
    .INIT(2'h1)) 
    reg1_i_1__2
       (.I0(reg5_reg_n_0),
        .O(reg1_i_1__2_n_0));
  FDRE reg1_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_i_1__2_n_0),
        .Q(reg1_reg_n_0),
        .R(reg5));
  FDRE reg2_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_reg_n_0),
        .Q(reg2_reg_n_0),
        .R(reg5));
  FDRE reg3_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg2_reg_n_0),
        .Q(clk1_25),
        .R(reg5));
  FDRE reg4_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(clk1_25),
        .Q(reg4),
        .R(reg5));
  LUT4 #(
    .INIT(16'hAEAA)) 
    reg5_i_1__2
       (.I0(reset_out),
        .I1(reg5_reg_n_0),
        .I2(reg4),
        .I3(clk_div10_plse_rise),
        .O(reg5));
  FDRE reg5_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg4),
        .Q(reg5_reg_n_0),
        .R(reg5));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_johnson_cntr" *) 
module qsgmii_1218_qsgmii_1218_johnson_cntr_27
   (clk1_25,
    clk_en_1_25_fall_reg,
    clk_div10_plse_rise,
    userclk2,
    clk1_25_reg,
    reset_out);
  output clk1_25;
  output clk_en_1_25_fall_reg;
  input clk_div10_plse_rise;
  input userclk2;
  input clk1_25_reg;
  input reset_out;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_rise;
  wire clk_en_1_25_fall_reg;
  wire reg1_i_1__1_n_0;
  wire reg1_reg_n_0;
  wire reg2_reg_n_0;
  wire reg4;
  wire reg5;
  wire reg5_reg_n_0;
  wire reset_out;
  wire userclk2;

  LUT2 #(
    .INIT(4'h2)) 
    clk_en_1_25_fall_i_1__1
       (.I0(clk1_25_reg),
        .I1(clk1_25),
        .O(clk_en_1_25_fall_reg));
  LUT1 #(
    .INIT(2'h1)) 
    reg1_i_1__1
       (.I0(reg5_reg_n_0),
        .O(reg1_i_1__1_n_0));
  FDRE reg1_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_i_1__1_n_0),
        .Q(reg1_reg_n_0),
        .R(reg5));
  FDRE reg2_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_reg_n_0),
        .Q(reg2_reg_n_0),
        .R(reg5));
  FDRE reg3_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg2_reg_n_0),
        .Q(clk1_25),
        .R(reg5));
  FDRE reg4_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(clk1_25),
        .Q(reg4),
        .R(reg5));
  LUT4 #(
    .INIT(16'hAEAA)) 
    reg5_i_1__1
       (.I0(reset_out),
        .I1(reg5_reg_n_0),
        .I2(reg4),
        .I3(clk_div10_plse_rise),
        .O(reg5));
  FDRE reg5_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg4),
        .Q(reg5_reg_n_0),
        .R(reg5));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_johnson_cntr" *) 
module qsgmii_1218_qsgmii_1218_johnson_cntr_33
   (clk1_25,
    clk_en_1_25_fall_reg,
    clk_div10_plse_rise,
    userclk2,
    clk1_25_reg,
    reset_out);
  output clk1_25;
  output clk_en_1_25_fall_reg;
  input clk_div10_plse_rise;
  input userclk2;
  input clk1_25_reg;
  input reset_out;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_rise;
  wire clk_en_1_25_fall_reg;
  wire reg1_i_1__0_n_0;
  wire reg1_reg_n_0;
  wire reg2_reg_n_0;
  wire reg4;
  wire reg5;
  wire reg5_reg_n_0;
  wire reset_out;
  wire userclk2;

  LUT2 #(
    .INIT(4'h2)) 
    clk_en_1_25_fall_i_1__0
       (.I0(clk1_25_reg),
        .I1(clk1_25),
        .O(clk_en_1_25_fall_reg));
  LUT1 #(
    .INIT(2'h1)) 
    reg1_i_1__0
       (.I0(reg5_reg_n_0),
        .O(reg1_i_1__0_n_0));
  FDRE reg1_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_i_1__0_n_0),
        .Q(reg1_reg_n_0),
        .R(reg5));
  FDRE reg2_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_reg_n_0),
        .Q(reg2_reg_n_0),
        .R(reg5));
  FDRE reg3_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg2_reg_n_0),
        .Q(clk1_25),
        .R(reg5));
  FDRE reg4_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(clk1_25),
        .Q(reg4),
        .R(reg5));
  LUT4 #(
    .INIT(16'hAEAA)) 
    reg5_i_1__0
       (.I0(reset_out),
        .I1(reg5_reg_n_0),
        .I2(reg4),
        .I3(clk_div10_plse_rise),
        .O(reg5));
  FDRE reg5_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg4),
        .Q(reg5_reg_n_0),
        .R(reg5));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_johnson_cntr" *) 
module qsgmii_1218_qsgmii_1218_johnson_cntr_39
   (clk1_25,
    clk_en_1_25_fall_reg,
    clk_div10_plse_rise,
    userclk2,
    clk1_25_reg,
    reset_out);
  output clk1_25;
  output clk_en_1_25_fall_reg;
  input clk_div10_plse_rise;
  input userclk2;
  input clk1_25_reg;
  input reset_out;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_rise;
  wire clk_en_1_25_fall_reg;
  wire reg1;
  wire reg1_i_1_n_0;
  wire reg2;
  wire reg4;
  wire reg5;
  wire reg5_reg_n_0;
  wire reset_out;
  wire userclk2;

  LUT2 #(
    .INIT(4'h2)) 
    clk_en_1_25_fall_i_1
       (.I0(clk1_25_reg),
        .I1(clk1_25),
        .O(clk_en_1_25_fall_reg));
  LUT1 #(
    .INIT(2'h1)) 
    reg1_i_1
       (.I0(reg5_reg_n_0),
        .O(reg1_i_1_n_0));
  FDRE reg1_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_i_1_n_0),
        .Q(reg1),
        .R(reg5));
  FDRE reg2_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1),
        .Q(reg2),
        .R(reg5));
  FDRE reg3_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg2),
        .Q(clk1_25),
        .R(reg5));
  FDRE reg4_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(clk1_25),
        .Q(reg4),
        .R(reg5));
  LUT4 #(
    .INIT(16'hAEAA)) 
    reg5_i_1
       (.I0(reset_out),
        .I1(reg5_reg_n_0),
        .I2(reg4),
        .I3(clk_div10_plse_rise),
        .O(reg5));
  FDRE reg5_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg4),
        .Q(reg5_reg_n_0),
        .R(reg5));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_johnson_cntr" *) 
module qsgmii_1218_qsgmii_1218_johnson_cntr_49
   (clk1_25,
    clk_en_1_25_fall_reg,
    clk_div10_plse_rise,
    userclk2,
    clk1_25_reg,
    reset_out);
  output clk1_25;
  output clk_en_1_25_fall_reg;
  input clk_div10_plse_rise;
  input userclk2;
  input clk1_25_reg;
  input reset_out;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_rise;
  wire clk_en_1_25_fall_reg;
  wire reg1_i_1__6_n_0;
  wire reg1_reg_n_0;
  wire reg2_reg_n_0;
  wire reg4;
  wire reg5;
  wire reg5_reg_n_0;
  wire reset_out;
  wire userclk2;

  LUT2 #(
    .INIT(4'h2)) 
    clk_en_1_25_fall_i_1__6
       (.I0(clk1_25_reg),
        .I1(clk1_25),
        .O(clk_en_1_25_fall_reg));
  LUT1 #(
    .INIT(2'h1)) 
    reg1_i_1__6
       (.I0(reg5_reg_n_0),
        .O(reg1_i_1__6_n_0));
  FDRE reg1_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_i_1__6_n_0),
        .Q(reg1_reg_n_0),
        .R(reg5));
  FDRE reg2_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_reg_n_0),
        .Q(reg2_reg_n_0),
        .R(reg5));
  FDRE reg3_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg2_reg_n_0),
        .Q(clk1_25),
        .R(reg5));
  FDRE reg4_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(clk1_25),
        .Q(reg4),
        .R(reg5));
  LUT4 #(
    .INIT(16'hFF40)) 
    reg5_i_1__6
       (.I0(reg4),
        .I1(clk_div10_plse_rise),
        .I2(reg5_reg_n_0),
        .I3(reset_out),
        .O(reg5));
  FDRE reg5_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg4),
        .Q(reg5_reg_n_0),
        .R(reg5));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_johnson_cntr" *) 
module qsgmii_1218_qsgmii_1218_johnson_cntr_55
   (clk1_25,
    clk_en_1_25_fall_reg,
    clk_div10_plse_rise,
    userclk2,
    clk1_25_reg,
    reset_out);
  output clk1_25;
  output clk_en_1_25_fall_reg;
  input clk_div10_plse_rise;
  input userclk2;
  input clk1_25_reg;
  input reset_out;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_rise;
  wire clk_en_1_25_fall_reg;
  wire reg1_i_1__5_n_0;
  wire reg1_reg_n_0;
  wire reg2_reg_n_0;
  wire reg4;
  wire reg5;
  wire reg5_reg_n_0;
  wire reset_out;
  wire userclk2;

  LUT2 #(
    .INIT(4'h2)) 
    clk_en_1_25_fall_i_1__5
       (.I0(clk1_25_reg),
        .I1(clk1_25),
        .O(clk_en_1_25_fall_reg));
  LUT1 #(
    .INIT(2'h1)) 
    reg1_i_1__5
       (.I0(reg5_reg_n_0),
        .O(reg1_i_1__5_n_0));
  FDRE reg1_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_i_1__5_n_0),
        .Q(reg1_reg_n_0),
        .R(reg5));
  FDRE reg2_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_reg_n_0),
        .Q(reg2_reg_n_0),
        .R(reg5));
  FDRE reg3_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg2_reg_n_0),
        .Q(clk1_25),
        .R(reg5));
  FDRE reg4_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(clk1_25),
        .Q(reg4),
        .R(reg5));
  LUT4 #(
    .INIT(16'hFF40)) 
    reg5_i_1__5
       (.I0(reg4),
        .I1(clk_div10_plse_rise),
        .I2(reg5_reg_n_0),
        .I3(reset_out),
        .O(reg5));
  FDRE reg5_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg4),
        .Q(reg5_reg_n_0),
        .R(reg5));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_johnson_cntr" *) 
module qsgmii_1218_qsgmii_1218_johnson_cntr_61
   (clk1_25,
    clk_en_1_25_fall_reg,
    clk_div10_plse_rise,
    userclk2,
    clk1_25_reg,
    reset_out);
  output clk1_25;
  output clk_en_1_25_fall_reg;
  input clk_div10_plse_rise;
  input userclk2;
  input clk1_25_reg;
  input reset_out;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_rise;
  wire clk_en_1_25_fall_reg;
  wire reg1_i_1__4_n_0;
  wire reg1_reg_n_0;
  wire reg2_reg_n_0;
  wire reg4;
  wire reg5;
  wire reg5_reg_n_0;
  wire reset_out;
  wire userclk2;

  LUT2 #(
    .INIT(4'h2)) 
    clk_en_1_25_fall_i_1__4
       (.I0(clk1_25_reg),
        .I1(clk1_25),
        .O(clk_en_1_25_fall_reg));
  LUT1 #(
    .INIT(2'h1)) 
    reg1_i_1__4
       (.I0(reg5_reg_n_0),
        .O(reg1_i_1__4_n_0));
  FDRE reg1_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_i_1__4_n_0),
        .Q(reg1_reg_n_0),
        .R(reg5));
  FDRE reg2_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_reg_n_0),
        .Q(reg2_reg_n_0),
        .R(reg5));
  FDRE reg3_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg2_reg_n_0),
        .Q(clk1_25),
        .R(reg5));
  FDRE reg4_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(clk1_25),
        .Q(reg4),
        .R(reg5));
  LUT4 #(
    .INIT(16'hFF40)) 
    reg5_i_1__4
       (.I0(reg4),
        .I1(clk_div10_plse_rise),
        .I2(reg5_reg_n_0),
        .I3(reset_out),
        .O(reg5));
  FDRE reg5_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg4),
        .Q(reg5_reg_n_0),
        .R(reg5));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_johnson_cntr" *) 
module qsgmii_1218_qsgmii_1218_johnson_cntr_67
   (clk1_25,
    clk_en_1_25_fall_reg,
    clk_div10_plse_rise,
    userclk2,
    clk1_25_reg,
    reset_out);
  output clk1_25;
  output clk_en_1_25_fall_reg;
  input clk_div10_plse_rise;
  input userclk2;
  input clk1_25_reg;
  input reset_out;

  wire clk1_25;
  wire clk1_25_reg;
  wire clk_div10_plse_rise;
  wire clk_en_1_25_fall_reg;
  wire reg1_i_1__3_n_0;
  wire reg1_reg_n_0;
  wire reg2_reg_n_0;
  wire reg4;
  wire reg5;
  wire reg5_reg_n_0;
  wire reset_out;
  wire userclk2;

  LUT2 #(
    .INIT(4'h2)) 
    clk_en_1_25_fall_i_1__3
       (.I0(clk1_25_reg),
        .I1(clk1_25),
        .O(clk_en_1_25_fall_reg));
  LUT1 #(
    .INIT(2'h1)) 
    reg1_i_1__3
       (.I0(reg5_reg_n_0),
        .O(reg1_i_1__3_n_0));
  FDRE reg1_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_i_1__3_n_0),
        .Q(reg1_reg_n_0),
        .R(reg5));
  FDRE reg2_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg1_reg_n_0),
        .Q(reg2_reg_n_0),
        .R(reg5));
  FDRE reg3_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg2_reg_n_0),
        .Q(clk1_25),
        .R(reg5));
  FDRE reg4_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(clk1_25),
        .Q(reg4),
        .R(reg5));
  LUT4 #(
    .INIT(16'hFF40)) 
    reg5_i_1__3
       (.I0(reg4),
        .I1(clk_div10_plse_rise),
        .I2(reg5_reg_n_0),
        .I3(reset_out),
        .O(reg5));
  FDRE reg5_reg
       (.C(userclk2),
        .CE(clk_div10_plse_rise),
        .D(reg4),
        .Q(reg5_reg_n_0),
        .R(reg5));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_qsgmii_adapt" *) 
module qsgmii_1218_qsgmii_1218_qsgmii_adapt
   (gmii_rx_dv_out,
    gmii_rx_er_out,
    gmii_rx_dv_ch1_reg,
    gmii_rx_er_ch1_reg,
    gmii_rx_dv_ch2_reg,
    gmii_rx_er_ch2_reg,
    gmii_rx_dv_ch3_reg,
    gmii_rx_er_ch3_reg,
    Q,
    \gmii_rxd_ch1_reg[7] ,
    \gmii_rxd_ch2_reg[7] ,
    \gmii_rxd_ch3_reg[7] ,
    userclk2,
    gmii_rx_dv_ch0,
    gmii_rx_er_ch0,
    gmii_rx_dv_ch1,
    gmii_rx_er_ch1,
    gmii_rx_dv_ch2,
    gmii_rx_er_ch2,
    gmii_rx_dv_ch3,
    gmii_rx_er_ch3,
    reset,
    speed_is_10_100_ch0,
    speed_is_100_ch0,
    speed_is_10_100_ch1,
    speed_is_100_ch1,
    speed_is_10_100_ch2,
    speed_is_100_ch2,
    speed_is_10_100_ch3,
    speed_is_100_ch3,
    D,
    \RXD_reg[7] ,
    \RXD_reg[7]_0 ,
    \RXD_reg[7]_1 );
  output gmii_rx_dv_out;
  output gmii_rx_er_out;
  output gmii_rx_dv_ch1_reg;
  output gmii_rx_er_ch1_reg;
  output gmii_rx_dv_ch2_reg;
  output gmii_rx_er_ch2_reg;
  output gmii_rx_dv_ch3_reg;
  output gmii_rx_er_ch3_reg;
  output [7:0]Q;
  output [7:0]\gmii_rxd_ch1_reg[7] ;
  output [7:0]\gmii_rxd_ch2_reg[7] ;
  output [7:0]\gmii_rxd_ch3_reg[7] ;
  input userclk2;
  input gmii_rx_dv_ch0;
  input gmii_rx_er_ch0;
  input gmii_rx_dv_ch1;
  input gmii_rx_er_ch1;
  input gmii_rx_dv_ch2;
  input gmii_rx_er_ch2;
  input gmii_rx_dv_ch3;
  input gmii_rx_er_ch3;
  input reset;
  input speed_is_10_100_ch0;
  input speed_is_100_ch0;
  input speed_is_10_100_ch1;
  input speed_is_100_ch1;
  input speed_is_10_100_ch2;
  input speed_is_100_ch2;
  input speed_is_10_100_ch3;
  input speed_is_100_ch3;
  input [7:0]D;
  input [7:0]\RXD_reg[7] ;
  input [7:0]\RXD_reg[7]_0 ;
  input [7:0]\RXD_reg[7]_1 ;

  wire [7:0]D;
  wire [7:0]Q;
  wire [7:0]\RXD_reg[7] ;
  wire [7:0]\RXD_reg[7]_0 ;
  wire [7:0]\RXD_reg[7]_1 ;
  wire gmii_rx_dv_ch0;
  wire gmii_rx_dv_ch1;
  wire gmii_rx_dv_ch1_reg;
  wire gmii_rx_dv_ch2;
  wire gmii_rx_dv_ch2_reg;
  wire gmii_rx_dv_ch3;
  wire gmii_rx_dv_ch3_reg;
  wire gmii_rx_dv_out;
  wire gmii_rx_er_ch0;
  wire gmii_rx_er_ch1;
  wire gmii_rx_er_ch1_reg;
  wire gmii_rx_er_ch2;
  wire gmii_rx_er_ch2_reg;
  wire gmii_rx_er_ch3;
  wire gmii_rx_er_ch3_reg;
  wire gmii_rx_er_out;
  wire [7:0]\gmii_rxd_ch1_reg[7] ;
  wire [7:0]\gmii_rxd_ch2_reg[7] ;
  wire [7:0]\gmii_rxd_ch3_reg[7] ;
  wire reset;
  wire speed_is_100_ch0;
  wire speed_is_100_ch1;
  wire speed_is_100_ch2;
  wire speed_is_100_ch3;
  wire speed_is_10_100_ch0;
  wire speed_is_10_100_ch1;
  wire speed_is_10_100_ch2;
  wire speed_is_10_100_ch3;
  wire sync_reset;
  wire userclk2;

  qsgmii_1218_qsgmii_1218_reset_sync_41 gen_sync_reset
       (.reset(reset),
        .reset_out(sync_reset),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sgmii_adapt_42 sgmii_adapt_ch0
       (.D(D),
        .Q(Q),
        .gmii_rx_dv_ch0(gmii_rx_dv_ch0),
        .gmii_rx_dv_out(gmii_rx_dv_out),
        .gmii_rx_er_ch0(gmii_rx_er_ch0),
        .gmii_rx_er_out(gmii_rx_er_out),
        .reset_out(sync_reset),
        .speed_is_100_ch0(speed_is_100_ch0),
        .speed_is_10_100_ch0(speed_is_10_100_ch0),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sgmii_adapt_43 sgmii_adapt_ch1
       (.\RXD_reg[7] (\RXD_reg[7] ),
        .gmii_rx_dv_ch1(gmii_rx_dv_ch1),
        .gmii_rx_dv_ch1_reg(gmii_rx_dv_ch1_reg),
        .gmii_rx_er_ch1(gmii_rx_er_ch1),
        .gmii_rx_er_ch1_reg(gmii_rx_er_ch1_reg),
        .\gmii_rxd_ch1_reg[7] (\gmii_rxd_ch1_reg[7] ),
        .reset_out(sync_reset),
        .speed_is_100_ch1(speed_is_100_ch1),
        .speed_is_10_100_ch1(speed_is_10_100_ch1),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sgmii_adapt_44 sgmii_adapt_ch2
       (.\RXD_reg[7] (\RXD_reg[7]_0 ),
        .gmii_rx_dv_ch2(gmii_rx_dv_ch2),
        .gmii_rx_dv_ch2_reg(gmii_rx_dv_ch2_reg),
        .gmii_rx_er_ch2(gmii_rx_er_ch2),
        .gmii_rx_er_ch2_reg(gmii_rx_er_ch2_reg),
        .\gmii_rxd_ch2_reg[7] (\gmii_rxd_ch2_reg[7] ),
        .reset_out(sync_reset),
        .speed_is_100_ch2(speed_is_100_ch2),
        .speed_is_10_100_ch2(speed_is_10_100_ch2),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sgmii_adapt_45 sgmii_adapt_ch3
       (.\RXD_reg[7] (\RXD_reg[7]_1 ),
        .gmii_rx_dv_ch3(gmii_rx_dv_ch3),
        .gmii_rx_dv_ch3_reg(gmii_rx_dv_ch3_reg),
        .gmii_rx_er_ch3(gmii_rx_er_ch3),
        .gmii_rx_er_ch3_reg(gmii_rx_er_ch3_reg),
        .\gmii_rxd_ch3_reg[7] (\gmii_rxd_ch3_reg[7] ),
        .reset_out(sync_reset),
        .speed_is_100_ch3(speed_is_100_ch3),
        .speed_is_10_100_ch3(speed_is_10_100_ch3),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_qsgmii_adapt" *) 
module qsgmii_1218_qsgmii_1218_qsgmii_adapt_0
   (E,
    \gmii_txd_out_reg[7] ,
    \gmii_txd_out_reg[7]_0 ,
    \gmii_txd_out_reg[7]_1 ,
    gmii_tx_en_ch0,
    gmii_tx_er_ch0,
    gmii_tx_en_ch1,
    gmii_tx_er_ch1,
    gmii_tx_en_ch2,
    gmii_tx_er_ch2,
    gmii_tx_en_ch3,
    gmii_tx_er_ch3,
    Q,
    \TXD_REG1_reg[7] ,
    \TXD_REG1_reg[7]_0 ,
    \TXD_REG1_reg[7]_1 ,
    userclk2,
    gmii_tx_en_ch0_int1,
    gmii_tx_er_ch0_int1,
    gmii_tx_en_ch1_int1,
    gmii_tx_er_ch1_int1,
    gmii_tx_en_ch2_int1,
    gmii_tx_er_ch2_int1,
    gmii_tx_en_ch3_int1,
    gmii_tx_er_ch3_int1,
    reset,
    speed_is_10_100_ch0,
    speed_is_100_ch0,
    speed_is_10_100_ch1,
    speed_is_100_ch1,
    speed_is_10_100_ch2,
    speed_is_100_ch2,
    speed_is_10_100_ch3,
    speed_is_100_ch3,
    \gmii_txd_ch0_int1_reg[7] ,
    \gmii_txd_ch1_int1_reg[7] ,
    \gmii_txd_ch2_int1_reg[7] ,
    \gmii_txd_ch3_int1_reg[7] );
  output [0:0]E;
  output [0:0]\gmii_txd_out_reg[7] ;
  output [0:0]\gmii_txd_out_reg[7]_0 ;
  output [0:0]\gmii_txd_out_reg[7]_1 ;
  output gmii_tx_en_ch0;
  output gmii_tx_er_ch0;
  output gmii_tx_en_ch1;
  output gmii_tx_er_ch1;
  output gmii_tx_en_ch2;
  output gmii_tx_er_ch2;
  output gmii_tx_en_ch3;
  output gmii_tx_er_ch3;
  output [7:0]Q;
  output [7:0]\TXD_REG1_reg[7] ;
  output [7:0]\TXD_REG1_reg[7]_0 ;
  output [7:0]\TXD_REG1_reg[7]_1 ;
  input userclk2;
  input gmii_tx_en_ch0_int1;
  input gmii_tx_er_ch0_int1;
  input gmii_tx_en_ch1_int1;
  input gmii_tx_er_ch1_int1;
  input gmii_tx_en_ch2_int1;
  input gmii_tx_er_ch2_int1;
  input gmii_tx_en_ch3_int1;
  input gmii_tx_er_ch3_int1;
  input reset;
  input speed_is_10_100_ch0;
  input speed_is_100_ch0;
  input speed_is_10_100_ch1;
  input speed_is_100_ch1;
  input speed_is_10_100_ch2;
  input speed_is_100_ch2;
  input speed_is_10_100_ch3;
  input speed_is_100_ch3;
  input [7:0]\gmii_txd_ch0_int1_reg[7] ;
  input [7:0]\gmii_txd_ch1_int1_reg[7] ;
  input [7:0]\gmii_txd_ch2_int1_reg[7] ;
  input [7:0]\gmii_txd_ch3_int1_reg[7] ;

  wire [0:0]E;
  wire [7:0]Q;
  wire [7:0]\TXD_REG1_reg[7] ;
  wire [7:0]\TXD_REG1_reg[7]_0 ;
  wire [7:0]\TXD_REG1_reg[7]_1 ;
  wire gmii_tx_en_ch0;
  wire gmii_tx_en_ch0_int1;
  wire gmii_tx_en_ch1;
  wire gmii_tx_en_ch1_int1;
  wire gmii_tx_en_ch2;
  wire gmii_tx_en_ch2_int1;
  wire gmii_tx_en_ch3;
  wire gmii_tx_en_ch3_int1;
  wire gmii_tx_er_ch0;
  wire gmii_tx_er_ch0_int1;
  wire gmii_tx_er_ch1;
  wire gmii_tx_er_ch1_int1;
  wire gmii_tx_er_ch2;
  wire gmii_tx_er_ch2_int1;
  wire gmii_tx_er_ch3;
  wire gmii_tx_er_ch3_int1;
  wire [7:0]\gmii_txd_ch0_int1_reg[7] ;
  wire [7:0]\gmii_txd_ch1_int1_reg[7] ;
  wire [7:0]\gmii_txd_ch2_int1_reg[7] ;
  wire [7:0]\gmii_txd_ch3_int1_reg[7] ;
  wire [0:0]\gmii_txd_out_reg[7] ;
  wire [0:0]\gmii_txd_out_reg[7]_0 ;
  wire [0:0]\gmii_txd_out_reg[7]_1 ;
  wire reset;
  wire speed_is_100_ch0;
  wire speed_is_100_ch1;
  wire speed_is_100_ch2;
  wire speed_is_100_ch3;
  wire speed_is_10_100_ch0;
  wire speed_is_10_100_ch1;
  wire speed_is_10_100_ch2;
  wire speed_is_10_100_ch3;
  wire sync_reset;
  wire userclk2;

  qsgmii_1218_qsgmii_1218_reset_sync_17 gen_sync_reset
       (.reset(reset),
        .reset_out(sync_reset),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sgmii_adapt sgmii_adapt_ch0
       (.E(E),
        .Q(Q),
        .gmii_tx_en_ch0(gmii_tx_en_ch0),
        .gmii_tx_en_ch0_int1(gmii_tx_en_ch0_int1),
        .gmii_tx_er_ch0(gmii_tx_er_ch0),
        .gmii_tx_er_ch0_int1(gmii_tx_er_ch0_int1),
        .\gmii_txd_ch0_int1_reg[7] (\gmii_txd_ch0_int1_reg[7] ),
        .reset_out(sync_reset),
        .speed_is_100_ch0(speed_is_100_ch0),
        .speed_is_10_100_ch0(speed_is_10_100_ch0),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sgmii_adapt_18 sgmii_adapt_ch1
       (.E(\gmii_txd_out_reg[7] ),
        .\TXD_REG1_reg[7] (\TXD_REG1_reg[7] ),
        .gmii_tx_en_ch1(gmii_tx_en_ch1),
        .gmii_tx_en_ch1_int1(gmii_tx_en_ch1_int1),
        .gmii_tx_er_ch1(gmii_tx_er_ch1),
        .gmii_tx_er_ch1_int1(gmii_tx_er_ch1_int1),
        .\gmii_txd_ch1_int1_reg[7] (\gmii_txd_ch1_int1_reg[7] ),
        .reset_out(sync_reset),
        .speed_is_100_ch1(speed_is_100_ch1),
        .speed_is_10_100_ch1(speed_is_10_100_ch1),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sgmii_adapt_19 sgmii_adapt_ch2
       (.E(\gmii_txd_out_reg[7]_0 ),
        .\TXD_REG1_reg[7] (\TXD_REG1_reg[7]_0 ),
        .gmii_tx_en_ch2(gmii_tx_en_ch2),
        .gmii_tx_en_ch2_int1(gmii_tx_en_ch2_int1),
        .gmii_tx_er_ch2(gmii_tx_er_ch2),
        .gmii_tx_er_ch2_int1(gmii_tx_er_ch2_int1),
        .\gmii_txd_ch2_int1_reg[7] (\gmii_txd_ch2_int1_reg[7] ),
        .reset_out(sync_reset),
        .speed_is_100_ch2(speed_is_100_ch2),
        .speed_is_10_100_ch2(speed_is_10_100_ch2),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sgmii_adapt_20 sgmii_adapt_ch3
       (.E(\gmii_txd_out_reg[7]_1 ),
        .\TXD_REG1_reg[7] (\TXD_REG1_reg[7]_1 ),
        .gmii_tx_en_ch3(gmii_tx_en_ch3),
        .gmii_tx_en_ch3_int1(gmii_tx_en_ch3_int1),
        .gmii_tx_er_ch3(gmii_tx_er_ch3),
        .gmii_tx_er_ch3_int1(gmii_tx_er_ch3_int1),
        .\gmii_txd_ch3_int1_reg[7] (\gmii_txd_ch3_int1_reg[7] ),
        .reset_out(sync_reset),
        .speed_is_100_ch3(speed_is_100_ch3),
        .speed_is_10_100_ch3(speed_is_10_100_ch3),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_reset_sync" *) 
module qsgmii_1218_qsgmii_1218_reset_sync
   (reset_out,
    rxuserclk2,
    enablealign);
  output reset_out;
  input rxuserclk2;
  input enablealign;

  wire enablealign;
  wire reset_out;
  wire reset_stage1;
  wire reset_stage2;
  wire reset_stage3;
  wire reset_stage4;
  wire reset_stage5;
  wire rxuserclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(rxuserclk2),
        .CE(1'b1),
        .D(1'b0),
        .PRE(enablealign),
        .Q(reset_stage1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(rxuserclk2),
        .CE(1'b1),
        .D(reset_stage1),
        .PRE(enablealign),
        .Q(reset_stage2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(rxuserclk2),
        .CE(1'b1),
        .D(reset_stage2),
        .PRE(enablealign),
        .Q(reset_stage3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(rxuserclk2),
        .CE(1'b1),
        .D(reset_stage3),
        .PRE(enablealign),
        .Q(reset_stage4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(rxuserclk2),
        .CE(1'b1),
        .D(reset_stage4),
        .PRE(enablealign),
        .Q(reset_stage5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(rxuserclk2),
        .CE(1'b1),
        .D(reset_stage5),
        .Q(reset_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_reset_sync" *) 
module qsgmii_1218_qsgmii_1218_reset_sync_17
   (reset_out,
    userclk2,
    reset);
  output reset_out;
  input userclk2;
  input reset;

  wire reset;
  wire reset_out;
  wire reset_stage1;
  wire reset_stage2;
  wire reset_stage3;
  wire reset_stage4;
  wire reset_stage5;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(userclk2),
        .CE(1'b1),
        .D(1'b0),
        .PRE(reset),
        .Q(reset_stage1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage1),
        .PRE(reset),
        .Q(reset_stage2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage2),
        .PRE(reset),
        .Q(reset_stage3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage3),
        .PRE(reset),
        .Q(reset_stage4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage4),
        .PRE(reset),
        .Q(reset_stage5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage5),
        .Q(reset_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_reset_sync" *) 
module qsgmii_1218_qsgmii_1218_reset_sync_3
   (reset_out,
    independent_clock_bufg,
    gt0_gtrxreset_i);
  output reset_out;
  input independent_clock_bufg;
  input gt0_gtrxreset_i;

  wire gt0_gtrxreset_i;
  wire independent_clock_bufg;
  wire reset_out;
  wire reset_stage1;
  wire reset_stage2;
  wire reset_stage3;
  wire reset_stage4;
  wire reset_stage5;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(1'b0),
        .PRE(gt0_gtrxreset_i),
        .Q(reset_stage1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(reset_stage1),
        .PRE(gt0_gtrxreset_i),
        .Q(reset_stage2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(reset_stage2),
        .PRE(gt0_gtrxreset_i),
        .Q(reset_stage3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(reset_stage3),
        .PRE(gt0_gtrxreset_i),
        .Q(reset_stage4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(reset_stage4),
        .PRE(gt0_gtrxreset_i),
        .Q(reset_stage5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(reset_stage5),
        .Q(reset_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_reset_sync" *) 
module qsgmii_1218_qsgmii_1218_reset_sync_41
   (reset_out,
    userclk2,
    reset);
  output reset_out;
  input userclk2;
  input reset;

  wire reset;
  wire reset_out;
  wire reset_stage1;
  wire reset_stage2;
  wire reset_stage3;
  wire reset_stage4;
  wire reset_stage5;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(userclk2),
        .CE(1'b1),
        .D(1'b0),
        .PRE(reset),
        .Q(reset_stage1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage1),
        .PRE(reset),
        .Q(reset_stage2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage2),
        .PRE(reset),
        .Q(reset_stage3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage3),
        .PRE(reset),
        .Q(reset_stage4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage4),
        .PRE(reset),
        .Q(reset_stage5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(userclk2),
        .CE(1'b1),
        .D(reset_stage5),
        .Q(reset_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_reset_wtd_timer" *) 
module qsgmii_1218_qsgmii_1218_reset_wtd_timer
   (rxpcsreset_comb,
    independent_clock_bufg,
    data_out,
    gt0_rxprbssel_in,
    gt0_rxpcsreset_in);
  output rxpcsreset_comb;
  input independent_clock_bufg;
  input data_out;
  input [2:0]gt0_rxprbssel_in;
  input gt0_rxpcsreset_in;

  wire \counter_stg1[5]_i_1_n_0 ;
  wire [5:5]counter_stg1_reg__0;
  wire [4:0]counter_stg1_reg__1;
  wire counter_stg1_roll;
  wire \counter_stg2[0]_i_3_n_0 ;
  wire [11:0]counter_stg2_reg;
  wire \counter_stg2_reg[0]_i_2_n_0 ;
  wire \counter_stg2_reg[0]_i_2_n_1 ;
  wire \counter_stg2_reg[0]_i_2_n_2 ;
  wire \counter_stg2_reg[0]_i_2_n_3 ;
  wire \counter_stg2_reg[0]_i_2_n_4 ;
  wire \counter_stg2_reg[0]_i_2_n_5 ;
  wire \counter_stg2_reg[0]_i_2_n_6 ;
  wire \counter_stg2_reg[0]_i_2_n_7 ;
  wire \counter_stg2_reg[4]_i_1_n_0 ;
  wire \counter_stg2_reg[4]_i_1_n_1 ;
  wire \counter_stg2_reg[4]_i_1_n_2 ;
  wire \counter_stg2_reg[4]_i_1_n_3 ;
  wire \counter_stg2_reg[4]_i_1_n_4 ;
  wire \counter_stg2_reg[4]_i_1_n_5 ;
  wire \counter_stg2_reg[4]_i_1_n_6 ;
  wire \counter_stg2_reg[4]_i_1_n_7 ;
  wire \counter_stg2_reg[8]_i_1_n_1 ;
  wire \counter_stg2_reg[8]_i_1_n_2 ;
  wire \counter_stg2_reg[8]_i_1_n_3 ;
  wire \counter_stg2_reg[8]_i_1_n_4 ;
  wire \counter_stg2_reg[8]_i_1_n_5 ;
  wire \counter_stg2_reg[8]_i_1_n_6 ;
  wire \counter_stg2_reg[8]_i_1_n_7 ;
  wire counter_stg30;
  wire \counter_stg3[0]_i_3_n_0 ;
  wire \counter_stg3[0]_i_4_n_0 ;
  wire \counter_stg3[0]_i_5_n_0 ;
  wire [11:0]counter_stg3_reg;
  wire \counter_stg3_reg[0]_i_2_n_0 ;
  wire \counter_stg3_reg[0]_i_2_n_1 ;
  wire \counter_stg3_reg[0]_i_2_n_2 ;
  wire \counter_stg3_reg[0]_i_2_n_3 ;
  wire \counter_stg3_reg[0]_i_2_n_4 ;
  wire \counter_stg3_reg[0]_i_2_n_5 ;
  wire \counter_stg3_reg[0]_i_2_n_6 ;
  wire \counter_stg3_reg[0]_i_2_n_7 ;
  wire \counter_stg3_reg[4]_i_1_n_0 ;
  wire \counter_stg3_reg[4]_i_1_n_1 ;
  wire \counter_stg3_reg[4]_i_1_n_2 ;
  wire \counter_stg3_reg[4]_i_1_n_3 ;
  wire \counter_stg3_reg[4]_i_1_n_4 ;
  wire \counter_stg3_reg[4]_i_1_n_5 ;
  wire \counter_stg3_reg[4]_i_1_n_6 ;
  wire \counter_stg3_reg[4]_i_1_n_7 ;
  wire \counter_stg3_reg[8]_i_1_n_1 ;
  wire \counter_stg3_reg[8]_i_1_n_2 ;
  wire \counter_stg3_reg[8]_i_1_n_3 ;
  wire \counter_stg3_reg[8]_i_1_n_4 ;
  wire \counter_stg3_reg[8]_i_1_n_5 ;
  wire \counter_stg3_reg[8]_i_1_n_6 ;
  wire \counter_stg3_reg[8]_i_1_n_7 ;
  wire data_out;
  wire gt0_rxpcsreset_in;
  wire [2:0]gt0_rxprbssel_in;
  wire independent_clock_bufg;
  wire [5:0]p_0_in__0;
  wire reset0;
  wire reset_i_2_n_0;
  wire reset_i_3_n_0;
  wire reset_i_4_n_0;
  wire reset_i_5_n_0;
  wire reset_i_6_n_0;
  wire reset_i_7_n_0;
  wire reset_i_8_n_0;
  wire rxpcsreset_comb;
  wire wtd_rxpcsreset_in;
  wire [3:3]\NLW_counter_stg2_reg[8]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_counter_stg3_reg[8]_i_1_CO_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    \counter_stg1[0]_i_1 
       (.I0(counter_stg1_reg__1[0]),
        .O(p_0_in__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair415" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \counter_stg1[1]_i_1 
       (.I0(counter_stg1_reg__1[0]),
        .I1(counter_stg1_reg__1[1]),
        .O(p_0_in__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair415" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \counter_stg1[2]_i_1 
       (.I0(counter_stg1_reg__1[2]),
        .I1(counter_stg1_reg__1[1]),
        .I2(counter_stg1_reg__1[0]),
        .O(p_0_in__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair414" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \counter_stg1[3]_i_1 
       (.I0(counter_stg1_reg__1[1]),
        .I1(counter_stg1_reg__1[0]),
        .I2(counter_stg1_reg__1[2]),
        .I3(counter_stg1_reg__1[3]),
        .O(p_0_in__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair414" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \counter_stg1[4]_i_1 
       (.I0(counter_stg1_reg__1[4]),
        .I1(counter_stg1_reg__1[1]),
        .I2(counter_stg1_reg__1[0]),
        .I3(counter_stg1_reg__1[2]),
        .I4(counter_stg1_reg__1[3]),
        .O(p_0_in__0[4]));
  LUT3 #(
    .INIT(8'hF4)) 
    \counter_stg1[5]_i_1 
       (.I0(reset_i_2_n_0),
        .I1(counter_stg1_roll),
        .I2(data_out),
        .O(\counter_stg1[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \counter_stg1[5]_i_2 
       (.I0(counter_stg1_reg__0),
        .I1(counter_stg1_reg__1[3]),
        .I2(counter_stg1_reg__1[2]),
        .I3(counter_stg1_reg__1[0]),
        .I4(counter_stg1_reg__1[1]),
        .I5(counter_stg1_reg__1[4]),
        .O(p_0_in__0[5]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg1_reg[0] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(counter_stg1_reg__1[0]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg1_reg[1] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(counter_stg1_reg__1[1]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg1_reg[2] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(counter_stg1_reg__1[2]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg1_reg[3] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(counter_stg1_reg__1[3]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg1_reg[4] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(p_0_in__0[4]),
        .Q(counter_stg1_reg__1[4]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg1_reg[5] 
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(p_0_in__0[5]),
        .Q(counter_stg1_reg__0),
        .R(\counter_stg1[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \counter_stg2[0]_i_1 
       (.I0(counter_stg1_reg__0),
        .I1(counter_stg1_reg__1[3]),
        .I2(counter_stg1_reg__1[2]),
        .I3(counter_stg1_reg__1[0]),
        .I4(counter_stg1_reg__1[1]),
        .I5(counter_stg1_reg__1[4]),
        .O(counter_stg1_roll));
  LUT1 #(
    .INIT(2'h1)) 
    \counter_stg2[0]_i_3 
       (.I0(counter_stg2_reg[0]),
        .O(\counter_stg2[0]_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg2_reg[0] 
       (.C(independent_clock_bufg),
        .CE(counter_stg1_roll),
        .D(\counter_stg2_reg[0]_i_2_n_7 ),
        .Q(counter_stg2_reg[0]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  CARRY4 \counter_stg2_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\counter_stg2_reg[0]_i_2_n_0 ,\counter_stg2_reg[0]_i_2_n_1 ,\counter_stg2_reg[0]_i_2_n_2 ,\counter_stg2_reg[0]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\counter_stg2_reg[0]_i_2_n_4 ,\counter_stg2_reg[0]_i_2_n_5 ,\counter_stg2_reg[0]_i_2_n_6 ,\counter_stg2_reg[0]_i_2_n_7 }),
        .S({counter_stg2_reg[3:1],\counter_stg2[0]_i_3_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg2_reg[10] 
       (.C(independent_clock_bufg),
        .CE(counter_stg1_roll),
        .D(\counter_stg2_reg[8]_i_1_n_5 ),
        .Q(counter_stg2_reg[10]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg2_reg[11] 
       (.C(independent_clock_bufg),
        .CE(counter_stg1_roll),
        .D(\counter_stg2_reg[8]_i_1_n_4 ),
        .Q(counter_stg2_reg[11]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg2_reg[1] 
       (.C(independent_clock_bufg),
        .CE(counter_stg1_roll),
        .D(\counter_stg2_reg[0]_i_2_n_6 ),
        .Q(counter_stg2_reg[1]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg2_reg[2] 
       (.C(independent_clock_bufg),
        .CE(counter_stg1_roll),
        .D(\counter_stg2_reg[0]_i_2_n_5 ),
        .Q(counter_stg2_reg[2]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg2_reg[3] 
       (.C(independent_clock_bufg),
        .CE(counter_stg1_roll),
        .D(\counter_stg2_reg[0]_i_2_n_4 ),
        .Q(counter_stg2_reg[3]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg2_reg[4] 
       (.C(independent_clock_bufg),
        .CE(counter_stg1_roll),
        .D(\counter_stg2_reg[4]_i_1_n_7 ),
        .Q(counter_stg2_reg[4]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  CARRY4 \counter_stg2_reg[4]_i_1 
       (.CI(\counter_stg2_reg[0]_i_2_n_0 ),
        .CO({\counter_stg2_reg[4]_i_1_n_0 ,\counter_stg2_reg[4]_i_1_n_1 ,\counter_stg2_reg[4]_i_1_n_2 ,\counter_stg2_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_stg2_reg[4]_i_1_n_4 ,\counter_stg2_reg[4]_i_1_n_5 ,\counter_stg2_reg[4]_i_1_n_6 ,\counter_stg2_reg[4]_i_1_n_7 }),
        .S(counter_stg2_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg2_reg[5] 
       (.C(independent_clock_bufg),
        .CE(counter_stg1_roll),
        .D(\counter_stg2_reg[4]_i_1_n_6 ),
        .Q(counter_stg2_reg[5]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg2_reg[6] 
       (.C(independent_clock_bufg),
        .CE(counter_stg1_roll),
        .D(\counter_stg2_reg[4]_i_1_n_5 ),
        .Q(counter_stg2_reg[6]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg2_reg[7] 
       (.C(independent_clock_bufg),
        .CE(counter_stg1_roll),
        .D(\counter_stg2_reg[4]_i_1_n_4 ),
        .Q(counter_stg2_reg[7]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg2_reg[8] 
       (.C(independent_clock_bufg),
        .CE(counter_stg1_roll),
        .D(\counter_stg2_reg[8]_i_1_n_7 ),
        .Q(counter_stg2_reg[8]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  CARRY4 \counter_stg2_reg[8]_i_1 
       (.CI(\counter_stg2_reg[4]_i_1_n_0 ),
        .CO({\NLW_counter_stg2_reg[8]_i_1_CO_UNCONNECTED [3],\counter_stg2_reg[8]_i_1_n_1 ,\counter_stg2_reg[8]_i_1_n_2 ,\counter_stg2_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_stg2_reg[8]_i_1_n_4 ,\counter_stg2_reg[8]_i_1_n_5 ,\counter_stg2_reg[8]_i_1_n_6 ,\counter_stg2_reg[8]_i_1_n_7 }),
        .S(counter_stg2_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg2_reg[9] 
       (.C(independent_clock_bufg),
        .CE(counter_stg1_roll),
        .D(\counter_stg2_reg[8]_i_1_n_6 ),
        .Q(counter_stg2_reg[9]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \counter_stg3[0]_i_1 
       (.I0(counter_stg2_reg[8]),
        .I1(counter_stg2_reg[4]),
        .I2(counter_stg2_reg[11]),
        .I3(counter_stg2_reg[3]),
        .I4(\counter_stg3[0]_i_3_n_0 ),
        .I5(counter_stg1_roll),
        .O(counter_stg30));
  LUT5 #(
    .INIT(32'h80000000)) 
    \counter_stg3[0]_i_3 
       (.I0(counter_stg2_reg[6]),
        .I1(counter_stg2_reg[7]),
        .I2(counter_stg2_reg[9]),
        .I3(counter_stg2_reg[10]),
        .I4(\counter_stg3[0]_i_5_n_0 ),
        .O(\counter_stg3[0]_i_3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \counter_stg3[0]_i_4 
       (.I0(counter_stg3_reg[0]),
        .O(\counter_stg3[0]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h8000)) 
    \counter_stg3[0]_i_5 
       (.I0(counter_stg2_reg[1]),
        .I1(counter_stg2_reg[0]),
        .I2(counter_stg2_reg[5]),
        .I3(counter_stg2_reg[2]),
        .O(\counter_stg3[0]_i_5_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg3_reg[0] 
       (.C(independent_clock_bufg),
        .CE(counter_stg30),
        .D(\counter_stg3_reg[0]_i_2_n_7 ),
        .Q(counter_stg3_reg[0]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  CARRY4 \counter_stg3_reg[0]_i_2 
       (.CI(1'b0),
        .CO({\counter_stg3_reg[0]_i_2_n_0 ,\counter_stg3_reg[0]_i_2_n_1 ,\counter_stg3_reg[0]_i_2_n_2 ,\counter_stg3_reg[0]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\counter_stg3_reg[0]_i_2_n_4 ,\counter_stg3_reg[0]_i_2_n_5 ,\counter_stg3_reg[0]_i_2_n_6 ,\counter_stg3_reg[0]_i_2_n_7 }),
        .S({counter_stg3_reg[3:1],\counter_stg3[0]_i_4_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg3_reg[10] 
       (.C(independent_clock_bufg),
        .CE(counter_stg30),
        .D(\counter_stg3_reg[8]_i_1_n_5 ),
        .Q(counter_stg3_reg[10]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg3_reg[11] 
       (.C(independent_clock_bufg),
        .CE(counter_stg30),
        .D(\counter_stg3_reg[8]_i_1_n_4 ),
        .Q(counter_stg3_reg[11]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg3_reg[1] 
       (.C(independent_clock_bufg),
        .CE(counter_stg30),
        .D(\counter_stg3_reg[0]_i_2_n_6 ),
        .Q(counter_stg3_reg[1]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg3_reg[2] 
       (.C(independent_clock_bufg),
        .CE(counter_stg30),
        .D(\counter_stg3_reg[0]_i_2_n_5 ),
        .Q(counter_stg3_reg[2]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg3_reg[3] 
       (.C(independent_clock_bufg),
        .CE(counter_stg30),
        .D(\counter_stg3_reg[0]_i_2_n_4 ),
        .Q(counter_stg3_reg[3]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg3_reg[4] 
       (.C(independent_clock_bufg),
        .CE(counter_stg30),
        .D(\counter_stg3_reg[4]_i_1_n_7 ),
        .Q(counter_stg3_reg[4]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  CARRY4 \counter_stg3_reg[4]_i_1 
       (.CI(\counter_stg3_reg[0]_i_2_n_0 ),
        .CO({\counter_stg3_reg[4]_i_1_n_0 ,\counter_stg3_reg[4]_i_1_n_1 ,\counter_stg3_reg[4]_i_1_n_2 ,\counter_stg3_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_stg3_reg[4]_i_1_n_4 ,\counter_stg3_reg[4]_i_1_n_5 ,\counter_stg3_reg[4]_i_1_n_6 ,\counter_stg3_reg[4]_i_1_n_7 }),
        .S(counter_stg3_reg[7:4]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg3_reg[5] 
       (.C(independent_clock_bufg),
        .CE(counter_stg30),
        .D(\counter_stg3_reg[4]_i_1_n_6 ),
        .Q(counter_stg3_reg[5]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg3_reg[6] 
       (.C(independent_clock_bufg),
        .CE(counter_stg30),
        .D(\counter_stg3_reg[4]_i_1_n_5 ),
        .Q(counter_stg3_reg[6]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg3_reg[7] 
       (.C(independent_clock_bufg),
        .CE(counter_stg30),
        .D(\counter_stg3_reg[4]_i_1_n_4 ),
        .Q(counter_stg3_reg[7]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg3_reg[8] 
       (.C(independent_clock_bufg),
        .CE(counter_stg30),
        .D(\counter_stg3_reg[8]_i_1_n_7 ),
        .Q(counter_stg3_reg[8]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  CARRY4 \counter_stg3_reg[8]_i_1 
       (.CI(\counter_stg3_reg[4]_i_1_n_0 ),
        .CO({\NLW_counter_stg3_reg[8]_i_1_CO_UNCONNECTED [3],\counter_stg3_reg[8]_i_1_n_1 ,\counter_stg3_reg[8]_i_1_n_2 ,\counter_stg3_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\counter_stg3_reg[8]_i_1_n_4 ,\counter_stg3_reg[8]_i_1_n_5 ,\counter_stg3_reg[8]_i_1_n_6 ,\counter_stg3_reg[8]_i_1_n_7 }),
        .S(counter_stg3_reg[11:8]));
  FDRE #(
    .INIT(1'b0)) 
    \counter_stg3_reg[9] 
       (.C(independent_clock_bufg),
        .CE(counter_stg30),
        .D(\counter_stg3_reg[8]_i_1_n_6 ),
        .Q(counter_stg3_reg[9]),
        .R(\counter_stg1[5]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFF0100)) 
    gtxe2_i_i_4
       (.I0(gt0_rxprbssel_in[1]),
        .I1(gt0_rxprbssel_in[2]),
        .I2(gt0_rxprbssel_in[0]),
        .I3(wtd_rxpcsreset_in),
        .I4(gt0_rxpcsreset_in),
        .O(rxpcsreset_comb));
  LUT2 #(
    .INIT(4'h2)) 
    reset_i_1
       (.I0(counter_stg1_reg__0),
        .I1(reset_i_2_n_0),
        .O(reset0));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    reset_i_2
       (.I0(reset_i_3_n_0),
        .I1(reset_i_4_n_0),
        .I2(reset_i_5_n_0),
        .I3(reset_i_6_n_0),
        .I4(reset_i_7_n_0),
        .I5(reset_i_8_n_0),
        .O(reset_i_2_n_0));
  LUT2 #(
    .INIT(4'hB)) 
    reset_i_3
       (.I0(counter_stg2_reg[6]),
        .I1(counter_stg3_reg[11]),
        .O(reset_i_3_n_0));
  LUT4 #(
    .INIT(16'hFFFD)) 
    reset_i_4
       (.I0(counter_stg3_reg[6]),
        .I1(counter_stg3_reg[1]),
        .I2(counter_stg3_reg[2]),
        .I3(counter_stg3_reg[8]),
        .O(reset_i_4_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    reset_i_5
       (.I0(counter_stg2_reg[5]),
        .I1(counter_stg2_reg[1]),
        .I2(counter_stg3_reg[10]),
        .I3(counter_stg3_reg[9]),
        .O(reset_i_5_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    reset_i_6
       (.I0(counter_stg3_reg[3]),
        .I1(counter_stg2_reg[9]),
        .I2(counter_stg2_reg[7]),
        .I3(counter_stg2_reg[2]),
        .O(reset_i_6_n_0));
  LUT6 #(
    .INIT(64'hEFFFFFFFFFFFFFFF)) 
    reset_i_7
       (.I0(counter_stg3_reg[0]),
        .I1(counter_stg2_reg[0]),
        .I2(counter_stg2_reg[3]),
        .I3(counter_stg2_reg[11]),
        .I4(counter_stg2_reg[4]),
        .I5(counter_stg2_reg[8]),
        .O(reset_i_7_n_0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    reset_i_8
       (.I0(counter_stg3_reg[7]),
        .I1(counter_stg2_reg[10]),
        .I2(counter_stg3_reg[4]),
        .I3(counter_stg3_reg[5]),
        .O(reset_i_8_n_0));
  FDRE reset_reg
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(reset0),
        .Q(wtd_rxpcsreset_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_rx_rate_adapt" *) 
module qsgmii_1218_qsgmii_1218_rx_rate_adapt
   (gmii_rx_dv_ch3_reg,
    gmii_rx_er_ch3_reg,
    \gmii_rxd_ch3_reg[7] ,
    reset_out,
    sgmii_clk_en_reg,
    gmii_rx_dv_ch3,
    userclk2,
    gmii_rx_er_ch3,
    \RXD_reg[7] );
  output gmii_rx_dv_ch3_reg;
  output gmii_rx_er_ch3_reg;
  output [7:0]\gmii_rxd_ch3_reg[7] ;
  input reset_out;
  input sgmii_clk_en_reg;
  input gmii_rx_dv_ch3;
  input userclk2;
  input gmii_rx_er_ch3;
  input [7:0]\RXD_reg[7] ;

  wire [7:0]\RXD_reg[7] ;
  wire gmii_rx_dv_ch3;
  wire gmii_rx_dv_ch3_reg;
  wire gmii_rx_er_ch3;
  wire gmii_rx_er_ch3_reg;
  wire [7:0]\gmii_rxd_ch3_reg[7] ;
  wire muxsel;
  wire muxsel_i_1__2_n_0;
  wire [3:0]p_0_in;
  wire reset_out;
  wire rx_dv_aligned_i_1__2_n_0;
  wire rx_dv_aligned_reg_n_0;
  wire rx_dv_reg1;
  wire rx_dv_reg2;
  wire rx_er_aligned;
  wire rx_er_aligned_reg_n_0;
  wire rx_er_reg1;
  wire rx_er_reg2;
  wire \rxd_aligned[0]_i_1__2_n_0 ;
  wire \rxd_aligned[1]_i_1__2_n_0 ;
  wire \rxd_aligned[2]_i_1__2_n_0 ;
  wire \rxd_aligned[3]_i_1__2_n_0 ;
  wire \rxd_aligned[4]_i_1__2_n_0 ;
  wire \rxd_aligned[5]_i_1__2_n_0 ;
  wire \rxd_aligned[6]_i_1__2_n_0 ;
  wire \rxd_aligned[7]_i_1__2_n_0 ;
  wire \rxd_aligned_reg_n_0_[0] ;
  wire \rxd_aligned_reg_n_0_[1] ;
  wire \rxd_aligned_reg_n_0_[2] ;
  wire \rxd_aligned_reg_n_0_[3] ;
  wire \rxd_aligned_reg_n_0_[4] ;
  wire \rxd_aligned_reg_n_0_[5] ;
  wire \rxd_aligned_reg_n_0_[6] ;
  wire \rxd_aligned_reg_n_0_[7] ;
  wire \rxd_reg1_reg_n_0_[0] ;
  wire \rxd_reg1_reg_n_0_[1] ;
  wire \rxd_reg1_reg_n_0_[2] ;
  wire \rxd_reg1_reg_n_0_[3] ;
  wire \rxd_reg2_reg_n_0_[0] ;
  wire \rxd_reg2_reg_n_0_[1] ;
  wire \rxd_reg2_reg_n_0_[2] ;
  wire \rxd_reg2_reg_n_0_[3] ;
  wire \rxd_reg2_reg_n_0_[4] ;
  wire \rxd_reg2_reg_n_0_[5] ;
  wire \rxd_reg2_reg_n_0_[6] ;
  wire \rxd_reg2_reg_n_0_[7] ;
  wire sfd_enable;
  wire sfd_enable0;
  wire sfd_enable_i_1__2_n_0;
  wire sfd_enable_i_2__2_n_0;
  wire sfd_enable_i_4__2_n_0;
  wire sfd_enable_i_5__2_n_0;
  wire sgmii_clk_en_reg;
  wire userclk2;

  FDRE gmii_rx_dv_out_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_dv_aligned_reg_n_0),
        .Q(gmii_rx_dv_ch3_reg),
        .R(reset_out));
  FDRE gmii_rx_er_out_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_er_aligned_reg_n_0),
        .Q(gmii_rx_er_ch3_reg),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[0] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[0] ),
        .Q(\gmii_rxd_ch3_reg[7] [0]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[1] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[1] ),
        .Q(\gmii_rxd_ch3_reg[7] [1]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[2] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[2] ),
        .Q(\gmii_rxd_ch3_reg[7] [2]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[3] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[3] ),
        .Q(\gmii_rxd_ch3_reg[7] [3]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[4] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[4] ),
        .Q(\gmii_rxd_ch3_reg[7] [4]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[5] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[5] ),
        .Q(\gmii_rxd_ch3_reg[7] [5]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[6] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[6] ),
        .Q(\gmii_rxd_ch3_reg[7] [6]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[7] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[7] ),
        .Q(\gmii_rxd_ch3_reg[7] [7]),
        .R(reset_out));
  LUT6 #(
    .INIT(64'h00000000CCCCA8CC)) 
    muxsel_i_1__2
       (.I0(sfd_enable_i_5__2_n_0),
        .I1(muxsel),
        .I2(sfd_enable_i_2__2_n_0),
        .I3(sfd_enable),
        .I4(sfd_enable_i_4__2_n_0),
        .I5(reset_out),
        .O(muxsel_i_1__2_n_0));
  FDRE muxsel_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(muxsel_i_1__2_n_0),
        .Q(muxsel),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair378" *) 
  LUT3 #(
    .INIT(8'hB0)) 
    rx_dv_aligned_i_1__2
       (.I0(rx_dv_reg1),
        .I1(muxsel),
        .I2(rx_dv_reg2),
        .O(rx_dv_aligned_i_1__2_n_0));
  FDRE rx_dv_aligned_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_dv_aligned_i_1__2_n_0),
        .Q(rx_dv_aligned_reg_n_0),
        .R(reset_out));
  FDRE rx_dv_reg1_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(gmii_rx_dv_ch3),
        .Q(rx_dv_reg1),
        .R(reset_out));
  FDRE rx_dv_reg2_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_dv_reg1),
        .Q(rx_dv_reg2),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair379" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    rx_er_aligned_i_1__2
       (.I0(muxsel),
        .I1(rx_er_reg1),
        .I2(rx_er_reg2),
        .O(rx_er_aligned));
  FDRE rx_er_aligned_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_er_aligned),
        .Q(rx_er_aligned_reg_n_0),
        .R(reset_out));
  FDRE rx_er_reg1_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(gmii_rx_er_ch3),
        .Q(rx_er_reg1),
        .R(reset_out));
  FDRE rx_er_reg2_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_er_reg1),
        .Q(rx_er_reg2),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair380" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[0]_i_1__2 
       (.I0(\rxd_reg2_reg_n_0_[4] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[0] ),
        .O(\rxd_aligned[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair381" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[1]_i_1__2 
       (.I0(\rxd_reg2_reg_n_0_[5] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[1] ),
        .O(\rxd_aligned[1]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[2]_i_1__2 
       (.I0(\rxd_reg2_reg_n_0_[6] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[2] ),
        .O(\rxd_aligned[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair377" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[3]_i_1__2 
       (.I0(\rxd_reg2_reg_n_0_[7] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[3] ),
        .O(\rxd_aligned[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair380" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[4]_i_1__2 
       (.I0(\rxd_reg1_reg_n_0_[0] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[4] ),
        .O(\rxd_aligned[4]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair381" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[5]_i_1__2 
       (.I0(\rxd_reg1_reg_n_0_[1] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[5] ),
        .O(\rxd_aligned[5]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair379" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[6]_i_1__2 
       (.I0(\rxd_reg1_reg_n_0_[2] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[6] ),
        .O(\rxd_aligned[6]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair377" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[7]_i_1__2 
       (.I0(\rxd_reg1_reg_n_0_[3] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[7] ),
        .O(\rxd_aligned[7]_i_1__2_n_0 ));
  FDRE \rxd_aligned_reg[0] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[0]_i_1__2_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[1] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[1]_i_1__2_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[2] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[2]_i_1__2_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[3] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[3]_i_1__2_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[4] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[4]_i_1__2_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[4] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[5] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[5]_i_1__2_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[5] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[6] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[6]_i_1__2_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[6] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[7] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[7]_i_1__2_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[7] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[0] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [0]),
        .Q(\rxd_reg1_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[1] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [1]),
        .Q(\rxd_reg1_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[2] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [2]),
        .Q(\rxd_reg1_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[3] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [3]),
        .Q(\rxd_reg1_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[4] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [4]),
        .Q(p_0_in[0]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[5] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [5]),
        .Q(p_0_in[1]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[6] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [6]),
        .Q(p_0_in[2]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[7] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [7]),
        .Q(p_0_in[3]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[0] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_reg1_reg_n_0_[0] ),
        .Q(\rxd_reg2_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[1] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_reg1_reg_n_0_[1] ),
        .Q(\rxd_reg2_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[2] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_reg1_reg_n_0_[2] ),
        .Q(\rxd_reg2_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[3] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_reg1_reg_n_0_[3] ),
        .Q(\rxd_reg2_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[4] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(p_0_in[0]),
        .Q(\rxd_reg2_reg_n_0_[4] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[5] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(p_0_in[1]),
        .Q(\rxd_reg2_reg_n_0_[5] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[6] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(p_0_in[2]),
        .Q(\rxd_reg2_reg_n_0_[6] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[7] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(p_0_in[3]),
        .Q(\rxd_reg2_reg_n_0_[7] ),
        .R(reset_out));
  LUT6 #(
    .INIT(64'hFFDDFFCCC0C8C0CC)) 
    sfd_enable_i_1__2
       (.I0(sfd_enable_i_2__2_n_0),
        .I1(sfd_enable0),
        .I2(sgmii_clk_en_reg),
        .I3(sfd_enable_i_4__2_n_0),
        .I4(sfd_enable_i_5__2_n_0),
        .I5(sfd_enable),
        .O(sfd_enable_i_1__2_n_0));
  LUT5 #(
    .INIT(32'h04000000)) 
    sfd_enable_i_2__2
       (.I0(p_0_in[3]),
        .I1(\RXD_reg[7] [0]),
        .I2(\RXD_reg[7] [1]),
        .I3(\RXD_reg[7] [3]),
        .I4(\RXD_reg[7] [2]),
        .O(sfd_enable_i_2__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair378" *) 
  LUT2 #(
    .INIT(4'h2)) 
    sfd_enable_i_3__2
       (.I0(gmii_rx_dv_ch3),
        .I1(rx_dv_reg1),
        .O(sfd_enable0));
  LUT4 #(
    .INIT(16'hDFFF)) 
    sfd_enable_i_4__2
       (.I0(p_0_in[0]),
        .I1(p_0_in[1]),
        .I2(sgmii_clk_en_reg),
        .I3(p_0_in[2]),
        .O(sfd_enable_i_4__2_n_0));
  LUT5 #(
    .INIT(32'hFFFFDFFF)) 
    sfd_enable_i_5__2
       (.I0(\rxd_reg1_reg_n_0_[0] ),
        .I1(\rxd_reg1_reg_n_0_[3] ),
        .I2(p_0_in[3]),
        .I3(\rxd_reg1_reg_n_0_[2] ),
        .I4(\rxd_reg1_reg_n_0_[1] ),
        .O(sfd_enable_i_5__2_n_0));
  FDRE sfd_enable_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sfd_enable_i_1__2_n_0),
        .Q(sfd_enable),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_rx_rate_adapt" *) 
module qsgmii_1218_qsgmii_1218_rx_rate_adapt_52
   (gmii_rx_dv_ch2_reg,
    gmii_rx_er_ch2_reg,
    \gmii_rxd_ch2_reg[7] ,
    reset_out,
    sgmii_clk_en_reg,
    gmii_rx_dv_ch2,
    userclk2,
    gmii_rx_er_ch2,
    \RXD_reg[7] );
  output gmii_rx_dv_ch2_reg;
  output gmii_rx_er_ch2_reg;
  output [7:0]\gmii_rxd_ch2_reg[7] ;
  input reset_out;
  input sgmii_clk_en_reg;
  input gmii_rx_dv_ch2;
  input userclk2;
  input gmii_rx_er_ch2;
  input [7:0]\RXD_reg[7] ;

  wire [7:0]\RXD_reg[7] ;
  wire gmii_rx_dv_ch2;
  wire gmii_rx_dv_ch2_reg;
  wire gmii_rx_er_ch2;
  wire gmii_rx_er_ch2_reg;
  wire [7:0]\gmii_rxd_ch2_reg[7] ;
  wire muxsel;
  wire muxsel_i_1__1_n_0;
  wire [3:0]p_0_in;
  wire reset_out;
  wire rx_dv_aligned_i_1__1_n_0;
  wire rx_dv_aligned_reg_n_0;
  wire rx_dv_reg1;
  wire rx_dv_reg2;
  wire rx_er_aligned;
  wire rx_er_aligned_reg_n_0;
  wire rx_er_reg1;
  wire rx_er_reg2;
  wire \rxd_aligned[0]_i_1__1_n_0 ;
  wire \rxd_aligned[1]_i_1__1_n_0 ;
  wire \rxd_aligned[2]_i_1__1_n_0 ;
  wire \rxd_aligned[3]_i_1__1_n_0 ;
  wire \rxd_aligned[4]_i_1__1_n_0 ;
  wire \rxd_aligned[5]_i_1__1_n_0 ;
  wire \rxd_aligned[6]_i_1__1_n_0 ;
  wire \rxd_aligned[7]_i_1__1_n_0 ;
  wire \rxd_aligned_reg_n_0_[0] ;
  wire \rxd_aligned_reg_n_0_[1] ;
  wire \rxd_aligned_reg_n_0_[2] ;
  wire \rxd_aligned_reg_n_0_[3] ;
  wire \rxd_aligned_reg_n_0_[4] ;
  wire \rxd_aligned_reg_n_0_[5] ;
  wire \rxd_aligned_reg_n_0_[6] ;
  wire \rxd_aligned_reg_n_0_[7] ;
  wire \rxd_reg1_reg_n_0_[0] ;
  wire \rxd_reg1_reg_n_0_[1] ;
  wire \rxd_reg1_reg_n_0_[2] ;
  wire \rxd_reg1_reg_n_0_[3] ;
  wire \rxd_reg2_reg_n_0_[0] ;
  wire \rxd_reg2_reg_n_0_[1] ;
  wire \rxd_reg2_reg_n_0_[2] ;
  wire \rxd_reg2_reg_n_0_[3] ;
  wire \rxd_reg2_reg_n_0_[4] ;
  wire \rxd_reg2_reg_n_0_[5] ;
  wire \rxd_reg2_reg_n_0_[6] ;
  wire \rxd_reg2_reg_n_0_[7] ;
  wire sfd_enable;
  wire sfd_enable0;
  wire sfd_enable_i_1__1_n_0;
  wire sfd_enable_i_2__1_n_0;
  wire sfd_enable_i_4__1_n_0;
  wire sfd_enable_i_5__1_n_0;
  wire sgmii_clk_en_reg;
  wire userclk2;

  FDRE gmii_rx_dv_out_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_dv_aligned_reg_n_0),
        .Q(gmii_rx_dv_ch2_reg),
        .R(reset_out));
  FDRE gmii_rx_er_out_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_er_aligned_reg_n_0),
        .Q(gmii_rx_er_ch2_reg),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[0] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[0] ),
        .Q(\gmii_rxd_ch2_reg[7] [0]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[1] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[1] ),
        .Q(\gmii_rxd_ch2_reg[7] [1]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[2] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[2] ),
        .Q(\gmii_rxd_ch2_reg[7] [2]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[3] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[3] ),
        .Q(\gmii_rxd_ch2_reg[7] [3]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[4] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[4] ),
        .Q(\gmii_rxd_ch2_reg[7] [4]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[5] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[5] ),
        .Q(\gmii_rxd_ch2_reg[7] [5]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[6] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[6] ),
        .Q(\gmii_rxd_ch2_reg[7] [6]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[7] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[7] ),
        .Q(\gmii_rxd_ch2_reg[7] [7]),
        .R(reset_out));
  LUT6 #(
    .INIT(64'h00000000CCCCA8CC)) 
    muxsel_i_1__1
       (.I0(sfd_enable_i_5__1_n_0),
        .I1(muxsel),
        .I2(sfd_enable_i_2__1_n_0),
        .I3(sfd_enable),
        .I4(sfd_enable_i_4__1_n_0),
        .I5(reset_out),
        .O(muxsel_i_1__1_n_0));
  FDRE muxsel_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(muxsel_i_1__1_n_0),
        .Q(muxsel),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair371" *) 
  LUT3 #(
    .INIT(8'hB0)) 
    rx_dv_aligned_i_1__1
       (.I0(rx_dv_reg1),
        .I1(muxsel),
        .I2(rx_dv_reg2),
        .O(rx_dv_aligned_i_1__1_n_0));
  FDRE rx_dv_aligned_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_dv_aligned_i_1__1_n_0),
        .Q(rx_dv_aligned_reg_n_0),
        .R(reset_out));
  FDRE rx_dv_reg1_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(gmii_rx_dv_ch2),
        .Q(rx_dv_reg1),
        .R(reset_out));
  FDRE rx_dv_reg2_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_dv_reg1),
        .Q(rx_dv_reg2),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair372" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    rx_er_aligned_i_1__1
       (.I0(muxsel),
        .I1(rx_er_reg1),
        .I2(rx_er_reg2),
        .O(rx_er_aligned));
  FDRE rx_er_aligned_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_er_aligned),
        .Q(rx_er_aligned_reg_n_0),
        .R(reset_out));
  FDRE rx_er_reg1_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(gmii_rx_er_ch2),
        .Q(rx_er_reg1),
        .R(reset_out));
  FDRE rx_er_reg2_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_er_reg1),
        .Q(rx_er_reg2),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair373" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[0]_i_1__1 
       (.I0(\rxd_reg2_reg_n_0_[4] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[0] ),
        .O(\rxd_aligned[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair374" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[1]_i_1__1 
       (.I0(\rxd_reg2_reg_n_0_[5] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[1] ),
        .O(\rxd_aligned[1]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[2]_i_1__1 
       (.I0(\rxd_reg2_reg_n_0_[6] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[2] ),
        .O(\rxd_aligned[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair370" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[3]_i_1__1 
       (.I0(\rxd_reg2_reg_n_0_[7] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[3] ),
        .O(\rxd_aligned[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair373" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[4]_i_1__1 
       (.I0(\rxd_reg1_reg_n_0_[0] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[4] ),
        .O(\rxd_aligned[4]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair374" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[5]_i_1__1 
       (.I0(\rxd_reg1_reg_n_0_[1] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[5] ),
        .O(\rxd_aligned[5]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair372" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[6]_i_1__1 
       (.I0(\rxd_reg1_reg_n_0_[2] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[6] ),
        .O(\rxd_aligned[6]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair370" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[7]_i_1__1 
       (.I0(\rxd_reg1_reg_n_0_[3] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[7] ),
        .O(\rxd_aligned[7]_i_1__1_n_0 ));
  FDRE \rxd_aligned_reg[0] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[0]_i_1__1_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[1] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[1]_i_1__1_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[2] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[2]_i_1__1_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[3] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[3]_i_1__1_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[4] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[4]_i_1__1_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[4] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[5] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[5]_i_1__1_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[5] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[6] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[6]_i_1__1_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[6] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[7] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[7]_i_1__1_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[7] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[0] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [0]),
        .Q(\rxd_reg1_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[1] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [1]),
        .Q(\rxd_reg1_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[2] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [2]),
        .Q(\rxd_reg1_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[3] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [3]),
        .Q(\rxd_reg1_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[4] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [4]),
        .Q(p_0_in[0]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[5] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [5]),
        .Q(p_0_in[1]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[6] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [6]),
        .Q(p_0_in[2]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[7] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [7]),
        .Q(p_0_in[3]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[0] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_reg1_reg_n_0_[0] ),
        .Q(\rxd_reg2_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[1] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_reg1_reg_n_0_[1] ),
        .Q(\rxd_reg2_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[2] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_reg1_reg_n_0_[2] ),
        .Q(\rxd_reg2_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[3] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_reg1_reg_n_0_[3] ),
        .Q(\rxd_reg2_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[4] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(p_0_in[0]),
        .Q(\rxd_reg2_reg_n_0_[4] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[5] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(p_0_in[1]),
        .Q(\rxd_reg2_reg_n_0_[5] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[6] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(p_0_in[2]),
        .Q(\rxd_reg2_reg_n_0_[6] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[7] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(p_0_in[3]),
        .Q(\rxd_reg2_reg_n_0_[7] ),
        .R(reset_out));
  LUT6 #(
    .INIT(64'hFFDDFFCCC0C8C0CC)) 
    sfd_enable_i_1__1
       (.I0(sfd_enable_i_2__1_n_0),
        .I1(sfd_enable0),
        .I2(sgmii_clk_en_reg),
        .I3(sfd_enable_i_4__1_n_0),
        .I4(sfd_enable_i_5__1_n_0),
        .I5(sfd_enable),
        .O(sfd_enable_i_1__1_n_0));
  LUT5 #(
    .INIT(32'h04000000)) 
    sfd_enable_i_2__1
       (.I0(p_0_in[3]),
        .I1(\RXD_reg[7] [0]),
        .I2(\RXD_reg[7] [1]),
        .I3(\RXD_reg[7] [3]),
        .I4(\RXD_reg[7] [2]),
        .O(sfd_enable_i_2__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair371" *) 
  LUT2 #(
    .INIT(4'h2)) 
    sfd_enable_i_3__1
       (.I0(gmii_rx_dv_ch2),
        .I1(rx_dv_reg1),
        .O(sfd_enable0));
  LUT4 #(
    .INIT(16'hDFFF)) 
    sfd_enable_i_4__1
       (.I0(p_0_in[0]),
        .I1(p_0_in[1]),
        .I2(sgmii_clk_en_reg),
        .I3(p_0_in[2]),
        .O(sfd_enable_i_4__1_n_0));
  LUT5 #(
    .INIT(32'hFFFFDFFF)) 
    sfd_enable_i_5__1
       (.I0(\rxd_reg1_reg_n_0_[0] ),
        .I1(\rxd_reg1_reg_n_0_[3] ),
        .I2(p_0_in[3]),
        .I3(\rxd_reg1_reg_n_0_[2] ),
        .I4(\rxd_reg1_reg_n_0_[1] ),
        .O(sfd_enable_i_5__1_n_0));
  FDRE sfd_enable_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sfd_enable_i_1__1_n_0),
        .Q(sfd_enable),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_rx_rate_adapt" *) 
module qsgmii_1218_qsgmii_1218_rx_rate_adapt_58
   (gmii_rx_dv_ch1_reg,
    gmii_rx_er_ch1_reg,
    \gmii_rxd_ch1_reg[7] ,
    reset_out,
    sgmii_clk_en_reg,
    gmii_rx_dv_ch1,
    userclk2,
    gmii_rx_er_ch1,
    \RXD_reg[7] );
  output gmii_rx_dv_ch1_reg;
  output gmii_rx_er_ch1_reg;
  output [7:0]\gmii_rxd_ch1_reg[7] ;
  input reset_out;
  input sgmii_clk_en_reg;
  input gmii_rx_dv_ch1;
  input userclk2;
  input gmii_rx_er_ch1;
  input [7:0]\RXD_reg[7] ;

  wire [7:0]\RXD_reg[7] ;
  wire gmii_rx_dv_ch1;
  wire gmii_rx_dv_ch1_reg;
  wire gmii_rx_er_ch1;
  wire gmii_rx_er_ch1_reg;
  wire [7:0]\gmii_rxd_ch1_reg[7] ;
  wire muxsel;
  wire muxsel_i_1__0_n_0;
  wire [3:0]p_0_in;
  wire reset_out;
  wire rx_dv_aligned_i_1__0_n_0;
  wire rx_dv_aligned_reg_n_0;
  wire rx_dv_reg1;
  wire rx_dv_reg2;
  wire rx_er_aligned;
  wire rx_er_aligned_reg_n_0;
  wire rx_er_reg1;
  wire rx_er_reg2;
  wire \rxd_aligned[0]_i_1__0_n_0 ;
  wire \rxd_aligned[1]_i_1__0_n_0 ;
  wire \rxd_aligned[2]_i_1__0_n_0 ;
  wire \rxd_aligned[3]_i_1__0_n_0 ;
  wire \rxd_aligned[4]_i_1__0_n_0 ;
  wire \rxd_aligned[5]_i_1__0_n_0 ;
  wire \rxd_aligned[6]_i_1__0_n_0 ;
  wire \rxd_aligned[7]_i_1__0_n_0 ;
  wire \rxd_aligned_reg_n_0_[0] ;
  wire \rxd_aligned_reg_n_0_[1] ;
  wire \rxd_aligned_reg_n_0_[2] ;
  wire \rxd_aligned_reg_n_0_[3] ;
  wire \rxd_aligned_reg_n_0_[4] ;
  wire \rxd_aligned_reg_n_0_[5] ;
  wire \rxd_aligned_reg_n_0_[6] ;
  wire \rxd_aligned_reg_n_0_[7] ;
  wire \rxd_reg1_reg_n_0_[0] ;
  wire \rxd_reg1_reg_n_0_[1] ;
  wire \rxd_reg1_reg_n_0_[2] ;
  wire \rxd_reg1_reg_n_0_[3] ;
  wire \rxd_reg2_reg_n_0_[0] ;
  wire \rxd_reg2_reg_n_0_[1] ;
  wire \rxd_reg2_reg_n_0_[2] ;
  wire \rxd_reg2_reg_n_0_[3] ;
  wire \rxd_reg2_reg_n_0_[4] ;
  wire \rxd_reg2_reg_n_0_[5] ;
  wire \rxd_reg2_reg_n_0_[6] ;
  wire \rxd_reg2_reg_n_0_[7] ;
  wire sfd_enable;
  wire sfd_enable0;
  wire sfd_enable_i_1__0_n_0;
  wire sfd_enable_i_2__0_n_0;
  wire sfd_enable_i_4__0_n_0;
  wire sfd_enable_i_5__0_n_0;
  wire sgmii_clk_en_reg;
  wire userclk2;

  FDRE gmii_rx_dv_out_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_dv_aligned_reg_n_0),
        .Q(gmii_rx_dv_ch1_reg),
        .R(reset_out));
  FDRE gmii_rx_er_out_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_er_aligned_reg_n_0),
        .Q(gmii_rx_er_ch1_reg),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[0] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[0] ),
        .Q(\gmii_rxd_ch1_reg[7] [0]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[1] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[1] ),
        .Q(\gmii_rxd_ch1_reg[7] [1]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[2] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[2] ),
        .Q(\gmii_rxd_ch1_reg[7] [2]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[3] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[3] ),
        .Q(\gmii_rxd_ch1_reg[7] [3]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[4] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[4] ),
        .Q(\gmii_rxd_ch1_reg[7] [4]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[5] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[5] ),
        .Q(\gmii_rxd_ch1_reg[7] [5]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[6] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[6] ),
        .Q(\gmii_rxd_ch1_reg[7] [6]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[7] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned_reg_n_0_[7] ),
        .Q(\gmii_rxd_ch1_reg[7] [7]),
        .R(reset_out));
  LUT6 #(
    .INIT(64'h00000000CCCCA8CC)) 
    muxsel_i_1__0
       (.I0(sfd_enable_i_5__0_n_0),
        .I1(muxsel),
        .I2(sfd_enable_i_2__0_n_0),
        .I3(sfd_enable),
        .I4(sfd_enable_i_4__0_n_0),
        .I5(reset_out),
        .O(muxsel_i_1__0_n_0));
  FDRE muxsel_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(muxsel_i_1__0_n_0),
        .Q(muxsel),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair364" *) 
  LUT3 #(
    .INIT(8'hB0)) 
    rx_dv_aligned_i_1__0
       (.I0(rx_dv_reg1),
        .I1(muxsel),
        .I2(rx_dv_reg2),
        .O(rx_dv_aligned_i_1__0_n_0));
  FDRE rx_dv_aligned_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_dv_aligned_i_1__0_n_0),
        .Q(rx_dv_aligned_reg_n_0),
        .R(reset_out));
  FDRE rx_dv_reg1_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(gmii_rx_dv_ch1),
        .Q(rx_dv_reg1),
        .R(reset_out));
  FDRE rx_dv_reg2_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_dv_reg1),
        .Q(rx_dv_reg2),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair365" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    rx_er_aligned_i_1__0
       (.I0(muxsel),
        .I1(rx_er_reg1),
        .I2(rx_er_reg2),
        .O(rx_er_aligned));
  FDRE rx_er_aligned_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_er_aligned),
        .Q(rx_er_aligned_reg_n_0),
        .R(reset_out));
  FDRE rx_er_reg1_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(gmii_rx_er_ch1),
        .Q(rx_er_reg1),
        .R(reset_out));
  FDRE rx_er_reg2_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_er_reg1),
        .Q(rx_er_reg2),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair366" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[0]_i_1__0 
       (.I0(\rxd_reg2_reg_n_0_[4] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[0] ),
        .O(\rxd_aligned[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair367" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[1]_i_1__0 
       (.I0(\rxd_reg2_reg_n_0_[5] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[1] ),
        .O(\rxd_aligned[1]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[2]_i_1__0 
       (.I0(\rxd_reg2_reg_n_0_[6] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[2] ),
        .O(\rxd_aligned[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair363" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[3]_i_1__0 
       (.I0(\rxd_reg2_reg_n_0_[7] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[3] ),
        .O(\rxd_aligned[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair366" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[4]_i_1__0 
       (.I0(\rxd_reg1_reg_n_0_[0] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[4] ),
        .O(\rxd_aligned[4]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair367" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[5]_i_1__0 
       (.I0(\rxd_reg1_reg_n_0_[1] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[5] ),
        .O(\rxd_aligned[5]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair365" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[6]_i_1__0 
       (.I0(\rxd_reg1_reg_n_0_[2] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[6] ),
        .O(\rxd_aligned[6]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair363" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[7]_i_1__0 
       (.I0(\rxd_reg1_reg_n_0_[3] ),
        .I1(muxsel),
        .I2(\rxd_reg2_reg_n_0_[7] ),
        .O(\rxd_aligned[7]_i_1__0_n_0 ));
  FDRE \rxd_aligned_reg[0] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[0]_i_1__0_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[1] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[1]_i_1__0_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[2] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[2]_i_1__0_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[3] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[3]_i_1__0_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[4] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[4]_i_1__0_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[4] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[5] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[5]_i_1__0_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[5] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[6] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[6]_i_1__0_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[6] ),
        .R(reset_out));
  FDRE \rxd_aligned_reg[7] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[7]_i_1__0_n_0 ),
        .Q(\rxd_aligned_reg_n_0_[7] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[0] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [0]),
        .Q(\rxd_reg1_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[1] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [1]),
        .Q(\rxd_reg1_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[2] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [2]),
        .Q(\rxd_reg1_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[3] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [3]),
        .Q(\rxd_reg1_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[4] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [4]),
        .Q(p_0_in[0]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[5] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [5]),
        .Q(p_0_in[1]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[6] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [6]),
        .Q(p_0_in[2]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[7] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\RXD_reg[7] [7]),
        .Q(p_0_in[3]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[0] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_reg1_reg_n_0_[0] ),
        .Q(\rxd_reg2_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[1] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_reg1_reg_n_0_[1] ),
        .Q(\rxd_reg2_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[2] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_reg1_reg_n_0_[2] ),
        .Q(\rxd_reg2_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[3] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_reg1_reg_n_0_[3] ),
        .Q(\rxd_reg2_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[4] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(p_0_in[0]),
        .Q(\rxd_reg2_reg_n_0_[4] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[5] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(p_0_in[1]),
        .Q(\rxd_reg2_reg_n_0_[5] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[6] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(p_0_in[2]),
        .Q(\rxd_reg2_reg_n_0_[6] ),
        .R(reset_out));
  FDRE \rxd_reg2_reg[7] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(p_0_in[3]),
        .Q(\rxd_reg2_reg_n_0_[7] ),
        .R(reset_out));
  LUT6 #(
    .INIT(64'hFFDDFFCCC0C8C0CC)) 
    sfd_enable_i_1__0
       (.I0(sfd_enable_i_2__0_n_0),
        .I1(sfd_enable0),
        .I2(sgmii_clk_en_reg),
        .I3(sfd_enable_i_4__0_n_0),
        .I4(sfd_enable_i_5__0_n_0),
        .I5(sfd_enable),
        .O(sfd_enable_i_1__0_n_0));
  LUT5 #(
    .INIT(32'h04000000)) 
    sfd_enable_i_2__0
       (.I0(p_0_in[3]),
        .I1(\RXD_reg[7] [0]),
        .I2(\RXD_reg[7] [1]),
        .I3(\RXD_reg[7] [3]),
        .I4(\RXD_reg[7] [2]),
        .O(sfd_enable_i_2__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair364" *) 
  LUT2 #(
    .INIT(4'h2)) 
    sfd_enable_i_3__0
       (.I0(gmii_rx_dv_ch1),
        .I1(rx_dv_reg1),
        .O(sfd_enable0));
  LUT4 #(
    .INIT(16'hDFFF)) 
    sfd_enable_i_4__0
       (.I0(p_0_in[0]),
        .I1(p_0_in[1]),
        .I2(sgmii_clk_en_reg),
        .I3(p_0_in[2]),
        .O(sfd_enable_i_4__0_n_0));
  LUT5 #(
    .INIT(32'hFFFFDFFF)) 
    sfd_enable_i_5__0
       (.I0(\rxd_reg1_reg_n_0_[0] ),
        .I1(\rxd_reg1_reg_n_0_[3] ),
        .I2(p_0_in[3]),
        .I3(\rxd_reg1_reg_n_0_[2] ),
        .I4(\rxd_reg1_reg_n_0_[1] ),
        .O(sfd_enable_i_5__0_n_0));
  FDRE sfd_enable_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sfd_enable_i_1__0_n_0),
        .Q(sfd_enable),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_rx_rate_adapt" *) 
module qsgmii_1218_qsgmii_1218_rx_rate_adapt_64
   (gmii_rx_dv_out,
    gmii_rx_er_out,
    Q,
    reset_out,
    sgmii_clk_en_reg,
    gmii_rx_dv_ch0,
    userclk2,
    gmii_rx_er_ch0,
    D);
  output gmii_rx_dv_out;
  output gmii_rx_er_out;
  output [7:0]Q;
  input reset_out;
  input sgmii_clk_en_reg;
  input gmii_rx_dv_ch0;
  input userclk2;
  input gmii_rx_er_ch0;
  input [7:0]D;

  wire [7:0]D;
  wire [7:0]Q;
  wire gmii_rx_dv_ch0;
  wire gmii_rx_dv_out;
  wire gmii_rx_er_ch0;
  wire gmii_rx_er_out;
  wire muxsel;
  wire muxsel_i_1_n_0;
  wire [3:0]p_0_in;
  wire reset_out;
  wire rx_dv_aligned;
  wire rx_dv_aligned_i_1_n_0;
  wire rx_dv_reg1;
  wire rx_dv_reg2;
  wire rx_er_aligned;
  wire rx_er_aligned_0;
  wire rx_er_reg1;
  wire rx_er_reg2;
  wire [7:0]rxd_aligned;
  wire \rxd_aligned[0]_i_1_n_0 ;
  wire \rxd_aligned[1]_i_1_n_0 ;
  wire \rxd_aligned[2]_i_1_n_0 ;
  wire \rxd_aligned[3]_i_1_n_0 ;
  wire \rxd_aligned[4]_i_1_n_0 ;
  wire \rxd_aligned[5]_i_1_n_0 ;
  wire \rxd_aligned[6]_i_1_n_0 ;
  wire \rxd_aligned[7]_i_1_n_0 ;
  wire \rxd_reg1_reg_n_0_[0] ;
  wire \rxd_reg1_reg_n_0_[1] ;
  wire \rxd_reg1_reg_n_0_[2] ;
  wire \rxd_reg1_reg_n_0_[3] ;
  wire [7:0]rxd_reg2;
  wire sfd_enable;
  wire sfd_enable0;
  wire sfd_enable_i_1_n_0;
  wire sfd_enable_i_2_n_0;
  wire sfd_enable_i_4_n_0;
  wire sfd_enable_i_5_n_0;
  wire sgmii_clk_en_reg;
  wire userclk2;

  FDRE gmii_rx_dv_out_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_dv_aligned),
        .Q(gmii_rx_dv_out),
        .R(reset_out));
  FDRE gmii_rx_er_out_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_er_aligned),
        .Q(gmii_rx_er_out),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[0] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rxd_aligned[0]),
        .Q(Q[0]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[1] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rxd_aligned[1]),
        .Q(Q[1]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[2] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rxd_aligned[2]),
        .Q(Q[2]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[3] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rxd_aligned[3]),
        .Q(Q[3]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[4] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rxd_aligned[4]),
        .Q(Q[4]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[5] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rxd_aligned[5]),
        .Q(Q[5]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[6] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rxd_aligned[6]),
        .Q(Q[6]),
        .R(reset_out));
  FDRE \gmii_rxd_out_reg[7] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rxd_aligned[7]),
        .Q(Q[7]),
        .R(reset_out));
  LUT6 #(
    .INIT(64'h00000000CCCCA8CC)) 
    muxsel_i_1
       (.I0(sfd_enable_i_5_n_0),
        .I1(muxsel),
        .I2(sfd_enable_i_2_n_0),
        .I3(sfd_enable),
        .I4(sfd_enable_i_4_n_0),
        .I5(reset_out),
        .O(muxsel_i_1_n_0));
  FDRE muxsel_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(muxsel_i_1_n_0),
        .Q(muxsel),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair357" *) 
  LUT3 #(
    .INIT(8'hB0)) 
    rx_dv_aligned_i_1
       (.I0(rx_dv_reg1),
        .I1(muxsel),
        .I2(rx_dv_reg2),
        .O(rx_dv_aligned_i_1_n_0));
  FDRE rx_dv_aligned_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_dv_aligned_i_1_n_0),
        .Q(rx_dv_aligned),
        .R(reset_out));
  FDRE rx_dv_reg1_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(gmii_rx_dv_ch0),
        .Q(rx_dv_reg1),
        .R(reset_out));
  FDRE rx_dv_reg2_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_dv_reg1),
        .Q(rx_dv_reg2),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair358" *) 
  LUT3 #(
    .INIT(8'hF8)) 
    rx_er_aligned_i_1
       (.I0(muxsel),
        .I1(rx_er_reg1),
        .I2(rx_er_reg2),
        .O(rx_er_aligned_0));
  FDRE rx_er_aligned_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_er_aligned_0),
        .Q(rx_er_aligned),
        .R(reset_out));
  FDRE rx_er_reg1_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(gmii_rx_er_ch0),
        .Q(rx_er_reg1),
        .R(reset_out));
  FDRE rx_er_reg2_reg
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(rx_er_reg1),
        .Q(rx_er_reg2),
        .R(reset_out));
  (* SOFT_HLUTNM = "soft_lutpair359" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[0]_i_1 
       (.I0(rxd_reg2[4]),
        .I1(muxsel),
        .I2(rxd_reg2[0]),
        .O(\rxd_aligned[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair360" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[1]_i_1 
       (.I0(rxd_reg2[5]),
        .I1(muxsel),
        .I2(rxd_reg2[1]),
        .O(\rxd_aligned[1]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[2]_i_1 
       (.I0(rxd_reg2[6]),
        .I1(muxsel),
        .I2(rxd_reg2[2]),
        .O(\rxd_aligned[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair356" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[3]_i_1 
       (.I0(rxd_reg2[7]),
        .I1(muxsel),
        .I2(rxd_reg2[3]),
        .O(\rxd_aligned[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair359" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[4]_i_1 
       (.I0(\rxd_reg1_reg_n_0_[0] ),
        .I1(muxsel),
        .I2(rxd_reg2[4]),
        .O(\rxd_aligned[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair360" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[5]_i_1 
       (.I0(\rxd_reg1_reg_n_0_[1] ),
        .I1(muxsel),
        .I2(rxd_reg2[5]),
        .O(\rxd_aligned[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair358" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[6]_i_1 
       (.I0(\rxd_reg1_reg_n_0_[2] ),
        .I1(muxsel),
        .I2(rxd_reg2[6]),
        .O(\rxd_aligned[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair356" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \rxd_aligned[7]_i_1 
       (.I0(\rxd_reg1_reg_n_0_[3] ),
        .I1(muxsel),
        .I2(rxd_reg2[7]),
        .O(\rxd_aligned[7]_i_1_n_0 ));
  FDRE \rxd_aligned_reg[0] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[0]_i_1_n_0 ),
        .Q(rxd_aligned[0]),
        .R(reset_out));
  FDRE \rxd_aligned_reg[1] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[1]_i_1_n_0 ),
        .Q(rxd_aligned[1]),
        .R(reset_out));
  FDRE \rxd_aligned_reg[2] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[2]_i_1_n_0 ),
        .Q(rxd_aligned[2]),
        .R(reset_out));
  FDRE \rxd_aligned_reg[3] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[3]_i_1_n_0 ),
        .Q(rxd_aligned[3]),
        .R(reset_out));
  FDRE \rxd_aligned_reg[4] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[4]_i_1_n_0 ),
        .Q(rxd_aligned[4]),
        .R(reset_out));
  FDRE \rxd_aligned_reg[5] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[5]_i_1_n_0 ),
        .Q(rxd_aligned[5]),
        .R(reset_out));
  FDRE \rxd_aligned_reg[6] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[6]_i_1_n_0 ),
        .Q(rxd_aligned[6]),
        .R(reset_out));
  FDRE \rxd_aligned_reg[7] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_aligned[7]_i_1_n_0 ),
        .Q(rxd_aligned[7]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[0] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(D[0]),
        .Q(\rxd_reg1_reg_n_0_[0] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[1] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(D[1]),
        .Q(\rxd_reg1_reg_n_0_[1] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[2] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(D[2]),
        .Q(\rxd_reg1_reg_n_0_[2] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[3] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(D[3]),
        .Q(\rxd_reg1_reg_n_0_[3] ),
        .R(reset_out));
  FDRE \rxd_reg1_reg[4] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(D[4]),
        .Q(p_0_in[0]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[5] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(D[5]),
        .Q(p_0_in[1]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[6] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(D[6]),
        .Q(p_0_in[2]),
        .R(reset_out));
  FDRE \rxd_reg1_reg[7] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(D[7]),
        .Q(p_0_in[3]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[0] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_reg1_reg_n_0_[0] ),
        .Q(rxd_reg2[0]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[1] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_reg1_reg_n_0_[1] ),
        .Q(rxd_reg2[1]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[2] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_reg1_reg_n_0_[2] ),
        .Q(rxd_reg2[2]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[3] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(\rxd_reg1_reg_n_0_[3] ),
        .Q(rxd_reg2[3]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[4] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(p_0_in[0]),
        .Q(rxd_reg2[4]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[5] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(p_0_in[1]),
        .Q(rxd_reg2[5]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[6] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(p_0_in[2]),
        .Q(rxd_reg2[6]),
        .R(reset_out));
  FDRE \rxd_reg2_reg[7] 
       (.C(userclk2),
        .CE(sgmii_clk_en_reg),
        .D(p_0_in[3]),
        .Q(rxd_reg2[7]),
        .R(reset_out));
  LUT6 #(
    .INIT(64'hFFDDFFCCC0C8C0CC)) 
    sfd_enable_i_1
       (.I0(sfd_enable_i_2_n_0),
        .I1(sfd_enable0),
        .I2(sgmii_clk_en_reg),
        .I3(sfd_enable_i_4_n_0),
        .I4(sfd_enable_i_5_n_0),
        .I5(sfd_enable),
        .O(sfd_enable_i_1_n_0));
  LUT5 #(
    .INIT(32'h04000000)) 
    sfd_enable_i_2
       (.I0(p_0_in[3]),
        .I1(D[0]),
        .I2(D[1]),
        .I3(D[3]),
        .I4(D[2]),
        .O(sfd_enable_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair357" *) 
  LUT2 #(
    .INIT(4'h2)) 
    sfd_enable_i_3
       (.I0(gmii_rx_dv_ch0),
        .I1(rx_dv_reg1),
        .O(sfd_enable0));
  LUT4 #(
    .INIT(16'hDFFF)) 
    sfd_enable_i_4
       (.I0(p_0_in[0]),
        .I1(p_0_in[1]),
        .I2(sgmii_clk_en_reg),
        .I3(p_0_in[2]),
        .O(sfd_enable_i_4_n_0));
  LUT5 #(
    .INIT(32'hFFFFDFFF)) 
    sfd_enable_i_5
       (.I0(\rxd_reg1_reg_n_0_[0] ),
        .I1(\rxd_reg1_reg_n_0_[3] ),
        .I2(p_0_in[3]),
        .I3(\rxd_reg1_reg_n_0_[2] ),
        .I4(\rxd_reg1_reg_n_0_[1] ),
        .O(sfd_enable_i_5_n_0));
  FDRE sfd_enable_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(sfd_enable_i_1_n_0),
        .Q(sfd_enable),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sgmii_adapt" *) 
module qsgmii_1218_qsgmii_1218_sgmii_adapt
   (E,
    gmii_tx_en_ch0,
    gmii_tx_er_ch0,
    Q,
    reset_out,
    userclk2,
    gmii_tx_en_ch0_int1,
    gmii_tx_er_ch0_int1,
    speed_is_10_100_ch0,
    speed_is_100_ch0,
    \gmii_txd_ch0_int1_reg[7] );
  output [0:0]E;
  output gmii_tx_en_ch0;
  output gmii_tx_er_ch0;
  output [7:0]Q;
  input reset_out;
  input userclk2;
  input gmii_tx_en_ch0_int1;
  input gmii_tx_er_ch0_int1;
  input speed_is_10_100_ch0;
  input speed_is_100_ch0;
  input [7:0]\gmii_txd_ch0_int1_reg[7] ;

  wire [0:0]E;
  wire [7:0]Q;
  wire gmii_tx_en_ch0;
  wire gmii_tx_en_ch0_int1;
  wire gmii_tx_er_ch0;
  wire gmii_tx_er_ch0_int1;
  wire [7:0]\gmii_txd_ch0_int1_reg[7] ;
  wire reset_out;
  wire speed_is_100_ch0;
  wire speed_is_100_resync;
  wire speed_is_10_100_ch0;
  wire speed_is_10_100_resync;
  wire userclk2;

  qsgmii_1218_qsgmii_1218_clk_gen_35 clock_generation
       (.E(E),
        .data_out(speed_is_100_resync),
        .data_sync_reg6(speed_is_10_100_resync),
        .reset_out(reset_out),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sync_block_36 resync_speed_100
       (.data_out(speed_is_100_resync),
        .speed_is_100_ch0(speed_is_100_ch0),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sync_block_37 resync_speed_10_100
       (.data_out(speed_is_10_100_resync),
        .speed_is_10_100_ch0(speed_is_10_100_ch0),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_tx_rate_adapt_38 transmitter
       (.E(E),
        .Q(Q),
        .gmii_tx_en_ch0(gmii_tx_en_ch0),
        .gmii_tx_en_ch0_int1(gmii_tx_en_ch0_int1),
        .gmii_tx_er_ch0(gmii_tx_er_ch0),
        .gmii_tx_er_ch0_int1(gmii_tx_er_ch0_int1),
        .\gmii_txd_ch0_int1_reg[7] (\gmii_txd_ch0_int1_reg[7] ),
        .reset_out(reset_out),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sgmii_adapt" *) 
module qsgmii_1218_qsgmii_1218_sgmii_adapt_18
   (E,
    gmii_tx_en_ch1,
    gmii_tx_er_ch1,
    \TXD_REG1_reg[7] ,
    reset_out,
    userclk2,
    gmii_tx_en_ch1_int1,
    gmii_tx_er_ch1_int1,
    speed_is_10_100_ch1,
    speed_is_100_ch1,
    \gmii_txd_ch1_int1_reg[7] );
  output [0:0]E;
  output gmii_tx_en_ch1;
  output gmii_tx_er_ch1;
  output [7:0]\TXD_REG1_reg[7] ;
  input reset_out;
  input userclk2;
  input gmii_tx_en_ch1_int1;
  input gmii_tx_er_ch1_int1;
  input speed_is_10_100_ch1;
  input speed_is_100_ch1;
  input [7:0]\gmii_txd_ch1_int1_reg[7] ;

  wire [0:0]E;
  wire [7:0]\TXD_REG1_reg[7] ;
  wire gmii_tx_en_ch1;
  wire gmii_tx_en_ch1_int1;
  wire gmii_tx_er_ch1;
  wire gmii_tx_er_ch1_int1;
  wire [7:0]\gmii_txd_ch1_int1_reg[7] ;
  wire reset_out;
  wire speed_is_100_ch1;
  wire speed_is_100_resync;
  wire speed_is_10_100_ch1;
  wire speed_is_10_100_resync;
  wire userclk2;

  qsgmii_1218_qsgmii_1218_clk_gen_29 clock_generation
       (.E(E),
        .data_out(speed_is_100_resync),
        .data_sync_reg6(speed_is_10_100_resync),
        .reset_out(reset_out),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sync_block_30 resync_speed_100
       (.data_out(speed_is_100_resync),
        .speed_is_100_ch1(speed_is_100_ch1),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sync_block_31 resync_speed_10_100
       (.data_out(speed_is_10_100_resync),
        .speed_is_10_100_ch1(speed_is_10_100_ch1),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_tx_rate_adapt_32 transmitter
       (.E(E),
        .\TXD_REG1_reg[7] (\TXD_REG1_reg[7] ),
        .gmii_tx_en_ch1(gmii_tx_en_ch1),
        .gmii_tx_en_ch1_int1(gmii_tx_en_ch1_int1),
        .gmii_tx_er_ch1(gmii_tx_er_ch1),
        .gmii_tx_er_ch1_int1(gmii_tx_er_ch1_int1),
        .\gmii_txd_ch1_int1_reg[7] (\gmii_txd_ch1_int1_reg[7] ),
        .reset_out(reset_out),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sgmii_adapt" *) 
module qsgmii_1218_qsgmii_1218_sgmii_adapt_19
   (E,
    gmii_tx_en_ch2,
    gmii_tx_er_ch2,
    \TXD_REG1_reg[7] ,
    reset_out,
    userclk2,
    gmii_tx_en_ch2_int1,
    gmii_tx_er_ch2_int1,
    speed_is_10_100_ch2,
    speed_is_100_ch2,
    \gmii_txd_ch2_int1_reg[7] );
  output [0:0]E;
  output gmii_tx_en_ch2;
  output gmii_tx_er_ch2;
  output [7:0]\TXD_REG1_reg[7] ;
  input reset_out;
  input userclk2;
  input gmii_tx_en_ch2_int1;
  input gmii_tx_er_ch2_int1;
  input speed_is_10_100_ch2;
  input speed_is_100_ch2;
  input [7:0]\gmii_txd_ch2_int1_reg[7] ;

  wire [0:0]E;
  wire [7:0]\TXD_REG1_reg[7] ;
  wire gmii_tx_en_ch2;
  wire gmii_tx_en_ch2_int1;
  wire gmii_tx_er_ch2;
  wire gmii_tx_er_ch2_int1;
  wire [7:0]\gmii_txd_ch2_int1_reg[7] ;
  wire reset_out;
  wire speed_is_100_ch2;
  wire speed_is_100_resync;
  wire speed_is_10_100_ch2;
  wire speed_is_10_100_resync;
  wire userclk2;

  qsgmii_1218_qsgmii_1218_clk_gen_23 clock_generation
       (.E(E),
        .data_out(speed_is_100_resync),
        .data_sync_reg6(speed_is_10_100_resync),
        .reset_out(reset_out),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sync_block_24 resync_speed_100
       (.data_out(speed_is_100_resync),
        .speed_is_100_ch2(speed_is_100_ch2),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sync_block_25 resync_speed_10_100
       (.data_out(speed_is_10_100_resync),
        .speed_is_10_100_ch2(speed_is_10_100_ch2),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_tx_rate_adapt_26 transmitter
       (.E(E),
        .\TXD_REG1_reg[7] (\TXD_REG1_reg[7] ),
        .gmii_tx_en_ch2(gmii_tx_en_ch2),
        .gmii_tx_en_ch2_int1(gmii_tx_en_ch2_int1),
        .gmii_tx_er_ch2(gmii_tx_er_ch2),
        .gmii_tx_er_ch2_int1(gmii_tx_er_ch2_int1),
        .\gmii_txd_ch2_int1_reg[7] (\gmii_txd_ch2_int1_reg[7] ),
        .reset_out(reset_out),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sgmii_adapt" *) 
module qsgmii_1218_qsgmii_1218_sgmii_adapt_20
   (E,
    gmii_tx_en_ch3,
    gmii_tx_er_ch3,
    \TXD_REG1_reg[7] ,
    reset_out,
    userclk2,
    gmii_tx_en_ch3_int1,
    gmii_tx_er_ch3_int1,
    speed_is_10_100_ch3,
    speed_is_100_ch3,
    \gmii_txd_ch3_int1_reg[7] );
  output [0:0]E;
  output gmii_tx_en_ch3;
  output gmii_tx_er_ch3;
  output [7:0]\TXD_REG1_reg[7] ;
  input reset_out;
  input userclk2;
  input gmii_tx_en_ch3_int1;
  input gmii_tx_er_ch3_int1;
  input speed_is_10_100_ch3;
  input speed_is_100_ch3;
  input [7:0]\gmii_txd_ch3_int1_reg[7] ;

  wire [0:0]E;
  wire [7:0]\TXD_REG1_reg[7] ;
  wire gmii_tx_en_ch3;
  wire gmii_tx_en_ch3_int1;
  wire gmii_tx_er_ch3;
  wire gmii_tx_er_ch3_int1;
  wire [7:0]\gmii_txd_ch3_int1_reg[7] ;
  wire reset_out;
  wire speed_is_100_ch3;
  wire speed_is_100_resync;
  wire speed_is_10_100_ch3;
  wire speed_is_10_100_resync;
  wire userclk2;

  qsgmii_1218_qsgmii_1218_clk_gen clock_generation
       (.E(E),
        .data_out(speed_is_100_resync),
        .data_sync_reg6(speed_is_10_100_resync),
        .reset_out(reset_out),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sync_block_21 resync_speed_100
       (.data_out(speed_is_100_resync),
        .speed_is_100_ch3(speed_is_100_ch3),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sync_block_22 resync_speed_10_100
       (.data_out(speed_is_10_100_resync),
        .speed_is_10_100_ch3(speed_is_10_100_ch3),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_tx_rate_adapt transmitter
       (.E(E),
        .\TXD_REG1_reg[7] (\TXD_REG1_reg[7] ),
        .gmii_tx_en_ch3(gmii_tx_en_ch3),
        .gmii_tx_en_ch3_int1(gmii_tx_en_ch3_int1),
        .gmii_tx_er_ch3(gmii_tx_er_ch3),
        .gmii_tx_er_ch3_int1(gmii_tx_er_ch3_int1),
        .\gmii_txd_ch3_int1_reg[7] (\gmii_txd_ch3_int1_reg[7] ),
        .reset_out(reset_out),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sgmii_adapt" *) 
module qsgmii_1218_qsgmii_1218_sgmii_adapt_42
   (gmii_rx_dv_out,
    gmii_rx_er_out,
    Q,
    reset_out,
    userclk2,
    gmii_rx_dv_ch0,
    gmii_rx_er_ch0,
    D,
    speed_is_10_100_ch0,
    speed_is_100_ch0);
  output gmii_rx_dv_out;
  output gmii_rx_er_out;
  output [7:0]Q;
  input reset_out;
  input userclk2;
  input gmii_rx_dv_ch0;
  input gmii_rx_er_ch0;
  input [7:0]D;
  input speed_is_10_100_ch0;
  input speed_is_100_ch0;

  wire [7:0]D;
  wire [7:0]Q;
  wire clock_generation_n_0;
  wire gmii_rx_dv_ch0;
  wire gmii_rx_dv_out;
  wire gmii_rx_er_ch0;
  wire gmii_rx_er_out;
  wire reset_out;
  wire speed_is_100_ch0;
  wire speed_is_100_resync;
  wire speed_is_10_100_ch0;
  wire speed_is_10_100_resync;
  wire userclk2;

  qsgmii_1218_qsgmii_1218_clk_gen_63 clock_generation
       (.data_out(speed_is_100_resync),
        .data_sync_reg6(speed_is_10_100_resync),
        .reset_out(reset_out),
        .rx_er_aligned_reg(clock_generation_n_0),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_rx_rate_adapt_64 receiver
       (.D(D),
        .Q(Q),
        .gmii_rx_dv_ch0(gmii_rx_dv_ch0),
        .gmii_rx_dv_out(gmii_rx_dv_out),
        .gmii_rx_er_ch0(gmii_rx_er_ch0),
        .gmii_rx_er_out(gmii_rx_er_out),
        .reset_out(reset_out),
        .sgmii_clk_en_reg(clock_generation_n_0),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sync_block_65 resync_speed_100
       (.data_out(speed_is_100_resync),
        .speed_is_100_ch0(speed_is_100_ch0),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sync_block_66 resync_speed_10_100
       (.data_out(speed_is_10_100_resync),
        .speed_is_10_100_ch0(speed_is_10_100_ch0),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sgmii_adapt" *) 
module qsgmii_1218_qsgmii_1218_sgmii_adapt_43
   (gmii_rx_dv_ch1_reg,
    gmii_rx_er_ch1_reg,
    \gmii_rxd_ch1_reg[7] ,
    reset_out,
    userclk2,
    gmii_rx_dv_ch1,
    gmii_rx_er_ch1,
    \RXD_reg[7] ,
    speed_is_10_100_ch1,
    speed_is_100_ch1);
  output gmii_rx_dv_ch1_reg;
  output gmii_rx_er_ch1_reg;
  output [7:0]\gmii_rxd_ch1_reg[7] ;
  input reset_out;
  input userclk2;
  input gmii_rx_dv_ch1;
  input gmii_rx_er_ch1;
  input [7:0]\RXD_reg[7] ;
  input speed_is_10_100_ch1;
  input speed_is_100_ch1;

  wire [7:0]\RXD_reg[7] ;
  wire clock_generation_n_0;
  wire gmii_rx_dv_ch1;
  wire gmii_rx_dv_ch1_reg;
  wire gmii_rx_er_ch1;
  wire gmii_rx_er_ch1_reg;
  wire [7:0]\gmii_rxd_ch1_reg[7] ;
  wire reset_out;
  wire speed_is_100_ch1;
  wire speed_is_100_resync;
  wire speed_is_10_100_ch1;
  wire speed_is_10_100_resync;
  wire userclk2;

  qsgmii_1218_qsgmii_1218_clk_gen_57 clock_generation
       (.data_out(speed_is_100_resync),
        .data_sync_reg6(speed_is_10_100_resync),
        .reset_out(reset_out),
        .rx_er_aligned_reg(clock_generation_n_0),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_rx_rate_adapt_58 receiver
       (.\RXD_reg[7] (\RXD_reg[7] ),
        .gmii_rx_dv_ch1(gmii_rx_dv_ch1),
        .gmii_rx_dv_ch1_reg(gmii_rx_dv_ch1_reg),
        .gmii_rx_er_ch1(gmii_rx_er_ch1),
        .gmii_rx_er_ch1_reg(gmii_rx_er_ch1_reg),
        .\gmii_rxd_ch1_reg[7] (\gmii_rxd_ch1_reg[7] ),
        .reset_out(reset_out),
        .sgmii_clk_en_reg(clock_generation_n_0),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sync_block_59 resync_speed_100
       (.data_out(speed_is_100_resync),
        .speed_is_100_ch1(speed_is_100_ch1),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sync_block_60 resync_speed_10_100
       (.data_out(speed_is_10_100_resync),
        .speed_is_10_100_ch1(speed_is_10_100_ch1),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sgmii_adapt" *) 
module qsgmii_1218_qsgmii_1218_sgmii_adapt_44
   (gmii_rx_dv_ch2_reg,
    gmii_rx_er_ch2_reg,
    \gmii_rxd_ch2_reg[7] ,
    reset_out,
    userclk2,
    gmii_rx_dv_ch2,
    gmii_rx_er_ch2,
    \RXD_reg[7] ,
    speed_is_10_100_ch2,
    speed_is_100_ch2);
  output gmii_rx_dv_ch2_reg;
  output gmii_rx_er_ch2_reg;
  output [7:0]\gmii_rxd_ch2_reg[7] ;
  input reset_out;
  input userclk2;
  input gmii_rx_dv_ch2;
  input gmii_rx_er_ch2;
  input [7:0]\RXD_reg[7] ;
  input speed_is_10_100_ch2;
  input speed_is_100_ch2;

  wire [7:0]\RXD_reg[7] ;
  wire clock_generation_n_0;
  wire gmii_rx_dv_ch2;
  wire gmii_rx_dv_ch2_reg;
  wire gmii_rx_er_ch2;
  wire gmii_rx_er_ch2_reg;
  wire [7:0]\gmii_rxd_ch2_reg[7] ;
  wire reset_out;
  wire speed_is_100_ch2;
  wire speed_is_100_resync;
  wire speed_is_10_100_ch2;
  wire speed_is_10_100_resync;
  wire userclk2;

  qsgmii_1218_qsgmii_1218_clk_gen_51 clock_generation
       (.data_out(speed_is_100_resync),
        .data_sync_reg6(speed_is_10_100_resync),
        .reset_out(reset_out),
        .rx_er_aligned_reg(clock_generation_n_0),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_rx_rate_adapt_52 receiver
       (.\RXD_reg[7] (\RXD_reg[7] ),
        .gmii_rx_dv_ch2(gmii_rx_dv_ch2),
        .gmii_rx_dv_ch2_reg(gmii_rx_dv_ch2_reg),
        .gmii_rx_er_ch2(gmii_rx_er_ch2),
        .gmii_rx_er_ch2_reg(gmii_rx_er_ch2_reg),
        .\gmii_rxd_ch2_reg[7] (\gmii_rxd_ch2_reg[7] ),
        .reset_out(reset_out),
        .sgmii_clk_en_reg(clock_generation_n_0),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sync_block_53 resync_speed_100
       (.data_out(speed_is_100_resync),
        .speed_is_100_ch2(speed_is_100_ch2),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sync_block_54 resync_speed_10_100
       (.data_out(speed_is_10_100_resync),
        .speed_is_10_100_ch2(speed_is_10_100_ch2),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sgmii_adapt" *) 
module qsgmii_1218_qsgmii_1218_sgmii_adapt_45
   (gmii_rx_dv_ch3_reg,
    gmii_rx_er_ch3_reg,
    \gmii_rxd_ch3_reg[7] ,
    reset_out,
    userclk2,
    gmii_rx_dv_ch3,
    gmii_rx_er_ch3,
    \RXD_reg[7] ,
    speed_is_10_100_ch3,
    speed_is_100_ch3);
  output gmii_rx_dv_ch3_reg;
  output gmii_rx_er_ch3_reg;
  output [7:0]\gmii_rxd_ch3_reg[7] ;
  input reset_out;
  input userclk2;
  input gmii_rx_dv_ch3;
  input gmii_rx_er_ch3;
  input [7:0]\RXD_reg[7] ;
  input speed_is_10_100_ch3;
  input speed_is_100_ch3;

  wire [7:0]\RXD_reg[7] ;
  wire clock_generation_n_0;
  wire gmii_rx_dv_ch3;
  wire gmii_rx_dv_ch3_reg;
  wire gmii_rx_er_ch3;
  wire gmii_rx_er_ch3_reg;
  wire [7:0]\gmii_rxd_ch3_reg[7] ;
  wire reset_out;
  wire speed_is_100_ch3;
  wire speed_is_100_resync;
  wire speed_is_10_100_ch3;
  wire speed_is_10_100_resync;
  wire userclk2;

  qsgmii_1218_qsgmii_1218_clk_gen_46 clock_generation
       (.data_out(speed_is_100_resync),
        .data_sync_reg6(speed_is_10_100_resync),
        .reset_out(reset_out),
        .rx_er_aligned_reg(clock_generation_n_0),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_rx_rate_adapt receiver
       (.\RXD_reg[7] (\RXD_reg[7] ),
        .gmii_rx_dv_ch3(gmii_rx_dv_ch3),
        .gmii_rx_dv_ch3_reg(gmii_rx_dv_ch3_reg),
        .gmii_rx_er_ch3(gmii_rx_er_ch3),
        .gmii_rx_er_ch3_reg(gmii_rx_er_ch3_reg),
        .\gmii_rxd_ch3_reg[7] (\gmii_rxd_ch3_reg[7] ),
        .reset_out(reset_out),
        .sgmii_clk_en_reg(clock_generation_n_0),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sync_block_47 resync_speed_100
       (.data_out(speed_is_100_resync),
        .speed_is_100_ch3(speed_is_100_ch3),
        .userclk2(userclk2));
  qsgmii_1218_qsgmii_1218_sync_block_48 resync_speed_10_100
       (.data_out(speed_is_10_100_resync),
        .speed_is_10_100_ch3(speed_is_10_100_ch3),
        .userclk2(userclk2));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block
   (data_out,
    rx_fsm_reset_done_int_reg,
    userclk2);
  output data_out;
  input rx_fsm_reset_done_int_reg;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rx_fsm_reset_done_int_reg;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(rx_fsm_reset_done_int_reg),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_1
   (reset_done,
    data_out,
    tx_fsm_reset_done_int_reg,
    userclk2);
  output reset_done;
  input data_out;
  input tx_fsm_reset_done_int_reg;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire gt0_txresetdone_out_sync;
  wire reset_done;
  wire tx_fsm_reset_done_int_reg;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(tx_fsm_reset_done_int_reg),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(gt0_txresetdone_out_sync),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h8)) 
    qsgmii_1218_core_i_1
       (.I0(gt0_txresetdone_out_sync),
        .I1(data_out),
        .O(reset_done));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_10
   (data_out,
    \cpllpd_wait_reg[95] ,
    independent_clock_bufg);
  output data_out;
  input \cpllpd_wait_reg[95] ;
  input independent_clock_bufg;

  wire \cpllpd_wait_reg[95] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire independent_clock_bufg;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(\cpllpd_wait_reg[95] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_11
   (E,
    data_out,
    out,
    \wait_time_cnt_reg[7] ,
    \FSM_sequential_rx_state_reg[1] ,
    rxresetdone_s3_reg,
    \FSM_sequential_rx_state_reg[3] ,
    time_out_2ms_reg,
    gt0_cplllock_out,
    independent_clock_bufg);
  output [0:0]E;
  output data_out;
  input [3:0]out;
  input \wait_time_cnt_reg[7] ;
  input \FSM_sequential_rx_state_reg[1] ;
  input rxresetdone_s3_reg;
  input \FSM_sequential_rx_state_reg[3] ;
  input time_out_2ms_reg;
  input gt0_cplllock_out;
  input independent_clock_bufg;

  wire [0:0]E;
  wire \FSM_sequential_rx_state[3]_i_4_n_0 ;
  wire \FSM_sequential_rx_state_reg[1] ;
  wire \FSM_sequential_rx_state_reg[3] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire gt0_cplllock_out;
  wire independent_clock_bufg;
  wire [3:0]out;
  wire rxresetdone_s3_reg;
  wire time_out_2ms_reg;
  wire \wait_time_cnt_reg[7] ;

  LUT6 #(
    .INIT(64'hFFFFFFFF010F0101)) 
    \FSM_sequential_rx_state[3]_i_1 
       (.I0(out[0]),
        .I1(\wait_time_cnt_reg[7] ),
        .I2(\FSM_sequential_rx_state_reg[1] ),
        .I3(\FSM_sequential_rx_state[3]_i_4_n_0 ),
        .I4(rxresetdone_s3_reg),
        .I5(\FSM_sequential_rx_state_reg[3] ),
        .O(E));
  LUT6 #(
    .INIT(64'h0001FFFF00000000)) 
    \FSM_sequential_rx_state[3]_i_4 
       (.I0(data_out),
        .I1(out[2]),
        .I2(out[3]),
        .I3(time_out_2ms_reg),
        .I4(out[0]),
        .I5(out[1]),
        .O(\FSM_sequential_rx_state[3]_i_4_n_0 ));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_cplllock_out),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_12
   (reset_time_out_reg,
    rx_fsm_reset_done_int_reg,
    D,
    \FSM_sequential_rx_state_reg[0] ,
    mmcm_lock_reclocked_reg,
    \FSM_sequential_rx_state_reg[0]_0 ,
    \FSM_sequential_rx_state_reg[1] ,
    reset_time_out_reg_0,
    out,
    data_in,
    time_out_2ms_reg,
    reset_time_out_reg_1,
    \FSM_sequential_rx_state_reg[1]_0 ,
    \FSM_sequential_rx_state_reg[2] ,
    reset_time_out_reg_2,
    time_out_1us_reg,
    time_out_wait_bypass_s3,
    data_out,
    time_out_100us_reg,
    gt0_rxprbssel_in,
    data_sync_reg6_0,
    independent_clock_bufg);
  output reset_time_out_reg;
  output rx_fsm_reset_done_int_reg;
  output [2:0]D;
  output \FSM_sequential_rx_state_reg[0] ;
  input mmcm_lock_reclocked_reg;
  input \FSM_sequential_rx_state_reg[0]_0 ;
  input \FSM_sequential_rx_state_reg[1] ;
  input reset_time_out_reg_0;
  input [3:0]out;
  input data_in;
  input time_out_2ms_reg;
  input reset_time_out_reg_1;
  input \FSM_sequential_rx_state_reg[1]_0 ;
  input \FSM_sequential_rx_state_reg[2] ;
  input reset_time_out_reg_2;
  input time_out_1us_reg;
  input time_out_wait_bypass_s3;
  input data_out;
  input time_out_100us_reg;
  input [2:0]gt0_rxprbssel_in;
  input data_sync_reg6_0;
  input independent_clock_bufg;

  wire [2:0]D;
  wire \FSM_sequential_rx_state[0]_i_2_n_0 ;
  wire \FSM_sequential_rx_state[3]_i_7_n_0 ;
  wire \FSM_sequential_rx_state_reg[0] ;
  wire \FSM_sequential_rx_state_reg[0]_0 ;
  wire \FSM_sequential_rx_state_reg[1] ;
  wire \FSM_sequential_rx_state_reg[1]_0 ;
  wire \FSM_sequential_rx_state_reg[2] ;
  wire data_in;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_valid_sync;
  wire [2:0]gt0_rxprbssel_in;
  wire independent_clock_bufg;
  wire mmcm_lock_reclocked_reg;
  wire [3:0]out;
  wire reset_time_out_i_2_n_0;
  wire reset_time_out_i_4_n_0;
  wire reset_time_out_reg;
  wire reset_time_out_reg_0;
  wire reset_time_out_reg_1;
  wire reset_time_out_reg_2;
  wire rx_fsm_reset_done_int;
  wire rx_fsm_reset_done_int_i_3_n_0;
  wire rx_fsm_reset_done_int_reg;
  wire time_out_100us_reg;
  wire time_out_1us_reg;
  wire time_out_2ms_reg;
  wire time_out_wait_bypass_s3;

  LUT6 #(
    .INIT(64'hAABAAABBAAAAAABB)) 
    \FSM_sequential_rx_state[0]_i_1 
       (.I0(\FSM_sequential_rx_state[0]_i_2_n_0 ),
        .I1(out[2]),
        .I2(out[1]),
        .I3(out[3]),
        .I4(out[0]),
        .I5(time_out_2ms_reg),
        .O(D[0]));
  LUT6 #(
    .INIT(64'hF4F404F4F4F4F4F4)) 
    \FSM_sequential_rx_state[0]_i_2 
       (.I0(reset_time_out_reg_1),
        .I1(\FSM_sequential_rx_state_reg[1]_0 ),
        .I2(out[3]),
        .I3(out[0]),
        .I4(\FSM_sequential_rx_state[3]_i_7_n_0 ),
        .I5(\FSM_sequential_rx_state_reg[2] ),
        .O(\FSM_sequential_rx_state[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00005F530F0F0000)) 
    \FSM_sequential_rx_state[1]_i_1 
       (.I0(\FSM_sequential_rx_state[3]_i_7_n_0 ),
        .I1(out[2]),
        .I2(out[3]),
        .I3(reset_time_out_reg_2),
        .I4(out[1]),
        .I5(out[0]),
        .O(D[1]));
  LUT6 #(
    .INIT(64'h1D1DFFFF000000FF)) 
    \FSM_sequential_rx_state[3]_i_2 
       (.I0(time_out_wait_bypass_s3),
        .I1(out[0]),
        .I2(\FSM_sequential_rx_state[3]_i_7_n_0 ),
        .I3(\FSM_sequential_rx_state_reg[1]_0 ),
        .I4(\FSM_sequential_rx_state_reg[2] ),
        .I5(out[3]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair390" *) 
  LUT5 #(
    .INIT(32'h2A282A2A)) 
    \FSM_sequential_rx_state[3]_i_6 
       (.I0(out[3]),
        .I1(out[1]),
        .I2(data_valid_sync),
        .I3(\FSM_sequential_rx_state[3]_i_7_n_0 ),
        .I4(out[0]),
        .O(\FSM_sequential_rx_state_reg[0] ));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \FSM_sequential_rx_state[3]_i_7 
       (.I0(time_out_100us_reg),
        .I1(data_valid_sync),
        .I2(reset_time_out_reg_0),
        .I3(gt0_rxprbssel_in[0]),
        .I4(gt0_rxprbssel_in[2]),
        .I5(gt0_rxprbssel_in[1]),
        .O(\FSM_sequential_rx_state[3]_i_7_n_0 ));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync_reg6_0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_valid_sync),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hEEFEFFFFEEFE0000)) 
    reset_time_out_i_1__0
       (.I0(reset_time_out_i_2_n_0),
        .I1(mmcm_lock_reclocked_reg),
        .I2(reset_time_out_i_4_n_0),
        .I3(\FSM_sequential_rx_state_reg[0]_0 ),
        .I4(\FSM_sequential_rx_state_reg[1] ),
        .I5(reset_time_out_reg_0),
        .O(reset_time_out_reg));
  LUT5 #(
    .INIT(32'h220022F3)) 
    reset_time_out_i_2
       (.I0(data_valid_sync),
        .I1(out[1]),
        .I2(data_out),
        .I3(out[3]),
        .I4(out[2]),
        .O(reset_time_out_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair390" *) 
  LUT2 #(
    .INIT(4'h2)) 
    reset_time_out_i_4
       (.I0(out[3]),
        .I1(data_valid_sync),
        .O(reset_time_out_i_4_n_0));
  LUT5 #(
    .INIT(32'hEFFF2000)) 
    rx_fsm_reset_done_int_i_1
       (.I0(rx_fsm_reset_done_int),
        .I1(out[2]),
        .I2(out[3]),
        .I3(rx_fsm_reset_done_int_i_3_n_0),
        .I4(data_in),
        .O(rx_fsm_reset_done_int_reg));
  LUT5 #(
    .INIT(32'h00000008)) 
    rx_fsm_reset_done_int_i_2
       (.I0(time_out_1us_reg),
        .I1(data_valid_sync),
        .I2(reset_time_out_reg_0),
        .I3(out[2]),
        .I4(out[0]),
        .O(rx_fsm_reset_done_int));
  LUT6 #(
    .INIT(64'h0030FF0000FFAA00)) 
    rx_fsm_reset_done_int_i_3
       (.I0(\FSM_sequential_rx_state[3]_i_7_n_0 ),
        .I1(reset_time_out_reg_0),
        .I2(time_out_1us_reg),
        .I3(out[0]),
        .I4(out[1]),
        .I5(data_valid_sync),
        .O(rx_fsm_reset_done_int_i_3_n_0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_13
   (mmcm_lock_reclocked_reg,
    SR,
    mmcm_lock_reclocked,
    Q,
    \mmcm_lock_count_reg[4] ,
    independent_clock_bufg);
  output mmcm_lock_reclocked_reg;
  output [0:0]SR;
  input mmcm_lock_reclocked;
  input [2:0]Q;
  input \mmcm_lock_count_reg[4] ;
  input independent_clock_bufg;

  wire [2:0]Q;
  wire [0:0]SR;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire independent_clock_bufg;
  wire \mmcm_lock_count_reg[4] ;
  wire mmcm_lock_i;
  wire mmcm_lock_reclocked;
  wire mmcm_lock_reclocked_reg;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(1'b1),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync5),
        .Q(mmcm_lock_i),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \mmcm_lock_count[7]_i_1__0 
       (.I0(mmcm_lock_i),
        .O(SR));
  LUT6 #(
    .INIT(64'hEAAAAAAA00000000)) 
    mmcm_lock_reclocked_i_1__0
       (.I0(mmcm_lock_reclocked),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(\mmcm_lock_count_reg[4] ),
        .I4(Q[1]),
        .I5(mmcm_lock_i),
        .O(mmcm_lock_reclocked_reg));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_14
   (data_out,
    data_in,
    rxuserclk);
  output data_out;
  input data_in;
  input rxuserclk;

  wire data_in;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rxuserclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxuserclk),
        .CE(1'b1),
        .D(data_in),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxuserclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxuserclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxuserclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxuserclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxuserclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_15
   (data_out,
    data_in,
    rxuserclk);
  output data_out;
  input data_in;
  input rxuserclk;

  wire data_in;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rxuserclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxuserclk),
        .CE(1'b1),
        .D(data_in),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxuserclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxuserclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxuserclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxuserclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxuserclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_16
   (data_out,
    data_in,
    independent_clock_bufg);
  output data_out;
  input data_in;
  input independent_clock_bufg;

  wire data_in;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire independent_clock_bufg;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_in),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_2
   (data_out,
    data_in,
    independent_clock_bufg);
  output data_out;
  input data_in;
  input independent_clock_bufg;

  wire data_in;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire independent_clock_bufg;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_in),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_21
   (data_out,
    speed_is_100_ch3,
    userclk2);
  output data_out;
  input speed_is_100_ch3;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_100_ch3;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_100_ch3),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_22
   (data_out,
    speed_is_10_100_ch3,
    userclk2);
  output data_out;
  input speed_is_10_100_ch3;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_10_100_ch3;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_10_100_ch3),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_24
   (data_out,
    speed_is_100_ch2,
    userclk2);
  output data_out;
  input speed_is_100_ch2;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_100_ch2;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_100_ch2),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_25
   (data_out,
    speed_is_10_100_ch2,
    userclk2);
  output data_out;
  input speed_is_10_100_ch2;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_10_100_ch2;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_10_100_ch2),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_30
   (data_out,
    speed_is_100_ch1,
    userclk2);
  output data_out;
  input speed_is_100_ch1;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_100_ch1;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_100_ch1),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_31
   (data_out,
    speed_is_10_100_ch1,
    userclk2);
  output data_out;
  input speed_is_10_100_ch1;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_10_100_ch1;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_10_100_ch1),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_36
   (data_out,
    speed_is_100_ch0,
    userclk2);
  output data_out;
  input speed_is_100_ch0;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_100_ch0;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_100_ch0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_37
   (data_out,
    speed_is_10_100_ch0,
    userclk2);
  output data_out;
  input speed_is_10_100_ch0;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_10_100_ch0;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_10_100_ch0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_4
   (data_out,
    \cpllpd_wait_reg[95] ,
    independent_clock_bufg);
  output data_out;
  input \cpllpd_wait_reg[95] ;
  input independent_clock_bufg;

  wire \cpllpd_wait_reg[95] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire independent_clock_bufg;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(\cpllpd_wait_reg[95] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_47
   (data_out,
    speed_is_100_ch3,
    userclk2);
  output data_out;
  input speed_is_100_ch3;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_100_ch3;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_100_ch3),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_48
   (data_out,
    speed_is_10_100_ch3,
    userclk2);
  output data_out;
  input speed_is_10_100_ch3;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_10_100_ch3;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_10_100_ch3),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_5
   (reset_time_out_reg,
    E,
    out,
    reset_time_out,
    \FSM_sequential_tx_state_reg[3] ,
    init_wait_done_reg,
    sel,
    \FSM_sequential_tx_state_reg[1] ,
    time_out_2ms_reg,
    txresetdone_s3_reg,
    pll_reset_asserted_reg,
    time_tlock_max_reg,
    mmcm_lock_reclocked,
    gt0_cplllock_out,
    independent_clock_bufg);
  output reset_time_out_reg;
  output [0:0]E;
  input [3:0]out;
  input reset_time_out;
  input \FSM_sequential_tx_state_reg[3] ;
  input init_wait_done_reg;
  input sel;
  input \FSM_sequential_tx_state_reg[1] ;
  input time_out_2ms_reg;
  input txresetdone_s3_reg;
  input pll_reset_asserted_reg;
  input time_tlock_max_reg;
  input mmcm_lock_reclocked;
  input gt0_cplllock_out;
  input independent_clock_bufg;

  wire [0:0]E;
  wire \FSM_sequential_tx_state[3]_i_3_n_0 ;
  wire \FSM_sequential_tx_state[3]_i_6_n_0 ;
  wire \FSM_sequential_tx_state_reg[1] ;
  wire \FSM_sequential_tx_state_reg[3] ;
  wire cplllock_sync;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire gt0_cplllock_out;
  wire independent_clock_bufg;
  wire init_wait_done_reg;
  wire mmcm_lock_reclocked;
  wire [3:0]out;
  wire pll_reset_asserted_reg;
  wire reset_time_out;
  wire reset_time_out_0;
  wire reset_time_out_reg;
  wire sel;
  wire time_out_2ms_reg;
  wire time_tlock_max_reg;
  wire txresetdone_s3_reg;

  LUT6 #(
    .INIT(64'h3333000074744477)) 
    \FSM_sequential_tx_state[3]_i_1 
       (.I0(\FSM_sequential_tx_state[3]_i_3_n_0 ),
        .I1(out[0]),
        .I2(init_wait_done_reg),
        .I3(sel),
        .I4(\FSM_sequential_tx_state_reg[1] ),
        .I5(out[3]),
        .O(E));
  LUT6 #(
    .INIT(64'hFFFFFFFF2222222E)) 
    \FSM_sequential_tx_state[3]_i_3 
       (.I0(\FSM_sequential_tx_state[3]_i_6_n_0 ),
        .I1(out[1]),
        .I2(cplllock_sync),
        .I3(out[2]),
        .I4(time_out_2ms_reg),
        .I5(txresetdone_s3_reg),
        .O(\FSM_sequential_tx_state[3]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000FF0FDDDDDDDD)) 
    \FSM_sequential_tx_state[3]_i_6 
       (.I0(pll_reset_asserted_reg),
        .I1(cplllock_sync),
        .I2(time_tlock_max_reg),
        .I3(reset_time_out),
        .I4(mmcm_lock_reclocked),
        .I5(out[2]),
        .O(\FSM_sequential_tx_state[3]_i_6_n_0 ));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(gt0_cplllock_out),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync5),
        .Q(cplllock_sync),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hEFEFEFAA202020AA)) 
    reset_time_out_i_1
       (.I0(reset_time_out_0),
        .I1(out[3]),
        .I2(out[0]),
        .I3(out[2]),
        .I4(out[1]),
        .I5(reset_time_out),
        .O(reset_time_out_reg));
  LUT5 #(
    .INIT(32'hFFFF1505)) 
    reset_time_out_i_2__0
       (.I0(out[3]),
        .I1(out[2]),
        .I2(out[0]),
        .I3(cplllock_sync),
        .I4(\FSM_sequential_tx_state_reg[3] ),
        .O(reset_time_out_0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_53
   (data_out,
    speed_is_100_ch2,
    userclk2);
  output data_out;
  input speed_is_100_ch2;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_100_ch2;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_100_ch2),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_54
   (data_out,
    speed_is_10_100_ch2,
    userclk2);
  output data_out;
  input speed_is_10_100_ch2;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_10_100_ch2;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_10_100_ch2),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_59
   (data_out,
    speed_is_100_ch1,
    userclk2);
  output data_out;
  input speed_is_100_ch1;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_100_ch1;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_100_ch1),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_6
   (mmcm_lock_reclocked_reg,
    SR,
    mmcm_lock_reclocked,
    Q,
    \mmcm_lock_count_reg[4] ,
    independent_clock_bufg);
  output mmcm_lock_reclocked_reg;
  output [0:0]SR;
  input mmcm_lock_reclocked;
  input [2:0]Q;
  input \mmcm_lock_count_reg[4] ;
  input independent_clock_bufg;

  wire [2:0]Q;
  wire [0:0]SR;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire independent_clock_bufg;
  wire \mmcm_lock_count_reg[4] ;
  wire mmcm_lock_i;
  wire mmcm_lock_reclocked;
  wire mmcm_lock_reclocked_reg;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(1'b1),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync5),
        .Q(mmcm_lock_i),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \mmcm_lock_count[7]_i_1 
       (.I0(mmcm_lock_i),
        .O(SR));
  LUT6 #(
    .INIT(64'hEAAAAAAA00000000)) 
    mmcm_lock_reclocked_i_1
       (.I0(mmcm_lock_reclocked),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(\mmcm_lock_count_reg[4] ),
        .I4(Q[1]),
        .I5(mmcm_lock_i),
        .O(mmcm_lock_reclocked_reg));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_60
   (data_out,
    speed_is_10_100_ch1,
    userclk2);
  output data_out;
  input speed_is_10_100_ch1;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_10_100_ch1;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_10_100_ch1),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_65
   (data_out,
    speed_is_100_ch0,
    userclk2);
  output data_out;
  input speed_is_100_ch0;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_100_ch0;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_100_ch0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_66
   (data_out,
    speed_is_10_100_ch0,
    userclk2);
  output data_out;
  input speed_is_10_100_ch0;
  input userclk2;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire speed_is_10_100_ch0;
  wire userclk2;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk2),
        .CE(1'b1),
        .D(speed_is_10_100_ch0),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk2),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_7
   (data_out,
    data_in,
    userclk);
  output data_out;
  input data_in;
  input userclk;

  wire data_in;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire userclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(data_in),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_8
   (data_out,
    data_in,
    independent_clock_bufg);
  output data_out;
  input data_in;
  input independent_clock_bufg;

  wire data_in;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire independent_clock_bufg;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_in),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(independent_clock_bufg),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_sync_block" *) 
module qsgmii_1218_qsgmii_1218_sync_block_9
   (data_out,
    tx_fsm_reset_done_int_reg,
    userclk);
  output data_out;
  input tx_fsm_reset_done_int_reg;
  input userclk;

  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire tx_fsm_reset_done_int_reg;
  wire userclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(tx_fsm_reset_done_int_reg),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_transceiver" *) 
module qsgmii_1218_qsgmii_1218_transceiver
   (gt0_cplllock_out,
    gt0_drprdy_out,
    gt0_eyescandataerror_out,
    txn,
    txp,
    gt0_rxbyteisaligned_out,
    gt0_rxbyterealign_out,
    gt0_rxcommadet_out,
    rxoutclk,
    gt0_rxprbserr_out,
    gt0_rxratedone_out,
    txoutclk,
    gt0_drpdo_out,
    gt0_txbufstatus_out,
    gt0_rxbufstatus_out,
    rxdata,
    gt0_rxmonitorout_out,
    gt0_dmonitorout_out,
    gt0_rxchariscomma_out,
    gt0_rxcharisk_out,
    gt0_rxdisperr_out,
    gt0_rxnotintable_out,
    txbuferr,
    gt0_txresetdone_out,
    gt0_rxresetdone_out,
    resetdone,
    independent_clock_bufg,
    gt0_drpclk_in,
    gt0_drpen_in,
    gt0_drpwe_in,
    gt0_eyescanreset_in,
    gt0_eyescantrigger_in,
    gtrefclk,
    rxn,
    rxp,
    gt0_qplloutclk_in,
    gt0_qplloutrefclk_in,
    gt0_rxbufreset_in,
    gt0_rxcdrhold_in,
    gt0_rxdfeagcovrden_in,
    gt0_rxdfelpmreset_in,
    gt0_rxlpmen_in,
    gt0_rxpmareset_in,
    gt0_rxpolarity_in,
    gt0_rxprbscntreset_in,
    rxuserclk,
    rxuserclk2,
    powerdown,
    gt0_txinhibit_in,
    gt0_txpcsreset_in,
    gt0_txpmareset_in,
    gt0_txpolarity_in,
    gt0_txprbsforceerr_in,
    userclk,
    gt0_drpdi_in,
    gt0_rxmonitorsel_in,
    gt0_loopback_in,
    gt0_rxprbssel_in,
    gt0_rxrate_in,
    gt0_txprbssel_in,
    gt0_txdiffctrl_in,
    gt0_txpostcursor_in,
    gt0_txprecursor_in,
    txdata,
    txcharisk,
    gt0_drpaddr_in,
    userclk2,
    pma_reset,
    enablealign,
    gt0_gtrxreset_in,
    mgt_rx_reset,
    gt0_gttxreset_in,
    mgt_tx_reset,
    configuration_vector_ch2,
    status_vector_ch2,
    configuration_vector_ch3,
    status_vector_ch3,
    status_vector_ch1,
    configuration_vector_ch1,
    configuration_vector_ch0,
    status_vector_ch0,
    gt0_rxpcsreset_in);
  output gt0_cplllock_out;
  output gt0_drprdy_out;
  output gt0_eyescandataerror_out;
  output txn;
  output txp;
  output gt0_rxbyteisaligned_out;
  output gt0_rxbyterealign_out;
  output gt0_rxcommadet_out;
  output rxoutclk;
  output gt0_rxprbserr_out;
  output gt0_rxratedone_out;
  output txoutclk;
  output [15:0]gt0_drpdo_out;
  output [1:0]gt0_txbufstatus_out;
  output [2:0]gt0_rxbufstatus_out;
  output [31:0]rxdata;
  output [6:0]gt0_rxmonitorout_out;
  output [7:0]gt0_dmonitorout_out;
  output [3:0]gt0_rxchariscomma_out;
  output [3:0]gt0_rxcharisk_out;
  output [3:0]gt0_rxdisperr_out;
  output [3:0]gt0_rxnotintable_out;
  output txbuferr;
  output gt0_txresetdone_out;
  output gt0_rxresetdone_out;
  output resetdone;
  input independent_clock_bufg;
  input gt0_drpclk_in;
  input gt0_drpen_in;
  input gt0_drpwe_in;
  input gt0_eyescanreset_in;
  input gt0_eyescantrigger_in;
  input gtrefclk;
  input rxn;
  input rxp;
  input gt0_qplloutclk_in;
  input gt0_qplloutrefclk_in;
  input gt0_rxbufreset_in;
  input gt0_rxcdrhold_in;
  input gt0_rxdfeagcovrden_in;
  input gt0_rxdfelpmreset_in;
  input gt0_rxlpmen_in;
  input gt0_rxpmareset_in;
  input gt0_rxpolarity_in;
  input gt0_rxprbscntreset_in;
  input rxuserclk;
  input rxuserclk2;
  input powerdown;
  input gt0_txinhibit_in;
  input gt0_txpcsreset_in;
  input gt0_txpmareset_in;
  input gt0_txpolarity_in;
  input gt0_txprbsforceerr_in;
  input userclk;
  input [15:0]gt0_drpdi_in;
  input [1:0]gt0_rxmonitorsel_in;
  input [2:0]gt0_loopback_in;
  input [2:0]gt0_rxprbssel_in;
  input [2:0]gt0_rxrate_in;
  input [2:0]gt0_txprbssel_in;
  input [3:0]gt0_txdiffctrl_in;
  input [4:0]gt0_txpostcursor_in;
  input [4:0]gt0_txprecursor_in;
  input [31:0]txdata;
  input [3:0]txcharisk;
  input [8:0]gt0_drpaddr_in;
  input userclk2;
  input pma_reset;
  input enablealign;
  input gt0_gtrxreset_in;
  input mgt_rx_reset;
  input gt0_gttxreset_in;
  input mgt_tx_reset;
  input [0:0]configuration_vector_ch2;
  input [0:0]status_vector_ch2;
  input [0:0]configuration_vector_ch3;
  input [0:0]status_vector_ch3;
  input [0:0]status_vector_ch1;
  input [0:0]configuration_vector_ch1;
  input [0:0]configuration_vector_ch0;
  input [0:0]status_vector_ch0;
  input gt0_rxpcsreset_in;

  wire [0:0]configuration_vector_ch0;
  wire [0:0]configuration_vector_ch1;
  wire [0:0]configuration_vector_ch2;
  wire [0:0]configuration_vector_ch3;
  wire data_valid;
  wire data_valid_reg;
  wire data_valid_reg2;
  wire data_valid_reg_i_2_n_0;
  wire data_valid_reg_i_3_n_0;
  wire enablealign;
  wire encommaalign_rec;
  wire gt0_cplllock_out;
  wire [7:0]gt0_dmonitorout_out;
  wire [8:0]gt0_drpaddr_in;
  wire gt0_drpclk_in;
  wire [15:0]gt0_drpdi_in;
  wire [15:0]gt0_drpdo_out;
  wire gt0_drpen_in;
  wire gt0_drprdy_out;
  wire gt0_drpwe_in;
  wire gt0_eyescandataerror_out;
  wire gt0_eyescanreset_in;
  wire gt0_eyescantrigger_in;
  wire gt0_gtrxreset_in;
  wire gt0_gttxreset_in;
  wire [2:0]gt0_loopback_in;
  wire gt0_qplloutclk_in;
  wire gt0_qplloutrefclk_in;
  wire gt0_rxbufreset_in;
  wire [2:0]gt0_rxbufstatus_out;
  wire gt0_rxbyteisaligned_out;
  wire gt0_rxbyterealign_out;
  wire gt0_rxcdrhold_in;
  wire [3:0]gt0_rxchariscomma_out;
  wire [3:0]gt0_rxcharisk_out;
  wire gt0_rxcommadet_out;
  wire gt0_rxdfeagcovrden_in;
  wire gt0_rxdfelpmreset_in;
  wire [3:0]gt0_rxdisperr_out;
  wire gt0_rxlpmen_in;
  wire [6:0]gt0_rxmonitorout_out;
  wire [1:0]gt0_rxmonitorsel_in;
  wire [3:0]gt0_rxnotintable_out;
  wire gt0_rxpcsreset_in;
  wire gt0_rxpmareset_in;
  wire gt0_rxpolarity_in;
  wire gt0_rxprbscntreset_in;
  wire gt0_rxprbserr_out;
  wire [2:0]gt0_rxprbssel_in;
  wire [2:0]gt0_rxrate_in;
  wire gt0_rxratedone_out;
  wire gt0_rxresetdone_out;
  wire [1:0]gt0_txbufstatus_out;
  wire [3:0]gt0_txdiffctrl_in;
  wire gt0_txinhibit_in;
  wire gt0_txpcsreset_in;
  wire gt0_txpmareset_in;
  wire gt0_txpolarity_in;
  wire [4:0]gt0_txpostcursor_in;
  wire gt0_txprbsforceerr_in;
  wire [2:0]gt0_txprbssel_in;
  wire [4:0]gt0_txprecursor_in;
  wire gt0_txresetdone_out;
  wire gtrefclk;
  wire independent_clock_bufg;
  wire mgt_rx_reset;
  wire mgt_tx_reset;
  wire p_0_in;
  wire pma_reset;
  wire powerdown;
  wire resetdone;
  wire [31:0]rxdata;
  wire rxn;
  wire rxoutclk;
  wire rxp;
  wire rxpcsreset_comb;
  wire rxuserclk;
  wire rxuserclk2;
  wire [0:0]status_vector_ch0;
  wire [0:0]status_vector_ch1;
  wire [0:0]status_vector_ch2;
  wire [0:0]status_vector_ch3;
  wire txbuferr;
  wire [3:0]txcharisk;
  wire [31:0]txdata;
  wire txn;
  wire txoutclk;
  wire txp;
  wire userclk;
  wire userclk2;

  LUT6 #(
    .INIT(64'hEEAEEEAEAAAAEEAE)) 
    data_valid_reg_i_1
       (.I0(data_valid_reg_i_2_n_0),
        .I1(data_valid_reg_i_3_n_0),
        .I2(configuration_vector_ch2),
        .I3(status_vector_ch2),
        .I4(configuration_vector_ch3),
        .I5(status_vector_ch3),
        .O(data_valid));
  LUT6 #(
    .INIT(64'h1011100000001000)) 
    data_valid_reg_i_2
       (.I0(configuration_vector_ch1),
        .I1(configuration_vector_ch0),
        .I2(status_vector_ch2),
        .I3(configuration_vector_ch2),
        .I4(configuration_vector_ch3),
        .I5(status_vector_ch3),
        .O(data_valid_reg_i_2_n_0));
  LUT4 #(
    .INIT(16'hB808)) 
    data_valid_reg_i_3
       (.I0(status_vector_ch1),
        .I1(configuration_vector_ch1),
        .I2(configuration_vector_ch0),
        .I3(status_vector_ch0),
        .O(data_valid_reg_i_3_n_0));
  FDRE data_valid_reg_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(data_valid),
        .Q(data_valid_reg),
        .R(1'b0));
  qsgmii_1218_qsgmii_1218_GTWIZARD gtwizard_inst
       (.data_in(gt0_txresetdone_out),
        .data_out(data_valid_reg2),
        .gt0_cplllock_out(gt0_cplllock_out),
        .gt0_dmonitorout_out(gt0_dmonitorout_out),
        .gt0_drpaddr_in(gt0_drpaddr_in),
        .gt0_drpclk_in(gt0_drpclk_in),
        .gt0_drpdi_in(gt0_drpdi_in),
        .gt0_drpdo_out(gt0_drpdo_out),
        .gt0_drpen_in(gt0_drpen_in),
        .gt0_drprdy_out(gt0_drprdy_out),
        .gt0_drpwe_in(gt0_drpwe_in),
        .gt0_eyescandataerror_out(gt0_eyescandataerror_out),
        .gt0_eyescanreset_in(gt0_eyescanreset_in),
        .gt0_eyescantrigger_in(gt0_eyescantrigger_in),
        .gt0_gtrxreset_in(gt0_gtrxreset_in),
        .gt0_gttxreset_in(gt0_gttxreset_in),
        .gt0_loopback_in(gt0_loopback_in),
        .gt0_qplloutclk_in(gt0_qplloutclk_in),
        .gt0_qplloutrefclk_in(gt0_qplloutrefclk_in),
        .gt0_rxbufreset_in(gt0_rxbufreset_in),
        .gt0_rxbufstatus_out(gt0_rxbufstatus_out),
        .gt0_rxbyteisaligned_out(gt0_rxbyteisaligned_out),
        .gt0_rxbyterealign_out(gt0_rxbyterealign_out),
        .gt0_rxcdrhold_in(gt0_rxcdrhold_in),
        .gt0_rxchariscomma_out(gt0_rxchariscomma_out),
        .gt0_rxcharisk_out(gt0_rxcharisk_out),
        .gt0_rxcommadet_out(gt0_rxcommadet_out),
        .gt0_rxdfeagcovrden_in(gt0_rxdfeagcovrden_in),
        .gt0_rxdfelpmreset_in(gt0_rxdfelpmreset_in),
        .gt0_rxdisperr_out(gt0_rxdisperr_out),
        .gt0_rxlpmen_in(gt0_rxlpmen_in),
        .gt0_rxmonitorout_out(gt0_rxmonitorout_out),
        .gt0_rxmonitorsel_in(gt0_rxmonitorsel_in),
        .gt0_rxnotintable_out(gt0_rxnotintable_out),
        .gt0_rxpmareset_in(gt0_rxpmareset_in),
        .gt0_rxpolarity_in(gt0_rxpolarity_in),
        .gt0_rxprbscntreset_in(gt0_rxprbscntreset_in),
        .gt0_rxprbserr_out(gt0_rxprbserr_out),
        .gt0_rxprbssel_in(gt0_rxprbssel_in),
        .gt0_rxrate_in(gt0_rxrate_in),
        .gt0_rxratedone_out(gt0_rxratedone_out),
        .gt0_rxresetdone_out(gt0_rxresetdone_out),
        .gt0_txbufstatus_out(gt0_txbufstatus_out),
        .gt0_txdiffctrl_in(gt0_txdiffctrl_in),
        .gt0_txinhibit_in(gt0_txinhibit_in),
        .gt0_txpcsreset_in(gt0_txpcsreset_in),
        .gt0_txpmareset_in(gt0_txpmareset_in),
        .gt0_txpolarity_in(gt0_txpolarity_in),
        .gt0_txpostcursor_in(gt0_txpostcursor_in),
        .gt0_txprbsforceerr_in(gt0_txprbsforceerr_in),
        .gt0_txprbssel_in(gt0_txprbssel_in),
        .gt0_txprecursor_in(gt0_txprecursor_in),
        .gtrefclk(gtrefclk),
        .independent_clock_bufg(independent_clock_bufg),
        .mgt_rx_reset(mgt_rx_reset),
        .mgt_tx_reset(mgt_tx_reset),
        .pma_reset(pma_reset),
        .powerdown(powerdown),
        .reset_out(encommaalign_rec),
        .resetdone(resetdone),
        .rxdata(rxdata),
        .rxn(rxn),
        .rxoutclk(rxoutclk),
        .rxp(rxp),
        .rxpcsreset_comb(rxpcsreset_comb),
        .rxuserclk(rxuserclk),
        .rxuserclk2(rxuserclk2),
        .txcharisk(txcharisk),
        .txdata(txdata),
        .txn(txn),
        .txoutclk(txoutclk),
        .txp(txp),
        .userclk(userclk));
  qsgmii_1218_qsgmii_1218_reset_wtd_timer reset_wtd_timer
       (.data_out(data_valid_reg2),
        .gt0_rxpcsreset_in(gt0_rxpcsreset_in),
        .gt0_rxprbssel_in(gt0_rxprbssel_in),
        .independent_clock_bufg(independent_clock_bufg),
        .rxpcsreset_comb(rxpcsreset_comb));
  qsgmii_1218_qsgmii_1218_reset_sync rxrecclk_encommaalign
       (.enablealign(enablealign),
        .reset_out(encommaalign_rec),
        .rxuserclk2(rxuserclk2));
  qsgmii_1218_qsgmii_1218_sync_block_2 sync_block_data_valid
       (.data_in(data_valid_reg),
        .data_out(data_valid_reg2),
        .independent_clock_bufg(independent_clock_bufg));
  FDRE txbuferr_reg
       (.C(userclk2),
        .CE(1'b1),
        .D(p_0_in),
        .Q(txbuferr),
        .R(1'b0));
  FDRE \txbufstatus_reg_reg[1] 
       (.C(userclk2),
        .CE(1'b1),
        .D(gt0_txbufstatus_out[1]),
        .Q(p_0_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_tx_rate_adapt" *) 
module qsgmii_1218_qsgmii_1218_tx_rate_adapt
   (gmii_tx_en_ch3,
    gmii_tx_er_ch3,
    \TXD_REG1_reg[7] ,
    reset_out,
    E,
    gmii_tx_en_ch3_int1,
    userclk2,
    gmii_tx_er_ch3_int1,
    \gmii_txd_ch3_int1_reg[7] );
  output gmii_tx_en_ch3;
  output gmii_tx_er_ch3;
  output [7:0]\TXD_REG1_reg[7] ;
  input reset_out;
  input [0:0]E;
  input gmii_tx_en_ch3_int1;
  input userclk2;
  input gmii_tx_er_ch3_int1;
  input [7:0]\gmii_txd_ch3_int1_reg[7] ;

  wire [0:0]E;
  wire [7:0]\TXD_REG1_reg[7] ;
  wire gmii_tx_en_ch3;
  wire gmii_tx_en_ch3_int1;
  wire gmii_tx_er_ch3;
  wire gmii_tx_er_ch3_int1;
  wire [7:0]\gmii_txd_ch3_int1_reg[7] ;
  wire reset_out;
  wire userclk2;

  FDRE gmii_tx_en_out_reg
       (.C(userclk2),
        .CE(E),
        .D(gmii_tx_en_ch3_int1),
        .Q(gmii_tx_en_ch3),
        .R(reset_out));
  FDRE gmii_tx_er_out_reg
       (.C(userclk2),
        .CE(E),
        .D(gmii_tx_er_ch3_int1),
        .Q(gmii_tx_er_ch3),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[0] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch3_int1_reg[7] [0]),
        .Q(\TXD_REG1_reg[7] [0]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[1] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch3_int1_reg[7] [1]),
        .Q(\TXD_REG1_reg[7] [1]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[2] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch3_int1_reg[7] [2]),
        .Q(\TXD_REG1_reg[7] [2]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[3] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch3_int1_reg[7] [3]),
        .Q(\TXD_REG1_reg[7] [3]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[4] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch3_int1_reg[7] [4]),
        .Q(\TXD_REG1_reg[7] [4]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[5] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch3_int1_reg[7] [5]),
        .Q(\TXD_REG1_reg[7] [5]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[6] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch3_int1_reg[7] [6]),
        .Q(\TXD_REG1_reg[7] [6]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[7] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch3_int1_reg[7] [7]),
        .Q(\TXD_REG1_reg[7] [7]),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_tx_rate_adapt" *) 
module qsgmii_1218_qsgmii_1218_tx_rate_adapt_26
   (gmii_tx_en_ch2,
    gmii_tx_er_ch2,
    \TXD_REG1_reg[7] ,
    reset_out,
    E,
    gmii_tx_en_ch2_int1,
    userclk2,
    gmii_tx_er_ch2_int1,
    \gmii_txd_ch2_int1_reg[7] );
  output gmii_tx_en_ch2;
  output gmii_tx_er_ch2;
  output [7:0]\TXD_REG1_reg[7] ;
  input reset_out;
  input [0:0]E;
  input gmii_tx_en_ch2_int1;
  input userclk2;
  input gmii_tx_er_ch2_int1;
  input [7:0]\gmii_txd_ch2_int1_reg[7] ;

  wire [0:0]E;
  wire [7:0]\TXD_REG1_reg[7] ;
  wire gmii_tx_en_ch2;
  wire gmii_tx_en_ch2_int1;
  wire gmii_tx_er_ch2;
  wire gmii_tx_er_ch2_int1;
  wire [7:0]\gmii_txd_ch2_int1_reg[7] ;
  wire reset_out;
  wire userclk2;

  FDRE gmii_tx_en_out_reg
       (.C(userclk2),
        .CE(E),
        .D(gmii_tx_en_ch2_int1),
        .Q(gmii_tx_en_ch2),
        .R(reset_out));
  FDRE gmii_tx_er_out_reg
       (.C(userclk2),
        .CE(E),
        .D(gmii_tx_er_ch2_int1),
        .Q(gmii_tx_er_ch2),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[0] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch2_int1_reg[7] [0]),
        .Q(\TXD_REG1_reg[7] [0]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[1] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch2_int1_reg[7] [1]),
        .Q(\TXD_REG1_reg[7] [1]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[2] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch2_int1_reg[7] [2]),
        .Q(\TXD_REG1_reg[7] [2]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[3] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch2_int1_reg[7] [3]),
        .Q(\TXD_REG1_reg[7] [3]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[4] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch2_int1_reg[7] [4]),
        .Q(\TXD_REG1_reg[7] [4]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[5] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch2_int1_reg[7] [5]),
        .Q(\TXD_REG1_reg[7] [5]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[6] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch2_int1_reg[7] [6]),
        .Q(\TXD_REG1_reg[7] [6]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[7] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch2_int1_reg[7] [7]),
        .Q(\TXD_REG1_reg[7] [7]),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_tx_rate_adapt" *) 
module qsgmii_1218_qsgmii_1218_tx_rate_adapt_32
   (gmii_tx_en_ch1,
    gmii_tx_er_ch1,
    \TXD_REG1_reg[7] ,
    reset_out,
    E,
    gmii_tx_en_ch1_int1,
    userclk2,
    gmii_tx_er_ch1_int1,
    \gmii_txd_ch1_int1_reg[7] );
  output gmii_tx_en_ch1;
  output gmii_tx_er_ch1;
  output [7:0]\TXD_REG1_reg[7] ;
  input reset_out;
  input [0:0]E;
  input gmii_tx_en_ch1_int1;
  input userclk2;
  input gmii_tx_er_ch1_int1;
  input [7:0]\gmii_txd_ch1_int1_reg[7] ;

  wire [0:0]E;
  wire [7:0]\TXD_REG1_reg[7] ;
  wire gmii_tx_en_ch1;
  wire gmii_tx_en_ch1_int1;
  wire gmii_tx_er_ch1;
  wire gmii_tx_er_ch1_int1;
  wire [7:0]\gmii_txd_ch1_int1_reg[7] ;
  wire reset_out;
  wire userclk2;

  FDRE gmii_tx_en_out_reg
       (.C(userclk2),
        .CE(E),
        .D(gmii_tx_en_ch1_int1),
        .Q(gmii_tx_en_ch1),
        .R(reset_out));
  FDRE gmii_tx_er_out_reg
       (.C(userclk2),
        .CE(E),
        .D(gmii_tx_er_ch1_int1),
        .Q(gmii_tx_er_ch1),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[0] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch1_int1_reg[7] [0]),
        .Q(\TXD_REG1_reg[7] [0]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[1] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch1_int1_reg[7] [1]),
        .Q(\TXD_REG1_reg[7] [1]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[2] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch1_int1_reg[7] [2]),
        .Q(\TXD_REG1_reg[7] [2]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[3] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch1_int1_reg[7] [3]),
        .Q(\TXD_REG1_reg[7] [3]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[4] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch1_int1_reg[7] [4]),
        .Q(\TXD_REG1_reg[7] [4]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[5] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch1_int1_reg[7] [5]),
        .Q(\TXD_REG1_reg[7] [5]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[6] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch1_int1_reg[7] [6]),
        .Q(\TXD_REG1_reg[7] [6]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[7] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch1_int1_reg[7] [7]),
        .Q(\TXD_REG1_reg[7] [7]),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "qsgmii_1218_tx_rate_adapt" *) 
module qsgmii_1218_qsgmii_1218_tx_rate_adapt_38
   (gmii_tx_en_ch0,
    gmii_tx_er_ch0,
    Q,
    reset_out,
    E,
    gmii_tx_en_ch0_int1,
    userclk2,
    gmii_tx_er_ch0_int1,
    \gmii_txd_ch0_int1_reg[7] );
  output gmii_tx_en_ch0;
  output gmii_tx_er_ch0;
  output [7:0]Q;
  input reset_out;
  input [0:0]E;
  input gmii_tx_en_ch0_int1;
  input userclk2;
  input gmii_tx_er_ch0_int1;
  input [7:0]\gmii_txd_ch0_int1_reg[7] ;

  wire [0:0]E;
  wire [7:0]Q;
  wire gmii_tx_en_ch0;
  wire gmii_tx_en_ch0_int1;
  wire gmii_tx_er_ch0;
  wire gmii_tx_er_ch0_int1;
  wire [7:0]\gmii_txd_ch0_int1_reg[7] ;
  wire reset_out;
  wire userclk2;

  FDRE gmii_tx_en_out_reg
       (.C(userclk2),
        .CE(E),
        .D(gmii_tx_en_ch0_int1),
        .Q(gmii_tx_en_ch0),
        .R(reset_out));
  FDRE gmii_tx_er_out_reg
       (.C(userclk2),
        .CE(E),
        .D(gmii_tx_er_ch0_int1),
        .Q(gmii_tx_er_ch0),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[0] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch0_int1_reg[7] [0]),
        .Q(Q[0]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[1] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch0_int1_reg[7] [1]),
        .Q(Q[1]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[2] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch0_int1_reg[7] [2]),
        .Q(Q[2]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[3] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch0_int1_reg[7] [3]),
        .Q(Q[3]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[4] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch0_int1_reg[7] [4]),
        .Q(Q[4]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[5] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch0_int1_reg[7] [5]),
        .Q(Q[5]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[6] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch0_int1_reg[7] [6]),
        .Q(Q[6]),
        .R(reset_out));
  FDRE \gmii_txd_out_reg[7] 
       (.C(userclk2),
        .CE(E),
        .D(\gmii_txd_ch0_int1_reg[7] [7]),
        .Q(Q[7]),
        .R(reset_out));
endmodule

(* ORIG_REF_NAME = "AGGREGATOR" *) 
module qsgmii_1218_AGGREGATOR
   (powerdown,
    enablealign,
    txcharisk,
    txdata,
    POWERDOWN,
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2] ,
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2]_0 ,
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2]_1 ,
    ENABLEALIGN_CH3,
    ENABLEALIGN_CH0,
    ENABLEALIGN_CH1,
    ENABLEALIGN_CH2,
    MGT_TX_RESET,
    userclk,
    D,
    TXDATA_CH3,
    \USE_ROCKET_IO.TXCHARISK_reg ,
    TXDATA_CH0,
    TXDATA_CH2,
    TXDATA_CH1);
  output powerdown;
  output enablealign;
  output [3:0]txcharisk;
  output [31:0]txdata;
  input POWERDOWN;
  input \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2] ;
  input \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2]_0 ;
  input \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2]_1 ;
  input ENABLEALIGN_CH3;
  input ENABLEALIGN_CH0;
  input ENABLEALIGN_CH1;
  input ENABLEALIGN_CH2;
  input MGT_TX_RESET;
  input userclk;
  input [3:0]D;
  input [7:0]TXDATA_CH3;
  input \USE_ROCKET_IO.TXCHARISK_reg ;
  input [6:0]TXDATA_CH0;
  input [7:0]TXDATA_CH2;
  input [7:0]TXDATA_CH1;

  wire [3:0]D;
  wire ENABLEALIGN0__0;
  wire ENABLEALIGN_CH0;
  wire ENABLEALIGN_CH1;
  wire ENABLEALIGN_CH2;
  wire ENABLEALIGN_CH3;
  wire MGT_TX_RESET;
  wire \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2] ;
  wire \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2]_0 ;
  wire \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2]_1 ;
  wire POWERDOWN;
  wire POWERDOWN0__0;
  wire [6:0]TXDATA_CH0;
  wire [7:0]TXDATA_CH1;
  wire [7:0]TXDATA_CH2;
  wire [7:0]TXDATA_CH3;
  wire \USE_ROCKET_IO.TXCHARISK_reg ;
  wire enablealign;
  wire powerdown;
  wire [3:0]txcharisk;
  wire [31:0]txdata;
  wire userclk;

  LUT4 #(
    .INIT(16'hFFFE)) 
    ENABLEALIGN0
       (.I0(ENABLEALIGN_CH3),
        .I1(ENABLEALIGN_CH0),
        .I2(ENABLEALIGN_CH1),
        .I3(ENABLEALIGN_CH2),
        .O(ENABLEALIGN0__0));
  FDSE ENABLEALIGN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ENABLEALIGN0__0),
        .Q(enablealign),
        .S(MGT_TX_RESET));
  LUT4 #(
    .INIT(16'hFFFE)) 
    POWERDOWN0
       (.I0(POWERDOWN),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2] ),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2]_0 ),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2]_1 ),
        .O(POWERDOWN0__0));
  FDRE POWERDOWN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(POWERDOWN0__0),
        .Q(powerdown),
        .R(MGT_TX_RESET));
  FDRE \TXCHARISK_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(txcharisk[0]),
        .R(MGT_TX_RESET));
  FDRE \TXCHARISK_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(txcharisk[1]),
        .R(MGT_TX_RESET));
  FDRE \TXCHARISK_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(D[2]),
        .Q(txcharisk[2]),
        .R(MGT_TX_RESET));
  FDRE \TXCHARISK_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(D[3]),
        .Q(txcharisk[3]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH0[0]),
        .Q(txdata[0]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH1[2]),
        .Q(txdata[10]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH1[3]),
        .Q(txdata[11]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH1[4]),
        .Q(txdata[12]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH1[5]),
        .Q(txdata[13]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[14] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH1[6]),
        .Q(txdata[14]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[15] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH1[7]),
        .Q(txdata[15]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[16] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH2[0]),
        .Q(txdata[16]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[17] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH2[1]),
        .Q(txdata[17]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[18] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH2[2]),
        .Q(txdata[18]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[19] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH2[3]),
        .Q(txdata[19]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH0[1]),
        .Q(txdata[1]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[20] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH2[4]),
        .Q(txdata[20]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[21] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH2[5]),
        .Q(txdata[21]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[22] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH2[6]),
        .Q(txdata[22]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[23] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH2[7]),
        .Q(txdata[23]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[24] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH3[0]),
        .Q(txdata[24]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[25] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH3[1]),
        .Q(txdata[25]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[26] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH3[2]),
        .Q(txdata[26]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[27] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH3[3]),
        .Q(txdata[27]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[28] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH3[4]),
        .Q(txdata[28]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[29] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH3[5]),
        .Q(txdata[29]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH0[2]),
        .Q(txdata[2]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[30] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH3[6]),
        .Q(txdata[30]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[31] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH3[7]),
        .Q(txdata[31]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH0[3]),
        .Q(txdata[3]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH0[4]),
        .Q(txdata[4]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH0[5]),
        .Q(txdata[5]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH0[6]),
        .Q(txdata[6]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.TXCHARISK_reg ),
        .Q(txdata[7]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH1[0]),
        .Q(txdata[8]),
        .R(MGT_TX_RESET));
  FDRE \TXDATA_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(TXDATA_CH1[1]),
        .Q(txdata[9]),
        .R(MGT_TX_RESET));
endmodule

(* ORIG_REF_NAME = "ALIGNER" *) 
module qsgmii_1218_ALIGNER
   (Q,
    \WR_DATA_REG1_reg[9] ,
    \WR_DATA_REG1_reg[11] ,
    \WR_DATA_REG1_reg[7] ,
    RESET_OUT,
    rxchariscomma,
    rxrecclk,
    rxdata,
    rxcharisk,
    rxnotintable);
  output [3:0]Q;
  output [3:0]\WR_DATA_REG1_reg[9] ;
  output [3:0]\WR_DATA_REG1_reg[11] ;
  output [31:0]\WR_DATA_REG1_reg[7] ;
  input RESET_OUT;
  input [3:0]rxchariscomma;
  input rxrecclk;
  input [31:0]rxdata;
  input [3:0]rxcharisk;
  input [3:0]rxnotintable;

  wire ALIGN_SEL1;
  wire ALIGN_SEL12_out;
  wire ALIGN_SEL15_out;
  wire ALIGN_SEL17_out;
  wire [1:0]ALIGN_SEL_REG;
  wire \ALIGN_SEL_REG[0]_i_1_n_0 ;
  wire \ALIGN_SEL_REG[1]_i_1_n_0 ;
  wire \ALIGN_SEL_REG[1]_i_2_n_0 ;
  wire \ALIGN_SEL_REG[1]_i_3_n_0 ;
  wire \ALIGN_SEL_REG[1]_i_4_n_0 ;
  wire \ALIGN_SEL_REG[1]_i_5_n_0 ;
  wire \ALIGN_SEL_REG[1]_i_6_n_0 ;
  wire \ALIGN_SEL_REG[1]_i_7_n_0 ;
  wire \ALIGN_SEL_REG[1]_i_8_n_0 ;
  wire \ALIGN_SEL_REG[1]_i_9_n_0 ;
  wire [3:0]Q;
  wire RESET_OUT;
  wire \RXCHARISCOMMA_ALIGNED[0]_i_1_n_0 ;
  wire \RXCHARISCOMMA_ALIGNED[1]_i_1_n_0 ;
  wire \RXCHARISCOMMA_ALIGNED[2]_i_1_n_0 ;
  wire \RXCHARISCOMMA_ALIGNED[3]_i_1_n_0 ;
  wire [3:0]RXCHARISCOMMA_REG;
  wire \RXCHARISK_ALIGNED[0]_i_1_n_0 ;
  wire \RXCHARISK_ALIGNED[1]_i_1_n_0 ;
  wire \RXCHARISK_ALIGNED[2]_i_1_n_0 ;
  wire \RXCHARISK_ALIGNED[3]_i_1_n_0 ;
  wire \RXCHARISK_REG_reg_n_0_[0] ;
  wire \RXDATA_ALIGNED[0]_i_2_n_0 ;
  wire \RXDATA_ALIGNED[0]_i_3_n_0 ;
  wire \RXDATA_ALIGNED[0]_i_4_n_0 ;
  wire \RXDATA_ALIGNED[0]_i_5_n_0 ;
  wire \RXDATA_ALIGNED[1]_i_2_n_0 ;
  wire \RXDATA_ALIGNED[1]_i_3_n_0 ;
  wire \RXDATA_ALIGNED[1]_i_4_n_0 ;
  wire \RXDATA_ALIGNED[1]_i_5_n_0 ;
  wire \RXDATA_ALIGNED[2]_i_2_n_0 ;
  wire \RXDATA_ALIGNED[3]_i_2_n_0 ;
  wire \RXDATA_ALIGNED[4]_i_2_n_0 ;
  wire \RXDATA_ALIGNED[5]_i_2_n_0 ;
  wire \RXDATA_ALIGNED[6]_i_2_n_0 ;
  wire \RXDATA_ALIGNED[6]_i_3_n_0 ;
  wire \RXDATA_ALIGNED[6]_i_4_n_0 ;
  wire \RXDATA_ALIGNED[6]_i_5_n_0 ;
  wire \RXDATA_ALIGNED[7]_i_2_n_0 ;
  wire \RXDATA_ALIGNED[7]_i_3_n_0 ;
  wire \RXDATA_ALIGNED[7]_i_4_n_0 ;
  wire \RXDATA_REG_reg_n_0_[0] ;
  wire \RXDATA_REG_reg_n_0_[16] ;
  wire \RXDATA_REG_reg_n_0_[17] ;
  wire \RXDATA_REG_reg_n_0_[18] ;
  wire \RXDATA_REG_reg_n_0_[19] ;
  wire \RXDATA_REG_reg_n_0_[1] ;
  wire \RXDATA_REG_reg_n_0_[20] ;
  wire \RXDATA_REG_reg_n_0_[21] ;
  wire \RXDATA_REG_reg_n_0_[22] ;
  wire \RXDATA_REG_reg_n_0_[23] ;
  wire \RXDATA_REG_reg_n_0_[24] ;
  wire \RXDATA_REG_reg_n_0_[25] ;
  wire \RXDATA_REG_reg_n_0_[26] ;
  wire \RXDATA_REG_reg_n_0_[27] ;
  wire \RXDATA_REG_reg_n_0_[28] ;
  wire \RXDATA_REG_reg_n_0_[29] ;
  wire \RXDATA_REG_reg_n_0_[2] ;
  wire \RXDATA_REG_reg_n_0_[30] ;
  wire \RXDATA_REG_reg_n_0_[31] ;
  wire \RXDATA_REG_reg_n_0_[3] ;
  wire \RXDATA_REG_reg_n_0_[4] ;
  wire \RXDATA_REG_reg_n_0_[5] ;
  wire \RXDATA_REG_reg_n_0_[6] ;
  wire \RXDATA_REG_reg_n_0_[7] ;
  wire \RXNOTINTABLE_ALIGNED[0]_i_1_n_0 ;
  wire \RXNOTINTABLE_ALIGNED[1]_i_1_n_0 ;
  wire \RXNOTINTABLE_ALIGNED[2]_i_1_n_0 ;
  wire \RXNOTINTABLE_ALIGNED[3]_i_1_n_0 ;
  wire [3:0]RXNOTINTABLE_REG;
  wire [3:0]\WR_DATA_REG1_reg[11] ;
  wire [31:0]\WR_DATA_REG1_reg[7] ;
  wire [3:0]\WR_DATA_REG1_reg[9] ;
  wire [7:0]p_0_in;
  wire [31:0]p_0_in__0;
  wire p_1_in;
  wire p_1_in1_in;
  wire p_1_in4_in;
  wire [3:0]rxchariscomma;
  wire [3:0]rxcharisk;
  wire [31:0]rxdata;
  wire [3:0]rxnotintable;
  wire rxrecclk;

  LUT5 #(
    .INIT(32'h00FF000E)) 
    \ALIGN_SEL_REG[0]_i_1 
       (.I0(ALIGN_SEL1),
        .I1(ALIGN_SEL_REG[0]),
        .I2(ALIGN_SEL12_out),
        .I3(ALIGN_SEL17_out),
        .I4(ALIGN_SEL15_out),
        .O(\ALIGN_SEL_REG[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \ALIGN_SEL_REG[0]_i_2 
       (.I0(\ALIGN_SEL_REG[1]_i_6_n_0 ),
        .I1(p_1_in),
        .I2(\RXDATA_REG_reg_n_0_[24] ),
        .I3(\RXDATA_REG_reg_n_0_[25] ),
        .O(ALIGN_SEL1));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \ALIGN_SEL_REG[0]_i_3 
       (.I0(\ALIGN_SEL_REG[1]_i_4_n_0 ),
        .I1(p_1_in1_in),
        .I2(\RXDATA_REG_reg_n_0_[16] ),
        .I3(\RXDATA_REG_reg_n_0_[17] ),
        .O(ALIGN_SEL12_out));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'h0008)) 
    \ALIGN_SEL_REG[0]_i_4 
       (.I0(\ALIGN_SEL_REG[1]_i_9_n_0 ),
        .I1(\RXCHARISK_REG_reg_n_0_[0] ),
        .I2(\RXDATA_REG_reg_n_0_[0] ),
        .I3(\RXDATA_REG_reg_n_0_[1] ),
        .O(ALIGN_SEL17_out));
  LUT4 #(
    .INIT(16'h0008)) 
    \ALIGN_SEL_REG[0]_i_5 
       (.I0(\ALIGN_SEL_REG[1]_i_7_n_0 ),
        .I1(p_1_in4_in),
        .I2(p_0_in[0]),
        .I3(p_0_in[1]),
        .O(ALIGN_SEL15_out));
  LUT3 #(
    .INIT(8'h32)) 
    \ALIGN_SEL_REG[1]_i_1 
       (.I0(\ALIGN_SEL_REG[1]_i_2_n_0 ),
        .I1(\ALIGN_SEL_REG[1]_i_3_n_0 ),
        .I2(ALIGN_SEL_REG[1]),
        .O(\ALIGN_SEL_REG[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF100010001000)) 
    \ALIGN_SEL_REG[1]_i_2 
       (.I0(\RXDATA_REG_reg_n_0_[17] ),
        .I1(\RXDATA_REG_reg_n_0_[16] ),
        .I2(p_1_in1_in),
        .I3(\ALIGN_SEL_REG[1]_i_4_n_0 ),
        .I4(\ALIGN_SEL_REG[1]_i_5_n_0 ),
        .I5(\ALIGN_SEL_REG[1]_i_6_n_0 ),
        .O(\ALIGN_SEL_REG[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF100010001000)) 
    \ALIGN_SEL_REG[1]_i_3 
       (.I0(p_0_in[1]),
        .I1(p_0_in[0]),
        .I2(p_1_in4_in),
        .I3(\ALIGN_SEL_REG[1]_i_7_n_0 ),
        .I4(\ALIGN_SEL_REG[1]_i_8_n_0 ),
        .I5(\ALIGN_SEL_REG[1]_i_9_n_0 ),
        .O(\ALIGN_SEL_REG[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    \ALIGN_SEL_REG[1]_i_4 
       (.I0(\RXDATA_REG_reg_n_0_[18] ),
        .I1(\RXDATA_REG_reg_n_0_[19] ),
        .I2(\RXDATA_REG_reg_n_0_[20] ),
        .I3(\RXDATA_REG_reg_n_0_[21] ),
        .I4(\RXDATA_REG_reg_n_0_[23] ),
        .I5(\RXDATA_REG_reg_n_0_[22] ),
        .O(\ALIGN_SEL_REG[1]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \ALIGN_SEL_REG[1]_i_5 
       (.I0(\RXDATA_REG_reg_n_0_[25] ),
        .I1(\RXDATA_REG_reg_n_0_[24] ),
        .I2(p_1_in),
        .O(\ALIGN_SEL_REG[1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    \ALIGN_SEL_REG[1]_i_6 
       (.I0(\RXDATA_REG_reg_n_0_[26] ),
        .I1(\RXDATA_REG_reg_n_0_[27] ),
        .I2(\RXDATA_REG_reg_n_0_[28] ),
        .I3(\RXDATA_REG_reg_n_0_[29] ),
        .I4(\RXDATA_REG_reg_n_0_[31] ),
        .I5(\RXDATA_REG_reg_n_0_[30] ),
        .O(\ALIGN_SEL_REG[1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    \ALIGN_SEL_REG[1]_i_7 
       (.I0(p_0_in[2]),
        .I1(p_0_in[3]),
        .I2(p_0_in[4]),
        .I3(p_0_in[5]),
        .I4(p_0_in[7]),
        .I5(p_0_in[6]),
        .O(\ALIGN_SEL_REG[1]_i_7_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \ALIGN_SEL_REG[1]_i_8 
       (.I0(\RXDATA_REG_reg_n_0_[1] ),
        .I1(\RXDATA_REG_reg_n_0_[0] ),
        .I2(\RXCHARISK_REG_reg_n_0_[0] ),
        .O(\ALIGN_SEL_REG[1]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    \ALIGN_SEL_REG[1]_i_9 
       (.I0(\RXDATA_REG_reg_n_0_[2] ),
        .I1(\RXDATA_REG_reg_n_0_[3] ),
        .I2(\RXDATA_REG_reg_n_0_[4] ),
        .I3(\RXDATA_REG_reg_n_0_[5] ),
        .I4(\RXDATA_REG_reg_n_0_[7] ),
        .I5(\RXDATA_REG_reg_n_0_[6] ),
        .O(\ALIGN_SEL_REG[1]_i_9_n_0 ));
  FDRE \ALIGN_SEL_REG_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .Q(ALIGN_SEL_REG[0]),
        .R(RESET_OUT));
  FDRE \ALIGN_SEL_REG_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .Q(ALIGN_SEL_REG[1]),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXCHARISCOMMA_ALIGNED[0]_i_1 
       (.I0(RXCHARISCOMMA_REG[2]),
        .I1(RXCHARISCOMMA_REG[1]),
        .I2(RXCHARISCOMMA_REG[0]),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(RXCHARISCOMMA_REG[3]),
        .O(\RXCHARISCOMMA_ALIGNED[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXCHARISCOMMA_ALIGNED[1]_i_1 
       (.I0(RXCHARISCOMMA_REG[3]),
        .I1(RXCHARISCOMMA_REG[2]),
        .I2(RXCHARISCOMMA_REG[1]),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxchariscomma[0]),
        .O(\RXCHARISCOMMA_ALIGNED[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXCHARISCOMMA_ALIGNED[2]_i_1 
       (.I0(rxchariscomma[0]),
        .I1(RXCHARISCOMMA_REG[3]),
        .I2(RXCHARISCOMMA_REG[2]),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxchariscomma[1]),
        .O(\RXCHARISCOMMA_ALIGNED[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXCHARISCOMMA_ALIGNED[3]_i_1 
       (.I0(rxchariscomma[1]),
        .I1(rxchariscomma[0]),
        .I2(RXCHARISCOMMA_REG[3]),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxchariscomma[2]),
        .O(\RXCHARISCOMMA_ALIGNED[3]_i_1_n_0 ));
  FDRE \RXCHARISCOMMA_ALIGNED_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXCHARISCOMMA_ALIGNED[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(RESET_OUT));
  FDRE \RXCHARISCOMMA_ALIGNED_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXCHARISCOMMA_ALIGNED[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(RESET_OUT));
  FDRE \RXCHARISCOMMA_ALIGNED_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXCHARISCOMMA_ALIGNED[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(RESET_OUT));
  FDRE \RXCHARISCOMMA_ALIGNED_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXCHARISCOMMA_ALIGNED[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(RESET_OUT));
  FDRE \RXCHARISCOMMA_REG_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxchariscomma[0]),
        .Q(RXCHARISCOMMA_REG[0]),
        .R(RESET_OUT));
  FDRE \RXCHARISCOMMA_REG_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxchariscomma[1]),
        .Q(RXCHARISCOMMA_REG[1]),
        .R(RESET_OUT));
  FDRE \RXCHARISCOMMA_REG_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxchariscomma[2]),
        .Q(RXCHARISCOMMA_REG[2]),
        .R(RESET_OUT));
  FDRE \RXCHARISCOMMA_REG_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxchariscomma[3]),
        .Q(RXCHARISCOMMA_REG[3]),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXCHARISK_ALIGNED[0]_i_1 
       (.I0(p_1_in1_in),
        .I1(p_1_in4_in),
        .I2(\RXCHARISK_REG_reg_n_0_[0] ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(p_1_in),
        .O(\RXCHARISK_ALIGNED[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXCHARISK_ALIGNED[1]_i_1 
       (.I0(p_1_in),
        .I1(p_1_in1_in),
        .I2(p_1_in4_in),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxcharisk[0]),
        .O(\RXCHARISK_ALIGNED[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXCHARISK_ALIGNED[2]_i_1 
       (.I0(rxcharisk[0]),
        .I1(p_1_in),
        .I2(p_1_in1_in),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxcharisk[1]),
        .O(\RXCHARISK_ALIGNED[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXCHARISK_ALIGNED[3]_i_1 
       (.I0(rxcharisk[1]),
        .I1(rxcharisk[0]),
        .I2(p_1_in),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxcharisk[2]),
        .O(\RXCHARISK_ALIGNED[3]_i_1_n_0 ));
  FDRE \RXCHARISK_ALIGNED_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXCHARISK_ALIGNED[0]_i_1_n_0 ),
        .Q(\WR_DATA_REG1_reg[11] [0]),
        .R(RESET_OUT));
  FDRE \RXCHARISK_ALIGNED_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXCHARISK_ALIGNED[1]_i_1_n_0 ),
        .Q(\WR_DATA_REG1_reg[11] [1]),
        .R(RESET_OUT));
  FDRE \RXCHARISK_ALIGNED_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXCHARISK_ALIGNED[2]_i_1_n_0 ),
        .Q(\WR_DATA_REG1_reg[11] [2]),
        .R(RESET_OUT));
  FDRE \RXCHARISK_ALIGNED_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXCHARISK_ALIGNED[3]_i_1_n_0 ),
        .Q(\WR_DATA_REG1_reg[11] [3]),
        .R(RESET_OUT));
  FDRE \RXCHARISK_REG_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxcharisk[0]),
        .Q(\RXCHARISK_REG_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \RXCHARISK_REG_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxcharisk[1]),
        .Q(p_1_in4_in),
        .R(RESET_OUT));
  FDRE \RXCHARISK_REG_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxcharisk[2]),
        .Q(p_1_in1_in),
        .R(RESET_OUT));
  FDRE \RXCHARISK_REG_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxcharisk[3]),
        .Q(p_1_in),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[0]_i_1 
       (.I0(\RXDATA_ALIGNED[0]_i_2_n_0 ),
        .I1(\RXDATA_ALIGNED[0]_i_3_n_0 ),
        .I2(\RXDATA_ALIGNED[0]_i_4_n_0 ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(\RXDATA_ALIGNED[0]_i_5_n_0 ),
        .O(p_0_in__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \RXDATA_ALIGNED[0]_i_2 
       (.I0(\RXDATA_REG_reg_n_0_[16] ),
        .I1(\ALIGN_SEL_REG[1]_i_2_n_0 ),
        .I2(\ALIGN_SEL_REG[1]_i_3_n_0 ),
        .O(\RXDATA_ALIGNED[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \RXDATA_ALIGNED[0]_i_3 
       (.I0(p_0_in[0]),
        .I1(\ALIGN_SEL_REG[1]_i_2_n_0 ),
        .I2(\ALIGN_SEL_REG[1]_i_3_n_0 ),
        .O(\RXDATA_ALIGNED[0]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \RXDATA_ALIGNED[0]_i_4 
       (.I0(\RXDATA_REG_reg_n_0_[0] ),
        .I1(\ALIGN_SEL_REG[1]_i_2_n_0 ),
        .I2(\ALIGN_SEL_REG[1]_i_3_n_0 ),
        .O(\RXDATA_ALIGNED[0]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \RXDATA_ALIGNED[0]_i_5 
       (.I0(\RXDATA_REG_reg_n_0_[24] ),
        .I1(\ALIGN_SEL_REG[1]_i_2_n_0 ),
        .I2(\ALIGN_SEL_REG[1]_i_3_n_0 ),
        .O(\RXDATA_ALIGNED[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[10]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[26] ),
        .I1(\RXDATA_REG_reg_n_0_[18] ),
        .I2(p_0_in[2]),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[2]),
        .O(p_0_in__0[10]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[11]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[27] ),
        .I1(\RXDATA_REG_reg_n_0_[19] ),
        .I2(p_0_in[3]),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[3]),
        .O(p_0_in__0[11]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[12]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[28] ),
        .I1(\RXDATA_REG_reg_n_0_[20] ),
        .I2(p_0_in[4]),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[4]),
        .O(p_0_in__0[12]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[13]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[29] ),
        .I1(\RXDATA_REG_reg_n_0_[21] ),
        .I2(p_0_in[5]),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[5]),
        .O(p_0_in__0[13]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[14]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[30] ),
        .I1(\RXDATA_REG_reg_n_0_[22] ),
        .I2(p_0_in[6]),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[6]),
        .O(p_0_in__0[14]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[15]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[31] ),
        .I1(\RXDATA_REG_reg_n_0_[23] ),
        .I2(p_0_in[7]),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[7]),
        .O(p_0_in__0[15]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[16]_i_1 
       (.I0(rxdata[0]),
        .I1(\RXDATA_REG_reg_n_0_[24] ),
        .I2(\RXDATA_REG_reg_n_0_[16] ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[8]),
        .O(p_0_in__0[16]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[17]_i_1 
       (.I0(rxdata[1]),
        .I1(\RXDATA_REG_reg_n_0_[25] ),
        .I2(\RXDATA_REG_reg_n_0_[17] ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[9]),
        .O(p_0_in__0[17]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[18]_i_1 
       (.I0(rxdata[2]),
        .I1(\RXDATA_REG_reg_n_0_[26] ),
        .I2(\RXDATA_REG_reg_n_0_[18] ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[10]),
        .O(p_0_in__0[18]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[19]_i_1 
       (.I0(rxdata[3]),
        .I1(\RXDATA_REG_reg_n_0_[27] ),
        .I2(\RXDATA_REG_reg_n_0_[19] ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[11]),
        .O(p_0_in__0[19]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[1]_i_1 
       (.I0(\RXDATA_ALIGNED[1]_i_2_n_0 ),
        .I1(\RXDATA_ALIGNED[1]_i_3_n_0 ),
        .I2(\RXDATA_ALIGNED[1]_i_4_n_0 ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(\RXDATA_ALIGNED[1]_i_5_n_0 ),
        .O(p_0_in__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \RXDATA_ALIGNED[1]_i_2 
       (.I0(\RXDATA_REG_reg_n_0_[17] ),
        .I1(\ALIGN_SEL_REG[1]_i_2_n_0 ),
        .I2(\ALIGN_SEL_REG[1]_i_3_n_0 ),
        .O(\RXDATA_ALIGNED[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \RXDATA_ALIGNED[1]_i_3 
       (.I0(p_0_in[1]),
        .I1(\ALIGN_SEL_REG[1]_i_2_n_0 ),
        .I2(\ALIGN_SEL_REG[1]_i_3_n_0 ),
        .O(\RXDATA_ALIGNED[1]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \RXDATA_ALIGNED[1]_i_4 
       (.I0(\RXDATA_REG_reg_n_0_[1] ),
        .I1(\ALIGN_SEL_REG[1]_i_2_n_0 ),
        .I2(\ALIGN_SEL_REG[1]_i_3_n_0 ),
        .O(\RXDATA_ALIGNED[1]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \RXDATA_ALIGNED[1]_i_5 
       (.I0(\RXDATA_REG_reg_n_0_[25] ),
        .I1(\ALIGN_SEL_REG[1]_i_2_n_0 ),
        .I2(\ALIGN_SEL_REG[1]_i_3_n_0 ),
        .O(\RXDATA_ALIGNED[1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[20]_i_1 
       (.I0(rxdata[4]),
        .I1(\RXDATA_REG_reg_n_0_[28] ),
        .I2(\RXDATA_REG_reg_n_0_[20] ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[12]),
        .O(p_0_in__0[20]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[21]_i_1 
       (.I0(rxdata[5]),
        .I1(\RXDATA_REG_reg_n_0_[29] ),
        .I2(\RXDATA_REG_reg_n_0_[21] ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[13]),
        .O(p_0_in__0[21]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[22]_i_1 
       (.I0(rxdata[6]),
        .I1(\RXDATA_REG_reg_n_0_[30] ),
        .I2(\RXDATA_REG_reg_n_0_[22] ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[14]),
        .O(p_0_in__0[22]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[23]_i_1 
       (.I0(rxdata[7]),
        .I1(\RXDATA_REG_reg_n_0_[31] ),
        .I2(\RXDATA_REG_reg_n_0_[23] ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[15]),
        .O(p_0_in__0[23]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[24]_i_1 
       (.I0(rxdata[8]),
        .I1(rxdata[0]),
        .I2(\RXDATA_REG_reg_n_0_[24] ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[16]),
        .O(p_0_in__0[24]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[25]_i_1 
       (.I0(rxdata[9]),
        .I1(rxdata[1]),
        .I2(\RXDATA_REG_reg_n_0_[25] ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[17]),
        .O(p_0_in__0[25]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[26]_i_1 
       (.I0(rxdata[10]),
        .I1(rxdata[2]),
        .I2(\RXDATA_REG_reg_n_0_[26] ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[18]),
        .O(p_0_in__0[26]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[27]_i_1 
       (.I0(rxdata[11]),
        .I1(rxdata[3]),
        .I2(\RXDATA_REG_reg_n_0_[27] ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[19]),
        .O(p_0_in__0[27]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[28]_i_1 
       (.I0(rxdata[12]),
        .I1(rxdata[4]),
        .I2(\RXDATA_REG_reg_n_0_[28] ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[20]),
        .O(p_0_in__0[28]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[29]_i_1 
       (.I0(rxdata[13]),
        .I1(rxdata[5]),
        .I2(\RXDATA_REG_reg_n_0_[29] ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[21]),
        .O(p_0_in__0[29]));
  LUT6 #(
    .INIT(64'hEFFCECFCEFCCECCC)) 
    \RXDATA_ALIGNED[2]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[26] ),
        .I1(\RXDATA_ALIGNED[2]_i_2_n_0 ),
        .I2(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I3(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I4(p_0_in[2]),
        .I5(\RXDATA_REG_reg_n_0_[18] ),
        .O(p_0_in__0[2]));
  LUT6 #(
    .INIT(64'hFFFCFFFCFFFCFFFE)) 
    \RXDATA_ALIGNED[2]_i_2 
       (.I0(\RXDATA_REG_reg_n_0_[2] ),
        .I1(ALIGN_SEL17_out),
        .I2(ALIGN_SEL15_out),
        .I3(\ALIGN_SEL_REG[1]_i_2_n_0 ),
        .I4(\RXDATA_ALIGNED[7]_i_3_n_0 ),
        .I5(ALIGN_SEL_REG[1]),
        .O(\RXDATA_ALIGNED[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[30]_i_1 
       (.I0(rxdata[14]),
        .I1(rxdata[6]),
        .I2(\RXDATA_REG_reg_n_0_[30] ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[22]),
        .O(p_0_in__0[30]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[31]_i_1 
       (.I0(rxdata[15]),
        .I1(rxdata[7]),
        .I2(\RXDATA_REG_reg_n_0_[31] ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[23]),
        .O(p_0_in__0[31]));
  LUT6 #(
    .INIT(64'hEFFCECFCEFCCECCC)) 
    \RXDATA_ALIGNED[3]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[27] ),
        .I1(\RXDATA_ALIGNED[3]_i_2_n_0 ),
        .I2(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I3(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I4(p_0_in[3]),
        .I5(\RXDATA_REG_reg_n_0_[19] ),
        .O(p_0_in__0[3]));
  LUT6 #(
    .INIT(64'hFFFCFFFCFFFCFFFE)) 
    \RXDATA_ALIGNED[3]_i_2 
       (.I0(\RXDATA_REG_reg_n_0_[3] ),
        .I1(ALIGN_SEL17_out),
        .I2(ALIGN_SEL15_out),
        .I3(\ALIGN_SEL_REG[1]_i_2_n_0 ),
        .I4(\RXDATA_ALIGNED[7]_i_3_n_0 ),
        .I5(ALIGN_SEL_REG[1]),
        .O(\RXDATA_ALIGNED[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hEFFCECFCEFCCECCC)) 
    \RXDATA_ALIGNED[4]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[28] ),
        .I1(\RXDATA_ALIGNED[4]_i_2_n_0 ),
        .I2(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I3(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I4(p_0_in[4]),
        .I5(\RXDATA_REG_reg_n_0_[20] ),
        .O(p_0_in__0[4]));
  LUT6 #(
    .INIT(64'hFFFCFFFCFFFCFFFE)) 
    \RXDATA_ALIGNED[4]_i_2 
       (.I0(\RXDATA_REG_reg_n_0_[4] ),
        .I1(ALIGN_SEL17_out),
        .I2(ALIGN_SEL15_out),
        .I3(\ALIGN_SEL_REG[1]_i_2_n_0 ),
        .I4(\RXDATA_ALIGNED[7]_i_3_n_0 ),
        .I5(ALIGN_SEL_REG[1]),
        .O(\RXDATA_ALIGNED[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hEFFCECFCEFCCECCC)) 
    \RXDATA_ALIGNED[5]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[29] ),
        .I1(\RXDATA_ALIGNED[5]_i_2_n_0 ),
        .I2(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I3(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I4(p_0_in[5]),
        .I5(\RXDATA_REG_reg_n_0_[21] ),
        .O(p_0_in__0[5]));
  LUT6 #(
    .INIT(64'hFFFCFFFCFFFCFFFE)) 
    \RXDATA_ALIGNED[5]_i_2 
       (.I0(\RXDATA_REG_reg_n_0_[5] ),
        .I1(ALIGN_SEL17_out),
        .I2(ALIGN_SEL15_out),
        .I3(\ALIGN_SEL_REG[1]_i_2_n_0 ),
        .I4(\RXDATA_ALIGNED[7]_i_3_n_0 ),
        .I5(ALIGN_SEL_REG[1]),
        .O(\RXDATA_ALIGNED[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[6]_i_1 
       (.I0(\RXDATA_ALIGNED[6]_i_2_n_0 ),
        .I1(\RXDATA_ALIGNED[6]_i_3_n_0 ),
        .I2(\RXDATA_ALIGNED[6]_i_4_n_0 ),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(\RXDATA_ALIGNED[6]_i_5_n_0 ),
        .O(p_0_in__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \RXDATA_ALIGNED[6]_i_2 
       (.I0(\RXDATA_REG_reg_n_0_[22] ),
        .I1(\ALIGN_SEL_REG[1]_i_2_n_0 ),
        .I2(\ALIGN_SEL_REG[1]_i_3_n_0 ),
        .O(\RXDATA_ALIGNED[6]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \RXDATA_ALIGNED[6]_i_3 
       (.I0(p_0_in[6]),
        .I1(\ALIGN_SEL_REG[1]_i_2_n_0 ),
        .I2(\ALIGN_SEL_REG[1]_i_3_n_0 ),
        .O(\RXDATA_ALIGNED[6]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \RXDATA_ALIGNED[6]_i_4 
       (.I0(\RXDATA_REG_reg_n_0_[6] ),
        .I1(\ALIGN_SEL_REG[1]_i_2_n_0 ),
        .I2(\ALIGN_SEL_REG[1]_i_3_n_0 ),
        .O(\RXDATA_ALIGNED[6]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \RXDATA_ALIGNED[6]_i_5 
       (.I0(\RXDATA_REG_reg_n_0_[30] ),
        .I1(\ALIGN_SEL_REG[1]_i_2_n_0 ),
        .I2(\ALIGN_SEL_REG[1]_i_3_n_0 ),
        .O(\RXDATA_ALIGNED[6]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hEFFCECFCEFCCECCC)) 
    \RXDATA_ALIGNED[7]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[31] ),
        .I1(\RXDATA_ALIGNED[7]_i_2_n_0 ),
        .I2(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I3(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I4(p_0_in[7]),
        .I5(\RXDATA_REG_reg_n_0_[23] ),
        .O(p_0_in__0[7]));
  LUT6 #(
    .INIT(64'hFFFCFFFCFFFCFFFE)) 
    \RXDATA_ALIGNED[7]_i_2 
       (.I0(\RXDATA_REG_reg_n_0_[7] ),
        .I1(ALIGN_SEL17_out),
        .I2(ALIGN_SEL15_out),
        .I3(\ALIGN_SEL_REG[1]_i_2_n_0 ),
        .I4(\RXDATA_ALIGNED[7]_i_3_n_0 ),
        .I5(ALIGN_SEL_REG[1]),
        .O(\RXDATA_ALIGNED[7]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00F8F8F8)) 
    \RXDATA_ALIGNED[7]_i_3 
       (.I0(\ALIGN_SEL_REG[1]_i_6_n_0 ),
        .I1(\ALIGN_SEL_REG[1]_i_5_n_0 ),
        .I2(ALIGN_SEL_REG[0]),
        .I3(\RXDATA_ALIGNED[7]_i_4_n_0 ),
        .I4(\ALIGN_SEL_REG[1]_i_4_n_0 ),
        .O(\RXDATA_ALIGNED[7]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \RXDATA_ALIGNED[7]_i_4 
       (.I0(\RXDATA_REG_reg_n_0_[17] ),
        .I1(\RXDATA_REG_reg_n_0_[16] ),
        .I2(p_1_in1_in),
        .O(\RXDATA_ALIGNED[7]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[8]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[24] ),
        .I1(\RXDATA_REG_reg_n_0_[16] ),
        .I2(p_0_in[0]),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[0]),
        .O(p_0_in__0[8]));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXDATA_ALIGNED[9]_i_1 
       (.I0(\RXDATA_REG_reg_n_0_[25] ),
        .I1(\RXDATA_REG_reg_n_0_[17] ),
        .I2(p_0_in[1]),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxdata[1]),
        .O(p_0_in__0[9]));
  FDRE \RXDATA_ALIGNED_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[0]),
        .Q(\WR_DATA_REG1_reg[7] [0]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[10] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[10]),
        .Q(\WR_DATA_REG1_reg[7] [10]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[11]),
        .Q(\WR_DATA_REG1_reg[7] [11]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[12]),
        .Q(\WR_DATA_REG1_reg[7] [12]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[13] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[13]),
        .Q(\WR_DATA_REG1_reg[7] [13]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[14] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[14]),
        .Q(\WR_DATA_REG1_reg[7] [14]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[15] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[15]),
        .Q(\WR_DATA_REG1_reg[7] [15]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[16] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[16]),
        .Q(\WR_DATA_REG1_reg[7] [16]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[17] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[17]),
        .Q(\WR_DATA_REG1_reg[7] [17]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[18] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[18]),
        .Q(\WR_DATA_REG1_reg[7] [18]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[19] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[19]),
        .Q(\WR_DATA_REG1_reg[7] [19]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[1]),
        .Q(\WR_DATA_REG1_reg[7] [1]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[20] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[20]),
        .Q(\WR_DATA_REG1_reg[7] [20]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[21] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[21]),
        .Q(\WR_DATA_REG1_reg[7] [21]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[22] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[22]),
        .Q(\WR_DATA_REG1_reg[7] [22]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[23] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[23]),
        .Q(\WR_DATA_REG1_reg[7] [23]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[24] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[24]),
        .Q(\WR_DATA_REG1_reg[7] [24]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[25] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[25]),
        .Q(\WR_DATA_REG1_reg[7] [25]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[26] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[26]),
        .Q(\WR_DATA_REG1_reg[7] [26]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[27] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[27]),
        .Q(\WR_DATA_REG1_reg[7] [27]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[28] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[28]),
        .Q(\WR_DATA_REG1_reg[7] [28]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[29] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[29]),
        .Q(\WR_DATA_REG1_reg[7] [29]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[2]),
        .Q(\WR_DATA_REG1_reg[7] [2]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[30] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[30]),
        .Q(\WR_DATA_REG1_reg[7] [30]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[31] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[31]),
        .Q(\WR_DATA_REG1_reg[7] [31]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[3]),
        .Q(\WR_DATA_REG1_reg[7] [3]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[4]),
        .Q(\WR_DATA_REG1_reg[7] [4]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[5]),
        .Q(\WR_DATA_REG1_reg[7] [5]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[6]),
        .Q(\WR_DATA_REG1_reg[7] [6]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[7]),
        .Q(\WR_DATA_REG1_reg[7] [7]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[8] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[8]),
        .Q(\WR_DATA_REG1_reg[7] [8]),
        .R(RESET_OUT));
  FDRE \RXDATA_ALIGNED_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in__0[9]),
        .Q(\WR_DATA_REG1_reg[7] [9]),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[0]),
        .Q(\RXDATA_REG_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[10] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[10]),
        .Q(p_0_in[2]),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[11]),
        .Q(p_0_in[3]),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[12]),
        .Q(p_0_in[4]),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[13] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[13]),
        .Q(p_0_in[5]),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[14] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[14]),
        .Q(p_0_in[6]),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[15] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[15]),
        .Q(p_0_in[7]),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[16] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[16]),
        .Q(\RXDATA_REG_reg_n_0_[16] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[17] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[17]),
        .Q(\RXDATA_REG_reg_n_0_[17] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[18] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[18]),
        .Q(\RXDATA_REG_reg_n_0_[18] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[19] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[19]),
        .Q(\RXDATA_REG_reg_n_0_[19] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[1]),
        .Q(\RXDATA_REG_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[20] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[20]),
        .Q(\RXDATA_REG_reg_n_0_[20] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[21] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[21]),
        .Q(\RXDATA_REG_reg_n_0_[21] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[22] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[22]),
        .Q(\RXDATA_REG_reg_n_0_[22] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[23] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[23]),
        .Q(\RXDATA_REG_reg_n_0_[23] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[24] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[24]),
        .Q(\RXDATA_REG_reg_n_0_[24] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[25] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[25]),
        .Q(\RXDATA_REG_reg_n_0_[25] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[26] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[26]),
        .Q(\RXDATA_REG_reg_n_0_[26] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[27] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[27]),
        .Q(\RXDATA_REG_reg_n_0_[27] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[28] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[28]),
        .Q(\RXDATA_REG_reg_n_0_[28] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[29] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[29]),
        .Q(\RXDATA_REG_reg_n_0_[29] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[2]),
        .Q(\RXDATA_REG_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[30] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[30]),
        .Q(\RXDATA_REG_reg_n_0_[30] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[31] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[31]),
        .Q(\RXDATA_REG_reg_n_0_[31] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[3]),
        .Q(\RXDATA_REG_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[4]),
        .Q(\RXDATA_REG_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[5]),
        .Q(\RXDATA_REG_reg_n_0_[5] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[6]),
        .Q(\RXDATA_REG_reg_n_0_[6] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[7]),
        .Q(\RXDATA_REG_reg_n_0_[7] ),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[8] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[8]),
        .Q(p_0_in[0]),
        .R(RESET_OUT));
  FDRE \RXDATA_REG_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxdata[9]),
        .Q(p_0_in[1]),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXNOTINTABLE_ALIGNED[0]_i_1 
       (.I0(RXNOTINTABLE_REG[2]),
        .I1(RXNOTINTABLE_REG[1]),
        .I2(RXNOTINTABLE_REG[0]),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(RXNOTINTABLE_REG[3]),
        .O(\RXNOTINTABLE_ALIGNED[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXNOTINTABLE_ALIGNED[1]_i_1 
       (.I0(RXNOTINTABLE_REG[3]),
        .I1(RXNOTINTABLE_REG[2]),
        .I2(RXNOTINTABLE_REG[1]),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxnotintable[0]),
        .O(\RXNOTINTABLE_ALIGNED[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXNOTINTABLE_ALIGNED[2]_i_1 
       (.I0(rxnotintable[0]),
        .I1(RXNOTINTABLE_REG[3]),
        .I2(RXNOTINTABLE_REG[2]),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxnotintable[1]),
        .O(\RXNOTINTABLE_ALIGNED[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFCCAAF000CCAAF0)) 
    \RXNOTINTABLE_ALIGNED[3]_i_1 
       (.I0(rxnotintable[1]),
        .I1(rxnotintable[0]),
        .I2(RXNOTINTABLE_REG[3]),
        .I3(\ALIGN_SEL_REG[1]_i_1_n_0 ),
        .I4(\ALIGN_SEL_REG[0]_i_1_n_0 ),
        .I5(rxnotintable[2]),
        .O(\RXNOTINTABLE_ALIGNED[3]_i_1_n_0 ));
  FDRE \RXNOTINTABLE_ALIGNED_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXNOTINTABLE_ALIGNED[0]_i_1_n_0 ),
        .Q(\WR_DATA_REG1_reg[9] [0]),
        .R(RESET_OUT));
  FDRE \RXNOTINTABLE_ALIGNED_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXNOTINTABLE_ALIGNED[1]_i_1_n_0 ),
        .Q(\WR_DATA_REG1_reg[9] [1]),
        .R(RESET_OUT));
  FDRE \RXNOTINTABLE_ALIGNED_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXNOTINTABLE_ALIGNED[2]_i_1_n_0 ),
        .Q(\WR_DATA_REG1_reg[9] [2]),
        .R(RESET_OUT));
  FDRE \RXNOTINTABLE_ALIGNED_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RXNOTINTABLE_ALIGNED[3]_i_1_n_0 ),
        .Q(\WR_DATA_REG1_reg[9] [3]),
        .R(RESET_OUT));
  FDRE \RXNOTINTABLE_REG_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxnotintable[0]),
        .Q(RXNOTINTABLE_REG[0]),
        .R(RESET_OUT));
  FDRE \RXNOTINTABLE_REG_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxnotintable[1]),
        .Q(RXNOTINTABLE_REG[1]),
        .R(RESET_OUT));
  FDRE \RXNOTINTABLE_REG_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxnotintable[2]),
        .Q(RXNOTINTABLE_REG[2]),
        .R(RESET_OUT));
  FDRE \RXNOTINTABLE_REG_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(rxnotintable[3]),
        .Q(RXNOTINTABLE_REG[3]),
        .R(RESET_OUT));
endmodule

(* ORIG_REF_NAME = "AUTO_NEG" *) 
module qsgmii_1218_AUTO_NEG
   (status_vector_ch3,
    MASK_RUDI_BUFERR,
    RECEIVED_IDLE,
    \STATE_reg[1]_0 ,
    an_interrupt_ch3,
    XMIT_CONFIG_INT_reg_0,
    RX_INVALID_reg,
    I0,
    STATUS_VECTOR_0_PRE_reg,
    XMIT_DATA,
    LP_ADV_ABILITY,
    D,
    CONFIG_REG_MATCH_reg_0,
    CONSISTENCY_MATCH_reg_0,
    out,
    userclk,
    Q,
    BASEX_REMOTE_FAULT_RSLVD,
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ,
    RESTART_AN_SET,
    RX_IDLE,
    S,
    \RX_CONFIG_REG_reg[13] ,
    RX_INVALID_reg_0,
    RX_CONFIG_VALID_INT_reg,
    RX_CONFIG_VALID_INT_reg_0,
    data_out,
    p_0_in,
    SR,
    RX_CONFIG_VALID,
    RX_INVALID,
    RXSYNC_STATUS,
    EVEN_reg,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ,
    EVEN_reg_0,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ,
    link_timer_value_ch3,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ,
    an_adv_config_vector_ch3,
    MASK_RUDI_BUFERR_TIMER0,
    ACKNOWLEDGE_MATCH_3);
  output [5:0]status_vector_ch3;
  output MASK_RUDI_BUFERR;
  output RECEIVED_IDLE;
  output \STATE_reg[1]_0 ;
  output an_interrupt_ch3;
  output XMIT_CONFIG_INT_reg_0;
  output RX_INVALID_reg;
  output I0;
  output STATUS_VECTOR_0_PRE_reg;
  output XMIT_DATA;
  output [0:0]LP_ADV_ABILITY;
  output [2:0]D;
  output [1:0]CONFIG_REG_MATCH_reg_0;
  output [1:0]CONSISTENCY_MATCH_reg_0;
  input out;
  input userclk;
  input [15:0]Q;
  input [0:0]BASEX_REMOTE_FAULT_RSLVD;
  input [2:0]\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ;
  input RESTART_AN_SET;
  input RX_IDLE;
  input [0:0]S;
  input [0:0]\RX_CONFIG_REG_reg[13] ;
  input RX_INVALID_reg_0;
  input RX_CONFIG_VALID_INT_reg;
  input RX_CONFIG_VALID_INT_reg_0;
  input data_out;
  input p_0_in;
  input [0:0]SR;
  input RX_CONFIG_VALID;
  input RX_INVALID;
  input RXSYNC_STATUS;
  input EVEN_reg;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] ;
  input [0:0]\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ;
  input EVEN_reg_0;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  input [8:0]link_timer_value_ch3;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ;
  input [0:0]an_adv_config_vector_ch3;
  input MASK_RUDI_BUFERR_TIMER0;
  input ACKNOWLEDGE_MATCH_3;

  wire ABILITY_MATCH;
  wire ABILITY_MATCH_2;
  wire ABILITY_MATCH_2_i_1__2_n_0;
  wire ABILITY_MATCH_i_1__2_n_0;
  wire ACKNOWLEDGE_MATCH_2;
  wire ACKNOWLEDGE_MATCH_2_i_1__2_n_0;
  wire ACKNOWLEDGE_MATCH_3;
  wire ACKNOWLEDGE_MATCH_3_i_1__2_n_0;
  wire ACKNOWLEDGE_MATCH_3_reg_n_0;
  wire AN_SYNC_STATUS;
  wire AN_SYNC_STATUS_i_1__2_n_0;
  wire [0:0]BASEX_REMOTE_FAULT_RSLVD;
  wire CONFIG_REG_MATCH;
  wire CONFIG_REG_MATCH_COMB;
  wire CONFIG_REG_MATCH_COMB2_carry__0_n_3;
  wire CONFIG_REG_MATCH_COMB2_carry_i_1__2_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_i_2__2_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_i_3__2_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_i_4__2_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_n_1;
  wire CONFIG_REG_MATCH_COMB2_carry_n_2;
  wire CONFIG_REG_MATCH_COMB2_carry_n_3;
  wire [1:0]CONFIG_REG_MATCH_reg_0;
  wire CONSISTENCY_MATCH;
  wire CONSISTENCY_MATCH_COMB;
  wire CONSISTENCY_MATCH_COMB1__0;
  wire \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_0 ;
  wire \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_1 ;
  wire \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_2 ;
  wire \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_3 ;
  wire [1:0]CONSISTENCY_MATCH_reg_0;
  wire [2:0]D;
  wire EVEN_reg;
  wire EVEN_reg_0;
  wire GENERATE_REMOTE_FAULT;
  wire GENERATE_REMOTE_FAULT0;
  wire I0;
  wire IDLE_INSERTED;
  wire IDLE_INSERTED0;
  wire IDLE_INSERTED_REG1;
  wire IDLE_INSERTED_REG2;
  wire IDLE_INSERTED_REG3;
  wire IDLE_INSERTED_REG3_i_1__2_n_0;
  wire IDLE_INSERTED_REG4;
  wire IDLE_MATCH;
  wire IDLE_MATCH_2;
  wire IDLE_MATCH_2_i_1__2_n_0;
  wire IDLE_MATCH_i_1__2_n_0;
  wire IDLE_REMOVED;
  wire IDLE_REMOVED0;
  wire IDLE_REMOVED_REG1;
  wire IDLE_REMOVED_REG2;
  wire \LINK_TIMER[9]_i_1__2_n_0 ;
  wire \LINK_TIMER[9]_i_3__2_n_0 ;
  wire LINK_TIMER_DONE;
  wire LINK_TIMER_DONE_i_1__2_n_0;
  wire LINK_TIMER_DONE_i_2__2_n_0;
  wire LINK_TIMER_DONE_i_3__2_n_0;
  wire LINK_TIMER_DONE_i_4__2_n_0;
  wire LINK_TIMER_DONE_i_5__2_n_0;
  wire LINK_TIMER_DONE_i_6__2_n_0;
  wire LINK_TIMER_DONE_i_7__2_n_0;
  wire LINK_TIMER_SATURATED;
  wire LINK_TIMER_SATURATED_COMB;
  wire LINK_TIMER_SATURATED_COMB0_carry_i_1__2_n_0;
  wire LINK_TIMER_SATURATED_COMB0_carry_i_2__2_n_0;
  wire LINK_TIMER_SATURATED_COMB0_carry_i_3__2_n_0;
  wire LINK_TIMER_SATURATED_COMB0_carry_i_4__2_n_0;
  wire LINK_TIMER_SATURATED_COMB0_carry_n_1;
  wire LINK_TIMER_SATURATED_COMB0_carry_n_2;
  wire LINK_TIMER_SATURATED_COMB0_carry_n_3;
  wire [9:0]LINK_TIMER_reg__0;
  wire [0:0]LP_ADV_ABILITY;
  wire MASK_RUDI_BUFERR;
  wire [12:0]MASK_RUDI_BUFERR_TIMER;
  wire MASK_RUDI_BUFERR_TIMER0;
  wire \MASK_RUDI_BUFERR_TIMER[0]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[10]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[11]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_2__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_3__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_4__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[1]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[2]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[3]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[4]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[5]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[6]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[7]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[8]_i_1__2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[9]_i_1__2_n_0 ;
  wire MASK_RUDI_BUFERR_i_1__2_n_0;
  wire MASK_RUDI_BUFERR_i_2__2_n_0;
  wire MASK_RUDI_BUFERR_i_3__2_n_0;
  wire MASK_RUDI_CLKCOR;
  wire MASK_RUDI_CLKCOR_i_1__2_n_0;
  wire MASK_RUDI_CLKCOR_i_2__2_n_0;
  wire MR_AN_COMPLETE_i_1__2_n_0;
  wire MR_AN_ENABLE_CHANGE;
  wire MR_AN_ENABLE_CHANGE0;
  wire MR_AN_ENABLE_REG1;
  wire MR_AN_ENABLE_REG2;
  wire \MR_LP_ADV_ABILITY_INT[13]_i_1__2_n_0 ;
  wire \MR_LP_ADV_ABILITY_INT[16]_i_1__2_n_0 ;
  wire \MR_LP_ADV_ABILITY_INT[16]_i_2__2_n_0 ;
  wire \MR_LP_ADV_ABILITY_INT_reg_n_0_[16] ;
  wire MR_PAGE_RX_SET119_out;
  wire MR_REMOTE_FAULT_i_1__2_n_0;
  wire MR_RESTART_AN_INT;
  wire MR_RESTART_AN_INT_i_1__2_n_0;
  wire MR_RESTART_AN_INT_i_2__2_n_0;
  wire MR_RESTART_AN_SET_REG1;
  wire MR_RESTART_AN_SET_REG2;
  wire NEXT_STATE2;
  wire [2:0]\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ;
  wire [3:0]PREVIOUS_STATE;
  wire PULSE4096;
  wire PULSE40960;
  wire [15:0]Q;
  wire RECEIVED_IDLE;
  wire RESTART_AN_SET;
  wire RXSYNC_STATUS;
  wire \RX_CONFIG_REG_REG_reg_n_0_[0] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[10] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[11] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[1] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[2] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[3] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[4] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[5] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[6] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[7] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[8] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[9] ;
  wire [0:0]\RX_CONFIG_REG_reg[13] ;
  wire RX_CONFIG_SNAPSHOT;
  wire \RX_CONFIG_SNAPSHOT[15]_i_2__2_n_0 ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[0] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[10] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[11] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[15] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[1] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[2] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[3] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[4] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[5] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[6] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[7] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[8] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[9] ;
  wire RX_CONFIG_VALID;
  wire RX_CONFIG_VALID_INT_reg;
  wire RX_CONFIG_VALID_INT_reg_0;
  wire RX_IDLE;
  wire RX_IDLE_REG1;
  wire RX_IDLE_REG2;
  wire RX_INVALID;
  wire RX_INVALID_reg;
  wire RX_INVALID_reg_0;
  wire RX_RUDI_INVALID;
  wire [1:0]RX_RUDI_INVALID_DELAY;
  wire RX_RUDI_INVALID_DELAY0;
  wire \RX_RUDI_INVALID_DELAY[0]_i_2__2_n_0 ;
  wire RX_RUDI_INVALID_REG;
  wire [0:0]S;
  wire \SGMII_SPEED[1]_i_2__2_n_0 ;
  wire [0:0]SR;
  wire START_LINK_TIMER;
  wire START_LINK_TIMER_REG;
  wire START_LINK_TIMER_REG2;
  wire START_LINK_TIMER_REG_i_2__2_n_0;
  wire START_LINK_TIMER_REG_i_3__2_n_0;
  wire START_LINK_TIMER_REG_i_4__2_n_0;
  wire START_LINK_TIMER_REG_i_5__2_n_0;
  wire START_LINK_TIMER_REG_i_6__2_n_0;
  wire [3:0]STATE;
  wire \STATE[0]_i_1__2_n_0 ;
  wire \STATE[0]_i_2__2_n_0 ;
  wire \STATE[0]_i_3__2_n_0 ;
  wire \STATE[0]_i_4__2_n_0 ;
  wire \STATE[0]_i_5__2_n_0 ;
  wire \STATE[0]_i_6__2_n_0 ;
  wire \STATE[0]_i_7__2_n_0 ;
  wire \STATE[1]_i_1__2_n_0 ;
  wire \STATE[1]_i_2__2_n_0 ;
  wire \STATE[1]_i_3__2_n_0 ;
  wire \STATE[1]_i_4__2_n_0 ;
  wire \STATE[1]_i_5__2_n_0 ;
  wire \STATE[1]_i_6__2_n_0 ;
  wire \STATE[2]_i_1__2_n_0 ;
  wire \STATE[2]_i_2__2_n_0 ;
  wire \STATE[2]_i_3__2_n_0 ;
  wire \STATE[2]_i_4__2_n_0 ;
  wire \STATE[2]_i_5__2_n_0 ;
  wire \STATE[2]_i_6__2_n_0 ;
  wire \STATE[2]_i_8__2_n_0 ;
  wire \STATE[3]_i_1__2_n_0 ;
  wire \STATE[3]_i_2__2_n_0 ;
  wire \STATE[3]_i_3__2_n_0 ;
  wire \STATE[3]_i_4__2_n_0 ;
  wire \STATE[3]_i_5__2_n_0 ;
  wire \STATE[3]_i_6__2_n_0 ;
  wire \STATE[3]_i_7__2_n_0 ;
  wire \STATE_reg[1]_0 ;
  wire STATUS_VECTOR_0_PRE_reg;
  wire SYNC_STATUS_HELD;
  wire SYNC_STATUS_HELD_i_1__2_n_0;
  wire \TIMER4096[0]_i_2__2_n_0 ;
  wire TIMER4096_MSB_REG;
  wire [11:11]TIMER4096_reg;
  wire \TIMER4096_reg[0]_i_1__2_n_0 ;
  wire \TIMER4096_reg[0]_i_1__2_n_1 ;
  wire \TIMER4096_reg[0]_i_1__2_n_2 ;
  wire \TIMER4096_reg[0]_i_1__2_n_3 ;
  wire \TIMER4096_reg[0]_i_1__2_n_4 ;
  wire \TIMER4096_reg[0]_i_1__2_n_5 ;
  wire \TIMER4096_reg[0]_i_1__2_n_6 ;
  wire \TIMER4096_reg[0]_i_1__2_n_7 ;
  wire \TIMER4096_reg[4]_i_1__2_n_0 ;
  wire \TIMER4096_reg[4]_i_1__2_n_1 ;
  wire \TIMER4096_reg[4]_i_1__2_n_2 ;
  wire \TIMER4096_reg[4]_i_1__2_n_3 ;
  wire \TIMER4096_reg[4]_i_1__2_n_4 ;
  wire \TIMER4096_reg[4]_i_1__2_n_5 ;
  wire \TIMER4096_reg[4]_i_1__2_n_6 ;
  wire \TIMER4096_reg[4]_i_1__2_n_7 ;
  wire \TIMER4096_reg[8]_i_1__2_n_1 ;
  wire \TIMER4096_reg[8]_i_1__2_n_2 ;
  wire \TIMER4096_reg[8]_i_1__2_n_3 ;
  wire \TIMER4096_reg[8]_i_1__2_n_4 ;
  wire \TIMER4096_reg[8]_i_1__2_n_5 ;
  wire \TIMER4096_reg[8]_i_1__2_n_6 ;
  wire \TIMER4096_reg[8]_i_1__2_n_7 ;
  wire \TIMER4096_reg_n_0_[0] ;
  wire \TIMER4096_reg_n_0_[10] ;
  wire \TIMER4096_reg_n_0_[1] ;
  wire \TIMER4096_reg_n_0_[2] ;
  wire \TIMER4096_reg_n_0_[3] ;
  wire \TIMER4096_reg_n_0_[4] ;
  wire \TIMER4096_reg_n_0_[5] ;
  wire \TIMER4096_reg_n_0_[6] ;
  wire \TIMER4096_reg_n_0_[7] ;
  wire \TIMER4096_reg_n_0_[8] ;
  wire \TIMER4096_reg_n_0_[9] ;
  wire TOGGLE_RX;
  wire TOGGLE_TX;
  wire TOGGLE_TX_i_1__2_n_0;
  wire \TX_CONFIG_REG_INT[0]_i_1__2_n_0 ;
  wire \TX_CONFIG_REG_INT[11]_i_1__2_n_0 ;
  wire \TX_CONFIG_REG_INT[14]_i_1__2_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] ;
  wire [0:0]\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_i_1__2_n_0;
  wire XMIT_CONFIG_INT_i_2__6_n_0;
  wire XMIT_CONFIG_INT_i_3__2_n_0;
  wire XMIT_CONFIG_INT_reg_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire XMIT_DATA_INT0;
  wire [0:0]an_adv_config_vector_ch3;
  wire an_interrupt_ch3;
  wire data_out;
  wire i__carry_i_1__2_n_0;
  wire i__carry_i_2__2_n_0;
  wire i__carry_i_3__2_n_0;
  wire i__carry_i_4__2_n_0;
  wire [8:0]link_timer_value_ch3;
  wire out;
  wire p_0_in;
  wire p_0_in0_in;
  wire p_0_in28_in;
  wire [9:0]plusOp__0;
  wire plusOp_carry__0_n_0;
  wire plusOp_carry__0_n_1;
  wire plusOp_carry__0_n_2;
  wire plusOp_carry__0_n_3;
  wire plusOp_carry__0_n_4;
  wire plusOp_carry__0_n_5;
  wire plusOp_carry__0_n_6;
  wire plusOp_carry__0_n_7;
  wire plusOp_carry__1_n_1;
  wire plusOp_carry__1_n_2;
  wire plusOp_carry__1_n_3;
  wire plusOp_carry__1_n_4;
  wire plusOp_carry__1_n_5;
  wire plusOp_carry__1_n_6;
  wire plusOp_carry__1_n_7;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire plusOp_carry_n_4;
  wire plusOp_carry_n_5;
  wire plusOp_carry_n_6;
  wire plusOp_carry_n_7;
  wire [5:0]status_vector_ch3;
  wire userclk;
  wire [3:0]NLW_CONFIG_REG_MATCH_COMB2_carry_O_UNCONNECTED;
  wire [3:1]NLW_CONFIG_REG_MATCH_COMB2_carry__0_CO_UNCONNECTED;
  wire [3:0]NLW_CONFIG_REG_MATCH_COMB2_carry__0_O_UNCONNECTED;
  wire [3:0]\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_O_UNCONNECTED ;
  wire [3:1]\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0_CO_UNCONNECTED ;
  wire [3:0]\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0_O_UNCONNECTED ;
  wire [3:0]NLW_LINK_TIMER_SATURATED_COMB0_carry_O_UNCONNECTED;
  wire [3:3]\NLW_TIMER4096_reg[8]_i_1__2_CO_UNCONNECTED ;
  wire [3:3]NLW_plusOp_carry__1_CO_UNCONNECTED;

  LUT6 #(
    .INIT(64'h00000000000000E2)) 
    ABILITY_MATCH_2_i_1__2
       (.I0(ABILITY_MATCH_2),
        .I1(RX_CONFIG_VALID),
        .I2(CONFIG_REG_MATCH_COMB),
        .I3(MASK_RUDI_BUFERR),
        .I4(RX_IDLE),
        .I5(out),
        .O(ABILITY_MATCH_2_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ABILITY_MATCH_2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ABILITY_MATCH_2_i_1__2_n_0),
        .Q(ABILITY_MATCH_2),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0050004400000044)) 
    ABILITY_MATCH_i_1__2
       (.I0(SR),
        .I1(ABILITY_MATCH),
        .I2(ABILITY_MATCH_2),
        .I3(MASK_RUDI_BUFERR),
        .I4(RX_CONFIG_VALID),
        .I5(CONFIG_REG_MATCH_COMB),
        .O(ABILITY_MATCH_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ABILITY_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ABILITY_MATCH_i_1__2_n_0),
        .Q(ABILITY_MATCH),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000000000E222)) 
    ACKNOWLEDGE_MATCH_2_i_1__2
       (.I0(ACKNOWLEDGE_MATCH_2),
        .I1(RX_CONFIG_VALID),
        .I2(Q[14]),
        .I3(p_0_in28_in),
        .I4(MASK_RUDI_BUFERR),
        .I5(SR),
        .O(ACKNOWLEDGE_MATCH_2_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ACKNOWLEDGE_MATCH_2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ACKNOWLEDGE_MATCH_2_i_1__2_n_0),
        .Q(ACKNOWLEDGE_MATCH_2),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000E2222222)) 
    ACKNOWLEDGE_MATCH_3_i_1__2
       (.I0(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I1(RX_CONFIG_VALID),
        .I2(ACKNOWLEDGE_MATCH_2),
        .I3(p_0_in28_in),
        .I4(Q[14]),
        .I5(ACKNOWLEDGE_MATCH_3),
        .O(ACKNOWLEDGE_MATCH_3_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ACKNOWLEDGE_MATCH_3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ACKNOWLEDGE_MATCH_3_i_1__2_n_0),
        .Q(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT5 #(
    .INIT(32'hFFBFFF80)) 
    AN_SYNC_STATUS_i_1__2
       (.I0(SYNC_STATUS_HELD),
        .I1(LINK_TIMER_SATURATED),
        .I2(PULSE4096),
        .I3(RXSYNC_STATUS),
        .I4(AN_SYNC_STATUS),
        .O(AN_SYNC_STATUS_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    AN_SYNC_STATUS_reg
       (.C(userclk),
        .CE(1'b1),
        .D(AN_SYNC_STATUS_i_1__2_n_0),
        .Q(AN_SYNC_STATUS),
        .R(out));
  FDRE \BASEX_REMOTE_FAULT_reg[1] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(BASEX_REMOTE_FAULT_RSLVD),
        .Q(status_vector_ch3[2]),
        .R(out));
  CARRY4 CONFIG_REG_MATCH_COMB2_carry
       (.CI(1'b0),
        .CO({CONFIG_REG_MATCH_COMB2_carry_n_0,CONFIG_REG_MATCH_COMB2_carry_n_1,CONFIG_REG_MATCH_COMB2_carry_n_2,CONFIG_REG_MATCH_COMB2_carry_n_3}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_CONFIG_REG_MATCH_COMB2_carry_O_UNCONNECTED[3:0]),
        .S({CONFIG_REG_MATCH_COMB2_carry_i_1__2_n_0,CONFIG_REG_MATCH_COMB2_carry_i_2__2_n_0,CONFIG_REG_MATCH_COMB2_carry_i_3__2_n_0,CONFIG_REG_MATCH_COMB2_carry_i_4__2_n_0}));
  CARRY4 CONFIG_REG_MATCH_COMB2_carry__0
       (.CI(CONFIG_REG_MATCH_COMB2_carry_n_0),
        .CO({NLW_CONFIG_REG_MATCH_COMB2_carry__0_CO_UNCONNECTED[3:1],CONFIG_REG_MATCH_COMB2_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_CONFIG_REG_MATCH_COMB2_carry__0_O_UNCONNECTED[3:0]),
        .S({1'b0,1'b0,1'b0,S}));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    CONFIG_REG_MATCH_COMB2_carry_i_1__2
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[11] ),
        .I1(Q[11]),
        .I2(\RX_CONFIG_REG_REG_reg_n_0_[10] ),
        .I3(Q[10]),
        .I4(Q[9]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[9] ),
        .O(CONFIG_REG_MATCH_COMB2_carry_i_1__2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    CONFIG_REG_MATCH_COMB2_carry_i_2__2
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[8] ),
        .I1(Q[8]),
        .I2(\RX_CONFIG_REG_REG_reg_n_0_[7] ),
        .I3(Q[7]),
        .I4(Q[6]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[6] ),
        .O(CONFIG_REG_MATCH_COMB2_carry_i_2__2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    CONFIG_REG_MATCH_COMB2_carry_i_3__2
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[5] ),
        .I1(Q[5]),
        .I2(\RX_CONFIG_REG_REG_reg_n_0_[4] ),
        .I3(Q[4]),
        .I4(Q[3]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[3] ),
        .O(CONFIG_REG_MATCH_COMB2_carry_i_3__2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    CONFIG_REG_MATCH_COMB2_carry_i_4__2
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[2] ),
        .I1(Q[2]),
        .I2(\RX_CONFIG_REG_REG_reg_n_0_[1] ),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[0] ),
        .O(CONFIG_REG_MATCH_COMB2_carry_i_4__2_n_0));
  LUT4 #(
    .INIT(16'h4004)) 
    CONFIG_REG_MATCH_i_1__2
       (.I0(RECEIVED_IDLE),
        .I1(CONFIG_REG_MATCH_COMB2_carry__0_n_3),
        .I2(Q[15]),
        .I3(p_0_in0_in),
        .O(CONFIG_REG_MATCH_COMB));
  FDRE #(
    .INIT(1'b0)) 
    CONFIG_REG_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_REG_MATCH_COMB),
        .Q(CONFIG_REG_MATCH),
        .R(out));
  CARRY4 \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry 
       (.CI(1'b0),
        .CO({\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_0 ,\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_1 ,\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_2 ,\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_3 }),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_O_UNCONNECTED [3:0]),
        .S({i__carry_i_1__2_n_0,i__carry_i_2__2_n_0,i__carry_i_3__2_n_0,i__carry_i_4__2_n_0}));
  CARRY4 \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0 
       (.CI(\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_0 ),
        .CO({\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0_CO_UNCONNECTED [3:1],CONSISTENCY_MATCH_COMB1__0}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0_O_UNCONNECTED [3:0]),
        .S({1'b0,1'b0,1'b0,\RX_CONFIG_REG_reg[13] }));
  LUT3 #(
    .INIT(8'h84)) 
    CONSISTENCY_MATCH_i_1__2
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[15] ),
        .I1(CONSISTENCY_MATCH_COMB1__0),
        .I2(Q[15]),
        .O(CONSISTENCY_MATCH_COMB));
  FDRE #(
    .INIT(1'b0)) 
    CONSISTENCY_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CONSISTENCY_MATCH_COMB),
        .Q(CONSISTENCY_MATCH),
        .R(out));
  LUT6 #(
    .INIT(64'h0010000000000000)) 
    GENERATE_REMOTE_FAULT_i_1__2
       (.I0(START_LINK_TIMER_REG_i_4__2_n_0),
        .I1(STATE[1]),
        .I2(IDLE_MATCH),
        .I3(STATE[3]),
        .I4(STATE[2]),
        .I5(\STATE[2]_i_2__2_n_0 ),
        .O(GENERATE_REMOTE_FAULT0));
  FDRE #(
    .INIT(1'b0)) 
    GENERATE_REMOTE_FAULT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(GENERATE_REMOTE_FAULT0),
        .Q(GENERATE_REMOTE_FAULT),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED),
        .Q(IDLE_INSERTED_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG1),
        .Q(IDLE_INSERTED_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT2 #(
    .INIT(4'h2)) 
    IDLE_INSERTED_REG3_i_1__2
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE_REG2),
        .O(IDLE_INSERTED_REG3_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG3_i_1__2_n_0),
        .Q(IDLE_INSERTED_REG3),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG4_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG3),
        .Q(IDLE_INSERTED_REG4),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT3 #(
    .INIT(8'h40)) 
    IDLE_INSERTED_i_1__2
       (.I0(XMIT_CONFIG_INT),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .O(IDLE_INSERTED0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED0),
        .Q(IDLE_INSERTED),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair220" *) 
  LUT5 #(
    .INIT(32'h04FF0400)) 
    IDLE_MATCH_2_i_1__2
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE),
        .I2(IDLE_INSERTED_REG4),
        .I3(RX_IDLE_REG2),
        .I4(IDLE_MATCH_2),
        .O(IDLE_MATCH_2_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_MATCH_2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_MATCH_2_i_1__2_n_0),
        .Q(IDLE_MATCH_2),
        .R(out));
  LUT6 #(
    .INIT(64'h4440FFFF44400000)) 
    IDLE_MATCH_i_1__2
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE),
        .I2(IDLE_MATCH_2),
        .I3(IDLE_REMOVED_REG2),
        .I4(RX_IDLE_REG2),
        .I5(IDLE_MATCH),
        .O(IDLE_MATCH_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_MATCH_i_1__2_n_0),
        .Q(IDLE_MATCH),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED),
        .Q(IDLE_REMOVED_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED_REG1),
        .Q(IDLE_REMOVED_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair239" *) 
  LUT3 #(
    .INIT(8'h10)) 
    IDLE_REMOVED_i_1__2
       (.I0(XMIT_CONFIG_INT),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .O(IDLE_REMOVED0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED0),
        .Q(IDLE_REMOVED),
        .R(out));
  LUT6 #(
    .INIT(64'h8888AAAA8880FFF0)) 
    I_i_1__2
       (.I0(STATUS_VECTOR_0_PRE_reg),
        .I1(EVEN_reg),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] ),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ),
        .I4(EVEN_reg_0),
        .I5(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(I0));
  LUT1 #(
    .INIT(2'h1)) 
    \LINK_TIMER[0]_i_1__2 
       (.I0(LINK_TIMER_reg__0[0]),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \LINK_TIMER[1]_i_1__2 
       (.I0(LINK_TIMER_reg__0[0]),
        .I1(LINK_TIMER_reg__0[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair238" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \LINK_TIMER[2]_i_1__2 
       (.I0(LINK_TIMER_reg__0[1]),
        .I1(LINK_TIMER_reg__0[0]),
        .I2(LINK_TIMER_reg__0[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \LINK_TIMER[3]_i_1__2 
       (.I0(LINK_TIMER_reg__0[2]),
        .I1(LINK_TIMER_reg__0[0]),
        .I2(LINK_TIMER_reg__0[1]),
        .I3(LINK_TIMER_reg__0[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair223" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \LINK_TIMER[4]_i_1__2 
       (.I0(LINK_TIMER_reg__0[3]),
        .I1(LINK_TIMER_reg__0[1]),
        .I2(LINK_TIMER_reg__0[0]),
        .I3(LINK_TIMER_reg__0[2]),
        .I4(LINK_TIMER_reg__0[4]),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \LINK_TIMER[5]_i_1__2 
       (.I0(LINK_TIMER_reg__0[4]),
        .I1(LINK_TIMER_reg__0[2]),
        .I2(LINK_TIMER_reg__0[0]),
        .I3(LINK_TIMER_reg__0[1]),
        .I4(LINK_TIMER_reg__0[3]),
        .I5(LINK_TIMER_reg__0[5]),
        .O(plusOp__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \LINK_TIMER[6]_i_1__2 
       (.I0(\LINK_TIMER[9]_i_3__2_n_0 ),
        .I1(LINK_TIMER_reg__0[6]),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair237" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \LINK_TIMER[7]_i_1__2 
       (.I0(LINK_TIMER_reg__0[6]),
        .I1(\LINK_TIMER[9]_i_3__2_n_0 ),
        .I2(LINK_TIMER_reg__0[7]),
        .O(plusOp__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \LINK_TIMER[8]_i_1__2 
       (.I0(\LINK_TIMER[9]_i_3__2_n_0 ),
        .I1(LINK_TIMER_reg__0[6]),
        .I2(LINK_TIMER_reg__0[7]),
        .I3(LINK_TIMER_reg__0[8]),
        .O(plusOp__0[8]));
  LUT4 #(
    .INIT(16'hFFF8)) 
    \LINK_TIMER[9]_i_1__2 
       (.I0(LINK_TIMER_SATURATED),
        .I1(PULSE4096),
        .I2(out),
        .I3(START_LINK_TIMER_REG),
        .O(\LINK_TIMER[9]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair219" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \LINK_TIMER[9]_i_2__2 
       (.I0(\LINK_TIMER[9]_i_3__2_n_0 ),
        .I1(LINK_TIMER_reg__0[8]),
        .I2(LINK_TIMER_reg__0[7]),
        .I3(LINK_TIMER_reg__0[6]),
        .I4(LINK_TIMER_reg__0[9]),
        .O(plusOp__0[9]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \LINK_TIMER[9]_i_3__2 
       (.I0(LINK_TIMER_reg__0[4]),
        .I1(LINK_TIMER_reg__0[2]),
        .I2(LINK_TIMER_reg__0[0]),
        .I3(LINK_TIMER_reg__0[1]),
        .I4(LINK_TIMER_reg__0[3]),
        .I5(LINK_TIMER_reg__0[5]),
        .O(\LINK_TIMER[9]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFEAEAEAAAAAAAAA)) 
    LINK_TIMER_DONE_i_1__2
       (.I0(LINK_TIMER_DONE_i_2__2_n_0),
        .I1(STATE[1]),
        .I2(\STATE[1]_i_3__2_n_0 ),
        .I3(LINK_TIMER_DONE_i_3__2_n_0),
        .I4(\STATE[3]_i_2__2_n_0 ),
        .I5(LINK_TIMER_DONE_i_4__2_n_0),
        .O(LINK_TIMER_DONE_i_1__2_n_0));
  LUT6 #(
    .INIT(64'hFAEAEAEAAAAAAAAA)) 
    LINK_TIMER_DONE_i_2__2
       (.I0(LINK_TIMER_DONE_i_5__2_n_0),
        .I1(STATE[3]),
        .I2(\STATE[2]_i_5__2_n_0 ),
        .I3(STATE[0]),
        .I4(LINK_TIMER_DONE_i_6__2_n_0),
        .I5(LINK_TIMER_DONE_i_4__2_n_0),
        .O(LINK_TIMER_DONE_i_2__2_n_0));
  LUT6 #(
    .INIT(64'hF0FFC0FFD1D1D1D1)) 
    LINK_TIMER_DONE_i_3__2
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(STATE[0]),
        .I2(\STATE_reg[1]_0 ),
        .I3(LINK_TIMER_DONE),
        .I4(ABILITY_MATCH),
        .I5(STATE[2]),
        .O(LINK_TIMER_DONE_i_3__2_n_0));
  LUT5 #(
    .INIT(32'h00000054)) 
    LINK_TIMER_DONE_i_4__2
       (.I0(START_LINK_TIMER_REG2),
        .I1(LINK_TIMER_SATURATED),
        .I2(LINK_TIMER_DONE),
        .I3(out),
        .I4(START_LINK_TIMER_REG),
        .O(LINK_TIMER_DONE_i_4__2_n_0));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    LINK_TIMER_DONE_i_5__2
       (.I0(LINK_TIMER_DONE_i_4__2_n_0),
        .I1(RX_INVALID),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I4(START_LINK_TIMER_REG_i_5__2_n_0),
        .I5(LINK_TIMER_DONE_i_7__2_n_0),
        .O(LINK_TIMER_DONE_i_5__2_n_0));
  LUT5 #(
    .INIT(32'hFFFF7FFF)) 
    LINK_TIMER_DONE_i_6__2
       (.I0(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I1(CONSISTENCY_MATCH),
        .I2(ABILITY_MATCH),
        .I3(STATE[1]),
        .I4(STATE[2]),
        .O(LINK_TIMER_DONE_i_6__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT5 #(
    .INIT(32'hFF151515)) 
    LINK_TIMER_DONE_i_7__2
       (.I0(STATE[0]),
        .I1(LINK_TIMER_DONE),
        .I2(STATE[2]),
        .I3(ABILITY_MATCH),
        .I4(\STATE_reg[1]_0 ),
        .O(LINK_TIMER_DONE_i_7__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    LINK_TIMER_DONE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LINK_TIMER_DONE_i_1__2_n_0),
        .Q(LINK_TIMER_DONE),
        .R(1'b0));
  CARRY4 LINK_TIMER_SATURATED_COMB0_carry
       (.CI(1'b0),
        .CO({LINK_TIMER_SATURATED_COMB,LINK_TIMER_SATURATED_COMB0_carry_n_1,LINK_TIMER_SATURATED_COMB0_carry_n_2,LINK_TIMER_SATURATED_COMB0_carry_n_3}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_LINK_TIMER_SATURATED_COMB0_carry_O_UNCONNECTED[3:0]),
        .S({LINK_TIMER_SATURATED_COMB0_carry_i_1__2_n_0,LINK_TIMER_SATURATED_COMB0_carry_i_2__2_n_0,LINK_TIMER_SATURATED_COMB0_carry_i_3__2_n_0,LINK_TIMER_SATURATED_COMB0_carry_i_4__2_n_0}));
  LUT1 #(
    .INIT(2'h1)) 
    LINK_TIMER_SATURATED_COMB0_carry_i_1__2
       (.I0(LINK_TIMER_reg__0[9]),
        .O(LINK_TIMER_SATURATED_COMB0_carry_i_1__2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    LINK_TIMER_SATURATED_COMB0_carry_i_2__2
       (.I0(link_timer_value_ch3[8]),
        .I1(LINK_TIMER_reg__0[8]),
        .I2(link_timer_value_ch3[7]),
        .I3(LINK_TIMER_reg__0[7]),
        .I4(LINK_TIMER_reg__0[6]),
        .I5(link_timer_value_ch3[6]),
        .O(LINK_TIMER_SATURATED_COMB0_carry_i_2__2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    LINK_TIMER_SATURATED_COMB0_carry_i_3__2
       (.I0(link_timer_value_ch3[5]),
        .I1(LINK_TIMER_reg__0[5]),
        .I2(link_timer_value_ch3[4]),
        .I3(LINK_TIMER_reg__0[4]),
        .I4(LINK_TIMER_reg__0[3]),
        .I5(link_timer_value_ch3[3]),
        .O(LINK_TIMER_SATURATED_COMB0_carry_i_3__2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    LINK_TIMER_SATURATED_COMB0_carry_i_4__2
       (.I0(link_timer_value_ch3[2]),
        .I1(LINK_TIMER_reg__0[2]),
        .I2(link_timer_value_ch3[1]),
        .I3(LINK_TIMER_reg__0[1]),
        .I4(LINK_TIMER_reg__0[0]),
        .I5(link_timer_value_ch3[0]),
        .O(LINK_TIMER_SATURATED_COMB0_carry_i_4__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    LINK_TIMER_SATURATED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LINK_TIMER_SATURATED_COMB),
        .Q(LINK_TIMER_SATURATED),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[0] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[0]),
        .Q(LINK_TIMER_reg__0[0]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[1] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[1]),
        .Q(LINK_TIMER_reg__0[1]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[2] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[2]),
        .Q(LINK_TIMER_reg__0[2]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[3] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[3]),
        .Q(LINK_TIMER_reg__0[3]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[4] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[4]),
        .Q(LINK_TIMER_reg__0[4]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[5] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[5]),
        .Q(LINK_TIMER_reg__0[5]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[6] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[6]),
        .Q(LINK_TIMER_reg__0[6]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[7] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[7]),
        .Q(LINK_TIMER_reg__0[7]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[8] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[8]),
        .Q(LINK_TIMER_reg__0[8]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[9] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[9]),
        .Q(LINK_TIMER_reg__0[9]),
        .R(\LINK_TIMER[9]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT4 #(
    .INIT(16'h5515)) 
    \MASK_RUDI_BUFERR_TIMER[0]_i_1__2 
       (.I0(MASK_RUDI_BUFERR_TIMER[0]),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[10]_i_1__2 
       (.I0(plusOp_carry__1_n_6),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[10]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair228" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[11]_i_1__2 
       (.I0(plusOp_carry__1_n_5),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[11]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hEFEFEFEFFFEFEFEF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_1__2 
       (.I0(\MASK_RUDI_BUFERR_TIMER[12]_i_3__2_n_0 ),
        .I1(\MASK_RUDI_BUFERR_TIMER[12]_i_4__2_n_0 ),
        .I2(MASK_RUDI_BUFERR_TIMER[0]),
        .I3(data_out),
        .I4(p_0_in),
        .I5(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_2__2 
       (.I0(plusOp_carry__1_n_4),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_3__2 
       (.I0(MASK_RUDI_BUFERR_TIMER[5]),
        .I1(MASK_RUDI_BUFERR_TIMER[6]),
        .I2(MASK_RUDI_BUFERR_TIMER[3]),
        .I3(MASK_RUDI_BUFERR_TIMER[4]),
        .I4(MASK_RUDI_BUFERR_TIMER[2]),
        .I5(MASK_RUDI_BUFERR_TIMER[1]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_4__2 
       (.I0(MASK_RUDI_BUFERR_TIMER[11]),
        .I1(MASK_RUDI_BUFERR_TIMER[12]),
        .I2(MASK_RUDI_BUFERR_TIMER[9]),
        .I3(MASK_RUDI_BUFERR_TIMER[10]),
        .I4(MASK_RUDI_BUFERR_TIMER[8]),
        .I5(MASK_RUDI_BUFERR_TIMER[7]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_4__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[1]_i_1__2 
       (.I0(plusOp_carry_n_7),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair224" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[2]_i_1__2 
       (.I0(plusOp_carry_n_6),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair226" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[3]_i_1__2 
       (.I0(plusOp_carry_n_5),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[4]_i_1__2 
       (.I0(plusOp_carry_n_4),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[4]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[5]_i_1__2 
       (.I0(plusOp_carry__0_n_7),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[5]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair227" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[6]_i_1__2 
       (.I0(plusOp_carry__0_n_6),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[6]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[7]_i_1__2 
       (.I0(plusOp_carry__0_n_5),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[7]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair231" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[8]_i_1__2 
       (.I0(plusOp_carry__0_n_4),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[8]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair230" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[9]_i_1__2 
       (.I0(plusOp_carry__1_n_7),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[9]_i_1__2_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[0] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__2_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[0]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[0]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[10] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__2_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[10]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[10]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[11] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__2_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[11]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[11]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[12] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__2_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[12]_i_2__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[12]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[1] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__2_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[1]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[1]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[2] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__2_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[2]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[2]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[3] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__2_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[3]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[3]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[4] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__2_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[4]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[4]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[5] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__2_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[5]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[5]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[6] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__2_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[6]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[6]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[7] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__2_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[7]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[7]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[8] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__2_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[8]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[8]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[9] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__2_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[9]_i_1__2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[9]),
        .S(out));
  LUT5 #(
    .INIT(32'hFF7FFF00)) 
    MASK_RUDI_BUFERR_i_1__2
       (.I0(MASK_RUDI_BUFERR_i_2__2_n_0),
        .I1(MASK_RUDI_BUFERR_i_3__2_n_0),
        .I2(MASK_RUDI_BUFERR_TIMER[0]),
        .I3(MASK_RUDI_BUFERR_TIMER0),
        .I4(MASK_RUDI_BUFERR),
        .O(MASK_RUDI_BUFERR_i_1__2_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    MASK_RUDI_BUFERR_i_2__2
       (.I0(MASK_RUDI_BUFERR_TIMER[3]),
        .I1(MASK_RUDI_BUFERR_TIMER[4]),
        .I2(MASK_RUDI_BUFERR_TIMER[1]),
        .I3(MASK_RUDI_BUFERR_TIMER[2]),
        .I4(MASK_RUDI_BUFERR_TIMER[6]),
        .I5(MASK_RUDI_BUFERR_TIMER[5]),
        .O(MASK_RUDI_BUFERR_i_2__2_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    MASK_RUDI_BUFERR_i_3__2
       (.I0(MASK_RUDI_BUFERR_TIMER[9]),
        .I1(MASK_RUDI_BUFERR_TIMER[10]),
        .I2(MASK_RUDI_BUFERR_TIMER[7]),
        .I3(MASK_RUDI_BUFERR_TIMER[8]),
        .I4(MASK_RUDI_BUFERR_TIMER[12]),
        .I5(MASK_RUDI_BUFERR_TIMER[11]),
        .O(MASK_RUDI_BUFERR_i_3__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MASK_RUDI_BUFERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MASK_RUDI_BUFERR_i_1__2_n_0),
        .Q(MASK_RUDI_BUFERR),
        .R(out));
  LUT6 #(
    .INIT(64'h00000000FFF20000)) 
    MASK_RUDI_CLKCOR_i_1__2
       (.I0(MASK_RUDI_CLKCOR),
        .I1(MASK_RUDI_CLKCOR_i_2__2_n_0),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I4(RXSYNC_STATUS),
        .I5(out),
        .O(MASK_RUDI_CLKCOR_i_1__2_n_0));
  LUT6 #(
    .INIT(64'h4444444440444040)) 
    MASK_RUDI_CLKCOR_i_2__2
       (.I0(RX_INVALID),
        .I1(RX_RUDI_INVALID_REG),
        .I2(RXSYNC_STATUS),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I4(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I5(XMIT_DATA_INT),
        .O(MASK_RUDI_CLKCOR_i_2__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MASK_RUDI_CLKCOR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MASK_RUDI_CLKCOR_i_1__2_n_0),
        .Q(MASK_RUDI_CLKCOR),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h5150505050505000)) 
    MR_AN_COMPLETE_i_1__2
       (.I0(out),
        .I1(STATE[3]),
        .I2(an_interrupt_ch3),
        .I3(STATE[2]),
        .I4(STATE[0]),
        .I5(STATE[1]),
        .O(MR_AN_COMPLETE_i_1__2_n_0));
  FDRE MR_AN_COMPLETE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_COMPLETE_i_1__2_n_0),
        .Q(an_interrupt_ch3),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    MR_AN_ENABLE_CHANGE_i_1__2
       (.I0(MR_AN_ENABLE_REG2),
        .I1(MR_AN_ENABLE_REG1),
        .O(MR_AN_ENABLE_CHANGE0));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_CHANGE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_ENABLE_CHANGE0),
        .Q(MR_AN_ENABLE_CHANGE),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .Q(MR_AN_ENABLE_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_ENABLE_REG1),
        .Q(MR_AN_ENABLE_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MR_LP_ADV_ABILITY_INT[13]_i_1__2 
       (.I0(Q[12]),
        .I1(\MR_LP_ADV_ABILITY_INT[16]_i_2__2_n_0 ),
        .I2(LP_ADV_ABILITY),
        .O(\MR_LP_ADV_ABILITY_INT[13]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair233" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MR_LP_ADV_ABILITY_INT[16]_i_1__2 
       (.I0(Q[15]),
        .I1(\MR_LP_ADV_ABILITY_INT[16]_i_2__2_n_0 ),
        .I2(\MR_LP_ADV_ABILITY_INT_reg_n_0_[16] ),
        .O(\MR_LP_ADV_ABILITY_INT[16]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h0100000000000000)) 
    \MR_LP_ADV_ABILITY_INT[16]_i_2__2 
       (.I0(PREVIOUS_STATE[3]),
        .I1(out),
        .I2(PREVIOUS_STATE[2]),
        .I3(PREVIOUS_STATE[1]),
        .I4(PREVIOUS_STATE[0]),
        .I5(\SGMII_SPEED[1]_i_2__2_n_0 ),
        .O(\MR_LP_ADV_ABILITY_INT[16]_i_2__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\MR_LP_ADV_ABILITY_INT[13]_i_1__2_n_0 ),
        .Q(LP_ADV_ABILITY),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[16] 
       (.C(userclk),
        .CE(1'b1),
        .D(\MR_LP_ADV_ABILITY_INT[16]_i_1__2_n_0 ),
        .Q(\MR_LP_ADV_ABILITY_INT_reg_n_0_[16] ),
        .R(out));
  LUT3 #(
    .INIT(8'hF4)) 
    MR_REMOTE_FAULT_i_1__2
       (.I0(\MR_LP_ADV_ABILITY_INT_reg_n_0_[16] ),
        .I1(GENERATE_REMOTE_FAULT),
        .I2(status_vector_ch3[5]),
        .O(MR_REMOTE_FAULT_i_1__2_n_0));
  FDRE MR_REMOTE_FAULT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_REMOTE_FAULT_i_1__2_n_0),
        .Q(status_vector_ch3[5]),
        .R(out));
  LUT5 #(
    .INIT(32'h0CAE0C0C)) 
    MR_RESTART_AN_INT_i_1__2
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(MR_RESTART_AN_SET_REG1),
        .I2(MR_RESTART_AN_SET_REG2),
        .I3(MR_RESTART_AN_INT_i_2__2_n_0),
        .I4(MR_RESTART_AN_INT),
        .O(MR_RESTART_AN_INT_i_1__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    MR_RESTART_AN_INT_i_2__2
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[3]),
        .I3(STATE[2]),
        .O(MR_RESTART_AN_INT_i_2__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_RESTART_AN_INT_i_1__2_n_0),
        .Q(MR_RESTART_AN_INT),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_SET_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RESTART_AN_SET),
        .Q(MR_RESTART_AN_SET_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_SET_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_RESTART_AN_SET_REG1),
        .Q(MR_RESTART_AN_SET_REG2),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[0]),
        .Q(PREVIOUS_STATE[0]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[1]),
        .Q(PREVIOUS_STATE[1]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[2]),
        .Q(PREVIOUS_STATE[2]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[3]),
        .Q(PREVIOUS_STATE[3]),
        .R(out));
  LUT2 #(
    .INIT(4'h2)) 
    PULSE4096_i_1__2
       (.I0(TIMER4096_MSB_REG),
        .I1(TIMER4096_reg),
        .O(PULSE40960));
  FDRE #(
    .INIT(1'b0)) 
    PULSE4096_reg
       (.C(userclk),
        .CE(1'b1),
        .D(PULSE40960),
        .Q(PULSE4096),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RECEIVED_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID_INT_reg),
        .Q(RECEIVED_IDLE),
        .R(out));
  FDRE RUDI_INVALID_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY[1]),
        .Q(status_vector_ch3[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_CONFIG_REG_NULL_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID_INT_reg_0),
        .Q(\STATE_reg[1]_0 ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[0] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[0]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[10] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[10]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[10] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[11] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[11]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[11] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[12] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[12]),
        .Q(CONFIG_REG_MATCH_reg_0[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[13] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[13]),
        .Q(CONFIG_REG_MATCH_reg_0[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[14] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[14]),
        .Q(p_0_in28_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[15] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[15]),
        .Q(p_0_in0_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[1] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[1]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[1] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[2] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[2]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[2] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[3] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[3]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[3] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[4] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[4]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[4] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[5] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[5]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[5] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[6] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[6]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[6] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[7] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[7]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[7] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[8] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[8]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[8] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[9] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[9]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[9] ),
        .R(SR));
  LUT6 #(
    .INIT(64'h2000200000002000)) 
    \RX_CONFIG_SNAPSHOT[15]_i_1__2 
       (.I0(RX_CONFIG_VALID),
        .I1(ABILITY_MATCH),
        .I2(ABILITY_MATCH_2),
        .I3(CONFIG_REG_MATCH),
        .I4(STATE[0]),
        .I5(\RX_CONFIG_SNAPSHOT[15]_i_2__2_n_0 ),
        .O(RX_CONFIG_SNAPSHOT));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \RX_CONFIG_SNAPSHOT[15]_i_2__2 
       (.I0(STATE[3]),
        .I1(STATE[2]),
        .I2(STATE[1]),
        .O(\RX_CONFIG_SNAPSHOT[15]_i_2__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[0] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[0]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[0] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[10] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[10]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[10] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[11] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[11]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[11] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[12] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[12]),
        .Q(CONSISTENCY_MATCH_reg_0[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[13] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[13]),
        .Q(CONSISTENCY_MATCH_reg_0[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[15] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[15]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[15] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[1] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[1]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[1] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[2] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[2]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[2] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[3] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[3]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[3] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[4] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[4]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[4] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[5] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[5]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[5] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[6] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[6]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[6] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[7] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[7]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[7] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[8] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[8]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[8] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[9] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[9]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[9] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_IDLE_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE),
        .Q(RX_IDLE_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_IDLE_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE_REG1),
        .Q(RX_IDLE_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT4 #(
    .INIT(16'h0BFF)) 
    RX_INVALID_i_2__2
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I2(XMIT_DATA_INT),
        .I3(RXSYNC_STATUS),
        .O(RX_INVALID_reg));
  LUT6 #(
    .INIT(64'h1010101010101011)) 
    \RX_RUDI_INVALID_DELAY[0]_i_1__2 
       (.I0(MASK_RUDI_BUFERR),
        .I1(MASK_RUDI_CLKCOR),
        .I2(RX_INVALID),
        .I3(RXSYNC_STATUS),
        .I4(XMIT_DATA_INT),
        .I5(\RX_RUDI_INVALID_DELAY[0]_i_2__2_n_0 ),
        .O(RX_RUDI_INVALID_DELAY0));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \RX_RUDI_INVALID_DELAY[0]_i_2__2 
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .O(\RX_RUDI_INVALID_DELAY[0]_i_2__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \RX_RUDI_INVALID_DELAY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY0),
        .Q(RX_RUDI_INVALID_DELAY[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_RUDI_INVALID_DELAY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY[0]),
        .Q(RX_RUDI_INVALID_DELAY[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_RUDI_INVALID_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_INVALID_reg_0),
        .Q(RX_RUDI_INVALID_REG),
        .R(1'b0));
  FDRE SGMII_PHY_STATUS_reg
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(Q[15]),
        .Q(status_vector_ch3[1]),
        .R(out));
  LUT5 #(
    .INIT(32'h10000000)) 
    \SGMII_SPEED[1]_i_1__2 
       (.I0(PREVIOUS_STATE[2]),
        .I1(PREVIOUS_STATE[3]),
        .I2(PREVIOUS_STATE[0]),
        .I3(PREVIOUS_STATE[1]),
        .I4(\SGMII_SPEED[1]_i_2__2_n_0 ),
        .O(MR_PAGE_RX_SET119_out));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \SGMII_SPEED[1]_i_2__2 
       (.I0(STATE[3]),
        .I1(STATE[2]),
        .I2(STATE[1]),
        .I3(STATE[0]),
        .O(\SGMII_SPEED[1]_i_2__2_n_0 ));
  FDRE \SGMII_SPEED_reg[0] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(Q[10]),
        .Q(status_vector_ch3[3]),
        .R(out));
  FDSE \SGMII_SPEED_reg[1] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(Q[11]),
        .Q(status_vector_ch3[4]),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    START_LINK_TIMER_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(START_LINK_TIMER_REG),
        .Q(START_LINK_TIMER_REG2),
        .R(out));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFEEFE)) 
    START_LINK_TIMER_REG_i_1__2
       (.I0(START_LINK_TIMER_REG_i_2__2_n_0),
        .I1(START_LINK_TIMER_REG_i_3__2_n_0),
        .I2(\SGMII_SPEED[1]_i_2__2_n_0 ),
        .I3(START_LINK_TIMER_REG_i_4__2_n_0),
        .I4(START_LINK_TIMER_REG_i_5__2_n_0),
        .I5(START_LINK_TIMER_REG_i_6__2_n_0),
        .O(START_LINK_TIMER));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    START_LINK_TIMER_REG_i_2__2
       (.I0(STATE[0]),
        .I1(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I2(CONSISTENCY_MATCH),
        .I3(ABILITY_MATCH),
        .I4(\STATE_reg[1]_0 ),
        .I5(\RX_CONFIG_SNAPSHOT[15]_i_2__2_n_0 ),
        .O(START_LINK_TIMER_REG_i_2__2_n_0));
  LUT4 #(
    .INIT(16'h1000)) 
    START_LINK_TIMER_REG_i_3__2
       (.I0(MASK_RUDI_BUFERR),
        .I1(MASK_RUDI_CLKCOR),
        .I2(XMIT_CONFIG_INT),
        .I3(RX_RUDI_INVALID),
        .O(START_LINK_TIMER_REG_i_3__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair216" *) 
  LUT3 #(
    .INIT(8'h8F)) 
    START_LINK_TIMER_REG_i_4__2
       (.I0(ABILITY_MATCH),
        .I1(\STATE_reg[1]_0 ),
        .I2(LINK_TIMER_DONE),
        .O(START_LINK_TIMER_REG_i_4__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    START_LINK_TIMER_REG_i_5__2
       (.I0(MR_AN_ENABLE_CHANGE),
        .I1(MR_RESTART_AN_INT),
        .I2(AN_SYNC_STATUS),
        .O(START_LINK_TIMER_REG_i_5__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair218" *) 
  LUT5 #(
    .INIT(32'h00010000)) 
    START_LINK_TIMER_REG_i_6__2
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .I2(STATE[0]),
        .I3(STATE[1]),
        .I4(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .O(START_LINK_TIMER_REG_i_6__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT5 #(
    .INIT(32'hFFFF000D)) 
    START_LINK_TIMER_REG_i_7__2
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I2(XMIT_DATA_INT),
        .I3(RXSYNC_STATUS),
        .I4(RX_INVALID),
        .O(RX_RUDI_INVALID));
  FDRE #(
    .INIT(1'b0)) 
    START_LINK_TIMER_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(START_LINK_TIMER),
        .Q(START_LINK_TIMER_REG),
        .R(out));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFF8)) 
    \STATE[0]_i_1__2 
       (.I0(\STATE[0]_i_2__2_n_0 ),
        .I1(\STATE[2]_i_2__2_n_0 ),
        .I2(\STATE[0]_i_3__2_n_0 ),
        .I3(\STATE[0]_i_4__2_n_0 ),
        .I4(\STATE[0]_i_5__2_n_0 ),
        .I5(\STATE[0]_i_6__2_n_0 ),
        .O(\STATE[0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000570077)) 
    \STATE[0]_i_2__2 
       (.I0(ABILITY_MATCH),
        .I1(STATE[1]),
        .I2(\STATE_reg[1]_0 ),
        .I3(STATE[3]),
        .I4(STATE[2]),
        .I5(LINK_TIMER_DONE),
        .O(\STATE[0]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \STATE[0]_i_3__2 
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(STATE[1]),
        .I2(STATE[0]),
        .I3(STATE[3]),
        .I4(STATE[2]),
        .I5(\STATE[3]_i_2__2_n_0 ),
        .O(\STATE[0]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h0111000000000000)) 
    \STATE[0]_i_4__2 
       (.I0(\RX_CONFIG_SNAPSHOT[15]_i_2__2_n_0 ),
        .I1(\STATE_reg[1]_0 ),
        .I2(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I3(STATE[0]),
        .I4(ABILITY_MATCH),
        .I5(\STATE[2]_i_5__2_n_0 ),
        .O(\STATE[0]_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'h0808280800000000)) 
    \STATE[0]_i_5__2 
       (.I0(\STATE[2]_i_5__2_n_0 ),
        .I1(STATE[0]),
        .I2(ABILITY_MATCH),
        .I3(NEXT_STATE2),
        .I4(\STATE_reg[1]_0 ),
        .I5(\STATE[0]_i_7__2_n_0 ),
        .O(\STATE[0]_i_5__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000700000000000)) 
    \STATE[0]_i_6__2 
       (.I0(ABILITY_MATCH),
        .I1(\STATE_reg[1]_0 ),
        .I2(LINK_TIMER_DONE),
        .I3(\STATE[2]_i_8__2_n_0 ),
        .I4(STATE[1]),
        .I5(\STATE[2]_i_5__2_n_0 ),
        .O(\STATE[0]_i_6__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \STATE[0]_i_7__2 
       (.I0(STATE[1]),
        .I1(STATE[3]),
        .O(\STATE[0]_i_7__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFAABAAAAA)) 
    \STATE[1]_i_1__2 
       (.I0(\STATE[1]_i_2__2_n_0 ),
        .I1(\STATE_reg[1]_0 ),
        .I2(STATE[1]),
        .I3(STATE[3]),
        .I4(\STATE[1]_i_3__2_n_0 ),
        .I5(\STATE[1]_i_4__2_n_0 ),
        .O(\STATE[1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000002820)) 
    \STATE[1]_i_2__2 
       (.I0(\STATE[2]_i_5__2_n_0 ),
        .I1(STATE[0]),
        .I2(STATE[1]),
        .I3(LINK_TIMER_DONE),
        .I4(STATE[3]),
        .I5(STATE[2]),
        .O(\STATE[1]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair241" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \STATE[1]_i_3__2 
       (.I0(\STATE[2]_i_5__2_n_0 ),
        .I1(STATE[0]),
        .O(\STATE[1]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'hF800F800FF00F800)) 
    \STATE[1]_i_4__2 
       (.I0(\STATE[1]_i_5__2_n_0 ),
        .I1(STATE[0]),
        .I2(\STATE[1]_i_6__2_n_0 ),
        .I3(\STATE[2]_i_5__2_n_0 ),
        .I4(\STATE[2]_i_3__2_n_0 ),
        .I5(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .O(\STATE[1]_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'h0008000800080808)) 
    \STATE[1]_i_5__2 
       (.I0(IDLE_MATCH),
        .I1(LINK_TIMER_DONE),
        .I2(STATE[3]),
        .I3(ABILITY_MATCH),
        .I4(STATE[1]),
        .I5(\STATE_reg[1]_0 ),
        .O(\STATE[1]_i_5__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair232" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \STATE[1]_i_6__2 
       (.I0(STATE[3]),
        .I1(STATE[1]),
        .I2(ABILITY_MATCH),
        .O(\STATE[1]_i_6__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF80000000)) 
    \STATE[2]_i_1__2 
       (.I0(\STATE[2]_i_2__2_n_0 ),
        .I1(\STATE[2]_i_3__2_n_0 ),
        .I2(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I3(CONSISTENCY_MATCH),
        .I4(ABILITY_MATCH),
        .I5(\STATE[2]_i_4__2_n_0 ),
        .O(\STATE[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair241" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \STATE[2]_i_2__2 
       (.I0(\STATE[2]_i_5__2_n_0 ),
        .I1(STATE[0]),
        .O(\STATE[2]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair225" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \STATE[2]_i_3__2 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(\STATE_reg[1]_0 ),
        .O(\STATE[2]_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h8888888C00000000)) 
    \STATE[2]_i_4__2 
       (.I0(\STATE[2]_i_6__2_n_0 ),
        .I1(\STATE[2]_i_5__2_n_0 ),
        .I2(STATE[0]),
        .I3(\STATE_reg[1]_0 ),
        .I4(NEXT_STATE2),
        .I5(\STATE[2]_i_8__2_n_0 ),
        .O(\STATE[2]_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000AE00)) 
    \STATE[2]_i_5__2 
       (.I0(\STATE[3]_i_5__2_n_0 ),
        .I1(XMIT_DATA),
        .I2(RX_INVALID),
        .I3(AN_SYNC_STATUS),
        .I4(MR_RESTART_AN_INT),
        .I5(MR_AN_ENABLE_CHANGE),
        .O(\STATE[2]_i_5__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT3 #(
    .INIT(8'h1F)) 
    \STATE[2]_i_6__2 
       (.I0(\STATE_reg[1]_0 ),
        .I1(STATE[1]),
        .I2(ABILITY_MATCH),
        .O(\STATE[2]_i_6__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \STATE[2]_i_7__2 
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[11] ),
        .I1(TOGGLE_RX),
        .O(NEXT_STATE2));
  (* SOFT_HLUTNM = "soft_lutpair240" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \STATE[2]_i_8__2 
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .O(\STATE[2]_i_8__2_n_0 ));
  LUT6 #(
    .INIT(64'h00880088F0FF0088)) 
    \STATE[3]_i_1__2 
       (.I0(\STATE[3]_i_2__2_n_0 ),
        .I1(STATE[3]),
        .I2(\STATE[3]_i_3__2_n_0 ),
        .I3(\STATE[3]_i_4__2_n_0 ),
        .I4(AN_SYNC_STATUS),
        .I5(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .O(\STATE[3]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000AE00)) 
    \STATE[3]_i_2__2 
       (.I0(\STATE[3]_i_5__2_n_0 ),
        .I1(XMIT_DATA_INT),
        .I2(RX_INVALID),
        .I3(AN_SYNC_STATUS),
        .I4(MR_RESTART_AN_INT),
        .I5(MR_AN_ENABLE_CHANGE),
        .O(\STATE[3]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF010000)) 
    \STATE[3]_i_3__2 
       (.I0(XMIT_DATA_INT),
        .I1(RXSYNC_STATUS),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I3(RX_INVALID),
        .I4(\STATE[3]_i_6__2_n_0 ),
        .I5(\STATE[3]_i_7__2_n_0 ),
        .O(\STATE[3]_i_3__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair234" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \STATE[3]_i_4__2 
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[2]),
        .O(\STATE[3]_i_4__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT5 #(
    .INIT(32'hFDFDFFFD)) 
    \STATE[3]_i_5__2 
       (.I0(XMIT_CONFIG_INT),
        .I1(MASK_RUDI_CLKCOR),
        .I2(MASK_RUDI_BUFERR),
        .I3(RXSYNC_STATUS),
        .I4(RX_INVALID),
        .O(\STATE[3]_i_5__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair214" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \STATE[3]_i_6__2 
       (.I0(XMIT_CONFIG_INT),
        .I1(MASK_RUDI_CLKCOR),
        .I2(MASK_RUDI_BUFERR),
        .O(\STATE[3]_i_6__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair235" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \STATE[3]_i_7__2 
       (.I0(MR_RESTART_AN_INT),
        .I1(MR_AN_ENABLE_CHANGE),
        .O(\STATE[3]_i_7__2_n_0 ));
  FDRE \STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[0]_i_1__2_n_0 ),
        .Q(STATE[0]),
        .R(out));
  FDRE \STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[1]_i_1__2_n_0 ),
        .Q(STATE[1]),
        .R(out));
  FDRE \STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[2]_i_1__2_n_0 ),
        .Q(STATE[2]),
        .R(out));
  FDRE \STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[3]_i_1__2_n_0 ),
        .Q(STATE[3]),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair215" *) 
  LUT4 #(
    .INIT(16'hAE00)) 
    STATUS_VECTOR_0_PRE_i_1__2
       (.I0(XMIT_DATA_INT),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I3(RXSYNC_STATUS),
        .O(STATUS_VECTOR_0_PRE_reg));
  (* SOFT_HLUTNM = "soft_lutpair217" *) 
  LUT4 #(
    .INIT(16'hF7F0)) 
    SYNC_STATUS_HELD_i_1__2
       (.I0(LINK_TIMER_SATURATED),
        .I1(PULSE4096),
        .I2(RXSYNC_STATUS),
        .I3(SYNC_STATUS_HELD),
        .O(SYNC_STATUS_HELD_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_HELD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_HELD_i_1__2_n_0),
        .Q(SYNC_STATUS_HELD),
        .R(out));
  LUT1 #(
    .INIT(2'h1)) 
    \TIMER4096[0]_i_2__2 
       (.I0(\TIMER4096_reg_n_0_[0] ),
        .O(\TIMER4096[0]_i_2__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    TIMER4096_MSB_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TIMER4096_reg),
        .Q(TIMER4096_MSB_REG),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[0]_i_1__2_n_7 ),
        .Q(\TIMER4096_reg_n_0_[0] ),
        .R(out));
  CARRY4 \TIMER4096_reg[0]_i_1__2 
       (.CI(1'b0),
        .CO({\TIMER4096_reg[0]_i_1__2_n_0 ,\TIMER4096_reg[0]_i_1__2_n_1 ,\TIMER4096_reg[0]_i_1__2_n_2 ,\TIMER4096_reg[0]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\TIMER4096_reg[0]_i_1__2_n_4 ,\TIMER4096_reg[0]_i_1__2_n_5 ,\TIMER4096_reg[0]_i_1__2_n_6 ,\TIMER4096_reg[0]_i_1__2_n_7 }),
        .S({\TIMER4096_reg_n_0_[3] ,\TIMER4096_reg_n_0_[2] ,\TIMER4096_reg_n_0_[1] ,\TIMER4096[0]_i_2__2_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[8]_i_1__2_n_5 ),
        .Q(\TIMER4096_reg_n_0_[10] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[8]_i_1__2_n_4 ),
        .Q(TIMER4096_reg),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[0]_i_1__2_n_6 ),
        .Q(\TIMER4096_reg_n_0_[1] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[0]_i_1__2_n_5 ),
        .Q(\TIMER4096_reg_n_0_[2] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[0]_i_1__2_n_4 ),
        .Q(\TIMER4096_reg_n_0_[3] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[4]_i_1__2_n_7 ),
        .Q(\TIMER4096_reg_n_0_[4] ),
        .R(out));
  CARRY4 \TIMER4096_reg[4]_i_1__2 
       (.CI(\TIMER4096_reg[0]_i_1__2_n_0 ),
        .CO({\TIMER4096_reg[4]_i_1__2_n_0 ,\TIMER4096_reg[4]_i_1__2_n_1 ,\TIMER4096_reg[4]_i_1__2_n_2 ,\TIMER4096_reg[4]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\TIMER4096_reg[4]_i_1__2_n_4 ,\TIMER4096_reg[4]_i_1__2_n_5 ,\TIMER4096_reg[4]_i_1__2_n_6 ,\TIMER4096_reg[4]_i_1__2_n_7 }),
        .S({\TIMER4096_reg_n_0_[7] ,\TIMER4096_reg_n_0_[6] ,\TIMER4096_reg_n_0_[5] ,\TIMER4096_reg_n_0_[4] }));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[4]_i_1__2_n_6 ),
        .Q(\TIMER4096_reg_n_0_[5] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[4]_i_1__2_n_5 ),
        .Q(\TIMER4096_reg_n_0_[6] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[4]_i_1__2_n_4 ),
        .Q(\TIMER4096_reg_n_0_[7] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[8]_i_1__2_n_7 ),
        .Q(\TIMER4096_reg_n_0_[8] ),
        .R(out));
  CARRY4 \TIMER4096_reg[8]_i_1__2 
       (.CI(\TIMER4096_reg[4]_i_1__2_n_0 ),
        .CO({\NLW_TIMER4096_reg[8]_i_1__2_CO_UNCONNECTED [3],\TIMER4096_reg[8]_i_1__2_n_1 ,\TIMER4096_reg[8]_i_1__2_n_2 ,\TIMER4096_reg[8]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\TIMER4096_reg[8]_i_1__2_n_4 ,\TIMER4096_reg[8]_i_1__2_n_5 ,\TIMER4096_reg[8]_i_1__2_n_6 ,\TIMER4096_reg[8]_i_1__2_n_7 }),
        .S({TIMER4096_reg,\TIMER4096_reg_n_0_[10] ,\TIMER4096_reg_n_0_[9] ,\TIMER4096_reg_n_0_[8] }));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[8]_i_1__2_n_6 ),
        .Q(\TIMER4096_reg_n_0_[9] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    TOGGLE_RX_reg
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(Q[11]),
        .Q(TOGGLE_RX),
        .R(out));
  LUT6 #(
    .INIT(64'h4444FFF4EEEE000E)) 
    TOGGLE_TX_i_1__2
       (.I0(STATE[2]),
        .I1(an_adv_config_vector_ch3),
        .I2(STATE[0]),
        .I3(\RX_CONFIG_SNAPSHOT[15]_i_2__2_n_0 ),
        .I4(MR_PAGE_RX_SET119_out),
        .I5(TOGGLE_TX),
        .O(TOGGLE_TX_i_1__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    TOGGLE_TX_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TOGGLE_TX_i_1__2_n_0),
        .Q(TOGGLE_TX),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT5 #(
    .INIT(32'hFFDE0010)) 
    \TX_CONFIG_REG_INT[0]_i_1__2 
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .I2(STATE[1]),
        .I3(STATE[0]),
        .I4(D[0]),
        .O(\TX_CONFIG_REG_INT[0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF8FC00000800)) 
    \TX_CONFIG_REG_INT[11]_i_1__2 
       (.I0(TOGGLE_TX),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[1]),
        .I4(STATE[0]),
        .I5(D[1]),
        .O(\TX_CONFIG_REG_INT[11]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair221" *) 
  LUT5 #(
    .INIT(32'hFFBA0008)) 
    \TX_CONFIG_REG_INT[14]_i_1__2 
       (.I0(STATE[0]),
        .I1(STATE[1]),
        .I2(STATE[2]),
        .I3(STATE[3]),
        .I4(D[2]),
        .O(\TX_CONFIG_REG_INT[14]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TX_CONFIG_REG_INT[0]_i_1__2_n_0 ),
        .Q(D[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TX_CONFIG_REG_INT[11]_i_1__2_n_0 ),
        .Q(D[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[14] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TX_CONFIG_REG_INT[14]_i_1__2_n_0 ),
        .Q(D[2]),
        .R(out));
  LUT6 #(
    .INIT(64'hEEEEEEEEEEEEEEFE)) 
    XMIT_CONFIG_INT_i_1__2
       (.I0(out),
        .I1(XMIT_CONFIG_INT_i_2__6_n_0),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I3(STATE[1]),
        .I4(STATE[0]),
        .I5(XMIT_CONFIG_INT_i_3__2_n_0),
        .O(XMIT_CONFIG_INT_i_1__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair236" *) 
  LUT3 #(
    .INIT(8'h8A)) 
    XMIT_CONFIG_INT_i_2__5
       (.I0(XMIT_CONFIG_INT),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .O(XMIT_CONFIG_INT_reg_0));
  LUT6 #(
    .INIT(64'hAAAA8AA2AAAA8AA0)) 
    XMIT_CONFIG_INT_i_2__6
       (.I0(XMIT_CONFIG_INT),
        .I1(STATE[3]),
        .I2(STATE[2]),
        .I3(STATE[0]),
        .I4(STATE[1]),
        .I5(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .O(XMIT_CONFIG_INT_i_2__6_n_0));
  (* SOFT_HLUTNM = "soft_lutpair240" *) 
  LUT2 #(
    .INIT(4'hE)) 
    XMIT_CONFIG_INT_i_3__2
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .O(XMIT_CONFIG_INT_i_3__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    XMIT_CONFIG_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(XMIT_CONFIG_INT_i_1__2_n_0),
        .Q(XMIT_CONFIG_INT),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair229" *) 
  LUT3 #(
    .INIT(8'hF4)) 
    XMIT_DATA_INT_i_1__5
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I2(XMIT_DATA_INT),
        .O(XMIT_DATA));
  (* SOFT_HLUTNM = "soft_lutpair222" *) 
  LUT4 #(
    .INIT(16'h2004)) 
    XMIT_DATA_INT_i_1__6
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .I2(STATE[0]),
        .I3(STATE[1]),
        .O(XMIT_DATA_INT0));
  FDRE #(
    .INIT(1'b0)) 
    XMIT_DATA_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(XMIT_DATA_INT0),
        .Q(XMIT_DATA_INT),
        .R(out));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_1__2
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[11] ),
        .I1(Q[11]),
        .I2(\RX_CONFIG_SNAPSHOT_reg_n_0_[10] ),
        .I3(Q[10]),
        .I4(Q[9]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[9] ),
        .O(i__carry_i_1__2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_2__2
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[8] ),
        .I1(Q[8]),
        .I2(\RX_CONFIG_SNAPSHOT_reg_n_0_[7] ),
        .I3(Q[7]),
        .I4(Q[6]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[6] ),
        .O(i__carry_i_2__2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_3__2
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[5] ),
        .I1(Q[5]),
        .I2(\RX_CONFIG_SNAPSHOT_reg_n_0_[4] ),
        .I3(Q[4]),
        .I4(Q[3]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[3] ),
        .O(i__carry_i_3__2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_4__2
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[2] ),
        .I1(Q[2]),
        .I2(\RX_CONFIG_SNAPSHOT_reg_n_0_[1] ),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[0] ),
        .O(i__carry_i_4__2_n_0));
  CARRY4 plusOp_carry
       (.CI(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3}),
        .CYINIT(MASK_RUDI_BUFERR_TIMER[0]),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({plusOp_carry_n_4,plusOp_carry_n_5,plusOp_carry_n_6,plusOp_carry_n_7}),
        .S(MASK_RUDI_BUFERR_TIMER[4:1]));
  CARRY4 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CO({plusOp_carry__0_n_0,plusOp_carry__0_n_1,plusOp_carry__0_n_2,plusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({plusOp_carry__0_n_4,plusOp_carry__0_n_5,plusOp_carry__0_n_6,plusOp_carry__0_n_7}),
        .S(MASK_RUDI_BUFERR_TIMER[8:5]));
  CARRY4 plusOp_carry__1
       (.CI(plusOp_carry__0_n_0),
        .CO({NLW_plusOp_carry__1_CO_UNCONNECTED[3],plusOp_carry__1_n_1,plusOp_carry__1_n_2,plusOp_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({plusOp_carry__1_n_4,plusOp_carry__1_n_5,plusOp_carry__1_n_6,plusOp_carry__1_n_7}),
        .S(MASK_RUDI_BUFERR_TIMER[12:9]));
endmodule

(* ORIG_REF_NAME = "AUTO_NEG" *) 
module qsgmii_1218_AUTO_NEG_136
   (status_vector_ch2,
    MASK_RUDI_BUFERR,
    RECEIVED_IDLE,
    \STATE_reg[1]_0 ,
    an_interrupt_ch2,
    XMIT_CONFIG_INT_reg_0,
    RX_INVALID_reg,
    I0,
    STATUS_VECTOR_0_PRE_reg,
    XMIT_DATA,
    LP_ADV_ABILITY,
    D,
    CONFIG_REG_MATCH_reg_0,
    CONSISTENCY_MATCH_reg_0,
    out,
    userclk,
    Q,
    BASEX_REMOTE_FAULT_RSLVD,
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ,
    RESTART_AN_SET,
    RX_IDLE,
    S,
    \RX_CONFIG_REG_reg[13] ,
    RX_INVALID_reg_0,
    RX_CONFIG_VALID_INT_reg,
    RX_CONFIG_VALID_INT_reg_0,
    data_out,
    p_0_in,
    SR,
    RX_CONFIG_VALID,
    RX_INVALID,
    RXSYNC_STATUS,
    EVEN_reg,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ,
    EVEN_reg_0,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ,
    link_timer_value_ch2,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ,
    an_adv_config_vector_ch2,
    MASK_RUDI_BUFERR_TIMER0,
    ACKNOWLEDGE_MATCH_3);
  output [5:0]status_vector_ch2;
  output MASK_RUDI_BUFERR;
  output RECEIVED_IDLE;
  output \STATE_reg[1]_0 ;
  output an_interrupt_ch2;
  output XMIT_CONFIG_INT_reg_0;
  output RX_INVALID_reg;
  output I0;
  output STATUS_VECTOR_0_PRE_reg;
  output XMIT_DATA;
  output [0:0]LP_ADV_ABILITY;
  output [2:0]D;
  output [1:0]CONFIG_REG_MATCH_reg_0;
  output [1:0]CONSISTENCY_MATCH_reg_0;
  input out;
  input userclk;
  input [15:0]Q;
  input [0:0]BASEX_REMOTE_FAULT_RSLVD;
  input [2:0]\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ;
  input RESTART_AN_SET;
  input RX_IDLE;
  input [0:0]S;
  input [0:0]\RX_CONFIG_REG_reg[13] ;
  input RX_INVALID_reg_0;
  input RX_CONFIG_VALID_INT_reg;
  input RX_CONFIG_VALID_INT_reg_0;
  input data_out;
  input p_0_in;
  input [0:0]SR;
  input RX_CONFIG_VALID;
  input RX_INVALID;
  input RXSYNC_STATUS;
  input EVEN_reg;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] ;
  input [0:0]\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ;
  input EVEN_reg_0;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  input [8:0]link_timer_value_ch2;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ;
  input [0:0]an_adv_config_vector_ch2;
  input MASK_RUDI_BUFERR_TIMER0;
  input ACKNOWLEDGE_MATCH_3;

  wire ABILITY_MATCH;
  wire ABILITY_MATCH_2;
  wire ABILITY_MATCH_2_i_1__1_n_0;
  wire ABILITY_MATCH_i_1__1_n_0;
  wire ACKNOWLEDGE_MATCH_2;
  wire ACKNOWLEDGE_MATCH_2_i_1__1_n_0;
  wire ACKNOWLEDGE_MATCH_3;
  wire ACKNOWLEDGE_MATCH_3_i_1__1_n_0;
  wire ACKNOWLEDGE_MATCH_3_reg_n_0;
  wire AN_SYNC_STATUS;
  wire AN_SYNC_STATUS_i_1__1_n_0;
  wire [0:0]BASEX_REMOTE_FAULT_RSLVD;
  wire CONFIG_REG_MATCH;
  wire CONFIG_REG_MATCH_COMB;
  wire CONFIG_REG_MATCH_COMB2_carry__0_n_3;
  wire CONFIG_REG_MATCH_COMB2_carry_i_1__1_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_i_2__1_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_i_3__1_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_i_4__1_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_n_1;
  wire CONFIG_REG_MATCH_COMB2_carry_n_2;
  wire CONFIG_REG_MATCH_COMB2_carry_n_3;
  wire [1:0]CONFIG_REG_MATCH_reg_0;
  wire CONSISTENCY_MATCH;
  wire CONSISTENCY_MATCH_COMB;
  wire CONSISTENCY_MATCH_COMB1__0;
  wire \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_0 ;
  wire \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_1 ;
  wire \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_2 ;
  wire \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_3 ;
  wire [1:0]CONSISTENCY_MATCH_reg_0;
  wire [2:0]D;
  wire EVEN_reg;
  wire EVEN_reg_0;
  wire GENERATE_REMOTE_FAULT;
  wire GENERATE_REMOTE_FAULT0;
  wire I0;
  wire IDLE_INSERTED;
  wire IDLE_INSERTED0;
  wire IDLE_INSERTED_REG1;
  wire IDLE_INSERTED_REG2;
  wire IDLE_INSERTED_REG3;
  wire IDLE_INSERTED_REG3_i_1__1_n_0;
  wire IDLE_INSERTED_REG4;
  wire IDLE_MATCH;
  wire IDLE_MATCH_2;
  wire IDLE_MATCH_2_i_1__1_n_0;
  wire IDLE_MATCH_i_1__1_n_0;
  wire IDLE_REMOVED;
  wire IDLE_REMOVED0;
  wire IDLE_REMOVED_REG1;
  wire IDLE_REMOVED_REG2;
  wire \LINK_TIMER[9]_i_1__1_n_0 ;
  wire \LINK_TIMER[9]_i_3__1_n_0 ;
  wire LINK_TIMER_DONE;
  wire LINK_TIMER_DONE_i_1__1_n_0;
  wire LINK_TIMER_DONE_i_2__1_n_0;
  wire LINK_TIMER_DONE_i_3__1_n_0;
  wire LINK_TIMER_DONE_i_4__1_n_0;
  wire LINK_TIMER_DONE_i_5__1_n_0;
  wire LINK_TIMER_DONE_i_6__1_n_0;
  wire LINK_TIMER_DONE_i_7__1_n_0;
  wire LINK_TIMER_SATURATED;
  wire LINK_TIMER_SATURATED_COMB;
  wire LINK_TIMER_SATURATED_COMB0_carry_i_1__1_n_0;
  wire LINK_TIMER_SATURATED_COMB0_carry_i_2__1_n_0;
  wire LINK_TIMER_SATURATED_COMB0_carry_i_3__1_n_0;
  wire LINK_TIMER_SATURATED_COMB0_carry_i_4__1_n_0;
  wire LINK_TIMER_SATURATED_COMB0_carry_n_1;
  wire LINK_TIMER_SATURATED_COMB0_carry_n_2;
  wire LINK_TIMER_SATURATED_COMB0_carry_n_3;
  wire [9:0]LINK_TIMER_reg__0;
  wire [0:0]LP_ADV_ABILITY;
  wire MASK_RUDI_BUFERR;
  wire [12:0]MASK_RUDI_BUFERR_TIMER;
  wire MASK_RUDI_BUFERR_TIMER0;
  wire \MASK_RUDI_BUFERR_TIMER[0]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[10]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[11]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_2__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_3__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_4__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[1]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[2]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[3]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[4]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[5]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[6]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[7]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[8]_i_1__1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[9]_i_1__1_n_0 ;
  wire MASK_RUDI_BUFERR_i_1__1_n_0;
  wire MASK_RUDI_BUFERR_i_2__1_n_0;
  wire MASK_RUDI_BUFERR_i_3__1_n_0;
  wire MASK_RUDI_CLKCOR;
  wire MASK_RUDI_CLKCOR_i_1__1_n_0;
  wire MASK_RUDI_CLKCOR_i_2__1_n_0;
  wire MR_AN_COMPLETE_i_1__1_n_0;
  wire MR_AN_ENABLE_CHANGE;
  wire MR_AN_ENABLE_CHANGE0;
  wire MR_AN_ENABLE_REG1;
  wire MR_AN_ENABLE_REG2;
  wire \MR_LP_ADV_ABILITY_INT[13]_i_1__1_n_0 ;
  wire \MR_LP_ADV_ABILITY_INT[16]_i_1__1_n_0 ;
  wire \MR_LP_ADV_ABILITY_INT[16]_i_2__1_n_0 ;
  wire \MR_LP_ADV_ABILITY_INT_reg_n_0_[16] ;
  wire MR_PAGE_RX_SET119_out;
  wire MR_REMOTE_FAULT_i_1__1_n_0;
  wire MR_RESTART_AN_INT;
  wire MR_RESTART_AN_INT_i_1__1_n_0;
  wire MR_RESTART_AN_INT_i_2__1_n_0;
  wire MR_RESTART_AN_SET_REG1;
  wire MR_RESTART_AN_SET_REG2;
  wire NEXT_STATE2;
  wire [2:0]\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ;
  wire [3:0]PREVIOUS_STATE;
  wire PULSE4096;
  wire PULSE40960;
  wire [15:0]Q;
  wire RECEIVED_IDLE;
  wire RESTART_AN_SET;
  wire RXSYNC_STATUS;
  wire \RX_CONFIG_REG_REG_reg_n_0_[0] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[10] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[11] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[1] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[2] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[3] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[4] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[5] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[6] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[7] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[8] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[9] ;
  wire [0:0]\RX_CONFIG_REG_reg[13] ;
  wire RX_CONFIG_SNAPSHOT;
  wire \RX_CONFIG_SNAPSHOT[15]_i_2__1_n_0 ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[0] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[10] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[11] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[15] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[1] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[2] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[3] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[4] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[5] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[6] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[7] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[8] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[9] ;
  wire RX_CONFIG_VALID;
  wire RX_CONFIG_VALID_INT_reg;
  wire RX_CONFIG_VALID_INT_reg_0;
  wire RX_IDLE;
  wire RX_IDLE_REG1;
  wire RX_IDLE_REG2;
  wire RX_INVALID;
  wire RX_INVALID_reg;
  wire RX_INVALID_reg_0;
  wire RX_RUDI_INVALID;
  wire [1:0]RX_RUDI_INVALID_DELAY;
  wire RX_RUDI_INVALID_DELAY0;
  wire \RX_RUDI_INVALID_DELAY[0]_i_2__1_n_0 ;
  wire RX_RUDI_INVALID_REG;
  wire [0:0]S;
  wire \SGMII_SPEED[1]_i_2__1_n_0 ;
  wire [0:0]SR;
  wire START_LINK_TIMER;
  wire START_LINK_TIMER_REG;
  wire START_LINK_TIMER_REG2;
  wire START_LINK_TIMER_REG_i_2__1_n_0;
  wire START_LINK_TIMER_REG_i_3__1_n_0;
  wire START_LINK_TIMER_REG_i_4__1_n_0;
  wire START_LINK_TIMER_REG_i_5__1_n_0;
  wire START_LINK_TIMER_REG_i_6__1_n_0;
  wire [3:0]STATE;
  wire \STATE[0]_i_1__1_n_0 ;
  wire \STATE[0]_i_2__1_n_0 ;
  wire \STATE[0]_i_3__1_n_0 ;
  wire \STATE[0]_i_4__1_n_0 ;
  wire \STATE[0]_i_5__1_n_0 ;
  wire \STATE[0]_i_6__1_n_0 ;
  wire \STATE[0]_i_7__1_n_0 ;
  wire \STATE[1]_i_1__1_n_0 ;
  wire \STATE[1]_i_2__1_n_0 ;
  wire \STATE[1]_i_3__1_n_0 ;
  wire \STATE[1]_i_4__1_n_0 ;
  wire \STATE[1]_i_5__1_n_0 ;
  wire \STATE[1]_i_6__1_n_0 ;
  wire \STATE[2]_i_1__1_n_0 ;
  wire \STATE[2]_i_2__1_n_0 ;
  wire \STATE[2]_i_3__1_n_0 ;
  wire \STATE[2]_i_4__1_n_0 ;
  wire \STATE[2]_i_5__1_n_0 ;
  wire \STATE[2]_i_6__1_n_0 ;
  wire \STATE[2]_i_8__1_n_0 ;
  wire \STATE[3]_i_1__1_n_0 ;
  wire \STATE[3]_i_2__1_n_0 ;
  wire \STATE[3]_i_3__1_n_0 ;
  wire \STATE[3]_i_4__1_n_0 ;
  wire \STATE[3]_i_5__1_n_0 ;
  wire \STATE[3]_i_6__1_n_0 ;
  wire \STATE[3]_i_7__1_n_0 ;
  wire \STATE_reg[1]_0 ;
  wire STATUS_VECTOR_0_PRE_reg;
  wire SYNC_STATUS_HELD;
  wire SYNC_STATUS_HELD_i_1__1_n_0;
  wire \TIMER4096[0]_i_2__1_n_0 ;
  wire TIMER4096_MSB_REG;
  wire [11:11]TIMER4096_reg;
  wire \TIMER4096_reg[0]_i_1__1_n_0 ;
  wire \TIMER4096_reg[0]_i_1__1_n_1 ;
  wire \TIMER4096_reg[0]_i_1__1_n_2 ;
  wire \TIMER4096_reg[0]_i_1__1_n_3 ;
  wire \TIMER4096_reg[0]_i_1__1_n_4 ;
  wire \TIMER4096_reg[0]_i_1__1_n_5 ;
  wire \TIMER4096_reg[0]_i_1__1_n_6 ;
  wire \TIMER4096_reg[0]_i_1__1_n_7 ;
  wire \TIMER4096_reg[4]_i_1__1_n_0 ;
  wire \TIMER4096_reg[4]_i_1__1_n_1 ;
  wire \TIMER4096_reg[4]_i_1__1_n_2 ;
  wire \TIMER4096_reg[4]_i_1__1_n_3 ;
  wire \TIMER4096_reg[4]_i_1__1_n_4 ;
  wire \TIMER4096_reg[4]_i_1__1_n_5 ;
  wire \TIMER4096_reg[4]_i_1__1_n_6 ;
  wire \TIMER4096_reg[4]_i_1__1_n_7 ;
  wire \TIMER4096_reg[8]_i_1__1_n_1 ;
  wire \TIMER4096_reg[8]_i_1__1_n_2 ;
  wire \TIMER4096_reg[8]_i_1__1_n_3 ;
  wire \TIMER4096_reg[8]_i_1__1_n_4 ;
  wire \TIMER4096_reg[8]_i_1__1_n_5 ;
  wire \TIMER4096_reg[8]_i_1__1_n_6 ;
  wire \TIMER4096_reg[8]_i_1__1_n_7 ;
  wire \TIMER4096_reg_n_0_[0] ;
  wire \TIMER4096_reg_n_0_[10] ;
  wire \TIMER4096_reg_n_0_[1] ;
  wire \TIMER4096_reg_n_0_[2] ;
  wire \TIMER4096_reg_n_0_[3] ;
  wire \TIMER4096_reg_n_0_[4] ;
  wire \TIMER4096_reg_n_0_[5] ;
  wire \TIMER4096_reg_n_0_[6] ;
  wire \TIMER4096_reg_n_0_[7] ;
  wire \TIMER4096_reg_n_0_[8] ;
  wire \TIMER4096_reg_n_0_[9] ;
  wire TOGGLE_RX;
  wire TOGGLE_TX;
  wire TOGGLE_TX_i_1__1_n_0;
  wire \TX_CONFIG_REG_INT[0]_i_1__1_n_0 ;
  wire \TX_CONFIG_REG_INT[11]_i_1__1_n_0 ;
  wire \TX_CONFIG_REG_INT[14]_i_1__1_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] ;
  wire [0:0]\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_i_1__1_n_0;
  wire XMIT_CONFIG_INT_i_2__4_n_0;
  wire XMIT_CONFIG_INT_i_3__1_n_0;
  wire XMIT_CONFIG_INT_reg_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire XMIT_DATA_INT0;
  wire [0:0]an_adv_config_vector_ch2;
  wire an_interrupt_ch2;
  wire data_out;
  wire i__carry_i_1__1_n_0;
  wire i__carry_i_2__1_n_0;
  wire i__carry_i_3__1_n_0;
  wire i__carry_i_4__1_n_0;
  wire [8:0]link_timer_value_ch2;
  wire out;
  wire p_0_in;
  wire p_0_in0_in;
  wire p_0_in28_in;
  wire [9:0]plusOp__0;
  wire plusOp_carry__0_n_0;
  wire plusOp_carry__0_n_1;
  wire plusOp_carry__0_n_2;
  wire plusOp_carry__0_n_3;
  wire plusOp_carry__0_n_4;
  wire plusOp_carry__0_n_5;
  wire plusOp_carry__0_n_6;
  wire plusOp_carry__0_n_7;
  wire plusOp_carry__1_n_1;
  wire plusOp_carry__1_n_2;
  wire plusOp_carry__1_n_3;
  wire plusOp_carry__1_n_4;
  wire plusOp_carry__1_n_5;
  wire plusOp_carry__1_n_6;
  wire plusOp_carry__1_n_7;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire plusOp_carry_n_4;
  wire plusOp_carry_n_5;
  wire plusOp_carry_n_6;
  wire plusOp_carry_n_7;
  wire [5:0]status_vector_ch2;
  wire userclk;
  wire [3:0]NLW_CONFIG_REG_MATCH_COMB2_carry_O_UNCONNECTED;
  wire [3:1]NLW_CONFIG_REG_MATCH_COMB2_carry__0_CO_UNCONNECTED;
  wire [3:0]NLW_CONFIG_REG_MATCH_COMB2_carry__0_O_UNCONNECTED;
  wire [3:0]\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_O_UNCONNECTED ;
  wire [3:1]\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0_CO_UNCONNECTED ;
  wire [3:0]\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0_O_UNCONNECTED ;
  wire [3:0]NLW_LINK_TIMER_SATURATED_COMB0_carry_O_UNCONNECTED;
  wire [3:3]\NLW_TIMER4096_reg[8]_i_1__1_CO_UNCONNECTED ;
  wire [3:3]NLW_plusOp_carry__1_CO_UNCONNECTED;

  LUT6 #(
    .INIT(64'h00000000000000E2)) 
    ABILITY_MATCH_2_i_1__1
       (.I0(ABILITY_MATCH_2),
        .I1(RX_CONFIG_VALID),
        .I2(CONFIG_REG_MATCH_COMB),
        .I3(MASK_RUDI_BUFERR),
        .I4(RX_IDLE),
        .I5(out),
        .O(ABILITY_MATCH_2_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ABILITY_MATCH_2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ABILITY_MATCH_2_i_1__1_n_0),
        .Q(ABILITY_MATCH_2),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0050004400000044)) 
    ABILITY_MATCH_i_1__1
       (.I0(SR),
        .I1(ABILITY_MATCH),
        .I2(ABILITY_MATCH_2),
        .I3(MASK_RUDI_BUFERR),
        .I4(RX_CONFIG_VALID),
        .I5(CONFIG_REG_MATCH_COMB),
        .O(ABILITY_MATCH_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ABILITY_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ABILITY_MATCH_i_1__1_n_0),
        .Q(ABILITY_MATCH),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000000000E222)) 
    ACKNOWLEDGE_MATCH_2_i_1__1
       (.I0(ACKNOWLEDGE_MATCH_2),
        .I1(RX_CONFIG_VALID),
        .I2(Q[14]),
        .I3(p_0_in28_in),
        .I4(MASK_RUDI_BUFERR),
        .I5(SR),
        .O(ACKNOWLEDGE_MATCH_2_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ACKNOWLEDGE_MATCH_2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ACKNOWLEDGE_MATCH_2_i_1__1_n_0),
        .Q(ACKNOWLEDGE_MATCH_2),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000E2222222)) 
    ACKNOWLEDGE_MATCH_3_i_1__1
       (.I0(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I1(RX_CONFIG_VALID),
        .I2(ACKNOWLEDGE_MATCH_2),
        .I3(p_0_in28_in),
        .I4(Q[14]),
        .I5(ACKNOWLEDGE_MATCH_3),
        .O(ACKNOWLEDGE_MATCH_3_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ACKNOWLEDGE_MATCH_3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ACKNOWLEDGE_MATCH_3_i_1__1_n_0),
        .Q(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT5 #(
    .INIT(32'hFFBFFF80)) 
    AN_SYNC_STATUS_i_1__1
       (.I0(SYNC_STATUS_HELD),
        .I1(LINK_TIMER_SATURATED),
        .I2(PULSE4096),
        .I3(RXSYNC_STATUS),
        .I4(AN_SYNC_STATUS),
        .O(AN_SYNC_STATUS_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    AN_SYNC_STATUS_reg
       (.C(userclk),
        .CE(1'b1),
        .D(AN_SYNC_STATUS_i_1__1_n_0),
        .Q(AN_SYNC_STATUS),
        .R(out));
  FDRE \BASEX_REMOTE_FAULT_reg[1] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(BASEX_REMOTE_FAULT_RSLVD),
        .Q(status_vector_ch2[2]),
        .R(out));
  CARRY4 CONFIG_REG_MATCH_COMB2_carry
       (.CI(1'b0),
        .CO({CONFIG_REG_MATCH_COMB2_carry_n_0,CONFIG_REG_MATCH_COMB2_carry_n_1,CONFIG_REG_MATCH_COMB2_carry_n_2,CONFIG_REG_MATCH_COMB2_carry_n_3}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_CONFIG_REG_MATCH_COMB2_carry_O_UNCONNECTED[3:0]),
        .S({CONFIG_REG_MATCH_COMB2_carry_i_1__1_n_0,CONFIG_REG_MATCH_COMB2_carry_i_2__1_n_0,CONFIG_REG_MATCH_COMB2_carry_i_3__1_n_0,CONFIG_REG_MATCH_COMB2_carry_i_4__1_n_0}));
  CARRY4 CONFIG_REG_MATCH_COMB2_carry__0
       (.CI(CONFIG_REG_MATCH_COMB2_carry_n_0),
        .CO({NLW_CONFIG_REG_MATCH_COMB2_carry__0_CO_UNCONNECTED[3:1],CONFIG_REG_MATCH_COMB2_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_CONFIG_REG_MATCH_COMB2_carry__0_O_UNCONNECTED[3:0]),
        .S({1'b0,1'b0,1'b0,S}));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    CONFIG_REG_MATCH_COMB2_carry_i_1__1
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[11] ),
        .I1(Q[11]),
        .I2(\RX_CONFIG_REG_REG_reg_n_0_[10] ),
        .I3(Q[10]),
        .I4(Q[9]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[9] ),
        .O(CONFIG_REG_MATCH_COMB2_carry_i_1__1_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    CONFIG_REG_MATCH_COMB2_carry_i_2__1
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[8] ),
        .I1(Q[8]),
        .I2(\RX_CONFIG_REG_REG_reg_n_0_[7] ),
        .I3(Q[7]),
        .I4(Q[6]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[6] ),
        .O(CONFIG_REG_MATCH_COMB2_carry_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    CONFIG_REG_MATCH_COMB2_carry_i_3__1
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[5] ),
        .I1(Q[5]),
        .I2(\RX_CONFIG_REG_REG_reg_n_0_[4] ),
        .I3(Q[4]),
        .I4(Q[3]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[3] ),
        .O(CONFIG_REG_MATCH_COMB2_carry_i_3__1_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    CONFIG_REG_MATCH_COMB2_carry_i_4__1
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[2] ),
        .I1(Q[2]),
        .I2(\RX_CONFIG_REG_REG_reg_n_0_[1] ),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[0] ),
        .O(CONFIG_REG_MATCH_COMB2_carry_i_4__1_n_0));
  LUT4 #(
    .INIT(16'h4004)) 
    CONFIG_REG_MATCH_i_1__1
       (.I0(RECEIVED_IDLE),
        .I1(CONFIG_REG_MATCH_COMB2_carry__0_n_3),
        .I2(Q[15]),
        .I3(p_0_in0_in),
        .O(CONFIG_REG_MATCH_COMB));
  FDRE #(
    .INIT(1'b0)) 
    CONFIG_REG_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_REG_MATCH_COMB),
        .Q(CONFIG_REG_MATCH),
        .R(out));
  CARRY4 \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry 
       (.CI(1'b0),
        .CO({\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_0 ,\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_1 ,\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_2 ,\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_3 }),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_O_UNCONNECTED [3:0]),
        .S({i__carry_i_1__1_n_0,i__carry_i_2__1_n_0,i__carry_i_3__1_n_0,i__carry_i_4__1_n_0}));
  CARRY4 \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0 
       (.CI(\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_0 ),
        .CO({\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0_CO_UNCONNECTED [3:1],CONSISTENCY_MATCH_COMB1__0}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0_O_UNCONNECTED [3:0]),
        .S({1'b0,1'b0,1'b0,\RX_CONFIG_REG_reg[13] }));
  LUT3 #(
    .INIT(8'h84)) 
    CONSISTENCY_MATCH_i_1__1
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[15] ),
        .I1(CONSISTENCY_MATCH_COMB1__0),
        .I2(Q[15]),
        .O(CONSISTENCY_MATCH_COMB));
  FDRE #(
    .INIT(1'b0)) 
    CONSISTENCY_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CONSISTENCY_MATCH_COMB),
        .Q(CONSISTENCY_MATCH),
        .R(out));
  LUT6 #(
    .INIT(64'h0010000000000000)) 
    GENERATE_REMOTE_FAULT_i_1__1
       (.I0(START_LINK_TIMER_REG_i_4__1_n_0),
        .I1(STATE[1]),
        .I2(IDLE_MATCH),
        .I3(STATE[3]),
        .I4(STATE[2]),
        .I5(\STATE[2]_i_2__1_n_0 ),
        .O(GENERATE_REMOTE_FAULT0));
  FDRE #(
    .INIT(1'b0)) 
    GENERATE_REMOTE_FAULT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(GENERATE_REMOTE_FAULT0),
        .Q(GENERATE_REMOTE_FAULT),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED),
        .Q(IDLE_INSERTED_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG1),
        .Q(IDLE_INSERTED_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT2 #(
    .INIT(4'h2)) 
    IDLE_INSERTED_REG3_i_1__1
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE_REG2),
        .O(IDLE_INSERTED_REG3_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG3_i_1__1_n_0),
        .Q(IDLE_INSERTED_REG3),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG4_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG3),
        .Q(IDLE_INSERTED_REG4),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT3 #(
    .INIT(8'h40)) 
    IDLE_INSERTED_i_1__1
       (.I0(XMIT_CONFIG_INT),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .O(IDLE_INSERTED0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED0),
        .Q(IDLE_INSERTED),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT5 #(
    .INIT(32'h04FF0400)) 
    IDLE_MATCH_2_i_1__1
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE),
        .I2(IDLE_INSERTED_REG4),
        .I3(RX_IDLE_REG2),
        .I4(IDLE_MATCH_2),
        .O(IDLE_MATCH_2_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_MATCH_2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_MATCH_2_i_1__1_n_0),
        .Q(IDLE_MATCH_2),
        .R(out));
  LUT6 #(
    .INIT(64'h4440FFFF44400000)) 
    IDLE_MATCH_i_1__1
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE),
        .I2(IDLE_MATCH_2),
        .I3(IDLE_REMOVED_REG2),
        .I4(RX_IDLE_REG2),
        .I5(IDLE_MATCH),
        .O(IDLE_MATCH_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_MATCH_i_1__1_n_0),
        .Q(IDLE_MATCH),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED),
        .Q(IDLE_REMOVED_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED_REG1),
        .Q(IDLE_REMOVED_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT3 #(
    .INIT(8'h10)) 
    IDLE_REMOVED_i_1__1
       (.I0(XMIT_CONFIG_INT),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .O(IDLE_REMOVED0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED0),
        .Q(IDLE_REMOVED),
        .R(out));
  LUT6 #(
    .INIT(64'h8888AAAA8880FFF0)) 
    I_i_1__1
       (.I0(STATUS_VECTOR_0_PRE_reg),
        .I1(EVEN_reg),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] ),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ),
        .I4(EVEN_reg_0),
        .I5(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(I0));
  LUT1 #(
    .INIT(2'h1)) 
    \LINK_TIMER[0]_i_1__1 
       (.I0(LINK_TIMER_reg__0[0]),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \LINK_TIMER[1]_i_1__1 
       (.I0(LINK_TIMER_reg__0[0]),
        .I1(LINK_TIMER_reg__0[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \LINK_TIMER[2]_i_1__1 
       (.I0(LINK_TIMER_reg__0[1]),
        .I1(LINK_TIMER_reg__0[0]),
        .I2(LINK_TIMER_reg__0[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \LINK_TIMER[3]_i_1__1 
       (.I0(LINK_TIMER_reg__0[2]),
        .I1(LINK_TIMER_reg__0[0]),
        .I2(LINK_TIMER_reg__0[1]),
        .I3(LINK_TIMER_reg__0[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \LINK_TIMER[4]_i_1__1 
       (.I0(LINK_TIMER_reg__0[3]),
        .I1(LINK_TIMER_reg__0[1]),
        .I2(LINK_TIMER_reg__0[0]),
        .I3(LINK_TIMER_reg__0[2]),
        .I4(LINK_TIMER_reg__0[4]),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \LINK_TIMER[5]_i_1__1 
       (.I0(LINK_TIMER_reg__0[4]),
        .I1(LINK_TIMER_reg__0[2]),
        .I2(LINK_TIMER_reg__0[0]),
        .I3(LINK_TIMER_reg__0[1]),
        .I4(LINK_TIMER_reg__0[3]),
        .I5(LINK_TIMER_reg__0[5]),
        .O(plusOp__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \LINK_TIMER[6]_i_1__1 
       (.I0(\LINK_TIMER[9]_i_3__1_n_0 ),
        .I1(LINK_TIMER_reg__0[6]),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \LINK_TIMER[7]_i_1__1 
       (.I0(LINK_TIMER_reg__0[6]),
        .I1(\LINK_TIMER[9]_i_3__1_n_0 ),
        .I2(LINK_TIMER_reg__0[7]),
        .O(plusOp__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \LINK_TIMER[8]_i_1__1 
       (.I0(\LINK_TIMER[9]_i_3__1_n_0 ),
        .I1(LINK_TIMER_reg__0[6]),
        .I2(LINK_TIMER_reg__0[7]),
        .I3(LINK_TIMER_reg__0[8]),
        .O(plusOp__0[8]));
  LUT4 #(
    .INIT(16'hFFF8)) 
    \LINK_TIMER[9]_i_1__1 
       (.I0(LINK_TIMER_SATURATED),
        .I1(PULSE4096),
        .I2(out),
        .I3(START_LINK_TIMER_REG),
        .O(\LINK_TIMER[9]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \LINK_TIMER[9]_i_2__1 
       (.I0(\LINK_TIMER[9]_i_3__1_n_0 ),
        .I1(LINK_TIMER_reg__0[8]),
        .I2(LINK_TIMER_reg__0[7]),
        .I3(LINK_TIMER_reg__0[6]),
        .I4(LINK_TIMER_reg__0[9]),
        .O(plusOp__0[9]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \LINK_TIMER[9]_i_3__1 
       (.I0(LINK_TIMER_reg__0[4]),
        .I1(LINK_TIMER_reg__0[2]),
        .I2(LINK_TIMER_reg__0[0]),
        .I3(LINK_TIMER_reg__0[1]),
        .I4(LINK_TIMER_reg__0[3]),
        .I5(LINK_TIMER_reg__0[5]),
        .O(\LINK_TIMER[9]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFEAEAEAAAAAAAAA)) 
    LINK_TIMER_DONE_i_1__1
       (.I0(LINK_TIMER_DONE_i_2__1_n_0),
        .I1(STATE[1]),
        .I2(\STATE[1]_i_3__1_n_0 ),
        .I3(LINK_TIMER_DONE_i_3__1_n_0),
        .I4(\STATE[3]_i_2__1_n_0 ),
        .I5(LINK_TIMER_DONE_i_4__1_n_0),
        .O(LINK_TIMER_DONE_i_1__1_n_0));
  LUT6 #(
    .INIT(64'hFAEAEAEAAAAAAAAA)) 
    LINK_TIMER_DONE_i_2__1
       (.I0(LINK_TIMER_DONE_i_5__1_n_0),
        .I1(STATE[3]),
        .I2(\STATE[2]_i_5__1_n_0 ),
        .I3(STATE[0]),
        .I4(LINK_TIMER_DONE_i_6__1_n_0),
        .I5(LINK_TIMER_DONE_i_4__1_n_0),
        .O(LINK_TIMER_DONE_i_2__1_n_0));
  LUT6 #(
    .INIT(64'hF0FFC0FFD1D1D1D1)) 
    LINK_TIMER_DONE_i_3__1
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(STATE[0]),
        .I2(\STATE_reg[1]_0 ),
        .I3(LINK_TIMER_DONE),
        .I4(ABILITY_MATCH),
        .I5(STATE[2]),
        .O(LINK_TIMER_DONE_i_3__1_n_0));
  LUT5 #(
    .INIT(32'h00000054)) 
    LINK_TIMER_DONE_i_4__1
       (.I0(START_LINK_TIMER_REG2),
        .I1(LINK_TIMER_SATURATED),
        .I2(LINK_TIMER_DONE),
        .I3(out),
        .I4(START_LINK_TIMER_REG),
        .O(LINK_TIMER_DONE_i_4__1_n_0));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    LINK_TIMER_DONE_i_5__1
       (.I0(LINK_TIMER_DONE_i_4__1_n_0),
        .I1(RX_INVALID),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I4(START_LINK_TIMER_REG_i_5__1_n_0),
        .I5(LINK_TIMER_DONE_i_7__1_n_0),
        .O(LINK_TIMER_DONE_i_5__1_n_0));
  LUT5 #(
    .INIT(32'hFFFF7FFF)) 
    LINK_TIMER_DONE_i_6__1
       (.I0(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I1(CONSISTENCY_MATCH),
        .I2(ABILITY_MATCH),
        .I3(STATE[1]),
        .I4(STATE[2]),
        .O(LINK_TIMER_DONE_i_6__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT5 #(
    .INIT(32'hFF151515)) 
    LINK_TIMER_DONE_i_7__1
       (.I0(STATE[0]),
        .I1(LINK_TIMER_DONE),
        .I2(STATE[2]),
        .I3(ABILITY_MATCH),
        .I4(\STATE_reg[1]_0 ),
        .O(LINK_TIMER_DONE_i_7__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    LINK_TIMER_DONE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LINK_TIMER_DONE_i_1__1_n_0),
        .Q(LINK_TIMER_DONE),
        .R(1'b0));
  CARRY4 LINK_TIMER_SATURATED_COMB0_carry
       (.CI(1'b0),
        .CO({LINK_TIMER_SATURATED_COMB,LINK_TIMER_SATURATED_COMB0_carry_n_1,LINK_TIMER_SATURATED_COMB0_carry_n_2,LINK_TIMER_SATURATED_COMB0_carry_n_3}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_LINK_TIMER_SATURATED_COMB0_carry_O_UNCONNECTED[3:0]),
        .S({LINK_TIMER_SATURATED_COMB0_carry_i_1__1_n_0,LINK_TIMER_SATURATED_COMB0_carry_i_2__1_n_0,LINK_TIMER_SATURATED_COMB0_carry_i_3__1_n_0,LINK_TIMER_SATURATED_COMB0_carry_i_4__1_n_0}));
  LUT1 #(
    .INIT(2'h1)) 
    LINK_TIMER_SATURATED_COMB0_carry_i_1__1
       (.I0(LINK_TIMER_reg__0[9]),
        .O(LINK_TIMER_SATURATED_COMB0_carry_i_1__1_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    LINK_TIMER_SATURATED_COMB0_carry_i_2__1
       (.I0(link_timer_value_ch2[8]),
        .I1(LINK_TIMER_reg__0[8]),
        .I2(link_timer_value_ch2[7]),
        .I3(LINK_TIMER_reg__0[7]),
        .I4(LINK_TIMER_reg__0[6]),
        .I5(link_timer_value_ch2[6]),
        .O(LINK_TIMER_SATURATED_COMB0_carry_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    LINK_TIMER_SATURATED_COMB0_carry_i_3__1
       (.I0(link_timer_value_ch2[5]),
        .I1(LINK_TIMER_reg__0[5]),
        .I2(link_timer_value_ch2[4]),
        .I3(LINK_TIMER_reg__0[4]),
        .I4(LINK_TIMER_reg__0[3]),
        .I5(link_timer_value_ch2[3]),
        .O(LINK_TIMER_SATURATED_COMB0_carry_i_3__1_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    LINK_TIMER_SATURATED_COMB0_carry_i_4__1
       (.I0(link_timer_value_ch2[2]),
        .I1(LINK_TIMER_reg__0[2]),
        .I2(link_timer_value_ch2[1]),
        .I3(LINK_TIMER_reg__0[1]),
        .I4(LINK_TIMER_reg__0[0]),
        .I5(link_timer_value_ch2[0]),
        .O(LINK_TIMER_SATURATED_COMB0_carry_i_4__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    LINK_TIMER_SATURATED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LINK_TIMER_SATURATED_COMB),
        .Q(LINK_TIMER_SATURATED),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[0] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[0]),
        .Q(LINK_TIMER_reg__0[0]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[1] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[1]),
        .Q(LINK_TIMER_reg__0[1]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[2] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[2]),
        .Q(LINK_TIMER_reg__0[2]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[3] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[3]),
        .Q(LINK_TIMER_reg__0[3]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[4] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[4]),
        .Q(LINK_TIMER_reg__0[4]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[5] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[5]),
        .Q(LINK_TIMER_reg__0[5]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[6] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[6]),
        .Q(LINK_TIMER_reg__0[6]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[7] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[7]),
        .Q(LINK_TIMER_reg__0[7]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[8] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[8]),
        .Q(LINK_TIMER_reg__0[8]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[9] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[9]),
        .Q(LINK_TIMER_reg__0[9]),
        .R(\LINK_TIMER[9]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT4 #(
    .INIT(16'h5515)) 
    \MASK_RUDI_BUFERR_TIMER[0]_i_1__1 
       (.I0(MASK_RUDI_BUFERR_TIMER[0]),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[10]_i_1__1 
       (.I0(plusOp_carry__1_n_6),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[10]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[11]_i_1__1 
       (.I0(plusOp_carry__1_n_5),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[11]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hEFEFEFEFFFEFEFEF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_1__1 
       (.I0(\MASK_RUDI_BUFERR_TIMER[12]_i_3__1_n_0 ),
        .I1(\MASK_RUDI_BUFERR_TIMER[12]_i_4__1_n_0 ),
        .I2(MASK_RUDI_BUFERR_TIMER[0]),
        .I3(data_out),
        .I4(p_0_in),
        .I5(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_2__1 
       (.I0(plusOp_carry__1_n_4),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_3__1 
       (.I0(MASK_RUDI_BUFERR_TIMER[5]),
        .I1(MASK_RUDI_BUFERR_TIMER[6]),
        .I2(MASK_RUDI_BUFERR_TIMER[3]),
        .I3(MASK_RUDI_BUFERR_TIMER[4]),
        .I4(MASK_RUDI_BUFERR_TIMER[2]),
        .I5(MASK_RUDI_BUFERR_TIMER[1]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_4__1 
       (.I0(MASK_RUDI_BUFERR_TIMER[11]),
        .I1(MASK_RUDI_BUFERR_TIMER[12]),
        .I2(MASK_RUDI_BUFERR_TIMER[9]),
        .I3(MASK_RUDI_BUFERR_TIMER[10]),
        .I4(MASK_RUDI_BUFERR_TIMER[8]),
        .I5(MASK_RUDI_BUFERR_TIMER[7]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_4__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[1]_i_1__1 
       (.I0(plusOp_carry_n_7),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[2]_i_1__1 
       (.I0(plusOp_carry_n_6),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[3]_i_1__1 
       (.I0(plusOp_carry_n_5),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[4]_i_1__1 
       (.I0(plusOp_carry_n_4),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[4]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[5]_i_1__1 
       (.I0(plusOp_carry__0_n_7),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[5]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[6]_i_1__1 
       (.I0(plusOp_carry__0_n_6),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[6]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[7]_i_1__1 
       (.I0(plusOp_carry__0_n_5),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[7]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[8]_i_1__1 
       (.I0(plusOp_carry__0_n_4),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[8]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[9]_i_1__1 
       (.I0(plusOp_carry__1_n_7),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[9]_i_1__1_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[0] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[0]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[0]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[10] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[10]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[10]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[11] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[11]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[11]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[12] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[12]_i_2__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[12]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[1] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[1]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[1]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[2] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[2]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[2]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[3] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[3]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[3]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[4] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[4]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[4]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[5] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[5]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[5]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[6] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[6]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[6]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[7] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[7]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[7]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[8] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[8]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[8]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[9] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[9]_i_1__1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[9]),
        .S(out));
  LUT5 #(
    .INIT(32'hFF7FFF00)) 
    MASK_RUDI_BUFERR_i_1__1
       (.I0(MASK_RUDI_BUFERR_i_2__1_n_0),
        .I1(MASK_RUDI_BUFERR_i_3__1_n_0),
        .I2(MASK_RUDI_BUFERR_TIMER[0]),
        .I3(MASK_RUDI_BUFERR_TIMER0),
        .I4(MASK_RUDI_BUFERR),
        .O(MASK_RUDI_BUFERR_i_1__1_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    MASK_RUDI_BUFERR_i_2__1
       (.I0(MASK_RUDI_BUFERR_TIMER[3]),
        .I1(MASK_RUDI_BUFERR_TIMER[4]),
        .I2(MASK_RUDI_BUFERR_TIMER[1]),
        .I3(MASK_RUDI_BUFERR_TIMER[2]),
        .I4(MASK_RUDI_BUFERR_TIMER[6]),
        .I5(MASK_RUDI_BUFERR_TIMER[5]),
        .O(MASK_RUDI_BUFERR_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    MASK_RUDI_BUFERR_i_3__1
       (.I0(MASK_RUDI_BUFERR_TIMER[9]),
        .I1(MASK_RUDI_BUFERR_TIMER[10]),
        .I2(MASK_RUDI_BUFERR_TIMER[7]),
        .I3(MASK_RUDI_BUFERR_TIMER[8]),
        .I4(MASK_RUDI_BUFERR_TIMER[12]),
        .I5(MASK_RUDI_BUFERR_TIMER[11]),
        .O(MASK_RUDI_BUFERR_i_3__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MASK_RUDI_BUFERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MASK_RUDI_BUFERR_i_1__1_n_0),
        .Q(MASK_RUDI_BUFERR),
        .R(out));
  LUT6 #(
    .INIT(64'h00000000FFF20000)) 
    MASK_RUDI_CLKCOR_i_1__1
       (.I0(MASK_RUDI_CLKCOR),
        .I1(MASK_RUDI_CLKCOR_i_2__1_n_0),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I4(RXSYNC_STATUS),
        .I5(out),
        .O(MASK_RUDI_CLKCOR_i_1__1_n_0));
  LUT6 #(
    .INIT(64'h4444444440444040)) 
    MASK_RUDI_CLKCOR_i_2__1
       (.I0(RX_INVALID),
        .I1(RX_RUDI_INVALID_REG),
        .I2(RXSYNC_STATUS),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I4(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I5(XMIT_DATA_INT),
        .O(MASK_RUDI_CLKCOR_i_2__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MASK_RUDI_CLKCOR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MASK_RUDI_CLKCOR_i_1__1_n_0),
        .Q(MASK_RUDI_CLKCOR),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h5150505050505000)) 
    MR_AN_COMPLETE_i_1__1
       (.I0(out),
        .I1(STATE[3]),
        .I2(an_interrupt_ch2),
        .I3(STATE[2]),
        .I4(STATE[0]),
        .I5(STATE[1]),
        .O(MR_AN_COMPLETE_i_1__1_n_0));
  FDRE MR_AN_COMPLETE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_COMPLETE_i_1__1_n_0),
        .Q(an_interrupt_ch2),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    MR_AN_ENABLE_CHANGE_i_1__1
       (.I0(MR_AN_ENABLE_REG2),
        .I1(MR_AN_ENABLE_REG1),
        .O(MR_AN_ENABLE_CHANGE0));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_CHANGE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_ENABLE_CHANGE0),
        .Q(MR_AN_ENABLE_CHANGE),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .Q(MR_AN_ENABLE_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_ENABLE_REG1),
        .Q(MR_AN_ENABLE_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MR_LP_ADV_ABILITY_INT[13]_i_1__1 
       (.I0(Q[12]),
        .I1(\MR_LP_ADV_ABILITY_INT[16]_i_2__1_n_0 ),
        .I2(LP_ADV_ABILITY),
        .O(\MR_LP_ADV_ABILITY_INT[13]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MR_LP_ADV_ABILITY_INT[16]_i_1__1 
       (.I0(Q[15]),
        .I1(\MR_LP_ADV_ABILITY_INT[16]_i_2__1_n_0 ),
        .I2(\MR_LP_ADV_ABILITY_INT_reg_n_0_[16] ),
        .O(\MR_LP_ADV_ABILITY_INT[16]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0100000000000000)) 
    \MR_LP_ADV_ABILITY_INT[16]_i_2__1 
       (.I0(PREVIOUS_STATE[3]),
        .I1(out),
        .I2(PREVIOUS_STATE[2]),
        .I3(PREVIOUS_STATE[1]),
        .I4(PREVIOUS_STATE[0]),
        .I5(\SGMII_SPEED[1]_i_2__1_n_0 ),
        .O(\MR_LP_ADV_ABILITY_INT[16]_i_2__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\MR_LP_ADV_ABILITY_INT[13]_i_1__1_n_0 ),
        .Q(LP_ADV_ABILITY),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[16] 
       (.C(userclk),
        .CE(1'b1),
        .D(\MR_LP_ADV_ABILITY_INT[16]_i_1__1_n_0 ),
        .Q(\MR_LP_ADV_ABILITY_INT_reg_n_0_[16] ),
        .R(out));
  LUT3 #(
    .INIT(8'hF4)) 
    MR_REMOTE_FAULT_i_1__1
       (.I0(\MR_LP_ADV_ABILITY_INT_reg_n_0_[16] ),
        .I1(GENERATE_REMOTE_FAULT),
        .I2(status_vector_ch2[5]),
        .O(MR_REMOTE_FAULT_i_1__1_n_0));
  FDRE MR_REMOTE_FAULT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_REMOTE_FAULT_i_1__1_n_0),
        .Q(status_vector_ch2[5]),
        .R(out));
  LUT5 #(
    .INIT(32'h0CAE0C0C)) 
    MR_RESTART_AN_INT_i_1__1
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(MR_RESTART_AN_SET_REG1),
        .I2(MR_RESTART_AN_SET_REG2),
        .I3(MR_RESTART_AN_INT_i_2__1_n_0),
        .I4(MR_RESTART_AN_INT),
        .O(MR_RESTART_AN_INT_i_1__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    MR_RESTART_AN_INT_i_2__1
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[3]),
        .I3(STATE[2]),
        .O(MR_RESTART_AN_INT_i_2__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_RESTART_AN_INT_i_1__1_n_0),
        .Q(MR_RESTART_AN_INT),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_SET_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RESTART_AN_SET),
        .Q(MR_RESTART_AN_SET_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_SET_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_RESTART_AN_SET_REG1),
        .Q(MR_RESTART_AN_SET_REG2),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[0]),
        .Q(PREVIOUS_STATE[0]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[1]),
        .Q(PREVIOUS_STATE[1]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[2]),
        .Q(PREVIOUS_STATE[2]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[3]),
        .Q(PREVIOUS_STATE[3]),
        .R(out));
  LUT2 #(
    .INIT(4'h2)) 
    PULSE4096_i_1__1
       (.I0(TIMER4096_MSB_REG),
        .I1(TIMER4096_reg),
        .O(PULSE40960));
  FDRE #(
    .INIT(1'b0)) 
    PULSE4096_reg
       (.C(userclk),
        .CE(1'b1),
        .D(PULSE40960),
        .Q(PULSE4096),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RECEIVED_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID_INT_reg),
        .Q(RECEIVED_IDLE),
        .R(out));
  FDRE RUDI_INVALID_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY[1]),
        .Q(status_vector_ch2[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_CONFIG_REG_NULL_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID_INT_reg_0),
        .Q(\STATE_reg[1]_0 ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[0] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[0]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[10] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[10]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[10] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[11] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[11]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[11] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[12] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[12]),
        .Q(CONFIG_REG_MATCH_reg_0[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[13] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[13]),
        .Q(CONFIG_REG_MATCH_reg_0[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[14] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[14]),
        .Q(p_0_in28_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[15] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[15]),
        .Q(p_0_in0_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[1] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[1]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[1] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[2] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[2]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[2] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[3] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[3]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[3] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[4] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[4]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[4] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[5] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[5]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[5] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[6] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[6]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[6] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[7] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[7]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[7] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[8] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[8]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[8] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[9] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[9]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[9] ),
        .R(SR));
  LUT6 #(
    .INIT(64'h2000200000002000)) 
    \RX_CONFIG_SNAPSHOT[15]_i_1__1 
       (.I0(RX_CONFIG_VALID),
        .I1(ABILITY_MATCH),
        .I2(ABILITY_MATCH_2),
        .I3(CONFIG_REG_MATCH),
        .I4(STATE[0]),
        .I5(\RX_CONFIG_SNAPSHOT[15]_i_2__1_n_0 ),
        .O(RX_CONFIG_SNAPSHOT));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \RX_CONFIG_SNAPSHOT[15]_i_2__1 
       (.I0(STATE[3]),
        .I1(STATE[2]),
        .I2(STATE[1]),
        .O(\RX_CONFIG_SNAPSHOT[15]_i_2__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[0] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[0]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[0] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[10] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[10]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[10] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[11] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[11]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[11] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[12] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[12]),
        .Q(CONSISTENCY_MATCH_reg_0[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[13] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[13]),
        .Q(CONSISTENCY_MATCH_reg_0[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[15] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[15]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[15] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[1] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[1]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[1] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[2] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[2]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[2] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[3] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[3]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[3] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[4] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[4]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[4] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[5] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[5]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[5] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[6] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[6]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[6] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[7] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[7]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[7] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[8] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[8]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[8] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[9] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[9]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[9] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_IDLE_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE),
        .Q(RX_IDLE_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_IDLE_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE_REG1),
        .Q(RX_IDLE_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT4 #(
    .INIT(16'h0BFF)) 
    RX_INVALID_i_2__1
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I2(XMIT_DATA_INT),
        .I3(RXSYNC_STATUS),
        .O(RX_INVALID_reg));
  LUT6 #(
    .INIT(64'h1010101010101011)) 
    \RX_RUDI_INVALID_DELAY[0]_i_1__1 
       (.I0(MASK_RUDI_BUFERR),
        .I1(MASK_RUDI_CLKCOR),
        .I2(RX_INVALID),
        .I3(RXSYNC_STATUS),
        .I4(XMIT_DATA_INT),
        .I5(\RX_RUDI_INVALID_DELAY[0]_i_2__1_n_0 ),
        .O(RX_RUDI_INVALID_DELAY0));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \RX_RUDI_INVALID_DELAY[0]_i_2__1 
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .O(\RX_RUDI_INVALID_DELAY[0]_i_2__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \RX_RUDI_INVALID_DELAY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY0),
        .Q(RX_RUDI_INVALID_DELAY[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_RUDI_INVALID_DELAY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY[0]),
        .Q(RX_RUDI_INVALID_DELAY[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_RUDI_INVALID_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_INVALID_reg_0),
        .Q(RX_RUDI_INVALID_REG),
        .R(1'b0));
  FDRE SGMII_PHY_STATUS_reg
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(Q[15]),
        .Q(status_vector_ch2[1]),
        .R(out));
  LUT5 #(
    .INIT(32'h10000000)) 
    \SGMII_SPEED[1]_i_1__1 
       (.I0(PREVIOUS_STATE[2]),
        .I1(PREVIOUS_STATE[3]),
        .I2(PREVIOUS_STATE[0]),
        .I3(PREVIOUS_STATE[1]),
        .I4(\SGMII_SPEED[1]_i_2__1_n_0 ),
        .O(MR_PAGE_RX_SET119_out));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \SGMII_SPEED[1]_i_2__1 
       (.I0(STATE[3]),
        .I1(STATE[2]),
        .I2(STATE[1]),
        .I3(STATE[0]),
        .O(\SGMII_SPEED[1]_i_2__1_n_0 ));
  FDRE \SGMII_SPEED_reg[0] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(Q[10]),
        .Q(status_vector_ch2[3]),
        .R(out));
  FDSE \SGMII_SPEED_reg[1] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(Q[11]),
        .Q(status_vector_ch2[4]),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    START_LINK_TIMER_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(START_LINK_TIMER_REG),
        .Q(START_LINK_TIMER_REG2),
        .R(out));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFEEFE)) 
    START_LINK_TIMER_REG_i_1__1
       (.I0(START_LINK_TIMER_REG_i_2__1_n_0),
        .I1(START_LINK_TIMER_REG_i_3__1_n_0),
        .I2(\SGMII_SPEED[1]_i_2__1_n_0 ),
        .I3(START_LINK_TIMER_REG_i_4__1_n_0),
        .I4(START_LINK_TIMER_REG_i_5__1_n_0),
        .I5(START_LINK_TIMER_REG_i_6__1_n_0),
        .O(START_LINK_TIMER));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    START_LINK_TIMER_REG_i_2__1
       (.I0(STATE[0]),
        .I1(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I2(CONSISTENCY_MATCH),
        .I3(ABILITY_MATCH),
        .I4(\STATE_reg[1]_0 ),
        .I5(\RX_CONFIG_SNAPSHOT[15]_i_2__1_n_0 ),
        .O(START_LINK_TIMER_REG_i_2__1_n_0));
  LUT4 #(
    .INIT(16'h1000)) 
    START_LINK_TIMER_REG_i_3__1
       (.I0(MASK_RUDI_BUFERR),
        .I1(MASK_RUDI_CLKCOR),
        .I2(XMIT_CONFIG_INT),
        .I3(RX_RUDI_INVALID),
        .O(START_LINK_TIMER_REG_i_3__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT3 #(
    .INIT(8'h8F)) 
    START_LINK_TIMER_REG_i_4__1
       (.I0(ABILITY_MATCH),
        .I1(\STATE_reg[1]_0 ),
        .I2(LINK_TIMER_DONE),
        .O(START_LINK_TIMER_REG_i_4__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    START_LINK_TIMER_REG_i_5__1
       (.I0(MR_AN_ENABLE_CHANGE),
        .I1(MR_RESTART_AN_INT),
        .I2(AN_SYNC_STATUS),
        .O(START_LINK_TIMER_REG_i_5__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT5 #(
    .INIT(32'h00010000)) 
    START_LINK_TIMER_REG_i_6__1
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .I2(STATE[0]),
        .I3(STATE[1]),
        .I4(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .O(START_LINK_TIMER_REG_i_6__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT5 #(
    .INIT(32'hFFFF000D)) 
    START_LINK_TIMER_REG_i_7__1
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I2(XMIT_DATA_INT),
        .I3(RXSYNC_STATUS),
        .I4(RX_INVALID),
        .O(RX_RUDI_INVALID));
  FDRE #(
    .INIT(1'b0)) 
    START_LINK_TIMER_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(START_LINK_TIMER),
        .Q(START_LINK_TIMER_REG),
        .R(out));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFF8)) 
    \STATE[0]_i_1__1 
       (.I0(\STATE[0]_i_2__1_n_0 ),
        .I1(\STATE[2]_i_2__1_n_0 ),
        .I2(\STATE[0]_i_3__1_n_0 ),
        .I3(\STATE[0]_i_4__1_n_0 ),
        .I4(\STATE[0]_i_5__1_n_0 ),
        .I5(\STATE[0]_i_6__1_n_0 ),
        .O(\STATE[0]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000570077)) 
    \STATE[0]_i_2__1 
       (.I0(ABILITY_MATCH),
        .I1(STATE[1]),
        .I2(\STATE_reg[1]_0 ),
        .I3(STATE[3]),
        .I4(STATE[2]),
        .I5(LINK_TIMER_DONE),
        .O(\STATE[0]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \STATE[0]_i_3__1 
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(STATE[1]),
        .I2(STATE[0]),
        .I3(STATE[3]),
        .I4(STATE[2]),
        .I5(\STATE[3]_i_2__1_n_0 ),
        .O(\STATE[0]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h0111000000000000)) 
    \STATE[0]_i_4__1 
       (.I0(\RX_CONFIG_SNAPSHOT[15]_i_2__1_n_0 ),
        .I1(\STATE_reg[1]_0 ),
        .I2(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I3(STATE[0]),
        .I4(ABILITY_MATCH),
        .I5(\STATE[2]_i_5__1_n_0 ),
        .O(\STATE[0]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'h0808280800000000)) 
    \STATE[0]_i_5__1 
       (.I0(\STATE[2]_i_5__1_n_0 ),
        .I1(STATE[0]),
        .I2(ABILITY_MATCH),
        .I3(NEXT_STATE2),
        .I4(\STATE_reg[1]_0 ),
        .I5(\STATE[0]_i_7__1_n_0 ),
        .O(\STATE[0]_i_5__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000700000000000)) 
    \STATE[0]_i_6__1 
       (.I0(ABILITY_MATCH),
        .I1(\STATE_reg[1]_0 ),
        .I2(LINK_TIMER_DONE),
        .I3(\STATE[2]_i_8__1_n_0 ),
        .I4(STATE[1]),
        .I5(\STATE[2]_i_5__1_n_0 ),
        .O(\STATE[0]_i_6__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \STATE[0]_i_7__1 
       (.I0(STATE[1]),
        .I1(STATE[3]),
        .O(\STATE[0]_i_7__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFAABAAAAA)) 
    \STATE[1]_i_1__1 
       (.I0(\STATE[1]_i_2__1_n_0 ),
        .I1(\STATE_reg[1]_0 ),
        .I2(STATE[1]),
        .I3(STATE[3]),
        .I4(\STATE[1]_i_3__1_n_0 ),
        .I5(\STATE[1]_i_4__1_n_0 ),
        .O(\STATE[1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000002820)) 
    \STATE[1]_i_2__1 
       (.I0(\STATE[2]_i_5__1_n_0 ),
        .I1(STATE[0]),
        .I2(STATE[1]),
        .I3(LINK_TIMER_DONE),
        .I4(STATE[3]),
        .I5(STATE[2]),
        .O(\STATE[1]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \STATE[1]_i_3__1 
       (.I0(\STATE[2]_i_5__1_n_0 ),
        .I1(STATE[0]),
        .O(\STATE[1]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'hF800F800FF00F800)) 
    \STATE[1]_i_4__1 
       (.I0(\STATE[1]_i_5__1_n_0 ),
        .I1(STATE[0]),
        .I2(\STATE[1]_i_6__1_n_0 ),
        .I3(\STATE[2]_i_5__1_n_0 ),
        .I4(\STATE[2]_i_3__1_n_0 ),
        .I5(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .O(\STATE[1]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'h0008000800080808)) 
    \STATE[1]_i_5__1 
       (.I0(IDLE_MATCH),
        .I1(LINK_TIMER_DONE),
        .I2(STATE[3]),
        .I3(ABILITY_MATCH),
        .I4(STATE[1]),
        .I5(\STATE_reg[1]_0 ),
        .O(\STATE[1]_i_5__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \STATE[1]_i_6__1 
       (.I0(STATE[3]),
        .I1(STATE[1]),
        .I2(ABILITY_MATCH),
        .O(\STATE[1]_i_6__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF80000000)) 
    \STATE[2]_i_1__1 
       (.I0(\STATE[2]_i_2__1_n_0 ),
        .I1(\STATE[2]_i_3__1_n_0 ),
        .I2(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I3(CONSISTENCY_MATCH),
        .I4(ABILITY_MATCH),
        .I5(\STATE[2]_i_4__1_n_0 ),
        .O(\STATE[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \STATE[2]_i_2__1 
       (.I0(\STATE[2]_i_5__1_n_0 ),
        .I1(STATE[0]),
        .O(\STATE[2]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \STATE[2]_i_3__1 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(\STATE_reg[1]_0 ),
        .O(\STATE[2]_i_3__1_n_0 ));
  LUT6 #(
    .INIT(64'h8888888C00000000)) 
    \STATE[2]_i_4__1 
       (.I0(\STATE[2]_i_6__1_n_0 ),
        .I1(\STATE[2]_i_5__1_n_0 ),
        .I2(STATE[0]),
        .I3(\STATE_reg[1]_0 ),
        .I4(NEXT_STATE2),
        .I5(\STATE[2]_i_8__1_n_0 ),
        .O(\STATE[2]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000AE00)) 
    \STATE[2]_i_5__1 
       (.I0(\STATE[3]_i_5__1_n_0 ),
        .I1(XMIT_DATA),
        .I2(RX_INVALID),
        .I3(AN_SYNC_STATUS),
        .I4(MR_RESTART_AN_INT),
        .I5(MR_AN_ENABLE_CHANGE),
        .O(\STATE[2]_i_5__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT3 #(
    .INIT(8'h1F)) 
    \STATE[2]_i_6__1 
       (.I0(\STATE_reg[1]_0 ),
        .I1(STATE[1]),
        .I2(ABILITY_MATCH),
        .O(\STATE[2]_i_6__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \STATE[2]_i_7__1 
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[11] ),
        .I1(TOGGLE_RX),
        .O(NEXT_STATE2));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \STATE[2]_i_8__1 
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .O(\STATE[2]_i_8__1_n_0 ));
  LUT6 #(
    .INIT(64'h00880088F0FF0088)) 
    \STATE[3]_i_1__1 
       (.I0(\STATE[3]_i_2__1_n_0 ),
        .I1(STATE[3]),
        .I2(\STATE[3]_i_3__1_n_0 ),
        .I3(\STATE[3]_i_4__1_n_0 ),
        .I4(AN_SYNC_STATUS),
        .I5(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .O(\STATE[3]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000AE00)) 
    \STATE[3]_i_2__1 
       (.I0(\STATE[3]_i_5__1_n_0 ),
        .I1(XMIT_DATA_INT),
        .I2(RX_INVALID),
        .I3(AN_SYNC_STATUS),
        .I4(MR_RESTART_AN_INT),
        .I5(MR_AN_ENABLE_CHANGE),
        .O(\STATE[3]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF010000)) 
    \STATE[3]_i_3__1 
       (.I0(XMIT_DATA_INT),
        .I1(RXSYNC_STATUS),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I3(RX_INVALID),
        .I4(\STATE[3]_i_6__1_n_0 ),
        .I5(\STATE[3]_i_7__1_n_0 ),
        .O(\STATE[3]_i_3__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \STATE[3]_i_4__1 
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[2]),
        .O(\STATE[3]_i_4__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT5 #(
    .INIT(32'hFDFDFFFD)) 
    \STATE[3]_i_5__1 
       (.I0(XMIT_CONFIG_INT),
        .I1(MASK_RUDI_CLKCOR),
        .I2(MASK_RUDI_BUFERR),
        .I3(RXSYNC_STATUS),
        .I4(RX_INVALID),
        .O(\STATE[3]_i_5__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \STATE[3]_i_6__1 
       (.I0(XMIT_CONFIG_INT),
        .I1(MASK_RUDI_CLKCOR),
        .I2(MASK_RUDI_BUFERR),
        .O(\STATE[3]_i_6__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \STATE[3]_i_7__1 
       (.I0(MR_RESTART_AN_INT),
        .I1(MR_AN_ENABLE_CHANGE),
        .O(\STATE[3]_i_7__1_n_0 ));
  FDRE \STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[0]_i_1__1_n_0 ),
        .Q(STATE[0]),
        .R(out));
  FDRE \STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[1]_i_1__1_n_0 ),
        .Q(STATE[1]),
        .R(out));
  FDRE \STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[2]_i_1__1_n_0 ),
        .Q(STATE[2]),
        .R(out));
  FDRE \STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[3]_i_1__1_n_0 ),
        .Q(STATE[3]),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT4 #(
    .INIT(16'hAE00)) 
    STATUS_VECTOR_0_PRE_i_1__1
       (.I0(XMIT_DATA_INT),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I3(RXSYNC_STATUS),
        .O(STATUS_VECTOR_0_PRE_reg));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT4 #(
    .INIT(16'hF7F0)) 
    SYNC_STATUS_HELD_i_1__1
       (.I0(LINK_TIMER_SATURATED),
        .I1(PULSE4096),
        .I2(RXSYNC_STATUS),
        .I3(SYNC_STATUS_HELD),
        .O(SYNC_STATUS_HELD_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_HELD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_HELD_i_1__1_n_0),
        .Q(SYNC_STATUS_HELD),
        .R(out));
  LUT1 #(
    .INIT(2'h1)) 
    \TIMER4096[0]_i_2__1 
       (.I0(\TIMER4096_reg_n_0_[0] ),
        .O(\TIMER4096[0]_i_2__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    TIMER4096_MSB_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TIMER4096_reg),
        .Q(TIMER4096_MSB_REG),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[0]_i_1__1_n_7 ),
        .Q(\TIMER4096_reg_n_0_[0] ),
        .R(out));
  CARRY4 \TIMER4096_reg[0]_i_1__1 
       (.CI(1'b0),
        .CO({\TIMER4096_reg[0]_i_1__1_n_0 ,\TIMER4096_reg[0]_i_1__1_n_1 ,\TIMER4096_reg[0]_i_1__1_n_2 ,\TIMER4096_reg[0]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\TIMER4096_reg[0]_i_1__1_n_4 ,\TIMER4096_reg[0]_i_1__1_n_5 ,\TIMER4096_reg[0]_i_1__1_n_6 ,\TIMER4096_reg[0]_i_1__1_n_7 }),
        .S({\TIMER4096_reg_n_0_[3] ,\TIMER4096_reg_n_0_[2] ,\TIMER4096_reg_n_0_[1] ,\TIMER4096[0]_i_2__1_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[8]_i_1__1_n_5 ),
        .Q(\TIMER4096_reg_n_0_[10] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[8]_i_1__1_n_4 ),
        .Q(TIMER4096_reg),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[0]_i_1__1_n_6 ),
        .Q(\TIMER4096_reg_n_0_[1] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[0]_i_1__1_n_5 ),
        .Q(\TIMER4096_reg_n_0_[2] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[0]_i_1__1_n_4 ),
        .Q(\TIMER4096_reg_n_0_[3] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[4]_i_1__1_n_7 ),
        .Q(\TIMER4096_reg_n_0_[4] ),
        .R(out));
  CARRY4 \TIMER4096_reg[4]_i_1__1 
       (.CI(\TIMER4096_reg[0]_i_1__1_n_0 ),
        .CO({\TIMER4096_reg[4]_i_1__1_n_0 ,\TIMER4096_reg[4]_i_1__1_n_1 ,\TIMER4096_reg[4]_i_1__1_n_2 ,\TIMER4096_reg[4]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\TIMER4096_reg[4]_i_1__1_n_4 ,\TIMER4096_reg[4]_i_1__1_n_5 ,\TIMER4096_reg[4]_i_1__1_n_6 ,\TIMER4096_reg[4]_i_1__1_n_7 }),
        .S({\TIMER4096_reg_n_0_[7] ,\TIMER4096_reg_n_0_[6] ,\TIMER4096_reg_n_0_[5] ,\TIMER4096_reg_n_0_[4] }));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[4]_i_1__1_n_6 ),
        .Q(\TIMER4096_reg_n_0_[5] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[4]_i_1__1_n_5 ),
        .Q(\TIMER4096_reg_n_0_[6] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[4]_i_1__1_n_4 ),
        .Q(\TIMER4096_reg_n_0_[7] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[8]_i_1__1_n_7 ),
        .Q(\TIMER4096_reg_n_0_[8] ),
        .R(out));
  CARRY4 \TIMER4096_reg[8]_i_1__1 
       (.CI(\TIMER4096_reg[4]_i_1__1_n_0 ),
        .CO({\NLW_TIMER4096_reg[8]_i_1__1_CO_UNCONNECTED [3],\TIMER4096_reg[8]_i_1__1_n_1 ,\TIMER4096_reg[8]_i_1__1_n_2 ,\TIMER4096_reg[8]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\TIMER4096_reg[8]_i_1__1_n_4 ,\TIMER4096_reg[8]_i_1__1_n_5 ,\TIMER4096_reg[8]_i_1__1_n_6 ,\TIMER4096_reg[8]_i_1__1_n_7 }),
        .S({TIMER4096_reg,\TIMER4096_reg_n_0_[10] ,\TIMER4096_reg_n_0_[9] ,\TIMER4096_reg_n_0_[8] }));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[8]_i_1__1_n_6 ),
        .Q(\TIMER4096_reg_n_0_[9] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    TOGGLE_RX_reg
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(Q[11]),
        .Q(TOGGLE_RX),
        .R(out));
  LUT6 #(
    .INIT(64'h4444FFF4EEEE000E)) 
    TOGGLE_TX_i_1__1
       (.I0(STATE[2]),
        .I1(an_adv_config_vector_ch2),
        .I2(STATE[0]),
        .I3(\RX_CONFIG_SNAPSHOT[15]_i_2__1_n_0 ),
        .I4(MR_PAGE_RX_SET119_out),
        .I5(TOGGLE_TX),
        .O(TOGGLE_TX_i_1__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    TOGGLE_TX_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TOGGLE_TX_i_1__1_n_0),
        .Q(TOGGLE_TX),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT5 #(
    .INIT(32'hFFDE0010)) 
    \TX_CONFIG_REG_INT[0]_i_1__1 
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .I2(STATE[1]),
        .I3(STATE[0]),
        .I4(D[0]),
        .O(\TX_CONFIG_REG_INT[0]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF8FC00000800)) 
    \TX_CONFIG_REG_INT[11]_i_1__1 
       (.I0(TOGGLE_TX),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[1]),
        .I4(STATE[0]),
        .I5(D[1]),
        .O(\TX_CONFIG_REG_INT[11]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT5 #(
    .INIT(32'hFFBA0008)) 
    \TX_CONFIG_REG_INT[14]_i_1__1 
       (.I0(STATE[0]),
        .I1(STATE[1]),
        .I2(STATE[2]),
        .I3(STATE[3]),
        .I4(D[2]),
        .O(\TX_CONFIG_REG_INT[14]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TX_CONFIG_REG_INT[0]_i_1__1_n_0 ),
        .Q(D[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TX_CONFIG_REG_INT[11]_i_1__1_n_0 ),
        .Q(D[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[14] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TX_CONFIG_REG_INT[14]_i_1__1_n_0 ),
        .Q(D[2]),
        .R(out));
  LUT6 #(
    .INIT(64'hEEEEEEEEEEEEEEFE)) 
    XMIT_CONFIG_INT_i_1__1
       (.I0(out),
        .I1(XMIT_CONFIG_INT_i_2__4_n_0),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I3(STATE[1]),
        .I4(STATE[0]),
        .I5(XMIT_CONFIG_INT_i_3__1_n_0),
        .O(XMIT_CONFIG_INT_i_1__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT3 #(
    .INIT(8'h8A)) 
    XMIT_CONFIG_INT_i_2__3
       (.I0(XMIT_CONFIG_INT),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .O(XMIT_CONFIG_INT_reg_0));
  LUT6 #(
    .INIT(64'hAAAA8AA2AAAA8AA0)) 
    XMIT_CONFIG_INT_i_2__4
       (.I0(XMIT_CONFIG_INT),
        .I1(STATE[3]),
        .I2(STATE[2]),
        .I3(STATE[0]),
        .I4(STATE[1]),
        .I5(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .O(XMIT_CONFIG_INT_i_2__4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT2 #(
    .INIT(4'hE)) 
    XMIT_CONFIG_INT_i_3__1
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .O(XMIT_CONFIG_INT_i_3__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    XMIT_CONFIG_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(XMIT_CONFIG_INT_i_1__1_n_0),
        .Q(XMIT_CONFIG_INT),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT3 #(
    .INIT(8'hF4)) 
    XMIT_DATA_INT_i_1__3
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I2(XMIT_DATA_INT),
        .O(XMIT_DATA));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT4 #(
    .INIT(16'h2004)) 
    XMIT_DATA_INT_i_1__4
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .I2(STATE[0]),
        .I3(STATE[1]),
        .O(XMIT_DATA_INT0));
  FDRE #(
    .INIT(1'b0)) 
    XMIT_DATA_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(XMIT_DATA_INT0),
        .Q(XMIT_DATA_INT),
        .R(out));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_1__1
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[11] ),
        .I1(Q[11]),
        .I2(\RX_CONFIG_SNAPSHOT_reg_n_0_[10] ),
        .I3(Q[10]),
        .I4(Q[9]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[9] ),
        .O(i__carry_i_1__1_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_2__1
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[8] ),
        .I1(Q[8]),
        .I2(\RX_CONFIG_SNAPSHOT_reg_n_0_[7] ),
        .I3(Q[7]),
        .I4(Q[6]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[6] ),
        .O(i__carry_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_3__1
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[5] ),
        .I1(Q[5]),
        .I2(\RX_CONFIG_SNAPSHOT_reg_n_0_[4] ),
        .I3(Q[4]),
        .I4(Q[3]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[3] ),
        .O(i__carry_i_3__1_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_4__1
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[2] ),
        .I1(Q[2]),
        .I2(\RX_CONFIG_SNAPSHOT_reg_n_0_[1] ),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[0] ),
        .O(i__carry_i_4__1_n_0));
  CARRY4 plusOp_carry
       (.CI(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3}),
        .CYINIT(MASK_RUDI_BUFERR_TIMER[0]),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({plusOp_carry_n_4,plusOp_carry_n_5,plusOp_carry_n_6,plusOp_carry_n_7}),
        .S(MASK_RUDI_BUFERR_TIMER[4:1]));
  CARRY4 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CO({plusOp_carry__0_n_0,plusOp_carry__0_n_1,plusOp_carry__0_n_2,plusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({plusOp_carry__0_n_4,plusOp_carry__0_n_5,plusOp_carry__0_n_6,plusOp_carry__0_n_7}),
        .S(MASK_RUDI_BUFERR_TIMER[8:5]));
  CARRY4 plusOp_carry__1
       (.CI(plusOp_carry__0_n_0),
        .CO({NLW_plusOp_carry__1_CO_UNCONNECTED[3],plusOp_carry__1_n_1,plusOp_carry__1_n_2,plusOp_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({plusOp_carry__1_n_4,plusOp_carry__1_n_5,plusOp_carry__1_n_6,plusOp_carry__1_n_7}),
        .S(MASK_RUDI_BUFERR_TIMER[12:9]));
endmodule

(* ORIG_REF_NAME = "AUTO_NEG" *) 
module qsgmii_1218_AUTO_NEG_144
   (status_vector_ch1,
    MASK_RUDI_BUFERR,
    RECEIVED_IDLE,
    \STATE_reg[1]_0 ,
    an_interrupt_ch1,
    XMIT_CONFIG_INT_reg_0,
    RX_INVALID_reg,
    I0,
    STATUS_VECTOR_0_PRE_reg,
    XMIT_DATA,
    LP_ADV_ABILITY,
    D,
    CONFIG_REG_MATCH_reg_0,
    CONSISTENCY_MATCH_reg_0,
    out,
    userclk,
    Q,
    BASEX_REMOTE_FAULT_RSLVD,
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ,
    RESTART_AN_SET,
    RX_IDLE,
    S,
    \RX_CONFIG_REG_reg[13] ,
    RX_INVALID_reg_0,
    RX_CONFIG_VALID_INT_reg,
    RX_CONFIG_VALID_INT_reg_0,
    data_out,
    p_0_in,
    SR,
    RX_CONFIG_VALID,
    RX_INVALID,
    RXSYNC_STATUS,
    EVEN_reg,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ,
    EVEN_reg_0,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ,
    link_timer_value_ch1,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ,
    an_adv_config_vector_ch1,
    MASK_RUDI_BUFERR_TIMER0,
    ACKNOWLEDGE_MATCH_3);
  output [5:0]status_vector_ch1;
  output MASK_RUDI_BUFERR;
  output RECEIVED_IDLE;
  output \STATE_reg[1]_0 ;
  output an_interrupt_ch1;
  output XMIT_CONFIG_INT_reg_0;
  output RX_INVALID_reg;
  output I0;
  output STATUS_VECTOR_0_PRE_reg;
  output XMIT_DATA;
  output [0:0]LP_ADV_ABILITY;
  output [2:0]D;
  output [1:0]CONFIG_REG_MATCH_reg_0;
  output [1:0]CONSISTENCY_MATCH_reg_0;
  input out;
  input userclk;
  input [15:0]Q;
  input [0:0]BASEX_REMOTE_FAULT_RSLVD;
  input [2:0]\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ;
  input RESTART_AN_SET;
  input RX_IDLE;
  input [0:0]S;
  input [0:0]\RX_CONFIG_REG_reg[13] ;
  input RX_INVALID_reg_0;
  input RX_CONFIG_VALID_INT_reg;
  input RX_CONFIG_VALID_INT_reg_0;
  input data_out;
  input p_0_in;
  input [0:0]SR;
  input RX_CONFIG_VALID;
  input RX_INVALID;
  input RXSYNC_STATUS;
  input EVEN_reg;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] ;
  input [0:0]\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ;
  input EVEN_reg_0;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  input [8:0]link_timer_value_ch1;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ;
  input [0:0]an_adv_config_vector_ch1;
  input MASK_RUDI_BUFERR_TIMER0;
  input ACKNOWLEDGE_MATCH_3;

  wire ABILITY_MATCH;
  wire ABILITY_MATCH_2;
  wire ABILITY_MATCH_2_i_1__0_n_0;
  wire ABILITY_MATCH_i_1__0_n_0;
  wire ACKNOWLEDGE_MATCH_2;
  wire ACKNOWLEDGE_MATCH_2_i_1__0_n_0;
  wire ACKNOWLEDGE_MATCH_3;
  wire ACKNOWLEDGE_MATCH_3_i_1__0_n_0;
  wire ACKNOWLEDGE_MATCH_3_reg_n_0;
  wire AN_SYNC_STATUS;
  wire AN_SYNC_STATUS_i_1__0_n_0;
  wire [0:0]BASEX_REMOTE_FAULT_RSLVD;
  wire CONFIG_REG_MATCH;
  wire CONFIG_REG_MATCH_COMB;
  wire CONFIG_REG_MATCH_COMB2_carry__0_n_3;
  wire CONFIG_REG_MATCH_COMB2_carry_i_1__0_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_i_2__0_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_i_3__0_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_i_4__0_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_n_1;
  wire CONFIG_REG_MATCH_COMB2_carry_n_2;
  wire CONFIG_REG_MATCH_COMB2_carry_n_3;
  wire [1:0]CONFIG_REG_MATCH_reg_0;
  wire CONSISTENCY_MATCH;
  wire CONSISTENCY_MATCH_COMB;
  wire CONSISTENCY_MATCH_COMB1__0;
  wire \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_0 ;
  wire \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_1 ;
  wire \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_2 ;
  wire \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_3 ;
  wire [1:0]CONSISTENCY_MATCH_reg_0;
  wire [2:0]D;
  wire EVEN_reg;
  wire EVEN_reg_0;
  wire GENERATE_REMOTE_FAULT;
  wire GENERATE_REMOTE_FAULT0;
  wire I0;
  wire IDLE_INSERTED;
  wire IDLE_INSERTED0;
  wire IDLE_INSERTED_REG1;
  wire IDLE_INSERTED_REG2;
  wire IDLE_INSERTED_REG3;
  wire IDLE_INSERTED_REG3_i_1__0_n_0;
  wire IDLE_INSERTED_REG4;
  wire IDLE_MATCH;
  wire IDLE_MATCH_2;
  wire IDLE_MATCH_2_i_1__0_n_0;
  wire IDLE_MATCH_i_1__0_n_0;
  wire IDLE_REMOVED;
  wire IDLE_REMOVED0;
  wire IDLE_REMOVED_REG1;
  wire IDLE_REMOVED_REG2;
  wire \LINK_TIMER[9]_i_1__0_n_0 ;
  wire \LINK_TIMER[9]_i_3__0_n_0 ;
  wire LINK_TIMER_DONE;
  wire LINK_TIMER_DONE_i_1__0_n_0;
  wire LINK_TIMER_DONE_i_2__0_n_0;
  wire LINK_TIMER_DONE_i_3__0_n_0;
  wire LINK_TIMER_DONE_i_4__0_n_0;
  wire LINK_TIMER_DONE_i_5__0_n_0;
  wire LINK_TIMER_DONE_i_6__0_n_0;
  wire LINK_TIMER_DONE_i_7__0_n_0;
  wire LINK_TIMER_SATURATED;
  wire LINK_TIMER_SATURATED_COMB;
  wire LINK_TIMER_SATURATED_COMB0_carry_i_1__0_n_0;
  wire LINK_TIMER_SATURATED_COMB0_carry_i_2__0_n_0;
  wire LINK_TIMER_SATURATED_COMB0_carry_i_3__0_n_0;
  wire LINK_TIMER_SATURATED_COMB0_carry_i_4__0_n_0;
  wire LINK_TIMER_SATURATED_COMB0_carry_n_1;
  wire LINK_TIMER_SATURATED_COMB0_carry_n_2;
  wire LINK_TIMER_SATURATED_COMB0_carry_n_3;
  wire [9:0]LINK_TIMER_reg__0__0;
  wire [0:0]LP_ADV_ABILITY;
  wire MASK_RUDI_BUFERR;
  wire [12:0]MASK_RUDI_BUFERR_TIMER;
  wire MASK_RUDI_BUFERR_TIMER0;
  wire \MASK_RUDI_BUFERR_TIMER[0]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[10]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[11]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_2__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_3__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_4__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[1]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[2]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[3]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[4]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[5]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[6]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[7]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[8]_i_1__0_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[9]_i_1__0_n_0 ;
  wire MASK_RUDI_BUFERR_i_1__0_n_0;
  wire MASK_RUDI_BUFERR_i_2__0_n_0;
  wire MASK_RUDI_BUFERR_i_3__0_n_0;
  wire MASK_RUDI_CLKCOR;
  wire MASK_RUDI_CLKCOR_i_1__0_n_0;
  wire MASK_RUDI_CLKCOR_i_2__0_n_0;
  wire MR_AN_COMPLETE_i_1__0_n_0;
  wire MR_AN_ENABLE_CHANGE;
  wire MR_AN_ENABLE_CHANGE0;
  wire MR_AN_ENABLE_REG1;
  wire MR_AN_ENABLE_REG2;
  wire \MR_LP_ADV_ABILITY_INT[13]_i_1__0_n_0 ;
  wire \MR_LP_ADV_ABILITY_INT[16]_i_1__0_n_0 ;
  wire \MR_LP_ADV_ABILITY_INT[16]_i_2__0_n_0 ;
  wire \MR_LP_ADV_ABILITY_INT_reg_n_0_[16] ;
  wire MR_PAGE_RX_SET119_out;
  wire MR_REMOTE_FAULT_i_1__0_n_0;
  wire MR_RESTART_AN_INT;
  wire MR_RESTART_AN_INT_i_1__0_n_0;
  wire MR_RESTART_AN_INT_i_2__0_n_0;
  wire MR_RESTART_AN_SET_REG1;
  wire MR_RESTART_AN_SET_REG2;
  wire NEXT_STATE2;
  wire [2:0]\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ;
  wire [3:0]PREVIOUS_STATE;
  wire PULSE4096;
  wire PULSE40960;
  wire [15:0]Q;
  wire RECEIVED_IDLE;
  wire RESTART_AN_SET;
  wire RXSYNC_STATUS;
  wire \RX_CONFIG_REG_REG_reg_n_0_[0] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[10] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[11] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[1] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[2] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[3] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[4] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[5] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[6] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[7] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[8] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[9] ;
  wire [0:0]\RX_CONFIG_REG_reg[13] ;
  wire RX_CONFIG_SNAPSHOT;
  wire \RX_CONFIG_SNAPSHOT[15]_i_2__0_n_0 ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[0] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[10] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[11] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[15] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[1] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[2] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[3] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[4] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[5] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[6] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[7] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[8] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[9] ;
  wire RX_CONFIG_VALID;
  wire RX_CONFIG_VALID_INT_reg;
  wire RX_CONFIG_VALID_INT_reg_0;
  wire RX_IDLE;
  wire RX_IDLE_REG1;
  wire RX_IDLE_REG2;
  wire RX_INVALID;
  wire RX_INVALID_reg;
  wire RX_INVALID_reg_0;
  wire RX_RUDI_INVALID;
  wire [1:0]RX_RUDI_INVALID_DELAY;
  wire RX_RUDI_INVALID_DELAY0;
  wire \RX_RUDI_INVALID_DELAY[0]_i_2__0_n_0 ;
  wire RX_RUDI_INVALID_REG;
  wire [0:0]S;
  wire \SGMII_SPEED[1]_i_2__0_n_0 ;
  wire [0:0]SR;
  wire START_LINK_TIMER;
  wire START_LINK_TIMER_REG;
  wire START_LINK_TIMER_REG2;
  wire START_LINK_TIMER_REG_i_2__0_n_0;
  wire START_LINK_TIMER_REG_i_3__0_n_0;
  wire START_LINK_TIMER_REG_i_4__0_n_0;
  wire START_LINK_TIMER_REG_i_5__0_n_0;
  wire START_LINK_TIMER_REG_i_6__0_n_0;
  wire [3:0]STATE;
  wire \STATE[0]_i_1__0_n_0 ;
  wire \STATE[0]_i_2__0_n_0 ;
  wire \STATE[0]_i_3__0_n_0 ;
  wire \STATE[0]_i_4__0_n_0 ;
  wire \STATE[0]_i_5__0_n_0 ;
  wire \STATE[0]_i_6__0_n_0 ;
  wire \STATE[0]_i_7__0_n_0 ;
  wire \STATE[1]_i_1__0_n_0 ;
  wire \STATE[1]_i_2__0_n_0 ;
  wire \STATE[1]_i_3__0_n_0 ;
  wire \STATE[1]_i_4__0_n_0 ;
  wire \STATE[1]_i_5__0_n_0 ;
  wire \STATE[1]_i_6__0_n_0 ;
  wire \STATE[2]_i_1__0_n_0 ;
  wire \STATE[2]_i_2__0_n_0 ;
  wire \STATE[2]_i_3__0_n_0 ;
  wire \STATE[2]_i_4__0_n_0 ;
  wire \STATE[2]_i_5__0_n_0 ;
  wire \STATE[2]_i_6__0_n_0 ;
  wire \STATE[2]_i_8__0_n_0 ;
  wire \STATE[3]_i_1__0_n_0 ;
  wire \STATE[3]_i_2__0_n_0 ;
  wire \STATE[3]_i_3__0_n_0 ;
  wire \STATE[3]_i_4__0_n_0 ;
  wire \STATE[3]_i_5__0_n_0 ;
  wire \STATE[3]_i_6__0_n_0 ;
  wire \STATE[3]_i_7__0_n_0 ;
  wire \STATE_reg[1]_0 ;
  wire STATUS_VECTOR_0_PRE_reg;
  wire SYNC_STATUS_HELD;
  wire SYNC_STATUS_HELD_i_1__0_n_0;
  wire \TIMER4096[0]_i_2__0_n_0 ;
  wire TIMER4096_MSB_REG;
  wire [11:11]TIMER4096_reg;
  wire \TIMER4096_reg[0]_i_1__0_n_0 ;
  wire \TIMER4096_reg[0]_i_1__0_n_1 ;
  wire \TIMER4096_reg[0]_i_1__0_n_2 ;
  wire \TIMER4096_reg[0]_i_1__0_n_3 ;
  wire \TIMER4096_reg[0]_i_1__0_n_4 ;
  wire \TIMER4096_reg[0]_i_1__0_n_5 ;
  wire \TIMER4096_reg[0]_i_1__0_n_6 ;
  wire \TIMER4096_reg[0]_i_1__0_n_7 ;
  wire \TIMER4096_reg[4]_i_1__0_n_0 ;
  wire \TIMER4096_reg[4]_i_1__0_n_1 ;
  wire \TIMER4096_reg[4]_i_1__0_n_2 ;
  wire \TIMER4096_reg[4]_i_1__0_n_3 ;
  wire \TIMER4096_reg[4]_i_1__0_n_4 ;
  wire \TIMER4096_reg[4]_i_1__0_n_5 ;
  wire \TIMER4096_reg[4]_i_1__0_n_6 ;
  wire \TIMER4096_reg[4]_i_1__0_n_7 ;
  wire \TIMER4096_reg[8]_i_1__0_n_1 ;
  wire \TIMER4096_reg[8]_i_1__0_n_2 ;
  wire \TIMER4096_reg[8]_i_1__0_n_3 ;
  wire \TIMER4096_reg[8]_i_1__0_n_4 ;
  wire \TIMER4096_reg[8]_i_1__0_n_5 ;
  wire \TIMER4096_reg[8]_i_1__0_n_6 ;
  wire \TIMER4096_reg[8]_i_1__0_n_7 ;
  wire \TIMER4096_reg_n_0_[0] ;
  wire \TIMER4096_reg_n_0_[10] ;
  wire \TIMER4096_reg_n_0_[1] ;
  wire \TIMER4096_reg_n_0_[2] ;
  wire \TIMER4096_reg_n_0_[3] ;
  wire \TIMER4096_reg_n_0_[4] ;
  wire \TIMER4096_reg_n_0_[5] ;
  wire \TIMER4096_reg_n_0_[6] ;
  wire \TIMER4096_reg_n_0_[7] ;
  wire \TIMER4096_reg_n_0_[8] ;
  wire \TIMER4096_reg_n_0_[9] ;
  wire TOGGLE_RX;
  wire TOGGLE_TX;
  wire TOGGLE_TX_i_1__0_n_0;
  wire \TX_CONFIG_REG_INT[0]_i_1__0_n_0 ;
  wire \TX_CONFIG_REG_INT[11]_i_1__0_n_0 ;
  wire \TX_CONFIG_REG_INT[14]_i_1__0_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] ;
  wire [0:0]\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_i_1__0_n_0;
  wire XMIT_CONFIG_INT_i_2__2_n_0;
  wire XMIT_CONFIG_INT_i_3__0_n_0;
  wire XMIT_CONFIG_INT_reg_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire XMIT_DATA_INT0;
  wire [0:0]an_adv_config_vector_ch1;
  wire an_interrupt_ch1;
  wire data_out;
  wire i__carry_i_1__0_n_0;
  wire i__carry_i_2__0_n_0;
  wire i__carry_i_3__0_n_0;
  wire i__carry_i_4__0_n_0;
  wire [8:0]link_timer_value_ch1;
  wire out;
  wire p_0_in;
  wire p_0_in0_in;
  wire p_0_in28_in;
  wire [9:0]plusOp__0;
  wire plusOp_carry__0_n_0;
  wire plusOp_carry__0_n_1;
  wire plusOp_carry__0_n_2;
  wire plusOp_carry__0_n_3;
  wire plusOp_carry__0_n_4;
  wire plusOp_carry__0_n_5;
  wire plusOp_carry__0_n_6;
  wire plusOp_carry__0_n_7;
  wire plusOp_carry__1_n_1;
  wire plusOp_carry__1_n_2;
  wire plusOp_carry__1_n_3;
  wire plusOp_carry__1_n_4;
  wire plusOp_carry__1_n_5;
  wire plusOp_carry__1_n_6;
  wire plusOp_carry__1_n_7;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire plusOp_carry_n_4;
  wire plusOp_carry_n_5;
  wire plusOp_carry_n_6;
  wire plusOp_carry_n_7;
  wire [5:0]status_vector_ch1;
  wire userclk;
  wire [3:0]NLW_CONFIG_REG_MATCH_COMB2_carry_O_UNCONNECTED;
  wire [3:1]NLW_CONFIG_REG_MATCH_COMB2_carry__0_CO_UNCONNECTED;
  wire [3:0]NLW_CONFIG_REG_MATCH_COMB2_carry__0_O_UNCONNECTED;
  wire [3:0]\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_O_UNCONNECTED ;
  wire [3:1]\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0_CO_UNCONNECTED ;
  wire [3:0]\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0_O_UNCONNECTED ;
  wire [3:0]NLW_LINK_TIMER_SATURATED_COMB0_carry_O_UNCONNECTED;
  wire [3:3]\NLW_TIMER4096_reg[8]_i_1__0_CO_UNCONNECTED ;
  wire [3:3]NLW_plusOp_carry__1_CO_UNCONNECTED;

  LUT6 #(
    .INIT(64'h00000000000000E2)) 
    ABILITY_MATCH_2_i_1__0
       (.I0(ABILITY_MATCH_2),
        .I1(RX_CONFIG_VALID),
        .I2(CONFIG_REG_MATCH_COMB),
        .I3(MASK_RUDI_BUFERR),
        .I4(RX_IDLE),
        .I5(out),
        .O(ABILITY_MATCH_2_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ABILITY_MATCH_2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ABILITY_MATCH_2_i_1__0_n_0),
        .Q(ABILITY_MATCH_2),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0050004400000044)) 
    ABILITY_MATCH_i_1__0
       (.I0(SR),
        .I1(ABILITY_MATCH),
        .I2(ABILITY_MATCH_2),
        .I3(MASK_RUDI_BUFERR),
        .I4(RX_CONFIG_VALID),
        .I5(CONFIG_REG_MATCH_COMB),
        .O(ABILITY_MATCH_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ABILITY_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ABILITY_MATCH_i_1__0_n_0),
        .Q(ABILITY_MATCH),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000000000E222)) 
    ACKNOWLEDGE_MATCH_2_i_1__0
       (.I0(ACKNOWLEDGE_MATCH_2),
        .I1(RX_CONFIG_VALID),
        .I2(Q[14]),
        .I3(p_0_in28_in),
        .I4(MASK_RUDI_BUFERR),
        .I5(SR),
        .O(ACKNOWLEDGE_MATCH_2_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ACKNOWLEDGE_MATCH_2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ACKNOWLEDGE_MATCH_2_i_1__0_n_0),
        .Q(ACKNOWLEDGE_MATCH_2),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000E2222222)) 
    ACKNOWLEDGE_MATCH_3_i_1__0
       (.I0(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I1(RX_CONFIG_VALID),
        .I2(ACKNOWLEDGE_MATCH_2),
        .I3(p_0_in28_in),
        .I4(Q[14]),
        .I5(ACKNOWLEDGE_MATCH_3),
        .O(ACKNOWLEDGE_MATCH_3_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ACKNOWLEDGE_MATCH_3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ACKNOWLEDGE_MATCH_3_i_1__0_n_0),
        .Q(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT5 #(
    .INIT(32'hFFBFFF80)) 
    AN_SYNC_STATUS_i_1__0
       (.I0(SYNC_STATUS_HELD),
        .I1(LINK_TIMER_SATURATED),
        .I2(PULSE4096),
        .I3(RXSYNC_STATUS),
        .I4(AN_SYNC_STATUS),
        .O(AN_SYNC_STATUS_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    AN_SYNC_STATUS_reg
       (.C(userclk),
        .CE(1'b1),
        .D(AN_SYNC_STATUS_i_1__0_n_0),
        .Q(AN_SYNC_STATUS),
        .R(out));
  FDRE \BASEX_REMOTE_FAULT_reg[1] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(BASEX_REMOTE_FAULT_RSLVD),
        .Q(status_vector_ch1[2]),
        .R(out));
  CARRY4 CONFIG_REG_MATCH_COMB2_carry
       (.CI(1'b0),
        .CO({CONFIG_REG_MATCH_COMB2_carry_n_0,CONFIG_REG_MATCH_COMB2_carry_n_1,CONFIG_REG_MATCH_COMB2_carry_n_2,CONFIG_REG_MATCH_COMB2_carry_n_3}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_CONFIG_REG_MATCH_COMB2_carry_O_UNCONNECTED[3:0]),
        .S({CONFIG_REG_MATCH_COMB2_carry_i_1__0_n_0,CONFIG_REG_MATCH_COMB2_carry_i_2__0_n_0,CONFIG_REG_MATCH_COMB2_carry_i_3__0_n_0,CONFIG_REG_MATCH_COMB2_carry_i_4__0_n_0}));
  CARRY4 CONFIG_REG_MATCH_COMB2_carry__0
       (.CI(CONFIG_REG_MATCH_COMB2_carry_n_0),
        .CO({NLW_CONFIG_REG_MATCH_COMB2_carry__0_CO_UNCONNECTED[3:1],CONFIG_REG_MATCH_COMB2_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_CONFIG_REG_MATCH_COMB2_carry__0_O_UNCONNECTED[3:0]),
        .S({1'b0,1'b0,1'b0,S}));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    CONFIG_REG_MATCH_COMB2_carry_i_1__0
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[11] ),
        .I1(Q[11]),
        .I2(\RX_CONFIG_REG_REG_reg_n_0_[10] ),
        .I3(Q[10]),
        .I4(Q[9]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[9] ),
        .O(CONFIG_REG_MATCH_COMB2_carry_i_1__0_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    CONFIG_REG_MATCH_COMB2_carry_i_2__0
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[8] ),
        .I1(Q[8]),
        .I2(\RX_CONFIG_REG_REG_reg_n_0_[7] ),
        .I3(Q[7]),
        .I4(Q[6]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[6] ),
        .O(CONFIG_REG_MATCH_COMB2_carry_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    CONFIG_REG_MATCH_COMB2_carry_i_3__0
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[5] ),
        .I1(Q[5]),
        .I2(\RX_CONFIG_REG_REG_reg_n_0_[4] ),
        .I3(Q[4]),
        .I4(Q[3]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[3] ),
        .O(CONFIG_REG_MATCH_COMB2_carry_i_3__0_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    CONFIG_REG_MATCH_COMB2_carry_i_4__0
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[2] ),
        .I1(Q[2]),
        .I2(\RX_CONFIG_REG_REG_reg_n_0_[1] ),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[0] ),
        .O(CONFIG_REG_MATCH_COMB2_carry_i_4__0_n_0));
  LUT4 #(
    .INIT(16'h4004)) 
    CONFIG_REG_MATCH_i_1__0
       (.I0(RECEIVED_IDLE),
        .I1(CONFIG_REG_MATCH_COMB2_carry__0_n_3),
        .I2(Q[15]),
        .I3(p_0_in0_in),
        .O(CONFIG_REG_MATCH_COMB));
  FDRE #(
    .INIT(1'b0)) 
    CONFIG_REG_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_REG_MATCH_COMB),
        .Q(CONFIG_REG_MATCH),
        .R(out));
  CARRY4 \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry 
       (.CI(1'b0),
        .CO({\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_0 ,\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_1 ,\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_2 ,\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_3 }),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_O_UNCONNECTED [3:0]),
        .S({i__carry_i_1__0_n_0,i__carry_i_2__0_n_0,i__carry_i_3__0_n_0,i__carry_i_4__0_n_0}));
  CARRY4 \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0 
       (.CI(\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_0 ),
        .CO({\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0_CO_UNCONNECTED [3:1],CONSISTENCY_MATCH_COMB1__0}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0_O_UNCONNECTED [3:0]),
        .S({1'b0,1'b0,1'b0,\RX_CONFIG_REG_reg[13] }));
  LUT3 #(
    .INIT(8'h84)) 
    CONSISTENCY_MATCH_i_1__0
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[15] ),
        .I1(CONSISTENCY_MATCH_COMB1__0),
        .I2(Q[15]),
        .O(CONSISTENCY_MATCH_COMB));
  FDRE #(
    .INIT(1'b0)) 
    CONSISTENCY_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CONSISTENCY_MATCH_COMB),
        .Q(CONSISTENCY_MATCH),
        .R(out));
  LUT6 #(
    .INIT(64'h0010000000000000)) 
    GENERATE_REMOTE_FAULT_i_1__0
       (.I0(START_LINK_TIMER_REG_i_4__0_n_0),
        .I1(STATE[1]),
        .I2(IDLE_MATCH),
        .I3(STATE[3]),
        .I4(STATE[2]),
        .I5(\STATE[2]_i_2__0_n_0 ),
        .O(GENERATE_REMOTE_FAULT0));
  FDRE #(
    .INIT(1'b0)) 
    GENERATE_REMOTE_FAULT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(GENERATE_REMOTE_FAULT0),
        .Q(GENERATE_REMOTE_FAULT),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED),
        .Q(IDLE_INSERTED_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG1),
        .Q(IDLE_INSERTED_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT2 #(
    .INIT(4'h2)) 
    IDLE_INSERTED_REG3_i_1__0
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE_REG2),
        .O(IDLE_INSERTED_REG3_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG3_i_1__0_n_0),
        .Q(IDLE_INSERTED_REG3),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG4_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG3),
        .Q(IDLE_INSERTED_REG4),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT3 #(
    .INIT(8'h40)) 
    IDLE_INSERTED_i_1__0
       (.I0(XMIT_CONFIG_INT),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .O(IDLE_INSERTED0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED0),
        .Q(IDLE_INSERTED),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT5 #(
    .INIT(32'h04FF0400)) 
    IDLE_MATCH_2_i_1__0
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE),
        .I2(IDLE_INSERTED_REG4),
        .I3(RX_IDLE_REG2),
        .I4(IDLE_MATCH_2),
        .O(IDLE_MATCH_2_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_MATCH_2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_MATCH_2_i_1__0_n_0),
        .Q(IDLE_MATCH_2),
        .R(out));
  LUT6 #(
    .INIT(64'h4440FFFF44400000)) 
    IDLE_MATCH_i_1__0
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE),
        .I2(IDLE_MATCH_2),
        .I3(IDLE_REMOVED_REG2),
        .I4(RX_IDLE_REG2),
        .I5(IDLE_MATCH),
        .O(IDLE_MATCH_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_MATCH_i_1__0_n_0),
        .Q(IDLE_MATCH),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED),
        .Q(IDLE_REMOVED_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED_REG1),
        .Q(IDLE_REMOVED_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT3 #(
    .INIT(8'h10)) 
    IDLE_REMOVED_i_1__0
       (.I0(XMIT_CONFIG_INT),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .O(IDLE_REMOVED0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED0),
        .Q(IDLE_REMOVED),
        .R(out));
  LUT6 #(
    .INIT(64'h8888AAAA8880FFF0)) 
    I_i_1__0
       (.I0(STATUS_VECTOR_0_PRE_reg),
        .I1(EVEN_reg),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] ),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ),
        .I4(EVEN_reg_0),
        .I5(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(I0));
  LUT1 #(
    .INIT(2'h1)) 
    \LINK_TIMER[0]_i_1__0 
       (.I0(LINK_TIMER_reg__0__0[0]),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \LINK_TIMER[1]_i_1__0 
       (.I0(LINK_TIMER_reg__0__0[0]),
        .I1(LINK_TIMER_reg__0__0[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \LINK_TIMER[2]_i_1__0 
       (.I0(LINK_TIMER_reg__0__0[1]),
        .I1(LINK_TIMER_reg__0__0[0]),
        .I2(LINK_TIMER_reg__0__0[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \LINK_TIMER[3]_i_1__0 
       (.I0(LINK_TIMER_reg__0__0[2]),
        .I1(LINK_TIMER_reg__0__0[0]),
        .I2(LINK_TIMER_reg__0__0[1]),
        .I3(LINK_TIMER_reg__0__0[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \LINK_TIMER[4]_i_1__0 
       (.I0(LINK_TIMER_reg__0__0[3]),
        .I1(LINK_TIMER_reg__0__0[1]),
        .I2(LINK_TIMER_reg__0__0[0]),
        .I3(LINK_TIMER_reg__0__0[2]),
        .I4(LINK_TIMER_reg__0__0[4]),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \LINK_TIMER[5]_i_1__0 
       (.I0(LINK_TIMER_reg__0__0[4]),
        .I1(LINK_TIMER_reg__0__0[2]),
        .I2(LINK_TIMER_reg__0__0[0]),
        .I3(LINK_TIMER_reg__0__0[1]),
        .I4(LINK_TIMER_reg__0__0[3]),
        .I5(LINK_TIMER_reg__0__0[5]),
        .O(plusOp__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \LINK_TIMER[6]_i_1__0 
       (.I0(\LINK_TIMER[9]_i_3__0_n_0 ),
        .I1(LINK_TIMER_reg__0__0[6]),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \LINK_TIMER[7]_i_1__0 
       (.I0(LINK_TIMER_reg__0__0[6]),
        .I1(\LINK_TIMER[9]_i_3__0_n_0 ),
        .I2(LINK_TIMER_reg__0__0[7]),
        .O(plusOp__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \LINK_TIMER[8]_i_1__0 
       (.I0(\LINK_TIMER[9]_i_3__0_n_0 ),
        .I1(LINK_TIMER_reg__0__0[6]),
        .I2(LINK_TIMER_reg__0__0[7]),
        .I3(LINK_TIMER_reg__0__0[8]),
        .O(plusOp__0[8]));
  LUT4 #(
    .INIT(16'hFFF8)) 
    \LINK_TIMER[9]_i_1__0 
       (.I0(LINK_TIMER_SATURATED),
        .I1(PULSE4096),
        .I2(out),
        .I3(START_LINK_TIMER_REG),
        .O(\LINK_TIMER[9]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \LINK_TIMER[9]_i_2__0 
       (.I0(\LINK_TIMER[9]_i_3__0_n_0 ),
        .I1(LINK_TIMER_reg__0__0[8]),
        .I2(LINK_TIMER_reg__0__0[7]),
        .I3(LINK_TIMER_reg__0__0[6]),
        .I4(LINK_TIMER_reg__0__0[9]),
        .O(plusOp__0[9]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \LINK_TIMER[9]_i_3__0 
       (.I0(LINK_TIMER_reg__0__0[4]),
        .I1(LINK_TIMER_reg__0__0[2]),
        .I2(LINK_TIMER_reg__0__0[0]),
        .I3(LINK_TIMER_reg__0__0[1]),
        .I4(LINK_TIMER_reg__0__0[3]),
        .I5(LINK_TIMER_reg__0__0[5]),
        .O(\LINK_TIMER[9]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFEAEAEAAAAAAAAA)) 
    LINK_TIMER_DONE_i_1__0
       (.I0(LINK_TIMER_DONE_i_2__0_n_0),
        .I1(STATE[1]),
        .I2(\STATE[1]_i_3__0_n_0 ),
        .I3(LINK_TIMER_DONE_i_3__0_n_0),
        .I4(\STATE[3]_i_2__0_n_0 ),
        .I5(LINK_TIMER_DONE_i_4__0_n_0),
        .O(LINK_TIMER_DONE_i_1__0_n_0));
  LUT6 #(
    .INIT(64'hFAEAEAEAAAAAAAAA)) 
    LINK_TIMER_DONE_i_2__0
       (.I0(LINK_TIMER_DONE_i_5__0_n_0),
        .I1(STATE[3]),
        .I2(\STATE[2]_i_5__0_n_0 ),
        .I3(STATE[0]),
        .I4(LINK_TIMER_DONE_i_6__0_n_0),
        .I5(LINK_TIMER_DONE_i_4__0_n_0),
        .O(LINK_TIMER_DONE_i_2__0_n_0));
  LUT6 #(
    .INIT(64'hF0FFC0FFD1D1D1D1)) 
    LINK_TIMER_DONE_i_3__0
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(STATE[0]),
        .I2(\STATE_reg[1]_0 ),
        .I3(LINK_TIMER_DONE),
        .I4(ABILITY_MATCH),
        .I5(STATE[2]),
        .O(LINK_TIMER_DONE_i_3__0_n_0));
  LUT5 #(
    .INIT(32'h00000054)) 
    LINK_TIMER_DONE_i_4__0
       (.I0(START_LINK_TIMER_REG2),
        .I1(LINK_TIMER_SATURATED),
        .I2(LINK_TIMER_DONE),
        .I3(out),
        .I4(START_LINK_TIMER_REG),
        .O(LINK_TIMER_DONE_i_4__0_n_0));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    LINK_TIMER_DONE_i_5__0
       (.I0(LINK_TIMER_DONE_i_4__0_n_0),
        .I1(RX_INVALID),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I4(START_LINK_TIMER_REG_i_5__0_n_0),
        .I5(LINK_TIMER_DONE_i_7__0_n_0),
        .O(LINK_TIMER_DONE_i_5__0_n_0));
  LUT5 #(
    .INIT(32'hFFFF7FFF)) 
    LINK_TIMER_DONE_i_6__0
       (.I0(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I1(CONSISTENCY_MATCH),
        .I2(ABILITY_MATCH),
        .I3(STATE[1]),
        .I4(STATE[2]),
        .O(LINK_TIMER_DONE_i_6__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT5 #(
    .INIT(32'hFF151515)) 
    LINK_TIMER_DONE_i_7__0
       (.I0(STATE[0]),
        .I1(LINK_TIMER_DONE),
        .I2(STATE[2]),
        .I3(ABILITY_MATCH),
        .I4(\STATE_reg[1]_0 ),
        .O(LINK_TIMER_DONE_i_7__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    LINK_TIMER_DONE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LINK_TIMER_DONE_i_1__0_n_0),
        .Q(LINK_TIMER_DONE),
        .R(1'b0));
  CARRY4 LINK_TIMER_SATURATED_COMB0_carry
       (.CI(1'b0),
        .CO({LINK_TIMER_SATURATED_COMB,LINK_TIMER_SATURATED_COMB0_carry_n_1,LINK_TIMER_SATURATED_COMB0_carry_n_2,LINK_TIMER_SATURATED_COMB0_carry_n_3}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_LINK_TIMER_SATURATED_COMB0_carry_O_UNCONNECTED[3:0]),
        .S({LINK_TIMER_SATURATED_COMB0_carry_i_1__0_n_0,LINK_TIMER_SATURATED_COMB0_carry_i_2__0_n_0,LINK_TIMER_SATURATED_COMB0_carry_i_3__0_n_0,LINK_TIMER_SATURATED_COMB0_carry_i_4__0_n_0}));
  LUT1 #(
    .INIT(2'h1)) 
    LINK_TIMER_SATURATED_COMB0_carry_i_1__0
       (.I0(LINK_TIMER_reg__0__0[9]),
        .O(LINK_TIMER_SATURATED_COMB0_carry_i_1__0_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    LINK_TIMER_SATURATED_COMB0_carry_i_2__0
       (.I0(link_timer_value_ch1[8]),
        .I1(LINK_TIMER_reg__0__0[8]),
        .I2(link_timer_value_ch1[7]),
        .I3(LINK_TIMER_reg__0__0[7]),
        .I4(LINK_TIMER_reg__0__0[6]),
        .I5(link_timer_value_ch1[6]),
        .O(LINK_TIMER_SATURATED_COMB0_carry_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    LINK_TIMER_SATURATED_COMB0_carry_i_3__0
       (.I0(link_timer_value_ch1[5]),
        .I1(LINK_TIMER_reg__0__0[5]),
        .I2(link_timer_value_ch1[4]),
        .I3(LINK_TIMER_reg__0__0[4]),
        .I4(LINK_TIMER_reg__0__0[3]),
        .I5(link_timer_value_ch1[3]),
        .O(LINK_TIMER_SATURATED_COMB0_carry_i_3__0_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    LINK_TIMER_SATURATED_COMB0_carry_i_4__0
       (.I0(link_timer_value_ch1[2]),
        .I1(LINK_TIMER_reg__0__0[2]),
        .I2(link_timer_value_ch1[1]),
        .I3(LINK_TIMER_reg__0__0[1]),
        .I4(LINK_TIMER_reg__0__0[0]),
        .I5(link_timer_value_ch1[0]),
        .O(LINK_TIMER_SATURATED_COMB0_carry_i_4__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    LINK_TIMER_SATURATED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LINK_TIMER_SATURATED_COMB),
        .Q(LINK_TIMER_SATURATED),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[0] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[0]),
        .Q(LINK_TIMER_reg__0__0[0]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[1] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[1]),
        .Q(LINK_TIMER_reg__0__0[1]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[2] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[2]),
        .Q(LINK_TIMER_reg__0__0[2]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[3] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[3]),
        .Q(LINK_TIMER_reg__0__0[3]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[4] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[4]),
        .Q(LINK_TIMER_reg__0__0[4]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[5] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[5]),
        .Q(LINK_TIMER_reg__0__0[5]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[6] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[6]),
        .Q(LINK_TIMER_reg__0__0[6]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[7] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[7]),
        .Q(LINK_TIMER_reg__0__0[7]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[8] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[8]),
        .Q(LINK_TIMER_reg__0__0[8]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[9] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[9]),
        .Q(LINK_TIMER_reg__0__0[9]),
        .R(\LINK_TIMER[9]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT4 #(
    .INIT(16'h5515)) 
    \MASK_RUDI_BUFERR_TIMER[0]_i_1__0 
       (.I0(MASK_RUDI_BUFERR_TIMER[0]),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[10]_i_1__0 
       (.I0(plusOp_carry__1_n_6),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[10]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[11]_i_1__0 
       (.I0(plusOp_carry__1_n_5),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[11]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hEFEFEFEFFFEFEFEF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_1__0 
       (.I0(\MASK_RUDI_BUFERR_TIMER[12]_i_3__0_n_0 ),
        .I1(\MASK_RUDI_BUFERR_TIMER[12]_i_4__0_n_0 ),
        .I2(MASK_RUDI_BUFERR_TIMER[0]),
        .I3(data_out),
        .I4(p_0_in),
        .I5(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_2__0 
       (.I0(plusOp_carry__1_n_4),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_3__0 
       (.I0(MASK_RUDI_BUFERR_TIMER[5]),
        .I1(MASK_RUDI_BUFERR_TIMER[6]),
        .I2(MASK_RUDI_BUFERR_TIMER[3]),
        .I3(MASK_RUDI_BUFERR_TIMER[4]),
        .I4(MASK_RUDI_BUFERR_TIMER[2]),
        .I5(MASK_RUDI_BUFERR_TIMER[1]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_4__0 
       (.I0(MASK_RUDI_BUFERR_TIMER[11]),
        .I1(MASK_RUDI_BUFERR_TIMER[12]),
        .I2(MASK_RUDI_BUFERR_TIMER[9]),
        .I3(MASK_RUDI_BUFERR_TIMER[10]),
        .I4(MASK_RUDI_BUFERR_TIMER[8]),
        .I5(MASK_RUDI_BUFERR_TIMER[7]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[1]_i_1__0 
       (.I0(plusOp_carry_n_7),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[2]_i_1__0 
       (.I0(plusOp_carry_n_6),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[3]_i_1__0 
       (.I0(plusOp_carry_n_5),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[4]_i_1__0 
       (.I0(plusOp_carry_n_4),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[4]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[5]_i_1__0 
       (.I0(plusOp_carry__0_n_7),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[5]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[6]_i_1__0 
       (.I0(plusOp_carry__0_n_6),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[6]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[7]_i_1__0 
       (.I0(plusOp_carry__0_n_5),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[7]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[8]_i_1__0 
       (.I0(plusOp_carry__0_n_4),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[8]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[9]_i_1__0 
       (.I0(plusOp_carry__1_n_7),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[9]_i_1__0_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[0] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__0_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[0]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[0]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[10] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__0_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[10]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[10]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[11] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__0_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[11]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[11]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[12] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__0_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[12]_i_2__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[12]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[1] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__0_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[1]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[1]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[2] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__0_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[2]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[2]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[3] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__0_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[3]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[3]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[4] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__0_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[4]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[4]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[5] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__0_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[5]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[5]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[6] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__0_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[6]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[6]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[7] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__0_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[7]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[7]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[8] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__0_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[8]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[8]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[9] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1__0_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[9]_i_1__0_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[9]),
        .S(out));
  LUT5 #(
    .INIT(32'hFF7FFF00)) 
    MASK_RUDI_BUFERR_i_1__0
       (.I0(MASK_RUDI_BUFERR_i_2__0_n_0),
        .I1(MASK_RUDI_BUFERR_i_3__0_n_0),
        .I2(MASK_RUDI_BUFERR_TIMER[0]),
        .I3(MASK_RUDI_BUFERR_TIMER0),
        .I4(MASK_RUDI_BUFERR),
        .O(MASK_RUDI_BUFERR_i_1__0_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    MASK_RUDI_BUFERR_i_2__0
       (.I0(MASK_RUDI_BUFERR_TIMER[3]),
        .I1(MASK_RUDI_BUFERR_TIMER[4]),
        .I2(MASK_RUDI_BUFERR_TIMER[1]),
        .I3(MASK_RUDI_BUFERR_TIMER[2]),
        .I4(MASK_RUDI_BUFERR_TIMER[6]),
        .I5(MASK_RUDI_BUFERR_TIMER[5]),
        .O(MASK_RUDI_BUFERR_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    MASK_RUDI_BUFERR_i_3__0
       (.I0(MASK_RUDI_BUFERR_TIMER[9]),
        .I1(MASK_RUDI_BUFERR_TIMER[10]),
        .I2(MASK_RUDI_BUFERR_TIMER[7]),
        .I3(MASK_RUDI_BUFERR_TIMER[8]),
        .I4(MASK_RUDI_BUFERR_TIMER[12]),
        .I5(MASK_RUDI_BUFERR_TIMER[11]),
        .O(MASK_RUDI_BUFERR_i_3__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MASK_RUDI_BUFERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MASK_RUDI_BUFERR_i_1__0_n_0),
        .Q(MASK_RUDI_BUFERR),
        .R(out));
  LUT6 #(
    .INIT(64'h00000000FFF20000)) 
    MASK_RUDI_CLKCOR_i_1__0
       (.I0(MASK_RUDI_CLKCOR),
        .I1(MASK_RUDI_CLKCOR_i_2__0_n_0),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I4(RXSYNC_STATUS),
        .I5(out),
        .O(MASK_RUDI_CLKCOR_i_1__0_n_0));
  LUT6 #(
    .INIT(64'h4444444440444040)) 
    MASK_RUDI_CLKCOR_i_2__0
       (.I0(RX_INVALID),
        .I1(RX_RUDI_INVALID_REG),
        .I2(RXSYNC_STATUS),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I4(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I5(XMIT_DATA_INT),
        .O(MASK_RUDI_CLKCOR_i_2__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MASK_RUDI_CLKCOR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MASK_RUDI_CLKCOR_i_1__0_n_0),
        .Q(MASK_RUDI_CLKCOR),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h5150505050505000)) 
    MR_AN_COMPLETE_i_1__0
       (.I0(out),
        .I1(STATE[3]),
        .I2(an_interrupt_ch1),
        .I3(STATE[2]),
        .I4(STATE[0]),
        .I5(STATE[1]),
        .O(MR_AN_COMPLETE_i_1__0_n_0));
  FDRE MR_AN_COMPLETE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_COMPLETE_i_1__0_n_0),
        .Q(an_interrupt_ch1),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    MR_AN_ENABLE_CHANGE_i_1__0
       (.I0(MR_AN_ENABLE_REG2),
        .I1(MR_AN_ENABLE_REG1),
        .O(MR_AN_ENABLE_CHANGE0));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_CHANGE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_ENABLE_CHANGE0),
        .Q(MR_AN_ENABLE_CHANGE),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .Q(MR_AN_ENABLE_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_ENABLE_REG1),
        .Q(MR_AN_ENABLE_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MR_LP_ADV_ABILITY_INT[13]_i_1__0 
       (.I0(Q[12]),
        .I1(\MR_LP_ADV_ABILITY_INT[16]_i_2__0_n_0 ),
        .I2(LP_ADV_ABILITY),
        .O(\MR_LP_ADV_ABILITY_INT[13]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MR_LP_ADV_ABILITY_INT[16]_i_1__0 
       (.I0(Q[15]),
        .I1(\MR_LP_ADV_ABILITY_INT[16]_i_2__0_n_0 ),
        .I2(\MR_LP_ADV_ABILITY_INT_reg_n_0_[16] ),
        .O(\MR_LP_ADV_ABILITY_INT[16]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0100000000000000)) 
    \MR_LP_ADV_ABILITY_INT[16]_i_2__0 
       (.I0(PREVIOUS_STATE[3]),
        .I1(out),
        .I2(PREVIOUS_STATE[2]),
        .I3(PREVIOUS_STATE[1]),
        .I4(PREVIOUS_STATE[0]),
        .I5(\SGMII_SPEED[1]_i_2__0_n_0 ),
        .O(\MR_LP_ADV_ABILITY_INT[16]_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\MR_LP_ADV_ABILITY_INT[13]_i_1__0_n_0 ),
        .Q(LP_ADV_ABILITY),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[16] 
       (.C(userclk),
        .CE(1'b1),
        .D(\MR_LP_ADV_ABILITY_INT[16]_i_1__0_n_0 ),
        .Q(\MR_LP_ADV_ABILITY_INT_reg_n_0_[16] ),
        .R(out));
  LUT3 #(
    .INIT(8'hF4)) 
    MR_REMOTE_FAULT_i_1__0
       (.I0(\MR_LP_ADV_ABILITY_INT_reg_n_0_[16] ),
        .I1(GENERATE_REMOTE_FAULT),
        .I2(status_vector_ch1[5]),
        .O(MR_REMOTE_FAULT_i_1__0_n_0));
  FDRE MR_REMOTE_FAULT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_REMOTE_FAULT_i_1__0_n_0),
        .Q(status_vector_ch1[5]),
        .R(out));
  LUT5 #(
    .INIT(32'h0CAE0C0C)) 
    MR_RESTART_AN_INT_i_1__0
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(MR_RESTART_AN_SET_REG1),
        .I2(MR_RESTART_AN_SET_REG2),
        .I3(MR_RESTART_AN_INT_i_2__0_n_0),
        .I4(MR_RESTART_AN_INT),
        .O(MR_RESTART_AN_INT_i_1__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    MR_RESTART_AN_INT_i_2__0
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[3]),
        .I3(STATE[2]),
        .O(MR_RESTART_AN_INT_i_2__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_RESTART_AN_INT_i_1__0_n_0),
        .Q(MR_RESTART_AN_INT),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_SET_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RESTART_AN_SET),
        .Q(MR_RESTART_AN_SET_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_SET_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_RESTART_AN_SET_REG1),
        .Q(MR_RESTART_AN_SET_REG2),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[0]),
        .Q(PREVIOUS_STATE[0]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[1]),
        .Q(PREVIOUS_STATE[1]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[2]),
        .Q(PREVIOUS_STATE[2]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[3]),
        .Q(PREVIOUS_STATE[3]),
        .R(out));
  LUT2 #(
    .INIT(4'h2)) 
    PULSE4096_i_1__0
       (.I0(TIMER4096_MSB_REG),
        .I1(TIMER4096_reg),
        .O(PULSE40960));
  FDRE #(
    .INIT(1'b0)) 
    PULSE4096_reg
       (.C(userclk),
        .CE(1'b1),
        .D(PULSE40960),
        .Q(PULSE4096),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RECEIVED_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID_INT_reg),
        .Q(RECEIVED_IDLE),
        .R(out));
  FDRE RUDI_INVALID_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY[1]),
        .Q(status_vector_ch1[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_CONFIG_REG_NULL_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID_INT_reg_0),
        .Q(\STATE_reg[1]_0 ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[0] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[0]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[10] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[10]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[10] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[11] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[11]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[11] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[12] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[12]),
        .Q(CONFIG_REG_MATCH_reg_0[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[13] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[13]),
        .Q(CONFIG_REG_MATCH_reg_0[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[14] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[14]),
        .Q(p_0_in28_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[15] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[15]),
        .Q(p_0_in0_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[1] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[1]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[1] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[2] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[2]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[2] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[3] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[3]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[3] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[4] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[4]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[4] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[5] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[5]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[5] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[6] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[6]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[6] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[7] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[7]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[7] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[8] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[8]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[8] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[9] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[9]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[9] ),
        .R(SR));
  LUT6 #(
    .INIT(64'h2000200000002000)) 
    \RX_CONFIG_SNAPSHOT[15]_i_1__0 
       (.I0(RX_CONFIG_VALID),
        .I1(ABILITY_MATCH),
        .I2(ABILITY_MATCH_2),
        .I3(CONFIG_REG_MATCH),
        .I4(STATE[0]),
        .I5(\RX_CONFIG_SNAPSHOT[15]_i_2__0_n_0 ),
        .O(RX_CONFIG_SNAPSHOT));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \RX_CONFIG_SNAPSHOT[15]_i_2__0 
       (.I0(STATE[3]),
        .I1(STATE[2]),
        .I2(STATE[1]),
        .O(\RX_CONFIG_SNAPSHOT[15]_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[0] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[0]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[0] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[10] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[10]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[10] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[11] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[11]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[11] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[12] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[12]),
        .Q(CONSISTENCY_MATCH_reg_0[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[13] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[13]),
        .Q(CONSISTENCY_MATCH_reg_0[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[15] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[15]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[15] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[1] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[1]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[1] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[2] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[2]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[2] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[3] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[3]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[3] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[4] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[4]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[4] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[5] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[5]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[5] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[6] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[6]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[6] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[7] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[7]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[7] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[8] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[8]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[8] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[9] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[9]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[9] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_IDLE_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE),
        .Q(RX_IDLE_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_IDLE_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE_REG1),
        .Q(RX_IDLE_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT4 #(
    .INIT(16'h0BFF)) 
    RX_INVALID_i_2__0
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I2(XMIT_DATA_INT),
        .I3(RXSYNC_STATUS),
        .O(RX_INVALID_reg));
  LUT6 #(
    .INIT(64'h1010101010101011)) 
    \RX_RUDI_INVALID_DELAY[0]_i_1__0 
       (.I0(MASK_RUDI_BUFERR),
        .I1(MASK_RUDI_CLKCOR),
        .I2(RX_INVALID),
        .I3(RXSYNC_STATUS),
        .I4(XMIT_DATA_INT),
        .I5(\RX_RUDI_INVALID_DELAY[0]_i_2__0_n_0 ),
        .O(RX_RUDI_INVALID_DELAY0));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \RX_RUDI_INVALID_DELAY[0]_i_2__0 
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .O(\RX_RUDI_INVALID_DELAY[0]_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \RX_RUDI_INVALID_DELAY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY0),
        .Q(RX_RUDI_INVALID_DELAY[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_RUDI_INVALID_DELAY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY[0]),
        .Q(RX_RUDI_INVALID_DELAY[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_RUDI_INVALID_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_INVALID_reg_0),
        .Q(RX_RUDI_INVALID_REG),
        .R(1'b0));
  FDRE SGMII_PHY_STATUS_reg
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(Q[15]),
        .Q(status_vector_ch1[1]),
        .R(out));
  LUT5 #(
    .INIT(32'h10000000)) 
    \SGMII_SPEED[1]_i_1__0 
       (.I0(PREVIOUS_STATE[2]),
        .I1(PREVIOUS_STATE[3]),
        .I2(PREVIOUS_STATE[0]),
        .I3(PREVIOUS_STATE[1]),
        .I4(\SGMII_SPEED[1]_i_2__0_n_0 ),
        .O(MR_PAGE_RX_SET119_out));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \SGMII_SPEED[1]_i_2__0 
       (.I0(STATE[3]),
        .I1(STATE[2]),
        .I2(STATE[1]),
        .I3(STATE[0]),
        .O(\SGMII_SPEED[1]_i_2__0_n_0 ));
  FDRE \SGMII_SPEED_reg[0] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(Q[10]),
        .Q(status_vector_ch1[3]),
        .R(out));
  FDSE \SGMII_SPEED_reg[1] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(Q[11]),
        .Q(status_vector_ch1[4]),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    START_LINK_TIMER_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(START_LINK_TIMER_REG),
        .Q(START_LINK_TIMER_REG2),
        .R(out));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFEEFE)) 
    START_LINK_TIMER_REG_i_1__0
       (.I0(START_LINK_TIMER_REG_i_2__0_n_0),
        .I1(START_LINK_TIMER_REG_i_3__0_n_0),
        .I2(\SGMII_SPEED[1]_i_2__0_n_0 ),
        .I3(START_LINK_TIMER_REG_i_4__0_n_0),
        .I4(START_LINK_TIMER_REG_i_5__0_n_0),
        .I5(START_LINK_TIMER_REG_i_6__0_n_0),
        .O(START_LINK_TIMER));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    START_LINK_TIMER_REG_i_2__0
       (.I0(STATE[0]),
        .I1(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I2(CONSISTENCY_MATCH),
        .I3(ABILITY_MATCH),
        .I4(\STATE_reg[1]_0 ),
        .I5(\RX_CONFIG_SNAPSHOT[15]_i_2__0_n_0 ),
        .O(START_LINK_TIMER_REG_i_2__0_n_0));
  LUT4 #(
    .INIT(16'h1000)) 
    START_LINK_TIMER_REG_i_3__0
       (.I0(MASK_RUDI_BUFERR),
        .I1(MASK_RUDI_CLKCOR),
        .I2(XMIT_CONFIG_INT),
        .I3(RX_RUDI_INVALID),
        .O(START_LINK_TIMER_REG_i_3__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT3 #(
    .INIT(8'h8F)) 
    START_LINK_TIMER_REG_i_4__0
       (.I0(ABILITY_MATCH),
        .I1(\STATE_reg[1]_0 ),
        .I2(LINK_TIMER_DONE),
        .O(START_LINK_TIMER_REG_i_4__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    START_LINK_TIMER_REG_i_5__0
       (.I0(MR_AN_ENABLE_CHANGE),
        .I1(MR_RESTART_AN_INT),
        .I2(AN_SYNC_STATUS),
        .O(START_LINK_TIMER_REG_i_5__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT5 #(
    .INIT(32'h00010000)) 
    START_LINK_TIMER_REG_i_6__0
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .I2(STATE[0]),
        .I3(STATE[1]),
        .I4(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .O(START_LINK_TIMER_REG_i_6__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT5 #(
    .INIT(32'hFFFF000D)) 
    START_LINK_TIMER_REG_i_7__0
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I2(XMIT_DATA_INT),
        .I3(RXSYNC_STATUS),
        .I4(RX_INVALID),
        .O(RX_RUDI_INVALID));
  FDRE #(
    .INIT(1'b0)) 
    START_LINK_TIMER_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(START_LINK_TIMER),
        .Q(START_LINK_TIMER_REG),
        .R(out));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFF8)) 
    \STATE[0]_i_1__0 
       (.I0(\STATE[0]_i_2__0_n_0 ),
        .I1(\STATE[2]_i_2__0_n_0 ),
        .I2(\STATE[0]_i_3__0_n_0 ),
        .I3(\STATE[0]_i_4__0_n_0 ),
        .I4(\STATE[0]_i_5__0_n_0 ),
        .I5(\STATE[0]_i_6__0_n_0 ),
        .O(\STATE[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000570077)) 
    \STATE[0]_i_2__0 
       (.I0(ABILITY_MATCH),
        .I1(STATE[1]),
        .I2(\STATE_reg[1]_0 ),
        .I3(STATE[3]),
        .I4(STATE[2]),
        .I5(LINK_TIMER_DONE),
        .O(\STATE[0]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \STATE[0]_i_3__0 
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(STATE[1]),
        .I2(STATE[0]),
        .I3(STATE[3]),
        .I4(STATE[2]),
        .I5(\STATE[3]_i_2__0_n_0 ),
        .O(\STATE[0]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h0111000000000000)) 
    \STATE[0]_i_4__0 
       (.I0(\RX_CONFIG_SNAPSHOT[15]_i_2__0_n_0 ),
        .I1(\STATE_reg[1]_0 ),
        .I2(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I3(STATE[0]),
        .I4(ABILITY_MATCH),
        .I5(\STATE[2]_i_5__0_n_0 ),
        .O(\STATE[0]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h0808280800000000)) 
    \STATE[0]_i_5__0 
       (.I0(\STATE[2]_i_5__0_n_0 ),
        .I1(STATE[0]),
        .I2(ABILITY_MATCH),
        .I3(NEXT_STATE2),
        .I4(\STATE_reg[1]_0 ),
        .I5(\STATE[0]_i_7__0_n_0 ),
        .O(\STATE[0]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000700000000000)) 
    \STATE[0]_i_6__0 
       (.I0(ABILITY_MATCH),
        .I1(\STATE_reg[1]_0 ),
        .I2(LINK_TIMER_DONE),
        .I3(\STATE[2]_i_8__0_n_0 ),
        .I4(STATE[1]),
        .I5(\STATE[2]_i_5__0_n_0 ),
        .O(\STATE[0]_i_6__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \STATE[0]_i_7__0 
       (.I0(STATE[1]),
        .I1(STATE[3]),
        .O(\STATE[0]_i_7__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFAABAAAAA)) 
    \STATE[1]_i_1__0 
       (.I0(\STATE[1]_i_2__0_n_0 ),
        .I1(\STATE_reg[1]_0 ),
        .I2(STATE[1]),
        .I3(STATE[3]),
        .I4(\STATE[1]_i_3__0_n_0 ),
        .I5(\STATE[1]_i_4__0_n_0 ),
        .O(\STATE[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000002820)) 
    \STATE[1]_i_2__0 
       (.I0(\STATE[2]_i_5__0_n_0 ),
        .I1(STATE[0]),
        .I2(STATE[1]),
        .I3(LINK_TIMER_DONE),
        .I4(STATE[3]),
        .I5(STATE[2]),
        .O(\STATE[1]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \STATE[1]_i_3__0 
       (.I0(\STATE[2]_i_5__0_n_0 ),
        .I1(STATE[0]),
        .O(\STATE[1]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'hF800F800FF00F800)) 
    \STATE[1]_i_4__0 
       (.I0(\STATE[1]_i_5__0_n_0 ),
        .I1(STATE[0]),
        .I2(\STATE[1]_i_6__0_n_0 ),
        .I3(\STATE[2]_i_5__0_n_0 ),
        .I4(\STATE[2]_i_3__0_n_0 ),
        .I5(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .O(\STATE[1]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h0008000800080808)) 
    \STATE[1]_i_5__0 
       (.I0(IDLE_MATCH),
        .I1(LINK_TIMER_DONE),
        .I2(STATE[3]),
        .I3(ABILITY_MATCH),
        .I4(STATE[1]),
        .I5(\STATE_reg[1]_0 ),
        .O(\STATE[1]_i_5__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \STATE[1]_i_6__0 
       (.I0(STATE[3]),
        .I1(STATE[1]),
        .I2(ABILITY_MATCH),
        .O(\STATE[1]_i_6__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF80000000)) 
    \STATE[2]_i_1__0 
       (.I0(\STATE[2]_i_2__0_n_0 ),
        .I1(\STATE[2]_i_3__0_n_0 ),
        .I2(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I3(CONSISTENCY_MATCH),
        .I4(ABILITY_MATCH),
        .I5(\STATE[2]_i_4__0_n_0 ),
        .O(\STATE[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \STATE[2]_i_2__0 
       (.I0(\STATE[2]_i_5__0_n_0 ),
        .I1(STATE[0]),
        .O(\STATE[2]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \STATE[2]_i_3__0 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(\STATE_reg[1]_0 ),
        .O(\STATE[2]_i_3__0_n_0 ));
  LUT6 #(
    .INIT(64'h8888888C00000000)) 
    \STATE[2]_i_4__0 
       (.I0(\STATE[2]_i_6__0_n_0 ),
        .I1(\STATE[2]_i_5__0_n_0 ),
        .I2(STATE[0]),
        .I3(\STATE_reg[1]_0 ),
        .I4(NEXT_STATE2),
        .I5(\STATE[2]_i_8__0_n_0 ),
        .O(\STATE[2]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000AE00)) 
    \STATE[2]_i_5__0 
       (.I0(\STATE[3]_i_5__0_n_0 ),
        .I1(XMIT_DATA),
        .I2(RX_INVALID),
        .I3(AN_SYNC_STATUS),
        .I4(MR_RESTART_AN_INT),
        .I5(MR_AN_ENABLE_CHANGE),
        .O(\STATE[2]_i_5__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT3 #(
    .INIT(8'h1F)) 
    \STATE[2]_i_6__0 
       (.I0(\STATE_reg[1]_0 ),
        .I1(STATE[1]),
        .I2(ABILITY_MATCH),
        .O(\STATE[2]_i_6__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \STATE[2]_i_7__0 
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[11] ),
        .I1(TOGGLE_RX),
        .O(NEXT_STATE2));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \STATE[2]_i_8__0 
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .O(\STATE[2]_i_8__0_n_0 ));
  LUT6 #(
    .INIT(64'h00880088F0FF0088)) 
    \STATE[3]_i_1__0 
       (.I0(\STATE[3]_i_2__0_n_0 ),
        .I1(STATE[3]),
        .I2(\STATE[3]_i_3__0_n_0 ),
        .I3(\STATE[3]_i_4__0_n_0 ),
        .I4(AN_SYNC_STATUS),
        .I5(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .O(\STATE[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000AE00)) 
    \STATE[3]_i_2__0 
       (.I0(\STATE[3]_i_5__0_n_0 ),
        .I1(XMIT_DATA_INT),
        .I2(RX_INVALID),
        .I3(AN_SYNC_STATUS),
        .I4(MR_RESTART_AN_INT),
        .I5(MR_AN_ENABLE_CHANGE),
        .O(\STATE[3]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF010000)) 
    \STATE[3]_i_3__0 
       (.I0(XMIT_DATA_INT),
        .I1(RXSYNC_STATUS),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I3(RX_INVALID),
        .I4(\STATE[3]_i_6__0_n_0 ),
        .I5(\STATE[3]_i_7__0_n_0 ),
        .O(\STATE[3]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \STATE[3]_i_4__0 
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[2]),
        .O(\STATE[3]_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT5 #(
    .INIT(32'hFDFDFFFD)) 
    \STATE[3]_i_5__0 
       (.I0(XMIT_CONFIG_INT),
        .I1(MASK_RUDI_CLKCOR),
        .I2(MASK_RUDI_BUFERR),
        .I3(RXSYNC_STATUS),
        .I4(RX_INVALID),
        .O(\STATE[3]_i_5__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \STATE[3]_i_6__0 
       (.I0(XMIT_CONFIG_INT),
        .I1(MASK_RUDI_CLKCOR),
        .I2(MASK_RUDI_BUFERR),
        .O(\STATE[3]_i_6__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \STATE[3]_i_7__0 
       (.I0(MR_RESTART_AN_INT),
        .I1(MR_AN_ENABLE_CHANGE),
        .O(\STATE[3]_i_7__0_n_0 ));
  FDRE \STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[0]_i_1__0_n_0 ),
        .Q(STATE[0]),
        .R(out));
  FDRE \STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[1]_i_1__0_n_0 ),
        .Q(STATE[1]),
        .R(out));
  FDRE \STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[2]_i_1__0_n_0 ),
        .Q(STATE[2]),
        .R(out));
  FDRE \STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[3]_i_1__0_n_0 ),
        .Q(STATE[3]),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT4 #(
    .INIT(16'hAE00)) 
    STATUS_VECTOR_0_PRE_i_1__0
       (.I0(XMIT_DATA_INT),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I3(RXSYNC_STATUS),
        .O(STATUS_VECTOR_0_PRE_reg));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT4 #(
    .INIT(16'hF7F0)) 
    SYNC_STATUS_HELD_i_1__0
       (.I0(LINK_TIMER_SATURATED),
        .I1(PULSE4096),
        .I2(RXSYNC_STATUS),
        .I3(SYNC_STATUS_HELD),
        .O(SYNC_STATUS_HELD_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_HELD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_HELD_i_1__0_n_0),
        .Q(SYNC_STATUS_HELD),
        .R(out));
  LUT1 #(
    .INIT(2'h1)) 
    \TIMER4096[0]_i_2__0 
       (.I0(\TIMER4096_reg_n_0_[0] ),
        .O(\TIMER4096[0]_i_2__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    TIMER4096_MSB_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TIMER4096_reg),
        .Q(TIMER4096_MSB_REG),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[0]_i_1__0_n_7 ),
        .Q(\TIMER4096_reg_n_0_[0] ),
        .R(out));
  CARRY4 \TIMER4096_reg[0]_i_1__0 
       (.CI(1'b0),
        .CO({\TIMER4096_reg[0]_i_1__0_n_0 ,\TIMER4096_reg[0]_i_1__0_n_1 ,\TIMER4096_reg[0]_i_1__0_n_2 ,\TIMER4096_reg[0]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\TIMER4096_reg[0]_i_1__0_n_4 ,\TIMER4096_reg[0]_i_1__0_n_5 ,\TIMER4096_reg[0]_i_1__0_n_6 ,\TIMER4096_reg[0]_i_1__0_n_7 }),
        .S({\TIMER4096_reg_n_0_[3] ,\TIMER4096_reg_n_0_[2] ,\TIMER4096_reg_n_0_[1] ,\TIMER4096[0]_i_2__0_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[8]_i_1__0_n_5 ),
        .Q(\TIMER4096_reg_n_0_[10] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[8]_i_1__0_n_4 ),
        .Q(TIMER4096_reg),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[0]_i_1__0_n_6 ),
        .Q(\TIMER4096_reg_n_0_[1] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[0]_i_1__0_n_5 ),
        .Q(\TIMER4096_reg_n_0_[2] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[0]_i_1__0_n_4 ),
        .Q(\TIMER4096_reg_n_0_[3] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[4]_i_1__0_n_7 ),
        .Q(\TIMER4096_reg_n_0_[4] ),
        .R(out));
  CARRY4 \TIMER4096_reg[4]_i_1__0 
       (.CI(\TIMER4096_reg[0]_i_1__0_n_0 ),
        .CO({\TIMER4096_reg[4]_i_1__0_n_0 ,\TIMER4096_reg[4]_i_1__0_n_1 ,\TIMER4096_reg[4]_i_1__0_n_2 ,\TIMER4096_reg[4]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\TIMER4096_reg[4]_i_1__0_n_4 ,\TIMER4096_reg[4]_i_1__0_n_5 ,\TIMER4096_reg[4]_i_1__0_n_6 ,\TIMER4096_reg[4]_i_1__0_n_7 }),
        .S({\TIMER4096_reg_n_0_[7] ,\TIMER4096_reg_n_0_[6] ,\TIMER4096_reg_n_0_[5] ,\TIMER4096_reg_n_0_[4] }));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[4]_i_1__0_n_6 ),
        .Q(\TIMER4096_reg_n_0_[5] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[4]_i_1__0_n_5 ),
        .Q(\TIMER4096_reg_n_0_[6] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[4]_i_1__0_n_4 ),
        .Q(\TIMER4096_reg_n_0_[7] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[8]_i_1__0_n_7 ),
        .Q(\TIMER4096_reg_n_0_[8] ),
        .R(out));
  CARRY4 \TIMER4096_reg[8]_i_1__0 
       (.CI(\TIMER4096_reg[4]_i_1__0_n_0 ),
        .CO({\NLW_TIMER4096_reg[8]_i_1__0_CO_UNCONNECTED [3],\TIMER4096_reg[8]_i_1__0_n_1 ,\TIMER4096_reg[8]_i_1__0_n_2 ,\TIMER4096_reg[8]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\TIMER4096_reg[8]_i_1__0_n_4 ,\TIMER4096_reg[8]_i_1__0_n_5 ,\TIMER4096_reg[8]_i_1__0_n_6 ,\TIMER4096_reg[8]_i_1__0_n_7 }),
        .S({TIMER4096_reg,\TIMER4096_reg_n_0_[10] ,\TIMER4096_reg_n_0_[9] ,\TIMER4096_reg_n_0_[8] }));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[8]_i_1__0_n_6 ),
        .Q(\TIMER4096_reg_n_0_[9] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    TOGGLE_RX_reg
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(Q[11]),
        .Q(TOGGLE_RX),
        .R(out));
  LUT6 #(
    .INIT(64'h4444FFF4EEEE000E)) 
    TOGGLE_TX_i_1__0
       (.I0(STATE[2]),
        .I1(an_adv_config_vector_ch1),
        .I2(STATE[0]),
        .I3(\RX_CONFIG_SNAPSHOT[15]_i_2__0_n_0 ),
        .I4(MR_PAGE_RX_SET119_out),
        .I5(TOGGLE_TX),
        .O(TOGGLE_TX_i_1__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    TOGGLE_TX_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TOGGLE_TX_i_1__0_n_0),
        .Q(TOGGLE_TX),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT5 #(
    .INIT(32'hFFDE0010)) 
    \TX_CONFIG_REG_INT[0]_i_1__0 
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .I2(STATE[1]),
        .I3(STATE[0]),
        .I4(D[0]),
        .O(\TX_CONFIG_REG_INT[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF8FC00000800)) 
    \TX_CONFIG_REG_INT[11]_i_1__0 
       (.I0(TOGGLE_TX),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[1]),
        .I4(STATE[0]),
        .I5(D[1]),
        .O(\TX_CONFIG_REG_INT[11]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT5 #(
    .INIT(32'hFFBA0008)) 
    \TX_CONFIG_REG_INT[14]_i_1__0 
       (.I0(STATE[0]),
        .I1(STATE[1]),
        .I2(STATE[2]),
        .I3(STATE[3]),
        .I4(D[2]),
        .O(\TX_CONFIG_REG_INT[14]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TX_CONFIG_REG_INT[0]_i_1__0_n_0 ),
        .Q(D[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TX_CONFIG_REG_INT[11]_i_1__0_n_0 ),
        .Q(D[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[14] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TX_CONFIG_REG_INT[14]_i_1__0_n_0 ),
        .Q(D[2]),
        .R(out));
  LUT6 #(
    .INIT(64'hEEEEEEEEEEEEEEFE)) 
    XMIT_CONFIG_INT_i_1__0
       (.I0(out),
        .I1(XMIT_CONFIG_INT_i_2__2_n_0),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I3(STATE[1]),
        .I4(STATE[0]),
        .I5(XMIT_CONFIG_INT_i_3__0_n_0),
        .O(XMIT_CONFIG_INT_i_1__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT3 #(
    .INIT(8'h8A)) 
    XMIT_CONFIG_INT_i_2__1
       (.I0(XMIT_CONFIG_INT),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .O(XMIT_CONFIG_INT_reg_0));
  LUT6 #(
    .INIT(64'hAAAA8AA2AAAA8AA0)) 
    XMIT_CONFIG_INT_i_2__2
       (.I0(XMIT_CONFIG_INT),
        .I1(STATE[3]),
        .I2(STATE[2]),
        .I3(STATE[0]),
        .I4(STATE[1]),
        .I5(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .O(XMIT_CONFIG_INT_i_2__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT2 #(
    .INIT(4'hE)) 
    XMIT_CONFIG_INT_i_3__0
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .O(XMIT_CONFIG_INT_i_3__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    XMIT_CONFIG_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(XMIT_CONFIG_INT_i_1__0_n_0),
        .Q(XMIT_CONFIG_INT),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT3 #(
    .INIT(8'hF4)) 
    XMIT_DATA_INT_i_1__1
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I2(XMIT_DATA_INT),
        .O(XMIT_DATA));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT4 #(
    .INIT(16'h2004)) 
    XMIT_DATA_INT_i_1__2
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .I2(STATE[0]),
        .I3(STATE[1]),
        .O(XMIT_DATA_INT0));
  FDRE #(
    .INIT(1'b0)) 
    XMIT_DATA_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(XMIT_DATA_INT0),
        .Q(XMIT_DATA_INT),
        .R(out));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_1__0
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[11] ),
        .I1(Q[11]),
        .I2(\RX_CONFIG_SNAPSHOT_reg_n_0_[10] ),
        .I3(Q[10]),
        .I4(Q[9]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[9] ),
        .O(i__carry_i_1__0_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_2__0
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[8] ),
        .I1(Q[8]),
        .I2(\RX_CONFIG_SNAPSHOT_reg_n_0_[7] ),
        .I3(Q[7]),
        .I4(Q[6]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[6] ),
        .O(i__carry_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_3__0
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[5] ),
        .I1(Q[5]),
        .I2(\RX_CONFIG_SNAPSHOT_reg_n_0_[4] ),
        .I3(Q[4]),
        .I4(Q[3]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[3] ),
        .O(i__carry_i_3__0_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_4__0
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[2] ),
        .I1(Q[2]),
        .I2(\RX_CONFIG_SNAPSHOT_reg_n_0_[1] ),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[0] ),
        .O(i__carry_i_4__0_n_0));
  CARRY4 plusOp_carry
       (.CI(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3}),
        .CYINIT(MASK_RUDI_BUFERR_TIMER[0]),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({plusOp_carry_n_4,plusOp_carry_n_5,plusOp_carry_n_6,plusOp_carry_n_7}),
        .S(MASK_RUDI_BUFERR_TIMER[4:1]));
  CARRY4 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CO({plusOp_carry__0_n_0,plusOp_carry__0_n_1,plusOp_carry__0_n_2,plusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({plusOp_carry__0_n_4,plusOp_carry__0_n_5,plusOp_carry__0_n_6,plusOp_carry__0_n_7}),
        .S(MASK_RUDI_BUFERR_TIMER[8:5]));
  CARRY4 plusOp_carry__1
       (.CI(plusOp_carry__0_n_0),
        .CO({NLW_plusOp_carry__1_CO_UNCONNECTED[3],plusOp_carry__1_n_1,plusOp_carry__1_n_2,plusOp_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({plusOp_carry__1_n_4,plusOp_carry__1_n_5,plusOp_carry__1_n_6,plusOp_carry__1_n_7}),
        .S(MASK_RUDI_BUFERR_TIMER[12:9]));
endmodule

(* ORIG_REF_NAME = "AUTO_NEG" *) 
module qsgmii_1218_AUTO_NEG_152
   (status_vector_ch0,
    MASK_RUDI_BUFERR,
    RECEIVED_IDLE,
    \STATE_reg[1]_0 ,
    an_interrupt_ch0,
    XMIT_CONFIG_INT_reg_0,
    RX_INVALID_reg,
    I0,
    STATUS_VECTOR_0_PRE_reg,
    XMIT_DATA,
    LP_ADV_ABILITY,
    D,
    CONFIG_REG_MATCH_reg_0,
    CONSISTENCY_MATCH_reg_0,
    out,
    userclk,
    Q,
    BASEX_REMOTE_FAULT_RSLVD,
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ,
    RESTART_AN_SET,
    RX_IDLE,
    RX_INVALID_reg_0,
    RX_CONFIG_VALID_INT_reg,
    RX_CONFIG_VALID_INT_reg_0,
    S,
    \RX_CONFIG_REG_reg[13] ,
    data_out,
    p_0_in,
    an_adv_config_vector_ch0,
    MASK_RUDI_BUFERR_TIMER0,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ,
    RXSYNC_STATUS,
    RX_CONFIG_VALID,
    ACKNOWLEDGE_MATCH_3,
    SR,
    RX_INVALID,
    EVEN_reg,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ,
    EVEN_reg_0,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ,
    link_timer_value_ch0);
  output [5:0]status_vector_ch0;
  output MASK_RUDI_BUFERR;
  output RECEIVED_IDLE;
  output \STATE_reg[1]_0 ;
  output an_interrupt_ch0;
  output XMIT_CONFIG_INT_reg_0;
  output RX_INVALID_reg;
  output I0;
  output STATUS_VECTOR_0_PRE_reg;
  output XMIT_DATA;
  output [0:0]LP_ADV_ABILITY;
  output [2:0]D;
  output [1:0]CONFIG_REG_MATCH_reg_0;
  output [1:0]CONSISTENCY_MATCH_reg_0;
  input out;
  input userclk;
  input [15:0]Q;
  input [0:0]BASEX_REMOTE_FAULT_RSLVD;
  input [2:0]\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ;
  input RESTART_AN_SET;
  input RX_IDLE;
  input RX_INVALID_reg_0;
  input RX_CONFIG_VALID_INT_reg;
  input RX_CONFIG_VALID_INT_reg_0;
  input [0:0]S;
  input [0:0]\RX_CONFIG_REG_reg[13] ;
  input data_out;
  input p_0_in;
  input [0:0]an_adv_config_vector_ch0;
  input MASK_RUDI_BUFERR_TIMER0;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  input RXSYNC_STATUS;
  input RX_CONFIG_VALID;
  input ACKNOWLEDGE_MATCH_3;
  input [0:0]SR;
  input RX_INVALID;
  input EVEN_reg;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] ;
  input [0:0]\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ;
  input EVEN_reg_0;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  input [8:0]link_timer_value_ch0;

  wire ABILITY_MATCH;
  wire ABILITY_MATCH_2;
  wire ABILITY_MATCH_2_i_1_n_0;
  wire ABILITY_MATCH_i_1_n_0;
  wire ACKNOWLEDGE_MATCH_2;
  wire ACKNOWLEDGE_MATCH_2_i_1_n_0;
  wire ACKNOWLEDGE_MATCH_3;
  wire ACKNOWLEDGE_MATCH_3_i_1_n_0;
  wire ACKNOWLEDGE_MATCH_3_reg_n_0;
  wire AN_SYNC_STATUS;
  wire AN_SYNC_STATUS_i_1_n_0;
  wire [0:0]BASEX_REMOTE_FAULT_RSLVD;
  wire CONFIG_REG_MATCH;
  wire CONFIG_REG_MATCH_COMB;
  wire CONFIG_REG_MATCH_COMB2_carry__0_n_3;
  wire CONFIG_REG_MATCH_COMB2_carry_i_1_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_i_2_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_i_3_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_i_4_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_n_0;
  wire CONFIG_REG_MATCH_COMB2_carry_n_1;
  wire CONFIG_REG_MATCH_COMB2_carry_n_2;
  wire CONFIG_REG_MATCH_COMB2_carry_n_3;
  wire [1:0]CONFIG_REG_MATCH_reg_0;
  wire CONSISTENCY_MATCH;
  wire CONSISTENCY_MATCH_COMB;
  wire CONSISTENCY_MATCH_COMB1__0;
  wire \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_0 ;
  wire \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_1 ;
  wire \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_2 ;
  wire \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_3 ;
  wire [1:0]CONSISTENCY_MATCH_reg_0;
  wire [2:0]D;
  wire EVEN_reg;
  wire EVEN_reg_0;
  wire GENERATE_REMOTE_FAULT;
  wire GENERATE_REMOTE_FAULT0;
  wire I0;
  wire IDLE_INSERTED;
  wire IDLE_INSERTED0;
  wire IDLE_INSERTED_REG1;
  wire IDLE_INSERTED_REG2;
  wire IDLE_INSERTED_REG3;
  wire IDLE_INSERTED_REG3_i_1_n_0;
  wire IDLE_INSERTED_REG4;
  wire IDLE_MATCH;
  wire IDLE_MATCH_2;
  wire IDLE_MATCH_2_i_1_n_0;
  wire IDLE_MATCH_i_1_n_0;
  wire IDLE_REMOVED;
  wire IDLE_REMOVED0;
  wire IDLE_REMOVED_REG1;
  wire IDLE_REMOVED_REG2;
  wire \LINK_TIMER[9]_i_1_n_0 ;
  wire \LINK_TIMER[9]_i_3_n_0 ;
  wire LINK_TIMER_DONE;
  wire LINK_TIMER_DONE_i_1_n_0;
  wire LINK_TIMER_DONE_i_2_n_0;
  wire LINK_TIMER_DONE_i_3_n_0;
  wire LINK_TIMER_DONE_i_4_n_0;
  wire LINK_TIMER_DONE_i_5_n_0;
  wire LINK_TIMER_DONE_i_6_n_0;
  wire LINK_TIMER_DONE_i_7_n_0;
  wire LINK_TIMER_SATURATED;
  wire LINK_TIMER_SATURATED_COMB;
  wire LINK_TIMER_SATURATED_COMB0_carry_i_1_n_0;
  wire LINK_TIMER_SATURATED_COMB0_carry_i_2_n_0;
  wire LINK_TIMER_SATURATED_COMB0_carry_i_3_n_0;
  wire LINK_TIMER_SATURATED_COMB0_carry_i_4_n_0;
  wire LINK_TIMER_SATURATED_COMB0_carry_n_1;
  wire LINK_TIMER_SATURATED_COMB0_carry_n_2;
  wire LINK_TIMER_SATURATED_COMB0_carry_n_3;
  wire [9:0]LINK_TIMER_reg__0;
  wire [0:0]LP_ADV_ABILITY;
  wire MASK_RUDI_BUFERR;
  wire [12:0]MASK_RUDI_BUFERR_TIMER;
  wire MASK_RUDI_BUFERR_TIMER0;
  wire \MASK_RUDI_BUFERR_TIMER[0]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[10]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[11]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_2_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_3_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[12]_i_4_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[1]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[2]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[3]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[4]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[5]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[6]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[7]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[8]_i_1_n_0 ;
  wire \MASK_RUDI_BUFERR_TIMER[9]_i_1_n_0 ;
  wire MASK_RUDI_BUFERR_i_1_n_0;
  wire MASK_RUDI_BUFERR_i_2_n_0;
  wire MASK_RUDI_BUFERR_i_3_n_0;
  wire MASK_RUDI_CLKCOR;
  wire MASK_RUDI_CLKCOR_i_1_n_0;
  wire MASK_RUDI_CLKCOR_i_2_n_0;
  wire MR_AN_COMPLETE_i_1_n_0;
  wire MR_AN_ENABLE_CHANGE;
  wire MR_AN_ENABLE_CHANGE0;
  wire MR_AN_ENABLE_REG1;
  wire MR_AN_ENABLE_REG2;
  wire \MR_LP_ADV_ABILITY_INT[13]_i_1_n_0 ;
  wire \MR_LP_ADV_ABILITY_INT[16]_i_1_n_0 ;
  wire \MR_LP_ADV_ABILITY_INT[16]_i_2_n_0 ;
  wire \MR_LP_ADV_ABILITY_INT_reg_n_0_[16] ;
  wire MR_PAGE_RX_SET119_out;
  wire MR_REMOTE_FAULT_i_1_n_0;
  wire MR_RESTART_AN_INT;
  wire MR_RESTART_AN_INT_i_1_n_0;
  wire MR_RESTART_AN_INT_i_2_n_0;
  wire MR_RESTART_AN_SET_REG1;
  wire MR_RESTART_AN_SET_REG2;
  wire NEXT_STATE2;
  wire [2:0]\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ;
  wire [3:0]PREVIOUS_STATE;
  wire PULSE4096;
  wire PULSE40960;
  wire [15:0]Q;
  wire RECEIVED_IDLE;
  wire RESTART_AN_SET;
  wire RXSYNC_STATUS;
  wire \RX_CONFIG_REG_REG_reg_n_0_[0] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[10] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[11] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[1] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[2] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[3] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[4] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[5] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[6] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[7] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[8] ;
  wire \RX_CONFIG_REG_REG_reg_n_0_[9] ;
  wire [0:0]\RX_CONFIG_REG_reg[13] ;
  wire RX_CONFIG_SNAPSHOT;
  wire \RX_CONFIG_SNAPSHOT[15]_i_2_n_0 ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[0] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[10] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[11] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[15] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[1] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[2] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[3] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[4] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[5] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[6] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[7] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[8] ;
  wire \RX_CONFIG_SNAPSHOT_reg_n_0_[9] ;
  wire RX_CONFIG_VALID;
  wire RX_CONFIG_VALID_INT_reg;
  wire RX_CONFIG_VALID_INT_reg_0;
  wire RX_IDLE;
  wire RX_IDLE_REG1;
  wire RX_IDLE_REG2;
  wire RX_INVALID;
  wire RX_INVALID_reg;
  wire RX_INVALID_reg_0;
  wire RX_RUDI_INVALID;
  wire [1:0]RX_RUDI_INVALID_DELAY;
  wire RX_RUDI_INVALID_DELAY0;
  wire \RX_RUDI_INVALID_DELAY[0]_i_2_n_0 ;
  wire RX_RUDI_INVALID_REG;
  wire [0:0]S;
  wire \SGMII_SPEED[1]_i_2_n_0 ;
  wire [0:0]SR;
  wire START_LINK_TIMER;
  wire START_LINK_TIMER_REG;
  wire START_LINK_TIMER_REG2;
  wire START_LINK_TIMER_REG_i_2_n_0;
  wire START_LINK_TIMER_REG_i_3_n_0;
  wire START_LINK_TIMER_REG_i_4_n_0;
  wire START_LINK_TIMER_REG_i_5_n_0;
  wire START_LINK_TIMER_REG_i_6_n_0;
  wire [3:0]STATE;
  wire \STATE[0]_i_1_n_0 ;
  wire \STATE[0]_i_2_n_0 ;
  wire \STATE[0]_i_3_n_0 ;
  wire \STATE[0]_i_4_n_0 ;
  wire \STATE[0]_i_5_n_0 ;
  wire \STATE[0]_i_6_n_0 ;
  wire \STATE[0]_i_7_n_0 ;
  wire \STATE[1]_i_1_n_0 ;
  wire \STATE[1]_i_2_n_0 ;
  wire \STATE[1]_i_3_n_0 ;
  wire \STATE[1]_i_4_n_0 ;
  wire \STATE[1]_i_5_n_0 ;
  wire \STATE[1]_i_6_n_0 ;
  wire \STATE[2]_i_1_n_0 ;
  wire \STATE[2]_i_2_n_0 ;
  wire \STATE[2]_i_3_n_0 ;
  wire \STATE[2]_i_4_n_0 ;
  wire \STATE[2]_i_5_n_0 ;
  wire \STATE[2]_i_6_n_0 ;
  wire \STATE[2]_i_8_n_0 ;
  wire \STATE[3]_i_1_n_0 ;
  wire \STATE[3]_i_2_n_0 ;
  wire \STATE[3]_i_3_n_0 ;
  wire \STATE[3]_i_4_n_0 ;
  wire \STATE[3]_i_5_n_0 ;
  wire \STATE[3]_i_6_n_0 ;
  wire \STATE[3]_i_7_n_0 ;
  wire \STATE_reg[1]_0 ;
  wire STATUS_VECTOR_0_PRE_reg;
  wire SYNC_STATUS_HELD;
  wire SYNC_STATUS_HELD_i_1_n_0;
  wire \TIMER4096[0]_i_2_n_0 ;
  wire TIMER4096_MSB_REG;
  wire [11:11]TIMER4096_reg;
  wire \TIMER4096_reg[0]_i_1_n_0 ;
  wire \TIMER4096_reg[0]_i_1_n_1 ;
  wire \TIMER4096_reg[0]_i_1_n_2 ;
  wire \TIMER4096_reg[0]_i_1_n_3 ;
  wire \TIMER4096_reg[0]_i_1_n_4 ;
  wire \TIMER4096_reg[0]_i_1_n_5 ;
  wire \TIMER4096_reg[0]_i_1_n_6 ;
  wire \TIMER4096_reg[0]_i_1_n_7 ;
  wire \TIMER4096_reg[4]_i_1_n_0 ;
  wire \TIMER4096_reg[4]_i_1_n_1 ;
  wire \TIMER4096_reg[4]_i_1_n_2 ;
  wire \TIMER4096_reg[4]_i_1_n_3 ;
  wire \TIMER4096_reg[4]_i_1_n_4 ;
  wire \TIMER4096_reg[4]_i_1_n_5 ;
  wire \TIMER4096_reg[4]_i_1_n_6 ;
  wire \TIMER4096_reg[4]_i_1_n_7 ;
  wire \TIMER4096_reg[8]_i_1_n_1 ;
  wire \TIMER4096_reg[8]_i_1_n_2 ;
  wire \TIMER4096_reg[8]_i_1_n_3 ;
  wire \TIMER4096_reg[8]_i_1_n_4 ;
  wire \TIMER4096_reg[8]_i_1_n_5 ;
  wire \TIMER4096_reg[8]_i_1_n_6 ;
  wire \TIMER4096_reg[8]_i_1_n_7 ;
  wire \TIMER4096_reg_n_0_[0] ;
  wire \TIMER4096_reg_n_0_[10] ;
  wire \TIMER4096_reg_n_0_[1] ;
  wire \TIMER4096_reg_n_0_[2] ;
  wire \TIMER4096_reg_n_0_[3] ;
  wire \TIMER4096_reg_n_0_[4] ;
  wire \TIMER4096_reg_n_0_[5] ;
  wire \TIMER4096_reg_n_0_[6] ;
  wire \TIMER4096_reg_n_0_[7] ;
  wire \TIMER4096_reg_n_0_[8] ;
  wire \TIMER4096_reg_n_0_[9] ;
  wire TOGGLE_RX;
  wire TOGGLE_TX;
  wire TOGGLE_TX_i_1_n_0;
  wire \TX_CONFIG_REG_INT[0]_i_1_n_0 ;
  wire \TX_CONFIG_REG_INT[11]_i_1_n_0 ;
  wire \TX_CONFIG_REG_INT[14]_i_1_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] ;
  wire [0:0]\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_i_1_n_0;
  wire XMIT_CONFIG_INT_i_2__0_n_0;
  wire XMIT_CONFIG_INT_i_3_n_0;
  wire XMIT_CONFIG_INT_reg_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire XMIT_DATA_INT0;
  wire [0:0]an_adv_config_vector_ch0;
  wire an_interrupt_ch0;
  wire data_out;
  wire i__carry_i_1_n_0;
  wire i__carry_i_2_n_0;
  wire i__carry_i_3_n_0;
  wire i__carry_i_4_n_0;
  wire [8:0]link_timer_value_ch0;
  wire out;
  wire p_0_in;
  wire p_0_in0_in;
  wire p_0_in28_in;
  wire [9:0]plusOp__0;
  wire plusOp_carry__0_n_0;
  wire plusOp_carry__0_n_1;
  wire plusOp_carry__0_n_2;
  wire plusOp_carry__0_n_3;
  wire plusOp_carry__0_n_4;
  wire plusOp_carry__0_n_5;
  wire plusOp_carry__0_n_6;
  wire plusOp_carry__0_n_7;
  wire plusOp_carry__1_n_1;
  wire plusOp_carry__1_n_2;
  wire plusOp_carry__1_n_3;
  wire plusOp_carry__1_n_4;
  wire plusOp_carry__1_n_5;
  wire plusOp_carry__1_n_6;
  wire plusOp_carry__1_n_7;
  wire plusOp_carry_n_0;
  wire plusOp_carry_n_1;
  wire plusOp_carry_n_2;
  wire plusOp_carry_n_3;
  wire plusOp_carry_n_4;
  wire plusOp_carry_n_5;
  wire plusOp_carry_n_6;
  wire plusOp_carry_n_7;
  wire [5:0]status_vector_ch0;
  wire userclk;
  wire [3:0]NLW_CONFIG_REG_MATCH_COMB2_carry_O_UNCONNECTED;
  wire [3:1]NLW_CONFIG_REG_MATCH_COMB2_carry__0_CO_UNCONNECTED;
  wire [3:0]NLW_CONFIG_REG_MATCH_COMB2_carry__0_O_UNCONNECTED;
  wire [3:0]\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_O_UNCONNECTED ;
  wire [3:1]\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0_CO_UNCONNECTED ;
  wire [3:0]\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0_O_UNCONNECTED ;
  wire [3:0]NLW_LINK_TIMER_SATURATED_COMB0_carry_O_UNCONNECTED;
  wire [3:3]\NLW_TIMER4096_reg[8]_i_1_CO_UNCONNECTED ;
  wire [3:3]NLW_plusOp_carry__1_CO_UNCONNECTED;

  LUT6 #(
    .INIT(64'h00000000000000E2)) 
    ABILITY_MATCH_2_i_1
       (.I0(ABILITY_MATCH_2),
        .I1(RX_CONFIG_VALID),
        .I2(CONFIG_REG_MATCH_COMB),
        .I3(MASK_RUDI_BUFERR),
        .I4(RX_IDLE),
        .I5(out),
        .O(ABILITY_MATCH_2_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ABILITY_MATCH_2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ABILITY_MATCH_2_i_1_n_0),
        .Q(ABILITY_MATCH_2),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0050004400000044)) 
    ABILITY_MATCH_i_1
       (.I0(SR),
        .I1(ABILITY_MATCH),
        .I2(ABILITY_MATCH_2),
        .I3(MASK_RUDI_BUFERR),
        .I4(RX_CONFIG_VALID),
        .I5(CONFIG_REG_MATCH_COMB),
        .O(ABILITY_MATCH_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ABILITY_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ABILITY_MATCH_i_1_n_0),
        .Q(ABILITY_MATCH),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000000000E222)) 
    ACKNOWLEDGE_MATCH_2_i_1
       (.I0(ACKNOWLEDGE_MATCH_2),
        .I1(RX_CONFIG_VALID),
        .I2(Q[14]),
        .I3(p_0_in28_in),
        .I4(MASK_RUDI_BUFERR),
        .I5(SR),
        .O(ACKNOWLEDGE_MATCH_2_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ACKNOWLEDGE_MATCH_2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ACKNOWLEDGE_MATCH_2_i_1_n_0),
        .Q(ACKNOWLEDGE_MATCH_2),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h00000000E2222222)) 
    ACKNOWLEDGE_MATCH_3_i_1
       (.I0(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I1(RX_CONFIG_VALID),
        .I2(ACKNOWLEDGE_MATCH_2),
        .I3(p_0_in28_in),
        .I4(Q[14]),
        .I5(ACKNOWLEDGE_MATCH_3),
        .O(ACKNOWLEDGE_MATCH_3_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    ACKNOWLEDGE_MATCH_3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ACKNOWLEDGE_MATCH_3_i_1_n_0),
        .Q(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT5 #(
    .INIT(32'hFFBFFF80)) 
    AN_SYNC_STATUS_i_1
       (.I0(SYNC_STATUS_HELD),
        .I1(LINK_TIMER_SATURATED),
        .I2(PULSE4096),
        .I3(RXSYNC_STATUS),
        .I4(AN_SYNC_STATUS),
        .O(AN_SYNC_STATUS_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    AN_SYNC_STATUS_reg
       (.C(userclk),
        .CE(1'b1),
        .D(AN_SYNC_STATUS_i_1_n_0),
        .Q(AN_SYNC_STATUS),
        .R(out));
  FDRE \BASEX_REMOTE_FAULT_reg[1] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(BASEX_REMOTE_FAULT_RSLVD),
        .Q(status_vector_ch0[2]),
        .R(out));
  CARRY4 CONFIG_REG_MATCH_COMB2_carry
       (.CI(1'b0),
        .CO({CONFIG_REG_MATCH_COMB2_carry_n_0,CONFIG_REG_MATCH_COMB2_carry_n_1,CONFIG_REG_MATCH_COMB2_carry_n_2,CONFIG_REG_MATCH_COMB2_carry_n_3}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_CONFIG_REG_MATCH_COMB2_carry_O_UNCONNECTED[3:0]),
        .S({CONFIG_REG_MATCH_COMB2_carry_i_1_n_0,CONFIG_REG_MATCH_COMB2_carry_i_2_n_0,CONFIG_REG_MATCH_COMB2_carry_i_3_n_0,CONFIG_REG_MATCH_COMB2_carry_i_4_n_0}));
  CARRY4 CONFIG_REG_MATCH_COMB2_carry__0
       (.CI(CONFIG_REG_MATCH_COMB2_carry_n_0),
        .CO({NLW_CONFIG_REG_MATCH_COMB2_carry__0_CO_UNCONNECTED[3:1],CONFIG_REG_MATCH_COMB2_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_CONFIG_REG_MATCH_COMB2_carry__0_O_UNCONNECTED[3:0]),
        .S({1'b0,1'b0,1'b0,S}));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    CONFIG_REG_MATCH_COMB2_carry_i_1
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[11] ),
        .I1(Q[11]),
        .I2(\RX_CONFIG_REG_REG_reg_n_0_[10] ),
        .I3(Q[10]),
        .I4(Q[9]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[9] ),
        .O(CONFIG_REG_MATCH_COMB2_carry_i_1_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    CONFIG_REG_MATCH_COMB2_carry_i_2
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[8] ),
        .I1(Q[8]),
        .I2(\RX_CONFIG_REG_REG_reg_n_0_[7] ),
        .I3(Q[7]),
        .I4(Q[6]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[6] ),
        .O(CONFIG_REG_MATCH_COMB2_carry_i_2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    CONFIG_REG_MATCH_COMB2_carry_i_3
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[5] ),
        .I1(Q[5]),
        .I2(\RX_CONFIG_REG_REG_reg_n_0_[4] ),
        .I3(Q[4]),
        .I4(Q[3]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[3] ),
        .O(CONFIG_REG_MATCH_COMB2_carry_i_3_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    CONFIG_REG_MATCH_COMB2_carry_i_4
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[2] ),
        .I1(Q[2]),
        .I2(\RX_CONFIG_REG_REG_reg_n_0_[1] ),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(\RX_CONFIG_REG_REG_reg_n_0_[0] ),
        .O(CONFIG_REG_MATCH_COMB2_carry_i_4_n_0));
  LUT4 #(
    .INIT(16'h4004)) 
    CONFIG_REG_MATCH_i_1
       (.I0(RECEIVED_IDLE),
        .I1(CONFIG_REG_MATCH_COMB2_carry__0_n_3),
        .I2(Q[15]),
        .I3(p_0_in0_in),
        .O(CONFIG_REG_MATCH_COMB));
  FDRE #(
    .INIT(1'b0)) 
    CONFIG_REG_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_REG_MATCH_COMB),
        .Q(CONFIG_REG_MATCH),
        .R(out));
  CARRY4 \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry 
       (.CI(1'b0),
        .CO({\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_0 ,\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_1 ,\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_2 ,\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_3 }),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_O_UNCONNECTED [3:0]),
        .S({i__carry_i_1_n_0,i__carry_i_2_n_0,i__carry_i_3_n_0,i__carry_i_4_n_0}));
  CARRY4 \CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0 
       (.CI(\CONSISTENCY_MATCH_COMB1_inferred__0/i__carry_n_0 ),
        .CO({\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0_CO_UNCONNECTED [3:1],CONSISTENCY_MATCH_COMB1__0}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_CONSISTENCY_MATCH_COMB1_inferred__0/i__carry__0_O_UNCONNECTED [3:0]),
        .S({1'b0,1'b0,1'b0,\RX_CONFIG_REG_reg[13] }));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'h84)) 
    CONSISTENCY_MATCH_i_1
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[15] ),
        .I1(CONSISTENCY_MATCH_COMB1__0),
        .I2(Q[15]),
        .O(CONSISTENCY_MATCH_COMB));
  FDRE #(
    .INIT(1'b0)) 
    CONSISTENCY_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CONSISTENCY_MATCH_COMB),
        .Q(CONSISTENCY_MATCH),
        .R(out));
  LUT6 #(
    .INIT(64'h0010000000000000)) 
    GENERATE_REMOTE_FAULT_i_1
       (.I0(START_LINK_TIMER_REG_i_4_n_0),
        .I1(STATE[1]),
        .I2(IDLE_MATCH),
        .I3(STATE[3]),
        .I4(STATE[2]),
        .I5(\STATE[2]_i_2_n_0 ),
        .O(GENERATE_REMOTE_FAULT0));
  FDRE #(
    .INIT(1'b0)) 
    GENERATE_REMOTE_FAULT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(GENERATE_REMOTE_FAULT0),
        .Q(GENERATE_REMOTE_FAULT),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED),
        .Q(IDLE_INSERTED_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG1),
        .Q(IDLE_INSERTED_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT2 #(
    .INIT(4'h2)) 
    IDLE_INSERTED_REG3_i_1
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE_REG2),
        .O(IDLE_INSERTED_REG3_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG3_i_1_n_0),
        .Q(IDLE_INSERTED_REG3),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_REG4_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED_REG3),
        .Q(IDLE_INSERTED_REG4),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'h40)) 
    IDLE_INSERTED_i_1
       (.I0(XMIT_CONFIG_INT),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .O(IDLE_INSERTED0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_INSERTED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_INSERTED0),
        .Q(IDLE_INSERTED),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT5 #(
    .INIT(32'h04FF0400)) 
    IDLE_MATCH_2_i_1
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE),
        .I2(IDLE_INSERTED_REG4),
        .I3(RX_IDLE_REG2),
        .I4(IDLE_MATCH_2),
        .O(IDLE_MATCH_2_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_MATCH_2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_MATCH_2_i_1_n_0),
        .Q(IDLE_MATCH_2),
        .R(out));
  LUT6 #(
    .INIT(64'h4440FFFF44400000)) 
    IDLE_MATCH_i_1
       (.I0(IDLE_INSERTED_REG2),
        .I1(RX_IDLE),
        .I2(IDLE_MATCH_2),
        .I3(IDLE_REMOVED_REG2),
        .I4(RX_IDLE_REG2),
        .I5(IDLE_MATCH),
        .O(IDLE_MATCH_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_MATCH_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_MATCH_i_1_n_0),
        .Q(IDLE_MATCH),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED),
        .Q(IDLE_REMOVED_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED_REG1),
        .Q(IDLE_REMOVED_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT3 #(
    .INIT(8'h10)) 
    IDLE_REMOVED_i_1
       (.I0(XMIT_CONFIG_INT),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .O(IDLE_REMOVED0));
  FDRE #(
    .INIT(1'b0)) 
    IDLE_REMOVED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(IDLE_REMOVED0),
        .Q(IDLE_REMOVED),
        .R(out));
  LUT6 #(
    .INIT(64'h8888AAAA8880FFF0)) 
    I_i_1
       (.I0(STATUS_VECTOR_0_PRE_reg),
        .I1(EVEN_reg),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] ),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] ),
        .I4(EVEN_reg_0),
        .I5(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(I0));
  LUT1 #(
    .INIT(2'h1)) 
    \LINK_TIMER[0]_i_1 
       (.I0(LINK_TIMER_reg__0[0]),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \LINK_TIMER[1]_i_1 
       (.I0(LINK_TIMER_reg__0[0]),
        .I1(LINK_TIMER_reg__0[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \LINK_TIMER[2]_i_1 
       (.I0(LINK_TIMER_reg__0[1]),
        .I1(LINK_TIMER_reg__0[0]),
        .I2(LINK_TIMER_reg__0[2]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \LINK_TIMER[3]_i_1 
       (.I0(LINK_TIMER_reg__0[2]),
        .I1(LINK_TIMER_reg__0[0]),
        .I2(LINK_TIMER_reg__0[1]),
        .I3(LINK_TIMER_reg__0[3]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \LINK_TIMER[4]_i_1 
       (.I0(LINK_TIMER_reg__0[3]),
        .I1(LINK_TIMER_reg__0[1]),
        .I2(LINK_TIMER_reg__0[0]),
        .I3(LINK_TIMER_reg__0[2]),
        .I4(LINK_TIMER_reg__0[4]),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \LINK_TIMER[5]_i_1 
       (.I0(LINK_TIMER_reg__0[4]),
        .I1(LINK_TIMER_reg__0[2]),
        .I2(LINK_TIMER_reg__0[0]),
        .I3(LINK_TIMER_reg__0[1]),
        .I4(LINK_TIMER_reg__0[3]),
        .I5(LINK_TIMER_reg__0[5]),
        .O(plusOp__0[5]));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \LINK_TIMER[6]_i_1 
       (.I0(\LINK_TIMER[9]_i_3_n_0 ),
        .I1(LINK_TIMER_reg__0[6]),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \LINK_TIMER[7]_i_1 
       (.I0(LINK_TIMER_reg__0[6]),
        .I1(\LINK_TIMER[9]_i_3_n_0 ),
        .I2(LINK_TIMER_reg__0[7]),
        .O(plusOp__0[7]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \LINK_TIMER[8]_i_1 
       (.I0(\LINK_TIMER[9]_i_3_n_0 ),
        .I1(LINK_TIMER_reg__0[6]),
        .I2(LINK_TIMER_reg__0[7]),
        .I3(LINK_TIMER_reg__0[8]),
        .O(plusOp__0[8]));
  LUT4 #(
    .INIT(16'hFFF8)) 
    \LINK_TIMER[9]_i_1 
       (.I0(LINK_TIMER_SATURATED),
        .I1(PULSE4096),
        .I2(out),
        .I3(START_LINK_TIMER_REG),
        .O(\LINK_TIMER[9]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \LINK_TIMER[9]_i_2 
       (.I0(\LINK_TIMER[9]_i_3_n_0 ),
        .I1(LINK_TIMER_reg__0[8]),
        .I2(LINK_TIMER_reg__0[7]),
        .I3(LINK_TIMER_reg__0[6]),
        .I4(LINK_TIMER_reg__0[9]),
        .O(plusOp__0[9]));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \LINK_TIMER[9]_i_3 
       (.I0(LINK_TIMER_reg__0[4]),
        .I1(LINK_TIMER_reg__0[2]),
        .I2(LINK_TIMER_reg__0[0]),
        .I3(LINK_TIMER_reg__0[1]),
        .I4(LINK_TIMER_reg__0[3]),
        .I5(LINK_TIMER_reg__0[5]),
        .O(\LINK_TIMER[9]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFEAEAEAAAAAAAAA)) 
    LINK_TIMER_DONE_i_1
       (.I0(LINK_TIMER_DONE_i_2_n_0),
        .I1(STATE[1]),
        .I2(\STATE[1]_i_3_n_0 ),
        .I3(LINK_TIMER_DONE_i_3_n_0),
        .I4(\STATE[3]_i_2_n_0 ),
        .I5(LINK_TIMER_DONE_i_4_n_0),
        .O(LINK_TIMER_DONE_i_1_n_0));
  LUT6 #(
    .INIT(64'hFAEAEAEAAAAAAAAA)) 
    LINK_TIMER_DONE_i_2
       (.I0(LINK_TIMER_DONE_i_5_n_0),
        .I1(STATE[3]),
        .I2(\STATE[2]_i_5_n_0 ),
        .I3(STATE[0]),
        .I4(LINK_TIMER_DONE_i_6_n_0),
        .I5(LINK_TIMER_DONE_i_4_n_0),
        .O(LINK_TIMER_DONE_i_2_n_0));
  LUT6 #(
    .INIT(64'hF0FFC0FFD1D1D1D1)) 
    LINK_TIMER_DONE_i_3
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(STATE[0]),
        .I2(\STATE_reg[1]_0 ),
        .I3(LINK_TIMER_DONE),
        .I4(ABILITY_MATCH),
        .I5(STATE[2]),
        .O(LINK_TIMER_DONE_i_3_n_0));
  LUT5 #(
    .INIT(32'h00000054)) 
    LINK_TIMER_DONE_i_4
       (.I0(START_LINK_TIMER_REG2),
        .I1(LINK_TIMER_SATURATED),
        .I2(LINK_TIMER_DONE),
        .I3(out),
        .I4(START_LINK_TIMER_REG),
        .O(LINK_TIMER_DONE_i_4_n_0));
  LUT6 #(
    .INIT(64'h0000002000000000)) 
    LINK_TIMER_DONE_i_5
       (.I0(LINK_TIMER_DONE_i_4_n_0),
        .I1(RX_INVALID),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I4(START_LINK_TIMER_REG_i_5_n_0),
        .I5(LINK_TIMER_DONE_i_7_n_0),
        .O(LINK_TIMER_DONE_i_5_n_0));
  LUT5 #(
    .INIT(32'hFFFF7FFF)) 
    LINK_TIMER_DONE_i_6
       (.I0(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I1(CONSISTENCY_MATCH),
        .I2(ABILITY_MATCH),
        .I3(STATE[1]),
        .I4(STATE[2]),
        .O(LINK_TIMER_DONE_i_6_n_0));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT5 #(
    .INIT(32'hFF151515)) 
    LINK_TIMER_DONE_i_7
       (.I0(STATE[0]),
        .I1(LINK_TIMER_DONE),
        .I2(STATE[2]),
        .I3(ABILITY_MATCH),
        .I4(\STATE_reg[1]_0 ),
        .O(LINK_TIMER_DONE_i_7_n_0));
  FDRE #(
    .INIT(1'b0)) 
    LINK_TIMER_DONE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LINK_TIMER_DONE_i_1_n_0),
        .Q(LINK_TIMER_DONE),
        .R(1'b0));
  CARRY4 LINK_TIMER_SATURATED_COMB0_carry
       (.CI(1'b0),
        .CO({LINK_TIMER_SATURATED_COMB,LINK_TIMER_SATURATED_COMB0_carry_n_1,LINK_TIMER_SATURATED_COMB0_carry_n_2,LINK_TIMER_SATURATED_COMB0_carry_n_3}),
        .CYINIT(1'b1),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(NLW_LINK_TIMER_SATURATED_COMB0_carry_O_UNCONNECTED[3:0]),
        .S({LINK_TIMER_SATURATED_COMB0_carry_i_1_n_0,LINK_TIMER_SATURATED_COMB0_carry_i_2_n_0,LINK_TIMER_SATURATED_COMB0_carry_i_3_n_0,LINK_TIMER_SATURATED_COMB0_carry_i_4_n_0}));
  LUT1 #(
    .INIT(2'h1)) 
    LINK_TIMER_SATURATED_COMB0_carry_i_1
       (.I0(LINK_TIMER_reg__0[9]),
        .O(LINK_TIMER_SATURATED_COMB0_carry_i_1_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    LINK_TIMER_SATURATED_COMB0_carry_i_2
       (.I0(link_timer_value_ch0[8]),
        .I1(LINK_TIMER_reg__0[8]),
        .I2(link_timer_value_ch0[7]),
        .I3(LINK_TIMER_reg__0[7]),
        .I4(LINK_TIMER_reg__0[6]),
        .I5(link_timer_value_ch0[6]),
        .O(LINK_TIMER_SATURATED_COMB0_carry_i_2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    LINK_TIMER_SATURATED_COMB0_carry_i_3
       (.I0(link_timer_value_ch0[5]),
        .I1(LINK_TIMER_reg__0[5]),
        .I2(link_timer_value_ch0[4]),
        .I3(LINK_TIMER_reg__0[4]),
        .I4(LINK_TIMER_reg__0[3]),
        .I5(link_timer_value_ch0[3]),
        .O(LINK_TIMER_SATURATED_COMB0_carry_i_3_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    LINK_TIMER_SATURATED_COMB0_carry_i_4
       (.I0(link_timer_value_ch0[2]),
        .I1(LINK_TIMER_reg__0[2]),
        .I2(link_timer_value_ch0[1]),
        .I3(LINK_TIMER_reg__0[1]),
        .I4(LINK_TIMER_reg__0[0]),
        .I5(link_timer_value_ch0[0]),
        .O(LINK_TIMER_SATURATED_COMB0_carry_i_4_n_0));
  FDRE #(
    .INIT(1'b0)) 
    LINK_TIMER_SATURATED_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LINK_TIMER_SATURATED_COMB),
        .Q(LINK_TIMER_SATURATED),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[0] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[0]),
        .Q(LINK_TIMER_reg__0[0]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[1] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[1]),
        .Q(LINK_TIMER_reg__0[1]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[2] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[2]),
        .Q(LINK_TIMER_reg__0[2]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[3] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[3]),
        .Q(LINK_TIMER_reg__0[3]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[4] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[4]),
        .Q(LINK_TIMER_reg__0[4]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[5] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[5]),
        .Q(LINK_TIMER_reg__0[5]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[6] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[6]),
        .Q(LINK_TIMER_reg__0[6]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[7] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[7]),
        .Q(LINK_TIMER_reg__0[7]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[8] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[8]),
        .Q(LINK_TIMER_reg__0[8]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \LINK_TIMER_reg[9] 
       (.C(userclk),
        .CE(PULSE4096),
        .D(plusOp__0[9]),
        .Q(LINK_TIMER_reg__0[9]),
        .R(\LINK_TIMER[9]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT4 #(
    .INIT(16'h5515)) 
    \MASK_RUDI_BUFERR_TIMER[0]_i_1 
       (.I0(MASK_RUDI_BUFERR_TIMER[0]),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[10]_i_1 
       (.I0(plusOp_carry__1_n_6),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[10]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[11]_i_1 
       (.I0(plusOp_carry__1_n_5),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[11]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEFEFEFEFFFEFEFEF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_1 
       (.I0(\MASK_RUDI_BUFERR_TIMER[12]_i_3_n_0 ),
        .I1(\MASK_RUDI_BUFERR_TIMER[12]_i_4_n_0 ),
        .I2(MASK_RUDI_BUFERR_TIMER[0]),
        .I3(data_out),
        .I4(p_0_in),
        .I5(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_2 
       (.I0(plusOp_carry__1_n_4),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_3 
       (.I0(MASK_RUDI_BUFERR_TIMER[5]),
        .I1(MASK_RUDI_BUFERR_TIMER[6]),
        .I2(MASK_RUDI_BUFERR_TIMER[3]),
        .I3(MASK_RUDI_BUFERR_TIMER[4]),
        .I4(MASK_RUDI_BUFERR_TIMER[2]),
        .I5(MASK_RUDI_BUFERR_TIMER[1]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \MASK_RUDI_BUFERR_TIMER[12]_i_4 
       (.I0(MASK_RUDI_BUFERR_TIMER[11]),
        .I1(MASK_RUDI_BUFERR_TIMER[12]),
        .I2(MASK_RUDI_BUFERR_TIMER[9]),
        .I3(MASK_RUDI_BUFERR_TIMER[10]),
        .I4(MASK_RUDI_BUFERR_TIMER[8]),
        .I5(MASK_RUDI_BUFERR_TIMER[7]),
        .O(\MASK_RUDI_BUFERR_TIMER[12]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[1]_i_1 
       (.I0(plusOp_carry_n_7),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[2]_i_1 
       (.I0(plusOp_carry_n_6),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[3]_i_1 
       (.I0(plusOp_carry_n_5),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[3]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[4]_i_1 
       (.I0(plusOp_carry_n_4),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[5]_i_1 
       (.I0(plusOp_carry__0_n_7),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[6]_i_1 
       (.I0(plusOp_carry__0_n_6),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[7]_i_1 
       (.I0(plusOp_carry__0_n_5),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[8]_i_1 
       (.I0(plusOp_carry__0_n_4),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[8]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT4 #(
    .INIT(16'hAA2A)) 
    \MASK_RUDI_BUFERR_TIMER[9]_i_1 
       (.I0(plusOp_carry__1_n_7),
        .I1(data_out),
        .I2(p_0_in),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [1]),
        .O(\MASK_RUDI_BUFERR_TIMER[9]_i_1_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[0] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[0]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[0]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[10] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[10]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[10]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[11] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[11]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[11]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[12] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[12]_i_2_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[12]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[1] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[1]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[1]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[2] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[2]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[2]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[3] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[3]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[3]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[4] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[4]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[4]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[5] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[5]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[5]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[6] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[6]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[6]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[7] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[7]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[7]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[8] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[8]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[8]),
        .S(out));
  FDSE #(
    .INIT(1'b0)) 
    \MASK_RUDI_BUFERR_TIMER_reg[9] 
       (.C(userclk),
        .CE(\MASK_RUDI_BUFERR_TIMER[12]_i_1_n_0 ),
        .D(\MASK_RUDI_BUFERR_TIMER[9]_i_1_n_0 ),
        .Q(MASK_RUDI_BUFERR_TIMER[9]),
        .S(out));
  LUT5 #(
    .INIT(32'hFF7FFF00)) 
    MASK_RUDI_BUFERR_i_1
       (.I0(MASK_RUDI_BUFERR_i_2_n_0),
        .I1(MASK_RUDI_BUFERR_i_3_n_0),
        .I2(MASK_RUDI_BUFERR_TIMER[0]),
        .I3(MASK_RUDI_BUFERR_TIMER0),
        .I4(MASK_RUDI_BUFERR),
        .O(MASK_RUDI_BUFERR_i_1_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    MASK_RUDI_BUFERR_i_2
       (.I0(MASK_RUDI_BUFERR_TIMER[3]),
        .I1(MASK_RUDI_BUFERR_TIMER[4]),
        .I2(MASK_RUDI_BUFERR_TIMER[1]),
        .I3(MASK_RUDI_BUFERR_TIMER[2]),
        .I4(MASK_RUDI_BUFERR_TIMER[6]),
        .I5(MASK_RUDI_BUFERR_TIMER[5]),
        .O(MASK_RUDI_BUFERR_i_2_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    MASK_RUDI_BUFERR_i_3
       (.I0(MASK_RUDI_BUFERR_TIMER[9]),
        .I1(MASK_RUDI_BUFERR_TIMER[10]),
        .I2(MASK_RUDI_BUFERR_TIMER[7]),
        .I3(MASK_RUDI_BUFERR_TIMER[8]),
        .I4(MASK_RUDI_BUFERR_TIMER[12]),
        .I5(MASK_RUDI_BUFERR_TIMER[11]),
        .O(MASK_RUDI_BUFERR_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MASK_RUDI_BUFERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MASK_RUDI_BUFERR_i_1_n_0),
        .Q(MASK_RUDI_BUFERR),
        .R(out));
  LUT6 #(
    .INIT(64'h00000000FFF20000)) 
    MASK_RUDI_CLKCOR_i_1
       (.I0(MASK_RUDI_CLKCOR),
        .I1(MASK_RUDI_CLKCOR_i_2_n_0),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I4(RXSYNC_STATUS),
        .I5(out),
        .O(MASK_RUDI_CLKCOR_i_1_n_0));
  LUT6 #(
    .INIT(64'h4444444440444040)) 
    MASK_RUDI_CLKCOR_i_2
       (.I0(RX_INVALID),
        .I1(RX_RUDI_INVALID_REG),
        .I2(RXSYNC_STATUS),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I4(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I5(XMIT_DATA_INT),
        .O(MASK_RUDI_CLKCOR_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MASK_RUDI_CLKCOR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MASK_RUDI_CLKCOR_i_1_n_0),
        .Q(MASK_RUDI_CLKCOR),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h5150505050505000)) 
    MR_AN_COMPLETE_i_1
       (.I0(out),
        .I1(STATE[3]),
        .I2(an_interrupt_ch0),
        .I3(STATE[2]),
        .I4(STATE[0]),
        .I5(STATE[1]),
        .O(MR_AN_COMPLETE_i_1_n_0));
  FDRE MR_AN_COMPLETE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_COMPLETE_i_1_n_0),
        .Q(an_interrupt_ch0),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h6)) 
    MR_AN_ENABLE_CHANGE_i_1
       (.I0(MR_AN_ENABLE_REG2),
        .I1(MR_AN_ENABLE_REG1),
        .O(MR_AN_ENABLE_CHANGE0));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_CHANGE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_ENABLE_CHANGE0),
        .Q(MR_AN_ENABLE_CHANGE),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .Q(MR_AN_ENABLE_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_AN_ENABLE_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_AN_ENABLE_REG1),
        .Q(MR_AN_ENABLE_REG2),
        .R(out));
  LUT3 #(
    .INIT(8'hB8)) 
    \MR_LP_ADV_ABILITY_INT[13]_i_1 
       (.I0(Q[12]),
        .I1(\MR_LP_ADV_ABILITY_INT[16]_i_2_n_0 ),
        .I2(LP_ADV_ABILITY),
        .O(\MR_LP_ADV_ABILITY_INT[13]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \MR_LP_ADV_ABILITY_INT[16]_i_1 
       (.I0(Q[15]),
        .I1(\MR_LP_ADV_ABILITY_INT[16]_i_2_n_0 ),
        .I2(\MR_LP_ADV_ABILITY_INT_reg_n_0_[16] ),
        .O(\MR_LP_ADV_ABILITY_INT[16]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0100000000000000)) 
    \MR_LP_ADV_ABILITY_INT[16]_i_2 
       (.I0(PREVIOUS_STATE[3]),
        .I1(out),
        .I2(PREVIOUS_STATE[2]),
        .I3(PREVIOUS_STATE[1]),
        .I4(PREVIOUS_STATE[0]),
        .I5(\SGMII_SPEED[1]_i_2_n_0 ),
        .O(\MR_LP_ADV_ABILITY_INT[16]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\MR_LP_ADV_ABILITY_INT[13]_i_1_n_0 ),
        .Q(LP_ADV_ABILITY),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \MR_LP_ADV_ABILITY_INT_reg[16] 
       (.C(userclk),
        .CE(1'b1),
        .D(\MR_LP_ADV_ABILITY_INT[16]_i_1_n_0 ),
        .Q(\MR_LP_ADV_ABILITY_INT_reg_n_0_[16] ),
        .R(out));
  LUT3 #(
    .INIT(8'hF4)) 
    MR_REMOTE_FAULT_i_1
       (.I0(\MR_LP_ADV_ABILITY_INT_reg_n_0_[16] ),
        .I1(GENERATE_REMOTE_FAULT),
        .I2(status_vector_ch0[5]),
        .O(MR_REMOTE_FAULT_i_1_n_0));
  FDRE MR_REMOTE_FAULT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_REMOTE_FAULT_i_1_n_0),
        .Q(status_vector_ch0[5]),
        .R(out));
  LUT5 #(
    .INIT(32'h0CAE0C0C)) 
    MR_RESTART_AN_INT_i_1
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(MR_RESTART_AN_SET_REG1),
        .I2(MR_RESTART_AN_SET_REG2),
        .I3(MR_RESTART_AN_INT_i_2_n_0),
        .I4(MR_RESTART_AN_INT),
        .O(MR_RESTART_AN_INT_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT4 #(
    .INIT(16'h0001)) 
    MR_RESTART_AN_INT_i_2
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[3]),
        .I3(STATE[2]),
        .O(MR_RESTART_AN_INT_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_RESTART_AN_INT_i_1_n_0),
        .Q(MR_RESTART_AN_INT),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_SET_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RESTART_AN_SET),
        .Q(MR_RESTART_AN_SET_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    MR_RESTART_AN_SET_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(MR_RESTART_AN_SET_REG1),
        .Q(MR_RESTART_AN_SET_REG2),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[0]),
        .Q(PREVIOUS_STATE[0]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[1]),
        .Q(PREVIOUS_STATE[1]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[2]),
        .Q(PREVIOUS_STATE[2]),
        .R(out));
  FDRE \PREVIOUS_STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATE[3]),
        .Q(PREVIOUS_STATE[3]),
        .R(out));
  LUT2 #(
    .INIT(4'h2)) 
    PULSE4096_i_1
       (.I0(TIMER4096_MSB_REG),
        .I1(TIMER4096_reg),
        .O(PULSE40960));
  FDRE #(
    .INIT(1'b0)) 
    PULSE4096_reg
       (.C(userclk),
        .CE(1'b1),
        .D(PULSE40960),
        .Q(PULSE4096),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RECEIVED_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID_INT_reg),
        .Q(RECEIVED_IDLE),
        .R(out));
  FDRE RUDI_INVALID_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY[1]),
        .Q(status_vector_ch0[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_CONFIG_REG_NULL_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID_INT_reg_0),
        .Q(\STATE_reg[1]_0 ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[0] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[0]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[10] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[10]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[10] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[11] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[11]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[11] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[12] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[12]),
        .Q(CONFIG_REG_MATCH_reg_0[0]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[13] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[13]),
        .Q(CONFIG_REG_MATCH_reg_0[1]),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[14] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[14]),
        .Q(p_0_in28_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[15] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[15]),
        .Q(p_0_in0_in),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[1] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[1]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[1] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[2] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[2]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[2] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[3] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[3]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[3] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[4] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[4]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[4] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[5] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[5]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[5] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[6] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[6]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[6] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[7] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[7]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[7] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[8] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[8]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[8] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_REG_REG_reg[9] 
       (.C(userclk),
        .CE(RX_CONFIG_VALID),
        .D(Q[9]),
        .Q(\RX_CONFIG_REG_REG_reg_n_0_[9] ),
        .R(SR));
  LUT6 #(
    .INIT(64'h2000200000002000)) 
    \RX_CONFIG_SNAPSHOT[15]_i_1 
       (.I0(RX_CONFIG_VALID),
        .I1(ABILITY_MATCH),
        .I2(ABILITY_MATCH_2),
        .I3(CONFIG_REG_MATCH),
        .I4(STATE[0]),
        .I5(\RX_CONFIG_SNAPSHOT[15]_i_2_n_0 ),
        .O(RX_CONFIG_SNAPSHOT));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \RX_CONFIG_SNAPSHOT[15]_i_2 
       (.I0(STATE[3]),
        .I1(STATE[2]),
        .I2(STATE[1]),
        .O(\RX_CONFIG_SNAPSHOT[15]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[0] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[0]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[0] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[10] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[10]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[10] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[11] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[11]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[11] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[12] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[12]),
        .Q(CONSISTENCY_MATCH_reg_0[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[13] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[13]),
        .Q(CONSISTENCY_MATCH_reg_0[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[15] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[15]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[15] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[1] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[1]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[1] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[2] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[2]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[2] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[3] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[3]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[3] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[4] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[4]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[4] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[5] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[5]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[5] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[6] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[6]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[6] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[7] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[7]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[7] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[8] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[8]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[8] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_CONFIG_SNAPSHOT_reg[9] 
       (.C(userclk),
        .CE(RX_CONFIG_SNAPSHOT),
        .D(Q[9]),
        .Q(\RX_CONFIG_SNAPSHOT_reg_n_0_[9] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_IDLE_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE),
        .Q(RX_IDLE_REG1),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_IDLE_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE_REG1),
        .Q(RX_IDLE_REG2),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT4 #(
    .INIT(16'h0BFF)) 
    RX_INVALID_i_2
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I2(XMIT_DATA_INT),
        .I3(RXSYNC_STATUS),
        .O(RX_INVALID_reg));
  LUT6 #(
    .INIT(64'h1010101010101011)) 
    \RX_RUDI_INVALID_DELAY[0]_i_1 
       (.I0(MASK_RUDI_BUFERR),
        .I1(MASK_RUDI_CLKCOR),
        .I2(RX_INVALID),
        .I3(RXSYNC_STATUS),
        .I4(XMIT_DATA_INT),
        .I5(\RX_RUDI_INVALID_DELAY[0]_i_2_n_0 ),
        .O(RX_RUDI_INVALID_DELAY0));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \RX_RUDI_INVALID_DELAY[0]_i_2 
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .O(\RX_RUDI_INVALID_DELAY[0]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \RX_RUDI_INVALID_DELAY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY0),
        .Q(RX_RUDI_INVALID_DELAY[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \RX_RUDI_INVALID_DELAY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_RUDI_INVALID_DELAY[0]),
        .Q(RX_RUDI_INVALID_DELAY[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    RX_RUDI_INVALID_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_INVALID_reg_0),
        .Q(RX_RUDI_INVALID_REG),
        .R(1'b0));
  FDRE SGMII_PHY_STATUS_reg
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(Q[15]),
        .Q(status_vector_ch0[1]),
        .R(out));
  LUT5 #(
    .INIT(32'h10000000)) 
    \SGMII_SPEED[1]_i_1 
       (.I0(PREVIOUS_STATE[2]),
        .I1(PREVIOUS_STATE[3]),
        .I2(PREVIOUS_STATE[0]),
        .I3(PREVIOUS_STATE[1]),
        .I4(\SGMII_SPEED[1]_i_2_n_0 ),
        .O(MR_PAGE_RX_SET119_out));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \SGMII_SPEED[1]_i_2 
       (.I0(STATE[3]),
        .I1(STATE[2]),
        .I2(STATE[1]),
        .I3(STATE[0]),
        .O(\SGMII_SPEED[1]_i_2_n_0 ));
  FDRE \SGMII_SPEED_reg[0] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(Q[10]),
        .Q(status_vector_ch0[3]),
        .R(out));
  FDSE \SGMII_SPEED_reg[1] 
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(Q[11]),
        .Q(status_vector_ch0[4]),
        .S(out));
  FDRE #(
    .INIT(1'b0)) 
    START_LINK_TIMER_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(START_LINK_TIMER_REG),
        .Q(START_LINK_TIMER_REG2),
        .R(out));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFEEFE)) 
    START_LINK_TIMER_REG_i_1
       (.I0(START_LINK_TIMER_REG_i_2_n_0),
        .I1(START_LINK_TIMER_REG_i_3_n_0),
        .I2(\SGMII_SPEED[1]_i_2_n_0 ),
        .I3(START_LINK_TIMER_REG_i_4_n_0),
        .I4(START_LINK_TIMER_REG_i_5_n_0),
        .I5(START_LINK_TIMER_REG_i_6_n_0),
        .O(START_LINK_TIMER));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    START_LINK_TIMER_REG_i_2
       (.I0(STATE[0]),
        .I1(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I2(CONSISTENCY_MATCH),
        .I3(ABILITY_MATCH),
        .I4(\STATE_reg[1]_0 ),
        .I5(\RX_CONFIG_SNAPSHOT[15]_i_2_n_0 ),
        .O(START_LINK_TIMER_REG_i_2_n_0));
  LUT4 #(
    .INIT(16'h1000)) 
    START_LINK_TIMER_REG_i_3
       (.I0(MASK_RUDI_BUFERR),
        .I1(MASK_RUDI_CLKCOR),
        .I2(XMIT_CONFIG_INT),
        .I3(RX_RUDI_INVALID),
        .O(START_LINK_TIMER_REG_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT3 #(
    .INIT(8'h8F)) 
    START_LINK_TIMER_REG_i_4
       (.I0(ABILITY_MATCH),
        .I1(\STATE_reg[1]_0 ),
        .I2(LINK_TIMER_DONE),
        .O(START_LINK_TIMER_REG_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    START_LINK_TIMER_REG_i_5
       (.I0(MR_AN_ENABLE_CHANGE),
        .I1(MR_RESTART_AN_INT),
        .I2(AN_SYNC_STATUS),
        .O(START_LINK_TIMER_REG_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT5 #(
    .INIT(32'h00010000)) 
    START_LINK_TIMER_REG_i_6
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .I2(STATE[0]),
        .I3(STATE[1]),
        .I4(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .O(START_LINK_TIMER_REG_i_6_n_0));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT5 #(
    .INIT(32'hFFFF000D)) 
    START_LINK_TIMER_REG_i_7
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I2(XMIT_DATA_INT),
        .I3(RXSYNC_STATUS),
        .I4(RX_INVALID),
        .O(RX_RUDI_INVALID));
  FDRE #(
    .INIT(1'b0)) 
    START_LINK_TIMER_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(START_LINK_TIMER),
        .Q(START_LINK_TIMER_REG),
        .R(out));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFF8)) 
    \STATE[0]_i_1 
       (.I0(\STATE[0]_i_2_n_0 ),
        .I1(\STATE[2]_i_2_n_0 ),
        .I2(\STATE[0]_i_3_n_0 ),
        .I3(\STATE[0]_i_4_n_0 ),
        .I4(\STATE[0]_i_5_n_0 ),
        .I5(\STATE[0]_i_6_n_0 ),
        .O(\STATE[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000570077)) 
    \STATE[0]_i_2 
       (.I0(ABILITY_MATCH),
        .I1(STATE[1]),
        .I2(\STATE_reg[1]_0 ),
        .I3(STATE[3]),
        .I4(STATE[2]),
        .I5(LINK_TIMER_DONE),
        .O(\STATE[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000200000000)) 
    \STATE[0]_i_3 
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(STATE[1]),
        .I2(STATE[0]),
        .I3(STATE[3]),
        .I4(STATE[2]),
        .I5(\STATE[3]_i_2_n_0 ),
        .O(\STATE[0]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h0111000000000000)) 
    \STATE[0]_i_4 
       (.I0(\RX_CONFIG_SNAPSHOT[15]_i_2_n_0 ),
        .I1(\STATE_reg[1]_0 ),
        .I2(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I3(STATE[0]),
        .I4(ABILITY_MATCH),
        .I5(\STATE[2]_i_5_n_0 ),
        .O(\STATE[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0808280800000000)) 
    \STATE[0]_i_5 
       (.I0(\STATE[2]_i_5_n_0 ),
        .I1(STATE[0]),
        .I2(ABILITY_MATCH),
        .I3(NEXT_STATE2),
        .I4(\STATE_reg[1]_0 ),
        .I5(\STATE[0]_i_7_n_0 ),
        .O(\STATE[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h0000700000000000)) 
    \STATE[0]_i_6 
       (.I0(ABILITY_MATCH),
        .I1(\STATE_reg[1]_0 ),
        .I2(LINK_TIMER_DONE),
        .I3(\STATE[2]_i_8_n_0 ),
        .I4(STATE[1]),
        .I5(\STATE[2]_i_5_n_0 ),
        .O(\STATE[0]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \STATE[0]_i_7 
       (.I0(STATE[1]),
        .I1(STATE[3]),
        .O(\STATE[0]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFAABAAAAA)) 
    \STATE[1]_i_1 
       (.I0(\STATE[1]_i_2_n_0 ),
        .I1(\STATE_reg[1]_0 ),
        .I2(STATE[1]),
        .I3(STATE[3]),
        .I4(\STATE[1]_i_3_n_0 ),
        .I5(\STATE[1]_i_4_n_0 ),
        .O(\STATE[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000002820)) 
    \STATE[1]_i_2 
       (.I0(\STATE[2]_i_5_n_0 ),
        .I1(STATE[0]),
        .I2(STATE[1]),
        .I3(LINK_TIMER_DONE),
        .I4(STATE[3]),
        .I5(STATE[2]),
        .O(\STATE[1]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \STATE[1]_i_3 
       (.I0(\STATE[2]_i_5_n_0 ),
        .I1(STATE[0]),
        .O(\STATE[1]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hF800F800FF00F800)) 
    \STATE[1]_i_4 
       (.I0(\STATE[1]_i_5_n_0 ),
        .I1(STATE[0]),
        .I2(\STATE[1]_i_6_n_0 ),
        .I3(\STATE[2]_i_5_n_0 ),
        .I4(\STATE[2]_i_3_n_0 ),
        .I5(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .O(\STATE[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0008000800080808)) 
    \STATE[1]_i_5 
       (.I0(IDLE_MATCH),
        .I1(LINK_TIMER_DONE),
        .I2(STATE[3]),
        .I3(ABILITY_MATCH),
        .I4(STATE[1]),
        .I5(\STATE_reg[1]_0 ),
        .O(\STATE[1]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \STATE[1]_i_6 
       (.I0(STATE[3]),
        .I1(STATE[1]),
        .I2(ABILITY_MATCH),
        .O(\STATE[1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF80000000)) 
    \STATE[2]_i_1 
       (.I0(\STATE[2]_i_2_n_0 ),
        .I1(\STATE[2]_i_3_n_0 ),
        .I2(ACKNOWLEDGE_MATCH_3_reg_n_0),
        .I3(CONSISTENCY_MATCH),
        .I4(ABILITY_MATCH),
        .I5(\STATE[2]_i_4_n_0 ),
        .O(\STATE[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \STATE[2]_i_2 
       (.I0(\STATE[2]_i_5_n_0 ),
        .I1(STATE[0]),
        .O(\STATE[2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \STATE[2]_i_3 
       (.I0(STATE[1]),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(\STATE_reg[1]_0 ),
        .O(\STATE[2]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h8888888C00000000)) 
    \STATE[2]_i_4 
       (.I0(\STATE[2]_i_6_n_0 ),
        .I1(\STATE[2]_i_5_n_0 ),
        .I2(STATE[0]),
        .I3(\STATE_reg[1]_0 ),
        .I4(NEXT_STATE2),
        .I5(\STATE[2]_i_8_n_0 ),
        .O(\STATE[2]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000AE00)) 
    \STATE[2]_i_5 
       (.I0(\STATE[3]_i_5_n_0 ),
        .I1(XMIT_DATA),
        .I2(RX_INVALID),
        .I3(AN_SYNC_STATUS),
        .I4(MR_RESTART_AN_INT),
        .I5(MR_AN_ENABLE_CHANGE),
        .O(\STATE[2]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'h1F)) 
    \STATE[2]_i_6 
       (.I0(\STATE_reg[1]_0 ),
        .I1(STATE[1]),
        .I2(ABILITY_MATCH),
        .O(\STATE[2]_i_6_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \STATE[2]_i_7 
       (.I0(\RX_CONFIG_REG_REG_reg_n_0_[11] ),
        .I1(TOGGLE_RX),
        .O(NEXT_STATE2));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \STATE[2]_i_8 
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .O(\STATE[2]_i_8_n_0 ));
  LUT6 #(
    .INIT(64'h00880088F0FF0088)) 
    \STATE[3]_i_1 
       (.I0(\STATE[3]_i_2_n_0 ),
        .I1(STATE[3]),
        .I2(\STATE[3]_i_3_n_0 ),
        .I3(\STATE[3]_i_4_n_0 ),
        .I4(AN_SYNC_STATUS),
        .I5(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .O(\STATE[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000000000000AE00)) 
    \STATE[3]_i_2 
       (.I0(\STATE[3]_i_5_n_0 ),
        .I1(XMIT_DATA_INT),
        .I2(RX_INVALID),
        .I3(AN_SYNC_STATUS),
        .I4(MR_RESTART_AN_INT),
        .I5(MR_AN_ENABLE_CHANGE),
        .O(\STATE[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFF010000)) 
    \STATE[3]_i_3 
       (.I0(XMIT_DATA_INT),
        .I1(RXSYNC_STATUS),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I3(RX_INVALID),
        .I4(\STATE[3]_i_6_n_0 ),
        .I5(\STATE[3]_i_7_n_0 ),
        .O(\STATE[3]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \STATE[3]_i_4 
       (.I0(STATE[1]),
        .I1(STATE[0]),
        .I2(STATE[2]),
        .O(\STATE[3]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT5 #(
    .INIT(32'hFDFDFFFD)) 
    \STATE[3]_i_5 
       (.I0(XMIT_CONFIG_INT),
        .I1(MASK_RUDI_CLKCOR),
        .I2(MASK_RUDI_BUFERR),
        .I3(RXSYNC_STATUS),
        .I4(RX_INVALID),
        .O(\STATE[3]_i_5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \STATE[3]_i_6 
       (.I0(XMIT_CONFIG_INT),
        .I1(MASK_RUDI_CLKCOR),
        .I2(MASK_RUDI_BUFERR),
        .O(\STATE[3]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \STATE[3]_i_7 
       (.I0(MR_RESTART_AN_INT),
        .I1(MR_AN_ENABLE_CHANGE),
        .O(\STATE[3]_i_7_n_0 ));
  FDRE \STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[0]_i_1_n_0 ),
        .Q(STATE[0]),
        .R(out));
  FDRE \STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[1]_i_1_n_0 ),
        .Q(STATE[1]),
        .R(out));
  FDRE \STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[2]_i_1_n_0 ),
        .Q(STATE[2]),
        .R(out));
  FDRE \STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\STATE[3]_i_1_n_0 ),
        .Q(STATE[3]),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'hAE00)) 
    STATUS_VECTOR_0_PRE_i_2
       (.I0(XMIT_DATA_INT),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I3(RXSYNC_STATUS),
        .O(STATUS_VECTOR_0_PRE_reg));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT4 #(
    .INIT(16'hF7F0)) 
    SYNC_STATUS_HELD_i_1
       (.I0(LINK_TIMER_SATURATED),
        .I1(PULSE4096),
        .I2(RXSYNC_STATUS),
        .I3(SYNC_STATUS_HELD),
        .O(SYNC_STATUS_HELD_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_HELD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_HELD_i_1_n_0),
        .Q(SYNC_STATUS_HELD),
        .R(out));
  LUT1 #(
    .INIT(2'h1)) 
    \TIMER4096[0]_i_2 
       (.I0(\TIMER4096_reg_n_0_[0] ),
        .O(\TIMER4096[0]_i_2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    TIMER4096_MSB_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TIMER4096_reg),
        .Q(TIMER4096_MSB_REG),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[0]_i_1_n_7 ),
        .Q(\TIMER4096_reg_n_0_[0] ),
        .R(out));
  CARRY4 \TIMER4096_reg[0]_i_1 
       (.CI(1'b0),
        .CO({\TIMER4096_reg[0]_i_1_n_0 ,\TIMER4096_reg[0]_i_1_n_1 ,\TIMER4096_reg[0]_i_1_n_2 ,\TIMER4096_reg[0]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b1}),
        .O({\TIMER4096_reg[0]_i_1_n_4 ,\TIMER4096_reg[0]_i_1_n_5 ,\TIMER4096_reg[0]_i_1_n_6 ,\TIMER4096_reg[0]_i_1_n_7 }),
        .S({\TIMER4096_reg_n_0_[3] ,\TIMER4096_reg_n_0_[2] ,\TIMER4096_reg_n_0_[1] ,\TIMER4096[0]_i_2_n_0 }));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[8]_i_1_n_5 ),
        .Q(\TIMER4096_reg_n_0_[10] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[8]_i_1_n_4 ),
        .Q(TIMER4096_reg),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[0]_i_1_n_6 ),
        .Q(\TIMER4096_reg_n_0_[1] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[0]_i_1_n_5 ),
        .Q(\TIMER4096_reg_n_0_[2] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[0]_i_1_n_4 ),
        .Q(\TIMER4096_reg_n_0_[3] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[4]_i_1_n_7 ),
        .Q(\TIMER4096_reg_n_0_[4] ),
        .R(out));
  CARRY4 \TIMER4096_reg[4]_i_1 
       (.CI(\TIMER4096_reg[0]_i_1_n_0 ),
        .CO({\TIMER4096_reg[4]_i_1_n_0 ,\TIMER4096_reg[4]_i_1_n_1 ,\TIMER4096_reg[4]_i_1_n_2 ,\TIMER4096_reg[4]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\TIMER4096_reg[4]_i_1_n_4 ,\TIMER4096_reg[4]_i_1_n_5 ,\TIMER4096_reg[4]_i_1_n_6 ,\TIMER4096_reg[4]_i_1_n_7 }),
        .S({\TIMER4096_reg_n_0_[7] ,\TIMER4096_reg_n_0_[6] ,\TIMER4096_reg_n_0_[5] ,\TIMER4096_reg_n_0_[4] }));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[4]_i_1_n_6 ),
        .Q(\TIMER4096_reg_n_0_[5] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[4]_i_1_n_5 ),
        .Q(\TIMER4096_reg_n_0_[6] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[4]_i_1_n_4 ),
        .Q(\TIMER4096_reg_n_0_[7] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[8]_i_1_n_7 ),
        .Q(\TIMER4096_reg_n_0_[8] ),
        .R(out));
  CARRY4 \TIMER4096_reg[8]_i_1 
       (.CI(\TIMER4096_reg[4]_i_1_n_0 ),
        .CO({\NLW_TIMER4096_reg[8]_i_1_CO_UNCONNECTED [3],\TIMER4096_reg[8]_i_1_n_1 ,\TIMER4096_reg[8]_i_1_n_2 ,\TIMER4096_reg[8]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({\TIMER4096_reg[8]_i_1_n_4 ,\TIMER4096_reg[8]_i_1_n_5 ,\TIMER4096_reg[8]_i_1_n_6 ,\TIMER4096_reg[8]_i_1_n_7 }),
        .S({TIMER4096_reg,\TIMER4096_reg_n_0_[10] ,\TIMER4096_reg_n_0_[9] ,\TIMER4096_reg_n_0_[8] }));
  FDRE #(
    .INIT(1'b0)) 
    \TIMER4096_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TIMER4096_reg[8]_i_1_n_6 ),
        .Q(\TIMER4096_reg_n_0_[9] ),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    TOGGLE_RX_reg
       (.C(userclk),
        .CE(MR_PAGE_RX_SET119_out),
        .D(Q[11]),
        .Q(TOGGLE_RX),
        .R(out));
  LUT6 #(
    .INIT(64'h4444FFF4EEEE000E)) 
    TOGGLE_TX_i_1
       (.I0(STATE[2]),
        .I1(an_adv_config_vector_ch0),
        .I2(STATE[0]),
        .I3(\RX_CONFIG_SNAPSHOT[15]_i_2_n_0 ),
        .I4(MR_PAGE_RX_SET119_out),
        .I5(TOGGLE_TX),
        .O(TOGGLE_TX_i_1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    TOGGLE_TX_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TOGGLE_TX_i_1_n_0),
        .Q(TOGGLE_TX),
        .R(out));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT5 #(
    .INIT(32'hFFDE0010)) 
    \TX_CONFIG_REG_INT[0]_i_1 
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .I2(STATE[1]),
        .I3(STATE[0]),
        .I4(D[0]),
        .O(\TX_CONFIG_REG_INT[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFF8FC00000800)) 
    \TX_CONFIG_REG_INT[11]_i_1 
       (.I0(TOGGLE_TX),
        .I1(STATE[2]),
        .I2(STATE[3]),
        .I3(STATE[1]),
        .I4(STATE[0]),
        .I5(D[1]),
        .O(\TX_CONFIG_REG_INT[11]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT5 #(
    .INIT(32'hFFBA0008)) 
    \TX_CONFIG_REG_INT[14]_i_1 
       (.I0(STATE[0]),
        .I1(STATE[1]),
        .I2(STATE[2]),
        .I3(STATE[3]),
        .I4(D[2]),
        .O(\TX_CONFIG_REG_INT[14]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TX_CONFIG_REG_INT[0]_i_1_n_0 ),
        .Q(D[0]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TX_CONFIG_REG_INT[11]_i_1_n_0 ),
        .Q(D[1]),
        .R(out));
  FDRE #(
    .INIT(1'b0)) 
    \TX_CONFIG_REG_INT_reg[14] 
       (.C(userclk),
        .CE(1'b1),
        .D(\TX_CONFIG_REG_INT[14]_i_1_n_0 ),
        .Q(D[2]),
        .R(out));
  LUT6 #(
    .INIT(64'hEEEEEEEEEEEEEEFE)) 
    XMIT_CONFIG_INT_i_1
       (.I0(out),
        .I1(XMIT_CONFIG_INT_i_2__0_n_0),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I3(STATE[1]),
        .I4(STATE[0]),
        .I5(XMIT_CONFIG_INT_i_3_n_0),
        .O(XMIT_CONFIG_INT_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT3 #(
    .INIT(8'h8A)) 
    XMIT_CONFIG_INT_i_2
       (.I0(XMIT_CONFIG_INT),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .O(XMIT_CONFIG_INT_reg_0));
  LUT6 #(
    .INIT(64'hAAAA8AA2AAAA8AA0)) 
    XMIT_CONFIG_INT_i_2__0
       (.I0(XMIT_CONFIG_INT),
        .I1(STATE[3]),
        .I2(STATE[2]),
        .I3(STATE[0]),
        .I4(STATE[1]),
        .I5(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .O(XMIT_CONFIG_INT_i_2__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT2 #(
    .INIT(4'hE)) 
    XMIT_CONFIG_INT_i_3
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .O(XMIT_CONFIG_INT_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    XMIT_CONFIG_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(XMIT_CONFIG_INT_i_1_n_0),
        .Q(XMIT_CONFIG_INT),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT3 #(
    .INIT(8'hF4)) 
    XMIT_DATA_INT_i_1
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [2]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] [0]),
        .I2(XMIT_DATA_INT),
        .O(XMIT_DATA));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT4 #(
    .INIT(16'h2004)) 
    XMIT_DATA_INT_i_1__0
       (.I0(STATE[2]),
        .I1(STATE[3]),
        .I2(STATE[0]),
        .I3(STATE[1]),
        .O(XMIT_DATA_INT0));
  FDRE #(
    .INIT(1'b0)) 
    XMIT_DATA_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(XMIT_DATA_INT0),
        .Q(XMIT_DATA_INT),
        .R(out));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_1
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[11] ),
        .I1(Q[11]),
        .I2(\RX_CONFIG_SNAPSHOT_reg_n_0_[10] ),
        .I3(Q[10]),
        .I4(Q[9]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[9] ),
        .O(i__carry_i_1_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_2
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[8] ),
        .I1(Q[8]),
        .I2(\RX_CONFIG_SNAPSHOT_reg_n_0_[7] ),
        .I3(Q[7]),
        .I4(Q[6]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[6] ),
        .O(i__carry_i_2_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_3
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[5] ),
        .I1(Q[5]),
        .I2(\RX_CONFIG_SNAPSHOT_reg_n_0_[4] ),
        .I3(Q[4]),
        .I4(Q[3]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[3] ),
        .O(i__carry_i_3_n_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    i__carry_i_4
       (.I0(\RX_CONFIG_SNAPSHOT_reg_n_0_[2] ),
        .I1(Q[2]),
        .I2(\RX_CONFIG_SNAPSHOT_reg_n_0_[1] ),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(\RX_CONFIG_SNAPSHOT_reg_n_0_[0] ),
        .O(i__carry_i_4_n_0));
  CARRY4 plusOp_carry
       (.CI(1'b0),
        .CO({plusOp_carry_n_0,plusOp_carry_n_1,plusOp_carry_n_2,plusOp_carry_n_3}),
        .CYINIT(MASK_RUDI_BUFERR_TIMER[0]),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({plusOp_carry_n_4,plusOp_carry_n_5,plusOp_carry_n_6,plusOp_carry_n_7}),
        .S(MASK_RUDI_BUFERR_TIMER[4:1]));
  CARRY4 plusOp_carry__0
       (.CI(plusOp_carry_n_0),
        .CO({plusOp_carry__0_n_0,plusOp_carry__0_n_1,plusOp_carry__0_n_2,plusOp_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({plusOp_carry__0_n_4,plusOp_carry__0_n_5,plusOp_carry__0_n_6,plusOp_carry__0_n_7}),
        .S(MASK_RUDI_BUFERR_TIMER[8:5]));
  CARRY4 plusOp_carry__1
       (.CI(plusOp_carry__0_n_0),
        .CO({NLW_plusOp_carry__1_CO_UNCONNECTED[3],plusOp_carry__1_n_1,plusOp_carry__1_n_2,plusOp_carry__1_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O({plusOp_carry__1_n_4,plusOp_carry__1_n_5,plusOp_carry__1_n_6,plusOp_carry__1_n_7}),
        .S(MASK_RUDI_BUFERR_TIMER[12:9]));
endmodule

(* ORIG_REF_NAME = "GPCS_PMA_GEN" *) 
module qsgmii_1218_GPCS_PMA_GEN
   (MGT_TX_RESET,
    SR,
    gmii_rx_er_ch0,
    status_vector_ch0,
    D,
    ENABLEALIGN_CH0,
    gmii_rx_dv_ch0,
    an_interrupt_ch0,
    Q,
    gmii_rxd_ch0,
    \TXDATA_reg[6] ,
    \TXDATA_reg[7] ,
    SS,
    RESET_SYNC1,
    RESET_SYNC1_0,
    userclk,
    gmii_tx_er_ch0,
    gmii_tx_en_ch0,
    txbuferr,
    an_restart_config_ch0,
    rxrecclk,
    data_sync_reg6,
    dcm_locked,
    an_adv_config_vector_ch0,
    RXBUFERR,
    signal_detect,
    RESET_OUT,
    configuration_vector_ch0,
    gmii_txd_ch0,
    RXCLKCORCNT_CH0,
    MGT_RX_RESET,
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ,
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_1 ,
    RXNOTINTABLE_USR,
    RXCHARISK_USR,
    RXCHARISCOMMA_USR,
    link_timer_value_ch0,
    RXDATA_USR);
  output MGT_TX_RESET;
  output [0:0]SR;
  output gmii_rx_er_ch0;
  output [12:0]status_vector_ch0;
  output [0:0]D;
  output ENABLEALIGN_CH0;
  output gmii_rx_dv_ch0;
  output an_interrupt_ch0;
  output [0:0]Q;
  output [7:0]gmii_rxd_ch0;
  output [6:0]\TXDATA_reg[6] ;
  output \TXDATA_reg[7] ;
  output [0:0]SS;
  output [0:0]RESET_SYNC1;
  output [0:0]RESET_SYNC1_0;
  input userclk;
  input gmii_tx_er_ch0;
  input gmii_tx_en_ch0;
  input txbuferr;
  input an_restart_config_ch0;
  input rxrecclk;
  input data_sync_reg6;
  input dcm_locked;
  input [0:0]an_adv_config_vector_ch0;
  input RXBUFERR;
  input signal_detect;
  input RESET_OUT;
  input [4:0]configuration_vector_ch0;
  input [7:0]gmii_txd_ch0;
  input [1:0]RXCLKCORCNT_CH0;
  input MGT_RX_RESET;
  input \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ;
  input \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_1 ;
  input RXNOTINTABLE_USR;
  input RXCHARISK_USR;
  input RXCHARISCOMMA_USR;
  input [8:0]link_timer_value_ch0;
  input [7:0]RXDATA_USR;

  wire ACKNOWLEDGE_MATCH_3;
  wire AN_ENABLE_INT;
  wire [1:1]BASEX_REMOTE_FAULT_RSLVD;
  wire [0:0]D;
  wire DUPLEX_MODE_RSLVD_REG;
  wire D_0;
  wire ENABLEALIGN_CH0;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_1_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[14] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_1_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[14] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_10 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_11 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_13 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_18 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_19 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_20 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_21 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_8 ;
  wire I0;
  wire K28p5_REG1;
  wire LOOPBACK_INT;
  wire [12:12]LP_ADV_ABILITY;
  wire MASK_RUDI_BUFERR;
  wire MASK_RUDI_BUFERR_TIMER0;
  wire \MGT_RESET.SYNC_ASYNC_RESET_n_0 ;
  wire MGT_RX_RESET;
  wire MGT_RX_RESET_INT;
  wire MGT_TX_RESET;
  wire MGT_TX_RESET_INT;
  wire \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[0] ;
  wire \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[3] ;
  wire \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_i_1_n_0 ;
  wire [0:0]Q;
  wire RECEIVED_IDLE;
  (* async_reg = "true" *) wire RESET_INT;
  (* async_reg = "true" *) wire RESET_INT_PIPE;
  (* async_reg = "true" *) wire RESET_INT_PIPE_RXRECCLK;
  (* async_reg = "true" *) wire RESET_INT_RXRECCLK;
  wire RESET_OUT;
  wire [0:0]RESET_SYNC1;
  wire [0:0]RESET_SYNC1_0;
  wire RESTART_AN_EN;
  wire RESTART_AN_EN_REG;
  wire RESTART_AN_SET;
  wire RXBUFERR;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISK_USR;
  wire [1:0]RXCLKCORCNT_CH0;
  wire [7:0]RXDATA_USR;
  wire RXDISPERR_SRL1_out;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_SRL0_out;
  wire RXNOTINTABLE_USR;
  (* async_reg = "true" *) wire RXRECRESET;
  (* async_reg = "true" *) wire RXRECRESET_PIPE;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_1;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_2;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_3;
  wire RXSYNC_STATUS;
  wire [15:10]RX_CONFIG_REG;
  wire RX_CONFIG_REG_REG0;
  wire RX_CONFIG_VALID;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_11 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_12 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_13 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_19 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_30 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_9 ;
  wire \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_3 ;
  wire \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ;
  wire RX_IDLE;
  wire RX_INVALID;
  wire S2;
  wire SOFT_RESET_RXRECCLK;
  wire [0:0]SR;
  (* async_reg = "true" *) wire SRESET;
  (* async_reg = "true" *) wire SRESET_PIPE;
  wire [0:0]SS;
  wire STATUS_VECTOR_0_PRE;
  wire SYNC_SIGNAL_DETECT_n_0;
  wire SYNC_STATUS_REG;
  wire TRANSMITTER_n_0;
  wire TRANSMITTER_n_1;
  wire TRANSMITTER_n_10;
  wire TRANSMITTER_n_11;
  wire TRANSMITTER_n_12;
  wire TRANSMITTER_n_13;
  wire TRANSMITTER_n_14;
  wire TRANSMITTER_n_15;
  wire TRANSMITTER_n_16;
  wire TRANSMITTER_n_17;
  wire TRANSMITTER_n_18;
  wire TRANSMITTER_n_19;
  wire TRANSMITTER_n_2;
  wire TRANSMITTER_n_3;
  wire TRANSMITTER_n_4;
  wire TRANSMITTER_n_5;
  wire TRANSMITTER_n_6;
  wire TRANSMITTER_n_7;
  wire TRANSMITTER_n_8;
  wire TRANSMITTER_n_9;
  wire TXBUFERR_INT;
  wire \TXDATA[7]_i_2_n_0 ;
  wire [7:7]TXDATA_CH0;
  wire [6:0]\TXDATA_reg[6] ;
  wire \TXDATA_reg[7] ;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_i_3_n_0 ;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_i_4_n_0 ;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_i_5_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT[1]_i_1_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[0]_i_1_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[2]_i_1_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1_n_0 ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3_n_0 ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_4_n_0 ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_5_n_0 ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_1 ;
  wire XMIT_DATA;
  wire [0:0]an_adv_config_vector_ch0;
  wire an_interrupt_ch0;
  wire an_restart_config_ch0;
  wire [4:0]configuration_vector_ch0;
  wire data_out;
  wire data_sync_reg6;
  wire dcm_locked;
  wire gmii_rx_dv_ch0;
  wire gmii_rx_er_ch0;
  wire [7:0]gmii_rxd_ch0;
  wire gmii_tx_en_ch0;
  wire gmii_tx_er_ch0;
  wire [7:0]gmii_txd_ch0;
  wire [8:0]link_timer_value_ch0;
  wire p_0_in;
  wire p_0_out;
  wire p_1_out;
  wire p_6_out;
  wire rxrecclk;
  wire signal_detect;
  wire [12:0]status_vector_ch0;
  wire txbuferr;
  wire userclk;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i0/DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(1'b0),
        .Q(RXDISPERR_SRL1_out));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i0/DELAY_ERROR_TXOUTCLK.DELAY_RXNOTINTABLE " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXNOTINTABLE 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(D_0),
        .Q(RXNOTINTABLE_SRL0_out));
  FDRE #(
    .INIT(1'b0)) 
    \DELAY_ERROR_TXOUTCLK.RXDISPERR_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXDISPERR_SRL1_out),
        .Q(status_vector_ch0[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \DELAY_ERROR_TXOUTCLK.RXNOTINTABLE_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_SRL0_out),
        .Q(status_vector_ch0[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    DUPLEX_MODE_RSLVD_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LP_ADV_ABILITY),
        .Q(DUPLEX_MODE_RSLVD_REG),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_1 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .I1(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3_n_0 ),
        .O(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .S(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[14] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_1_n_0 ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[14] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .R(p_0_out));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_1 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_3_n_0 ),
        .O(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .S(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[14] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_1_n_0 ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[14] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .R(p_1_out));
  qsgmii_1218_AUTO_NEG_152 \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION 
       (.ACKNOWLEDGE_MATCH_3(ACKNOWLEDGE_MATCH_3),
        .BASEX_REMOTE_FAULT_RSLVD(BASEX_REMOTE_FAULT_RSLVD),
        .CONFIG_REG_MATCH_reg_0({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_19 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_20 }),
        .CONSISTENCY_MATCH_reg_0({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_21 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 }),
        .D({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_18 }),
        .EVEN_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_13 ),
        .EVEN_reg_0(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .I0(I0),
        .LP_ADV_ABILITY(LP_ADV_ABILITY),
        .MASK_RUDI_BUFERR(MASK_RUDI_BUFERR),
        .MASK_RUDI_BUFERR_TIMER0(MASK_RUDI_BUFERR_TIMER0),
        .\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ({AN_ENABLE_INT,Q,\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[0] }),
        .Q({RX_CONFIG_REG[15:14],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_19 ,RX_CONFIG_REG[12:10],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_30 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 }),
        .RECEIVED_IDLE(RECEIVED_IDLE),
        .RESTART_AN_SET(RESTART_AN_SET),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .\RX_CONFIG_REG_reg[13] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ),
        .RX_CONFIG_VALID(RX_CONFIG_VALID),
        .RX_CONFIG_VALID_INT_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_9 ),
        .RX_CONFIG_VALID_INT_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_INVALID_reg(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_11 ),
        .RX_INVALID_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_11 ),
        .S(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ),
        .SR(RX_CONFIG_REG_REG0),
        .\STATE_reg[1]_0 (\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_8 ),
        .STATUS_VECTOR_0_PRE_reg(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_13 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_12 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ),
        .XMIT_CONFIG_INT_reg_0(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_10 ),
        .XMIT_DATA(XMIT_DATA),
        .an_adv_config_vector_ch0(an_adv_config_vector_ch0),
        .an_interrupt_ch0(an_interrupt_ch0),
        .data_out(data_out),
        .link_timer_value_ch0(link_timer_value_ch0),
        .out(SRESET),
        .p_0_in(p_0_in),
        .status_vector_ch0({status_vector_ch0[12],status_vector_ch0[10:7],status_vector_ch0[4]}),
        .userclk(userclk));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_PIPE_RXRECCLK_reg 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(p_6_out),
        .Q(RESET_INT_PIPE_RXRECCLK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_PIPE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\MGT_RESET.SYNC_ASYNC_RESET_n_0 ),
        .Q(RESET_INT_PIPE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_RXRECCLK_reg 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_INT_PIPE_RXRECCLK),
        .PRE(p_6_out),
        .Q(RESET_INT_RXRECCLK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_INT_PIPE),
        .PRE(\MGT_RESET.SYNC_ASYNC_RESET_n_0 ),
        .Q(RESET_INT));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \MGT_RESET.SRESET_PIPE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_INT),
        .Q(SRESET_PIPE),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \MGT_RESET.SRESET_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(SRESET_PIPE),
        .Q(SRESET),
        .S(RESET_INT));
  qsgmii_1218_reset_sync_block_153 \MGT_RESET.SYNC_ASYNC_RESET 
       (.\MGT_RESET.RESET_INT_PIPE_reg (\MGT_RESET.SYNC_ASYNC_RESET_n_0 ),
        .RESET_OUT(RESET_OUT),
        .dcm_locked(dcm_locked),
        .userclk(userclk));
  qsgmii_1218_reset_sync_block_154 \MGT_RESET.SYNC_ASYNC_RESET_RECCLK 
       (.RESET_OUT(RESET_OUT),
        .dcm_locked(dcm_locked),
        .p_6_out(p_6_out),
        .reset_out(SOFT_RESET_RXRECCLK),
        .rxrecclk(rxrecclk));
  qsgmii_1218_reset_sync_block_155 \MGT_RESET.SYNC_SOFT_RESET_RECCLK 
       (.reset_out(SOFT_RESET_RXRECCLK),
        .rxrecclk(rxrecclk));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch0[0]),
        .Q(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[0] ),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch0[1]),
        .Q(LOOPBACK_INT),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch0[2]),
        .Q(Q),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch0[3]),
        .Q(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[3] ),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch0[4]),
        .Q(AN_ENABLE_INT),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(an_restart_config_ch0),
        .Q(RESTART_AN_EN_REG),
        .R(SRESET));
  LUT2 #(
    .INIT(4'h2)) 
    \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_i_1 
       (.I0(an_restart_config_ch0),
        .I1(RESTART_AN_EN_REG),
        .O(\NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_i_1_n_0 ),
        .Q(RESTART_AN_EN),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_SET_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESTART_AN_EN),
        .Q(RESTART_AN_SET),
        .R(SRESET));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT2 #(
    .INIT(4'hE)) 
    RESET_SYNC1_i_1
       (.I0(SR),
        .I1(MGT_RX_RESET),
        .O(SS));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT2 #(
    .INIT(4'hE)) 
    RESET_SYNC1_i_1__0
       (.I0(SR),
        .I1(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ),
        .O(RESET_SYNC1));
  LUT2 #(
    .INIT(4'hE)) 
    RESET_SYNC1_i_1__1
       (.I0(SR),
        .I1(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_1 ),
        .O(RESET_SYNC1_0));
  qsgmii_1218_RX_156 \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK 
       (.ACKNOWLEDGE_MATCH_3(ACKNOWLEDGE_MATCH_3),
        .BASEX_REMOTE_FAULT_RSLVD(BASEX_REMOTE_FAULT_RSLVD),
        .CONSISTENCY_MATCH_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ),
        .D_0(D_0),
        .EVEN_reg(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .I0(I0),
        .I_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_12 ),
        .I_reg_1(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_13 ),
        .K28p5_REG1(K28p5_REG1),
        .MASK_RUDI_BUFERR(MASK_RUDI_BUFERR),
        .\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] ({\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[3] ,Q}),
        .\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] (\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_11 ),
        .Q({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] }),
        .RECEIVED_IDLE(RECEIVED_IDLE),
        .RECEIVED_IDLE_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_9 ),
        .RXEVEN0_out(RXEVEN0_out),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_CONFIG_REG_NULL_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ),
        .RX_CONFIG_REG_NULL_reg_0(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_8 ),
        .\RX_CONFIG_REG_REG_reg[13] ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_19 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_20 }),
        .\RX_CONFIG_SNAPSHOT_reg[13] ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_21 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 }),
        .RX_CONFIG_VALID(RX_CONFIG_VALID),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_RUDI_INVALID_REG_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_11 ),
        .S(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ),
        .S2(S2),
        .SGMII_PHY_STATUS_reg({RX_CONFIG_REG[15:14],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_19 ,RX_CONFIG_REG[12:10],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_30 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 }),
        .SR(RX_CONFIG_REG_REG0),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ),
        .\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg (SR),
        .\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 (\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_3 ),
        .XMIT_DATA(XMIT_DATA),
        .XMIT_DATA_INT_reg(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_13 ),
        .gmii_rx_dv_ch0(gmii_rx_dv_ch0),
        .gmii_rx_er_ch0(gmii_rx_er_ch0),
        .gmii_rxd_ch0(gmii_rxd_ch0),
        .out(SRESET),
        .p_0_in(p_0_in),
        .status_vector_ch0(status_vector_ch0[3:2]),
        .userclk(userclk));
  qsgmii_1218_SYNCHRONISE_157 \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION 
       (.D_0(D_0),
        .ENABLEALIGN_CH0(ENABLEALIGN_CH0),
        .EXTEND_reg(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .K28p5_REG1(K28p5_REG1),
        .Q(LOOPBACK_INT),
        .RXEVEN0_out(RXEVEN0_out),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_INVALID_reg(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_3 ),
        .S2(S2),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg (SR),
        .data_sync_reg6(SYNC_SIGNAL_DETECT_n_0),
        .p_0_in(p_0_in),
        .userclk(userclk));
  FDRE #(
    .INIT(1'b0)) 
    STATUS_VECTOR_0_PRE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_13 ),
        .Q(STATUS_VECTOR_0_PRE),
        .R(data_sync_reg6));
  FDRE \STATUS_VECTOR_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATUS_VECTOR_0_PRE),
        .Q(status_vector_ch0[0]),
        .R(1'b0));
  FDRE \STATUS_VECTOR_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(DUPLEX_MODE_RSLVD_REG),
        .Q(status_vector_ch0[11]),
        .R(1'b0));
  FDRE \STATUS_VECTOR_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_REG),
        .Q(status_vector_ch0[1]),
        .R(1'b0));
  qsgmii_1218_sync_block_158 SYNC_SIGNAL_DETECT
       (.MASK_RUDI_BUFERR_TIMER0(MASK_RUDI_BUFERR_TIMER0),
        .Q(Q),
        .SIGNAL_DETECT_REG_reg(SYNC_SIGNAL_DETECT_n_0),
        .data_out(data_out),
        .p_0_in(p_0_in),
        .signal_detect(signal_detect),
        .userclk(userclk));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXSYNC_STATUS),
        .Q(SYNC_STATUS_REG),
        .R(1'b0));
  qsgmii_1218_TX_159 TRANSMITTER
       (.D({TRANSMITTER_n_3,TRANSMITTER_n_4,TRANSMITTER_n_5,TRANSMITTER_n_6,TRANSMITTER_n_7,TRANSMITTER_n_8,TRANSMITTER_n_9,TRANSMITTER_n_10}),
        .Q({\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[3] ,LOOPBACK_INT}),
        .RXCHARISCOMMA_USR(RXCHARISCOMMA_USR),
        .RXCHARISK_USR(RXCHARISK_USR),
        .RXDATA_USR(RXDATA_USR),
        .\TX_CONFIG_REG_INT_reg[14] ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_18 }),
        .\USE_ROCKET_IO.MGT_TX_RESET_INT_reg (MGT_TX_RESET),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg (TRANSMITTER_n_2),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg (TRANSMITTER_n_1),
        .\USE_ROCKET_IO.TXCHARISK_reg (TRANSMITTER_n_0),
        .\USE_ROCKET_IO.TXDATA_reg[2] (TRANSMITTER_n_15),
        .\USE_ROCKET_IO.TXDATA_reg[2]_0 (TRANSMITTER_n_16),
        .\USE_ROCKET_IO.TXDATA_reg[3] (TRANSMITTER_n_17),
        .\USE_ROCKET_IO.TXDATA_reg[5] (TRANSMITTER_n_18),
        .\USE_ROCKET_IO.TXDATA_reg[6] ({TRANSMITTER_n_11,TRANSMITTER_n_12,TRANSMITTER_n_13,TRANSMITTER_n_14}),
        .\USE_ROCKET_IO.TXDATA_reg[7] (TRANSMITTER_n_19),
        .XMIT_CONFIG_INT_reg_0(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_10 ),
        .XMIT_DATA(XMIT_DATA),
        .gmii_tx_en_ch0(gmii_tx_en_ch0),
        .gmii_tx_er_ch0(gmii_tx_er_ch0),
        .gmii_txd_ch0(gmii_txd_ch0),
        .userclk(userclk));
  LUT4 #(
    .INIT(16'hDF00)) 
    \TXDATA[7]_i_1 
       (.I0(D),
        .I1(\TXDATA[7]_i_2_n_0 ),
        .I2(\TXDATA_reg[6] [5]),
        .I3(TXDATA_CH0),
        .O(\TXDATA_reg[7] ));
  LUT6 #(
    .INIT(64'hFFFDFFFFFFFFFFFF)) 
    \TXDATA[7]_i_2 
       (.I0(\TXDATA_reg[6] [3]),
        .I1(\TXDATA_reg[6] [0]),
        .I2(\TXDATA_reg[6] [1]),
        .I3(\TXDATA_reg[6] [6]),
        .I4(\TXDATA_reg[6] [2]),
        .I5(\TXDATA_reg[6] [4]),
        .O(\TXDATA[7]_i_2_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_1 
       (.I0(TXBUFERR_INT),
        .I1(RESET_INT),
        .O(p_1_out));
  LUT2 #(
    .INIT(4'hB)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_2 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_3_n_0 ),
        .O(MGT_TX_RESET_INT));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_3 
       (.I0(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_4_n_0 ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .I5(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_5_n_0 ),
        .O(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_4 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .O(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_5 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .O(\USE_ROCKET_IO.MGT_TX_RESET_INT_i_5_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(MGT_TX_RESET_INT),
        .Q(MGT_TX_RESET),
        .S(p_1_out));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT[1]_i_1 
       (.I0(RXBUFERR),
        .I1(SR),
        .I2(LOOPBACK_INT),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT[1]_i_1_n_0 ),
        .Q(p_0_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_2),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_1),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[0]_i_1 
       (.I0(RXCLKCORCNT_CH0[0]),
        .I1(SR),
        .I2(LOOPBACK_INT),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[2]_i_1 
       (.I0(RXCLKCORCNT_CH0[1]),
        .I1(SR),
        .I2(LOOPBACK_INT),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[0]_i_1_n_0 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[2]_i_1_n_0 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_10),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_9),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_8),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_7),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_6),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_5),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_4),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ),
        .R(SR));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_3),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ),
        .R(SR));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1 
       (.I0(LOOPBACK_INT),
        .I1(SR),
        .I2(RXNOTINTABLE_USR),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1_n_0 ),
        .Q(D_0),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_1 
       (.I0(p_0_in),
        .I1(RESET_INT),
        .O(p_0_out));
  LUT2 #(
    .INIT(4'hB)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_2 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .I1(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3_n_0 ),
        .O(MGT_RX_RESET_INT));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3 
       (.I0(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_4_n_0 ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .I5(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_5_n_0 ),
        .O(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_4 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .O(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_5 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .O(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_5_n_0 ));
  FDSE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(MGT_RX_RESET_INT),
        .Q(SR),
        .S(p_0_out));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.TXBUFERR_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(txbuferr),
        .Q(TXBUFERR_INT),
        .R(MGT_TX_RESET));
  FDRE \USE_ROCKET_IO.TXCHARISK_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_0),
        .Q(D),
        .R(MGT_TX_RESET));
  FDRE \USE_ROCKET_IO.TXDATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_14),
        .Q(\TXDATA_reg[6] [0]),
        .R(1'b0));
  FDRE \USE_ROCKET_IO.TXDATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_13),
        .Q(\TXDATA_reg[6] [1]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_16),
        .Q(\TXDATA_reg[6] [2]),
        .S(TRANSMITTER_n_15));
  FDSE \USE_ROCKET_IO.TXDATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_17),
        .Q(\TXDATA_reg[6] [3]),
        .S(TRANSMITTER_n_15));
  FDRE \USE_ROCKET_IO.TXDATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_12),
        .Q(\TXDATA_reg[6] [4]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_18),
        .Q(\TXDATA_reg[6] [5]),
        .S(TRANSMITTER_n_15));
  FDRE \USE_ROCKET_IO.TXDATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_11),
        .Q(\TXDATA_reg[6] [6]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_19),
        .Q(TXDATA_CH0),
        .S(TRANSMITTER_n_15));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b1),
        .O(RXRECRESET));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b1),
        .O(RXRECRESET_PIPE));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_1));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_2));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_3));
endmodule

(* ORIG_REF_NAME = "GPCS_PMA_GEN" *) 
module qsgmii_1218_GPCS_PMA_GEN_69
   (Q,
    MGT_RX_RESET,
    status_vector_ch1,
    gmii_rxd_ch1,
    gmii_rx_er_ch1,
    TXCHARISK,
    TXDATA_CH1,
    an_interrupt_ch1,
    gmii_rx_dv_ch1,
    ENABLEALIGN_CH1,
    userclk,
    dcm_locked,
    signal_detect,
    RESET_OUT,
    rxrecclk,
    configuration_vector_ch1,
    gmii_tx_er_ch1,
    gmii_tx_en_ch1,
    gmii_txd_ch1,
    RXCLKCORCNT_CH1,
    txbuferr,
    an_restart_config_ch1,
    RXCHARISK_USR,
    RXCHARISCOMMA_USR,
    link_timer_value_ch1,
    RXNOTINTABLE_USR,
    RXDATA_USR,
    data_sync_reg6,
    an_adv_config_vector_ch1,
    RXBUFSTATUS_CH1);
  output [0:0]Q;
  output MGT_RX_RESET;
  output [12:0]status_vector_ch1;
  output [7:0]gmii_rxd_ch1;
  output gmii_rx_er_ch1;
  output TXCHARISK;
  output [7:0]TXDATA_CH1;
  output an_interrupt_ch1;
  output gmii_rx_dv_ch1;
  output ENABLEALIGN_CH1;
  input userclk;
  input dcm_locked;
  input signal_detect;
  input RESET_OUT;
  input rxrecclk;
  input [4:0]configuration_vector_ch1;
  input gmii_tx_er_ch1;
  input gmii_tx_en_ch1;
  input [7:0]gmii_txd_ch1;
  input [1:0]RXCLKCORCNT_CH1;
  input txbuferr;
  input an_restart_config_ch1;
  input RXCHARISK_USR;
  input RXCHARISCOMMA_USR;
  input [8:0]link_timer_value_ch1;
  input RXNOTINTABLE_USR;
  input [7:0]RXDATA_USR;
  input data_sync_reg6;
  input [0:0]an_adv_config_vector_ch1;
  input [0:0]RXBUFSTATUS_CH1;

  wire ACKNOWLEDGE_MATCH_3;
  wire AN_ENABLE_INT;
  wire [1:1]BASEX_REMOTE_FAULT_RSLVD;
  wire D;
  wire DUPLEX_MODE_RSLVD_REG;
  wire ENABLEALIGN_CH1;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_2_n_0 ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_3_n_0 ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_4_n_0 ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_5_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[14] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_2_n_0 ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_3_n_0 ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_4_n_0 ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_5_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[14] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_10 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_11 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_13 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_18 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_19 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_20 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_21 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_8 ;
  wire I0;
  wire K28p5_REG1;
  wire LOOPBACK_INT;
  wire [12:12]LP_ADV_ABILITY;
  wire MASK_RUDI_BUFERR;
  wire MASK_RUDI_BUFERR_TIMER0;
  wire \MGT_RESET.SYNC_ASYNC_RESET_n_0 ;
  wire MGT_RX_RESET;
  wire MGT_RX_RESET_INT;
  wire MGT_TX_RESET_INT;
  wire \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[0] ;
  wire \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[3] ;
  wire \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_i_1__0_n_0 ;
  wire [0:0]Q;
  wire RECEIVED_IDLE;
  (* async_reg = "true" *) wire RESET_INT;
  (* async_reg = "true" *) wire RESET_INT_PIPE;
  (* async_reg = "true" *) wire RESET_INT_PIPE_RXRECCLK;
  (* async_reg = "true" *) wire RESET_INT_RXRECCLK;
  wire RESET_OUT;
  wire RESTART_AN_EN;
  wire RESTART_AN_EN_REG;
  wire RESTART_AN_SET;
  wire [0:0]RXBUFSTATUS_CH1;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISK_USR;
  wire [1:0]RXCLKCORCNT_CH1;
  wire [7:0]RXDATA_USR;
  wire RXDISPERR_SRL1_out;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_SRL0_out;
  wire RXNOTINTABLE_USR;
  (* async_reg = "true" *) wire RXRECRESET;
  (* async_reg = "true" *) wire RXRECRESET_PIPE;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_1;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_2;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_3;
  wire RXSYNC_STATUS;
  wire [15:10]RX_CONFIG_REG;
  wire RX_CONFIG_REG_REG0;
  wire RX_CONFIG_VALID;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_16 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_20 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_21 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_30 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_9 ;
  wire \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_3 ;
  wire \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ;
  wire RX_IDLE;
  wire RX_INVALID;
  wire S2;
  wire SOFT_RESET_RXRECCLK;
  (* async_reg = "true" *) wire SRESET;
  (* async_reg = "true" *) wire SRESET_PIPE;
  wire STATUS_VECTOR_0_PRE;
  wire SYNC_SIGNAL_DETECT_n_0;
  wire SYNC_STATUS_REG;
  wire TRANSMITTER_n_0;
  wire TRANSMITTER_n_1;
  wire TRANSMITTER_n_10;
  wire TRANSMITTER_n_11;
  wire TRANSMITTER_n_12;
  wire TRANSMITTER_n_13;
  wire TRANSMITTER_n_14;
  wire TRANSMITTER_n_15;
  wire TRANSMITTER_n_16;
  wire TRANSMITTER_n_17;
  wire TRANSMITTER_n_18;
  wire TRANSMITTER_n_19;
  wire TRANSMITTER_n_2;
  wire TRANSMITTER_n_3;
  wire TRANSMITTER_n_4;
  wire TRANSMITTER_n_5;
  wire TRANSMITTER_n_6;
  wire TRANSMITTER_n_7;
  wire TRANSMITTER_n_8;
  wire TRANSMITTER_n_9;
  wire TXBUFERR_INT;
  wire TXCHARISK;
  wire [7:0]TXDATA_CH1;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT[1]_i_1__0_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[0]_i_1__0_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[2]_i_1__0_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1__0_n_0 ;
  wire XMIT_DATA;
  wire [0:0]an_adv_config_vector_ch1;
  wire an_interrupt_ch1;
  wire an_restart_config_ch1;
  wire [4:0]configuration_vector_ch1;
  wire data_out;
  wire data_sync_reg6;
  wire dcm_locked;
  wire gmii_rx_dv_ch1;
  wire gmii_rx_er_ch1;
  wire [7:0]gmii_rxd_ch1;
  wire gmii_tx_en_ch1;
  wire gmii_tx_er_ch1;
  wire [7:0]gmii_txd_ch1;
  wire [8:0]link_timer_value_ch1;
  wire p_0_in;
  wire p_0_out;
  wire p_1_out;
  wire p_6_out;
  wire rxrecclk;
  wire signal_detect;
  wire [12:0]status_vector_ch1;
  wire txbuferr;
  wire userclk;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i1/DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(1'b0),
        .Q(RXDISPERR_SRL1_out));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i1/DELAY_ERROR_TXOUTCLK.DELAY_RXNOTINTABLE " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXNOTINTABLE 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(D),
        .Q(RXNOTINTABLE_SRL0_out));
  FDRE #(
    .INIT(1'b0)) 
    \DELAY_ERROR_TXOUTCLK.RXDISPERR_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXDISPERR_SRL1_out),
        .Q(status_vector_ch1[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \DELAY_ERROR_TXOUTCLK.RXNOTINTABLE_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_SRL0_out),
        .Q(status_vector_ch1[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    DUPLEX_MODE_RSLVD_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LP_ADV_ABILITY),
        .Q(DUPLEX_MODE_RSLVD_REG),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_1__0 
       (.I0(p_0_in),
        .I1(RESET_INT),
        .O(p_0_out));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_2 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_3_n_0 ),
        .O(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_3 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_4_n_0 ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_5_n_0 ),
        .O(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_4 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .O(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_5 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .O(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_5_n_0 ));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .S(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[14] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_2_n_0 ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[14] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .R(p_0_out));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_1__0 
       (.I0(TXBUFERR_INT),
        .I1(RESET_INT),
        .O(p_1_out));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_2 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_3_n_0 ),
        .O(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_3 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_4_n_0 ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_5_n_0 ),
        .O(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_4 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .O(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_5 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .O(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_5_n_0 ));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .S(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[14] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_2_n_0 ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[14] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .R(p_1_out));
  qsgmii_1218_AUTO_NEG_144 \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION 
       (.ACKNOWLEDGE_MATCH_3(ACKNOWLEDGE_MATCH_3),
        .BASEX_REMOTE_FAULT_RSLVD(BASEX_REMOTE_FAULT_RSLVD),
        .CONFIG_REG_MATCH_reg_0({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_19 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_20 }),
        .CONSISTENCY_MATCH_reg_0({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_21 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 }),
        .D({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_18 }),
        .EVEN_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ),
        .EVEN_reg_0(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .I0(I0),
        .LP_ADV_ABILITY(LP_ADV_ABILITY),
        .MASK_RUDI_BUFERR(MASK_RUDI_BUFERR),
        .MASK_RUDI_BUFERR_TIMER0(MASK_RUDI_BUFERR_TIMER0),
        .\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ({AN_ENABLE_INT,Q,\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[0] }),
        .Q({RX_CONFIG_REG[15:14],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_16 ,RX_CONFIG_REG[12:10],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_20 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_21 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 }),
        .RECEIVED_IDLE(RECEIVED_IDLE),
        .RESTART_AN_SET(RESTART_AN_SET),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .\RX_CONFIG_REG_reg[13] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ),
        .RX_CONFIG_VALID(RX_CONFIG_VALID),
        .RX_CONFIG_VALID_INT_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ),
        .RX_CONFIG_VALID_INT_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_INVALID_reg(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_11 ),
        .RX_INVALID_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ),
        .S(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_30 ),
        .SR(RX_CONFIG_REG_REG0),
        .\STATE_reg[1]_0 (\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_8 ),
        .STATUS_VECTOR_0_PRE_reg(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_13 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_9 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ),
        .XMIT_CONFIG_INT_reg_0(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_10 ),
        .XMIT_DATA(XMIT_DATA),
        .an_adv_config_vector_ch1(an_adv_config_vector_ch1),
        .an_interrupt_ch1(an_interrupt_ch1),
        .data_out(data_out),
        .link_timer_value_ch1(link_timer_value_ch1),
        .out(SRESET),
        .p_0_in(p_0_in),
        .status_vector_ch1({status_vector_ch1[12],status_vector_ch1[10:7],status_vector_ch1[4]}),
        .userclk(userclk));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_PIPE_RXRECCLK_reg 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(p_6_out),
        .Q(RESET_INT_PIPE_RXRECCLK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_PIPE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\MGT_RESET.SYNC_ASYNC_RESET_n_0 ),
        .Q(RESET_INT_PIPE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_RXRECCLK_reg 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_INT_PIPE_RXRECCLK),
        .PRE(p_6_out),
        .Q(RESET_INT_RXRECCLK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_INT_PIPE),
        .PRE(\MGT_RESET.SYNC_ASYNC_RESET_n_0 ),
        .Q(RESET_INT));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \MGT_RESET.SRESET_PIPE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_INT),
        .Q(SRESET_PIPE),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \MGT_RESET.SRESET_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(SRESET_PIPE),
        .Q(SRESET),
        .S(RESET_INT));
  qsgmii_1218_reset_sync_block_145 \MGT_RESET.SYNC_ASYNC_RESET 
       (.\MGT_RESET.RESET_INT_PIPE_reg (\MGT_RESET.SYNC_ASYNC_RESET_n_0 ),
        .RESET_OUT(RESET_OUT),
        .dcm_locked(dcm_locked),
        .userclk(userclk));
  qsgmii_1218_reset_sync_block_146 \MGT_RESET.SYNC_ASYNC_RESET_RECCLK 
       (.RESET_OUT(RESET_OUT),
        .dcm_locked(dcm_locked),
        .p_6_out(p_6_out),
        .reset_out(SOFT_RESET_RXRECCLK),
        .rxrecclk(rxrecclk));
  qsgmii_1218_reset_sync_block_147 \MGT_RESET.SYNC_SOFT_RESET_RECCLK 
       (.reset_out(SOFT_RESET_RXRECCLK),
        .rxrecclk(rxrecclk));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch1[0]),
        .Q(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[0] ),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch1[1]),
        .Q(LOOPBACK_INT),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch1[2]),
        .Q(Q),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch1[3]),
        .Q(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[3] ),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch1[4]),
        .Q(AN_ENABLE_INT),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(an_restart_config_ch1),
        .Q(RESTART_AN_EN_REG),
        .R(SRESET));
  LUT2 #(
    .INIT(4'h2)) 
    \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_i_1__0 
       (.I0(an_restart_config_ch1),
        .I1(RESTART_AN_EN_REG),
        .O(\NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_i_1__0_n_0 ),
        .Q(RESTART_AN_EN),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_SET_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESTART_AN_EN),
        .Q(RESTART_AN_SET),
        .R(SRESET));
  qsgmii_1218_RX_148 \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK 
       (.ACKNOWLEDGE_MATCH_3(ACKNOWLEDGE_MATCH_3),
        .BASEX_REMOTE_FAULT_RSLVD(BASEX_REMOTE_FAULT_RSLVD),
        .CONSISTENCY_MATCH_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ),
        .D(D),
        .EVEN_reg(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .I0(I0),
        .I_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_9 ),
        .I_reg_1(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ),
        .K28p5_REG1(K28p5_REG1),
        .MASK_RUDI_BUFERR(MASK_RUDI_BUFERR),
        .\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] ({\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[3] ,Q}),
        .\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] (\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_11 ),
        .Q({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] }),
        .RECEIVED_IDLE(RECEIVED_IDLE),
        .RECEIVED_IDLE_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ),
        .RXEVEN0_out(RXEVEN0_out),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_CONFIG_REG_NULL_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ),
        .RX_CONFIG_REG_NULL_reg_0(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_8 ),
        .\RX_CONFIG_REG_REG_reg[13] ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_19 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_20 }),
        .\RX_CONFIG_SNAPSHOT_reg[13] ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_21 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 }),
        .RX_CONFIG_VALID(RX_CONFIG_VALID),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_RUDI_INVALID_REG_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ),
        .S(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_30 ),
        .S2(S2),
        .SGMII_PHY_STATUS_reg({RX_CONFIG_REG[15:14],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_16 ,RX_CONFIG_REG[12:10],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_20 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_21 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 }),
        .SR(RX_CONFIG_REG_REG0),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ),
        .\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg (MGT_RX_RESET),
        .\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 (\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_3 ),
        .XMIT_DATA(XMIT_DATA),
        .XMIT_DATA_INT_reg(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_13 ),
        .gmii_rx_dv_ch1(gmii_rx_dv_ch1),
        .gmii_rx_er_ch1(gmii_rx_er_ch1),
        .gmii_rxd_ch1(gmii_rxd_ch1),
        .out(SRESET),
        .p_0_in(p_0_in),
        .status_vector_ch1(status_vector_ch1[3:2]),
        .userclk(userclk));
  qsgmii_1218_SYNCHRONISE_149 \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION 
       (.D(D),
        .ENABLEALIGN_CH1(ENABLEALIGN_CH1),
        .EXTEND_reg(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .K28p5_REG1(K28p5_REG1),
        .Q(LOOPBACK_INT),
        .RXEVEN0_out(RXEVEN0_out),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_INVALID_reg(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_3 ),
        .S2(S2),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg (MGT_RX_RESET),
        .data_sync_reg6(SYNC_SIGNAL_DETECT_n_0),
        .p_0_in(p_0_in),
        .userclk(userclk));
  FDRE #(
    .INIT(1'b0)) 
    STATUS_VECTOR_0_PRE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_13 ),
        .Q(STATUS_VECTOR_0_PRE),
        .R(data_sync_reg6));
  FDRE \STATUS_VECTOR_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATUS_VECTOR_0_PRE),
        .Q(status_vector_ch1[0]),
        .R(1'b0));
  FDRE \STATUS_VECTOR_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(DUPLEX_MODE_RSLVD_REG),
        .Q(status_vector_ch1[11]),
        .R(1'b0));
  FDRE \STATUS_VECTOR_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_REG),
        .Q(status_vector_ch1[1]),
        .R(1'b0));
  qsgmii_1218_sync_block_150 SYNC_SIGNAL_DETECT
       (.MASK_RUDI_BUFERR_TIMER0(MASK_RUDI_BUFERR_TIMER0),
        .Q(Q),
        .SIGNAL_DETECT_REG_reg(SYNC_SIGNAL_DETECT_n_0),
        .data_out(data_out),
        .p_0_in(p_0_in),
        .signal_detect(signal_detect),
        .userclk(userclk));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXSYNC_STATUS),
        .Q(SYNC_STATUS_REG),
        .R(1'b0));
  qsgmii_1218_TX_151 TRANSMITTER
       (.D({TRANSMITTER_n_3,TRANSMITTER_n_4,TRANSMITTER_n_5,TRANSMITTER_n_6,TRANSMITTER_n_7,TRANSMITTER_n_8,TRANSMITTER_n_9,TRANSMITTER_n_10}),
        .Q({\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[3] ,LOOPBACK_INT}),
        .RXCHARISCOMMA_USR(RXCHARISCOMMA_USR),
        .RXCHARISK_USR(RXCHARISK_USR),
        .RXDATA_USR(RXDATA_USR),
        .\TX_CONFIG_REG_INT_reg[14] ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_18 }),
        .\USE_ROCKET_IO.MGT_TX_RESET_INT_reg (\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg (TRANSMITTER_n_2),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg (TRANSMITTER_n_1),
        .\USE_ROCKET_IO.TXCHARISK_reg (TRANSMITTER_n_0),
        .\USE_ROCKET_IO.TXDATA_reg[2] (TRANSMITTER_n_15),
        .\USE_ROCKET_IO.TXDATA_reg[2]_0 (TRANSMITTER_n_16),
        .\USE_ROCKET_IO.TXDATA_reg[3] (TRANSMITTER_n_17),
        .\USE_ROCKET_IO.TXDATA_reg[5] (TRANSMITTER_n_18),
        .\USE_ROCKET_IO.TXDATA_reg[6] ({TRANSMITTER_n_11,TRANSMITTER_n_12,TRANSMITTER_n_13,TRANSMITTER_n_14}),
        .\USE_ROCKET_IO.TXDATA_reg[7] (TRANSMITTER_n_19),
        .XMIT_CONFIG_INT_reg_0(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_10 ),
        .XMIT_DATA(XMIT_DATA),
        .gmii_tx_en_ch1(gmii_tx_en_ch1),
        .gmii_tx_er_ch1(gmii_tx_er_ch1),
        .gmii_txd_ch1(gmii_txd_ch1),
        .userclk(userclk));
  LUT2 #(
    .INIT(4'hB)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_1__0 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_3_n_0 ),
        .O(MGT_TX_RESET_INT));
  FDSE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(MGT_TX_RESET_INT),
        .Q(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ),
        .S(p_1_out));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT[1]_i_1__0 
       (.I0(RXBUFSTATUS_CH1),
        .I1(MGT_RX_RESET),
        .I2(LOOPBACK_INT),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT[1]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT[1]_i_1__0_n_0 ),
        .Q(p_0_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_2),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_1),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .R(MGT_RX_RESET));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[0]_i_1__0 
       (.I0(RXCLKCORCNT_CH1[0]),
        .I1(MGT_RX_RESET),
        .I2(LOOPBACK_INT),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[2]_i_1__0 
       (.I0(RXCLKCORCNT_CH1[1]),
        .I1(MGT_RX_RESET),
        .I2(LOOPBACK_INT),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[2]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[0]_i_1__0_n_0 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[2]_i_1__0_n_0 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_10),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_9),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_8),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_7),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_6),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_5),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_4),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_3),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ),
        .R(MGT_RX_RESET));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1__0 
       (.I0(LOOPBACK_INT),
        .I1(MGT_RX_RESET),
        .I2(RXNOTINTABLE_USR),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1__0_n_0 ),
        .Q(D),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_1__0 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_3_n_0 ),
        .O(MGT_RX_RESET_INT));
  FDSE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(MGT_RX_RESET_INT),
        .Q(MGT_RX_RESET),
        .S(p_0_out));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.TXBUFERR_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(txbuferr),
        .Q(TXBUFERR_INT),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ));
  FDRE \USE_ROCKET_IO.TXCHARISK_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_0),
        .Q(TXCHARISK),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ));
  FDRE \USE_ROCKET_IO.TXDATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_14),
        .Q(TXDATA_CH1[0]),
        .R(1'b0));
  FDRE \USE_ROCKET_IO.TXDATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_13),
        .Q(TXDATA_CH1[1]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_16),
        .Q(TXDATA_CH1[2]),
        .S(TRANSMITTER_n_15));
  FDSE \USE_ROCKET_IO.TXDATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_17),
        .Q(TXDATA_CH1[3]),
        .S(TRANSMITTER_n_15));
  FDRE \USE_ROCKET_IO.TXDATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_12),
        .Q(TXDATA_CH1[4]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_18),
        .Q(TXDATA_CH1[5]),
        .S(TRANSMITTER_n_15));
  FDRE \USE_ROCKET_IO.TXDATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_11),
        .Q(TXDATA_CH1[6]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_19),
        .Q(TXDATA_CH1[7]),
        .S(TRANSMITTER_n_15));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b1),
        .O(RXRECRESET));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b1),
        .O(RXRECRESET_PIPE));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_1));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_2));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_3));
endmodule

(* ORIG_REF_NAME = "GPCS_PMA_GEN" *) 
module qsgmii_1218_GPCS_PMA_GEN_70
   (Q,
    MGT_RX_RESET,
    status_vector_ch2,
    gmii_rxd_ch2,
    gmii_rx_er_ch2,
    TXCHARISK,
    TXDATA_CH2,
    an_interrupt_ch2,
    gmii_rx_dv_ch2,
    ENABLEALIGN_CH2,
    userclk,
    dcm_locked,
    signal_detect,
    RESET_OUT,
    rxrecclk,
    configuration_vector_ch2,
    gmii_tx_er_ch2,
    gmii_tx_en_ch2,
    gmii_txd_ch2,
    RXCLKCORCNT_CH2,
    txbuferr,
    an_restart_config_ch2,
    RXCHARISK_USR,
    RXCHARISCOMMA_USR,
    link_timer_value_ch2,
    RXNOTINTABLE_USR,
    RXDATA_USR,
    data_sync_reg6,
    an_adv_config_vector_ch2,
    RXBUFSTATUS_CH2);
  output [0:0]Q;
  output MGT_RX_RESET;
  output [12:0]status_vector_ch2;
  output [7:0]gmii_rxd_ch2;
  output gmii_rx_er_ch2;
  output TXCHARISK;
  output [7:0]TXDATA_CH2;
  output an_interrupt_ch2;
  output gmii_rx_dv_ch2;
  output ENABLEALIGN_CH2;
  input userclk;
  input dcm_locked;
  input signal_detect;
  input RESET_OUT;
  input rxrecclk;
  input [4:0]configuration_vector_ch2;
  input gmii_tx_er_ch2;
  input gmii_tx_en_ch2;
  input [7:0]gmii_txd_ch2;
  input [1:0]RXCLKCORCNT_CH2;
  input txbuferr;
  input an_restart_config_ch2;
  input RXCHARISK_USR;
  input RXCHARISCOMMA_USR;
  input [8:0]link_timer_value_ch2;
  input RXNOTINTABLE_USR;
  input [7:0]RXDATA_USR;
  input data_sync_reg6;
  input [0:0]an_adv_config_vector_ch2;
  input [0:0]RXBUFSTATUS_CH2;

  wire ACKNOWLEDGE_MATCH_3;
  wire AN_ENABLE_INT;
  wire [1:1]BASEX_REMOTE_FAULT_RSLVD;
  wire D;
  wire DUPLEX_MODE_RSLVD_REG;
  wire ENABLEALIGN_CH2;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_2__0_n_0 ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_3__0_n_0 ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_4__0_n_0 ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_5__0_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[14] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_2__0_n_0 ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_3__0_n_0 ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_4__0_n_0 ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_5__0_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[14] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_10 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_11 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_13 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_18 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_19 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_20 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_21 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_8 ;
  wire I0;
  wire K28p5_REG1;
  wire LOOPBACK_INT;
  wire [12:12]LP_ADV_ABILITY;
  wire MASK_RUDI_BUFERR;
  wire MASK_RUDI_BUFERR_TIMER0;
  wire \MGT_RESET.SYNC_ASYNC_RESET_n_0 ;
  wire MGT_RX_RESET;
  wire MGT_RX_RESET_INT;
  wire MGT_TX_RESET_INT;
  wire \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[0] ;
  wire \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[3] ;
  wire \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_i_1__1_n_0 ;
  wire [0:0]Q;
  wire RECEIVED_IDLE;
  (* async_reg = "true" *) wire RESET_INT;
  (* async_reg = "true" *) wire RESET_INT_PIPE;
  (* async_reg = "true" *) wire RESET_INT_PIPE_RXRECCLK;
  (* async_reg = "true" *) wire RESET_INT_RXRECCLK;
  wire RESET_OUT;
  wire RESTART_AN_EN;
  wire RESTART_AN_EN_REG;
  wire RESTART_AN_SET;
  wire [0:0]RXBUFSTATUS_CH2;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISK_USR;
  wire [1:0]RXCLKCORCNT_CH2;
  wire [7:0]RXDATA_USR;
  wire RXDISPERR_SRL1_out;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_SRL0_out;
  wire RXNOTINTABLE_USR;
  (* async_reg = "true" *) wire RXRECRESET;
  (* async_reg = "true" *) wire RXRECRESET_PIPE;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_1;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_2;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_3;
  wire RXSYNC_STATUS;
  wire [15:10]RX_CONFIG_REG;
  wire RX_CONFIG_REG_REG0;
  wire RX_CONFIG_VALID;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_16 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_20 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_21 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_30 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_9 ;
  wire \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_3 ;
  wire \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ;
  wire RX_IDLE;
  wire RX_INVALID;
  wire S2;
  wire SOFT_RESET_RXRECCLK;
  (* async_reg = "true" *) wire SRESET;
  (* async_reg = "true" *) wire SRESET_PIPE;
  wire STATUS_VECTOR_0_PRE;
  wire SYNC_SIGNAL_DETECT_n_0;
  wire SYNC_STATUS_REG;
  wire TRANSMITTER_n_0;
  wire TRANSMITTER_n_1;
  wire TRANSMITTER_n_10;
  wire TRANSMITTER_n_11;
  wire TRANSMITTER_n_12;
  wire TRANSMITTER_n_13;
  wire TRANSMITTER_n_14;
  wire TRANSMITTER_n_15;
  wire TRANSMITTER_n_16;
  wire TRANSMITTER_n_17;
  wire TRANSMITTER_n_18;
  wire TRANSMITTER_n_19;
  wire TRANSMITTER_n_2;
  wire TRANSMITTER_n_3;
  wire TRANSMITTER_n_4;
  wire TRANSMITTER_n_5;
  wire TRANSMITTER_n_6;
  wire TRANSMITTER_n_7;
  wire TRANSMITTER_n_8;
  wire TRANSMITTER_n_9;
  wire TXBUFERR_INT;
  wire TXCHARISK;
  wire [7:0]TXDATA_CH2;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT[1]_i_1__1_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[0]_i_1__1_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[2]_i_1__1_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1__1_n_0 ;
  wire XMIT_DATA;
  wire [0:0]an_adv_config_vector_ch2;
  wire an_interrupt_ch2;
  wire an_restart_config_ch2;
  wire [4:0]configuration_vector_ch2;
  wire data_out;
  wire data_sync_reg6;
  wire dcm_locked;
  wire gmii_rx_dv_ch2;
  wire gmii_rx_er_ch2;
  wire [7:0]gmii_rxd_ch2;
  wire gmii_tx_en_ch2;
  wire gmii_tx_er_ch2;
  wire [7:0]gmii_txd_ch2;
  wire [8:0]link_timer_value_ch2;
  wire p_0_in;
  wire p_0_out;
  wire p_1_out;
  wire p_6_out;
  wire rxrecclk;
  wire signal_detect;
  wire [12:0]status_vector_ch2;
  wire txbuferr;
  wire userclk;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i2/DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(1'b0),
        .Q(RXDISPERR_SRL1_out));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i2/DELAY_ERROR_TXOUTCLK.DELAY_RXNOTINTABLE " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXNOTINTABLE 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(D),
        .Q(RXNOTINTABLE_SRL0_out));
  FDRE #(
    .INIT(1'b0)) 
    \DELAY_ERROR_TXOUTCLK.RXDISPERR_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXDISPERR_SRL1_out),
        .Q(status_vector_ch2[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \DELAY_ERROR_TXOUTCLK.RXNOTINTABLE_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_SRL0_out),
        .Q(status_vector_ch2[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    DUPLEX_MODE_RSLVD_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LP_ADV_ABILITY),
        .Q(DUPLEX_MODE_RSLVD_REG),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_1__1 
       (.I0(p_0_in),
        .I1(RESET_INT),
        .O(p_0_out));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_2__0 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_3__0_n_0 ),
        .O(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_3__0 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_4__0_n_0 ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_5__0_n_0 ),
        .O(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_3__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_4__0 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .O(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_4__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_5__0 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .O(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_5__0_n_0 ));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .S(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[14] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_2__0_n_0 ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[14] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .R(p_0_out));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_1__1 
       (.I0(TXBUFERR_INT),
        .I1(RESET_INT),
        .O(p_1_out));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_2__0 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_3__0_n_0 ),
        .O(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_3__0 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_4__0_n_0 ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_5__0_n_0 ),
        .O(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_3__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_4__0 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .O(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_4__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_5__0 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .O(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_5__0_n_0 ));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .S(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[14] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_2__0_n_0 ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[14] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .R(p_1_out));
  qsgmii_1218_AUTO_NEG_136 \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION 
       (.ACKNOWLEDGE_MATCH_3(ACKNOWLEDGE_MATCH_3),
        .BASEX_REMOTE_FAULT_RSLVD(BASEX_REMOTE_FAULT_RSLVD),
        .CONFIG_REG_MATCH_reg_0({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_19 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_20 }),
        .CONSISTENCY_MATCH_reg_0({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_21 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 }),
        .D({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_18 }),
        .EVEN_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ),
        .EVEN_reg_0(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .I0(I0),
        .LP_ADV_ABILITY(LP_ADV_ABILITY),
        .MASK_RUDI_BUFERR(MASK_RUDI_BUFERR),
        .MASK_RUDI_BUFERR_TIMER0(MASK_RUDI_BUFERR_TIMER0),
        .\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ({AN_ENABLE_INT,Q,\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[0] }),
        .Q({RX_CONFIG_REG[15:14],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_16 ,RX_CONFIG_REG[12:10],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_20 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_21 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 }),
        .RECEIVED_IDLE(RECEIVED_IDLE),
        .RESTART_AN_SET(RESTART_AN_SET),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .\RX_CONFIG_REG_reg[13] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ),
        .RX_CONFIG_VALID(RX_CONFIG_VALID),
        .RX_CONFIG_VALID_INT_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ),
        .RX_CONFIG_VALID_INT_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_INVALID_reg(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_11 ),
        .RX_INVALID_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ),
        .S(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_30 ),
        .SR(RX_CONFIG_REG_REG0),
        .\STATE_reg[1]_0 (\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_8 ),
        .STATUS_VECTOR_0_PRE_reg(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_13 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_9 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ),
        .XMIT_CONFIG_INT_reg_0(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_10 ),
        .XMIT_DATA(XMIT_DATA),
        .an_adv_config_vector_ch2(an_adv_config_vector_ch2),
        .an_interrupt_ch2(an_interrupt_ch2),
        .data_out(data_out),
        .link_timer_value_ch2(link_timer_value_ch2),
        .out(SRESET),
        .p_0_in(p_0_in),
        .status_vector_ch2({status_vector_ch2[12],status_vector_ch2[10:7],status_vector_ch2[4]}),
        .userclk(userclk));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_PIPE_RXRECCLK_reg 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(p_6_out),
        .Q(RESET_INT_PIPE_RXRECCLK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_PIPE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\MGT_RESET.SYNC_ASYNC_RESET_n_0 ),
        .Q(RESET_INT_PIPE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_RXRECCLK_reg 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_INT_PIPE_RXRECCLK),
        .PRE(p_6_out),
        .Q(RESET_INT_RXRECCLK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_INT_PIPE),
        .PRE(\MGT_RESET.SYNC_ASYNC_RESET_n_0 ),
        .Q(RESET_INT));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \MGT_RESET.SRESET_PIPE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_INT),
        .Q(SRESET_PIPE),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \MGT_RESET.SRESET_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(SRESET_PIPE),
        .Q(SRESET),
        .S(RESET_INT));
  qsgmii_1218_reset_sync_block_137 \MGT_RESET.SYNC_ASYNC_RESET 
       (.\MGT_RESET.RESET_INT_PIPE_reg (\MGT_RESET.SYNC_ASYNC_RESET_n_0 ),
        .RESET_OUT(RESET_OUT),
        .dcm_locked(dcm_locked),
        .userclk(userclk));
  qsgmii_1218_reset_sync_block_138 \MGT_RESET.SYNC_ASYNC_RESET_RECCLK 
       (.RESET_OUT(RESET_OUT),
        .dcm_locked(dcm_locked),
        .p_6_out(p_6_out),
        .reset_out(SOFT_RESET_RXRECCLK),
        .rxrecclk(rxrecclk));
  qsgmii_1218_reset_sync_block_139 \MGT_RESET.SYNC_SOFT_RESET_RECCLK 
       (.reset_out(SOFT_RESET_RXRECCLK),
        .rxrecclk(rxrecclk));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch2[0]),
        .Q(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[0] ),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch2[1]),
        .Q(LOOPBACK_INT),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch2[2]),
        .Q(Q),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch2[3]),
        .Q(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[3] ),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch2[4]),
        .Q(AN_ENABLE_INT),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(an_restart_config_ch2),
        .Q(RESTART_AN_EN_REG),
        .R(SRESET));
  LUT2 #(
    .INIT(4'h2)) 
    \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_i_1__1 
       (.I0(an_restart_config_ch2),
        .I1(RESTART_AN_EN_REG),
        .O(\NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_i_1__1_n_0 ),
        .Q(RESTART_AN_EN),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_SET_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESTART_AN_EN),
        .Q(RESTART_AN_SET),
        .R(SRESET));
  qsgmii_1218_RX_140 \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK 
       (.ACKNOWLEDGE_MATCH_3(ACKNOWLEDGE_MATCH_3),
        .BASEX_REMOTE_FAULT_RSLVD(BASEX_REMOTE_FAULT_RSLVD),
        .CONSISTENCY_MATCH_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ),
        .D(D),
        .EVEN_reg(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .I0(I0),
        .I_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_9 ),
        .I_reg_1(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ),
        .K28p5_REG1(K28p5_REG1),
        .MASK_RUDI_BUFERR(MASK_RUDI_BUFERR),
        .\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] ({\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[3] ,Q}),
        .\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] (\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_11 ),
        .Q({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] }),
        .RECEIVED_IDLE(RECEIVED_IDLE),
        .RECEIVED_IDLE_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ),
        .RXEVEN0_out(RXEVEN0_out),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_CONFIG_REG_NULL_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ),
        .RX_CONFIG_REG_NULL_reg_0(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_8 ),
        .\RX_CONFIG_REG_REG_reg[13] ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_19 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_20 }),
        .\RX_CONFIG_SNAPSHOT_reg[13] ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_21 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 }),
        .RX_CONFIG_VALID(RX_CONFIG_VALID),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_RUDI_INVALID_REG_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ),
        .S(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_30 ),
        .S2(S2),
        .SGMII_PHY_STATUS_reg({RX_CONFIG_REG[15:14],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_16 ,RX_CONFIG_REG[12:10],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_20 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_21 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 }),
        .SR(RX_CONFIG_REG_REG0),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ),
        .\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg (MGT_RX_RESET),
        .\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 (\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_3 ),
        .XMIT_DATA(XMIT_DATA),
        .XMIT_DATA_INT_reg(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_13 ),
        .gmii_rx_dv_ch2(gmii_rx_dv_ch2),
        .gmii_rx_er_ch2(gmii_rx_er_ch2),
        .gmii_rxd_ch2(gmii_rxd_ch2),
        .out(SRESET),
        .p_0_in(p_0_in),
        .status_vector_ch2(status_vector_ch2[3:2]),
        .userclk(userclk));
  qsgmii_1218_SYNCHRONISE_141 \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION 
       (.D(D),
        .ENABLEALIGN_CH2(ENABLEALIGN_CH2),
        .EXTEND_reg(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .K28p5_REG1(K28p5_REG1),
        .Q(LOOPBACK_INT),
        .RXEVEN0_out(RXEVEN0_out),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_INVALID_reg(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_3 ),
        .S2(S2),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg (MGT_RX_RESET),
        .data_sync_reg6(SYNC_SIGNAL_DETECT_n_0),
        .p_0_in(p_0_in),
        .userclk(userclk));
  FDRE #(
    .INIT(1'b0)) 
    STATUS_VECTOR_0_PRE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_13 ),
        .Q(STATUS_VECTOR_0_PRE),
        .R(data_sync_reg6));
  FDRE \STATUS_VECTOR_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATUS_VECTOR_0_PRE),
        .Q(status_vector_ch2[0]),
        .R(1'b0));
  FDRE \STATUS_VECTOR_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(DUPLEX_MODE_RSLVD_REG),
        .Q(status_vector_ch2[11]),
        .R(1'b0));
  FDRE \STATUS_VECTOR_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_REG),
        .Q(status_vector_ch2[1]),
        .R(1'b0));
  qsgmii_1218_sync_block_142 SYNC_SIGNAL_DETECT
       (.MASK_RUDI_BUFERR_TIMER0(MASK_RUDI_BUFERR_TIMER0),
        .Q(Q),
        .SIGNAL_DETECT_REG_reg(SYNC_SIGNAL_DETECT_n_0),
        .data_out(data_out),
        .p_0_in(p_0_in),
        .signal_detect(signal_detect),
        .userclk(userclk));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXSYNC_STATUS),
        .Q(SYNC_STATUS_REG),
        .R(1'b0));
  qsgmii_1218_TX_143 TRANSMITTER
       (.D({TRANSMITTER_n_3,TRANSMITTER_n_4,TRANSMITTER_n_5,TRANSMITTER_n_6,TRANSMITTER_n_7,TRANSMITTER_n_8,TRANSMITTER_n_9,TRANSMITTER_n_10}),
        .Q({\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[3] ,LOOPBACK_INT}),
        .RXCHARISCOMMA_USR(RXCHARISCOMMA_USR),
        .RXCHARISK_USR(RXCHARISK_USR),
        .RXDATA_USR(RXDATA_USR),
        .\TX_CONFIG_REG_INT_reg[14] ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_18 }),
        .\USE_ROCKET_IO.MGT_TX_RESET_INT_reg (\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg (TRANSMITTER_n_2),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg (TRANSMITTER_n_1),
        .\USE_ROCKET_IO.TXCHARISK_reg (TRANSMITTER_n_0),
        .\USE_ROCKET_IO.TXDATA_reg[2] (TRANSMITTER_n_15),
        .\USE_ROCKET_IO.TXDATA_reg[2]_0 (TRANSMITTER_n_16),
        .\USE_ROCKET_IO.TXDATA_reg[3] (TRANSMITTER_n_17),
        .\USE_ROCKET_IO.TXDATA_reg[5] (TRANSMITTER_n_18),
        .\USE_ROCKET_IO.TXDATA_reg[6] ({TRANSMITTER_n_11,TRANSMITTER_n_12,TRANSMITTER_n_13,TRANSMITTER_n_14}),
        .\USE_ROCKET_IO.TXDATA_reg[7] (TRANSMITTER_n_19),
        .XMIT_CONFIG_INT_reg_0(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_10 ),
        .XMIT_DATA(XMIT_DATA),
        .gmii_tx_en_ch2(gmii_tx_en_ch2),
        .gmii_tx_er_ch2(gmii_tx_er_ch2),
        .gmii_txd_ch2(gmii_txd_ch2),
        .userclk(userclk));
  LUT2 #(
    .INIT(4'hB)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_1__1 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_3__0_n_0 ),
        .O(MGT_TX_RESET_INT));
  FDSE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(MGT_TX_RESET_INT),
        .Q(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ),
        .S(p_1_out));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT[1]_i_1__1 
       (.I0(RXBUFSTATUS_CH2),
        .I1(MGT_RX_RESET),
        .I2(LOOPBACK_INT),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT[1]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT[1]_i_1__1_n_0 ),
        .Q(p_0_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_2),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_1),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .R(MGT_RX_RESET));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[0]_i_1__1 
       (.I0(RXCLKCORCNT_CH2[0]),
        .I1(MGT_RX_RESET),
        .I2(LOOPBACK_INT),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair212" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[2]_i_1__1 
       (.I0(RXCLKCORCNT_CH2[1]),
        .I1(MGT_RX_RESET),
        .I2(LOOPBACK_INT),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[2]_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[0]_i_1__1_n_0 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[2]_i_1__1_n_0 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_10),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_9),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_8),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_7),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_6),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_5),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_4),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_3),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ),
        .R(MGT_RX_RESET));
  (* SOFT_HLUTNM = "soft_lutpair213" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1__1 
       (.I0(LOOPBACK_INT),
        .I1(MGT_RX_RESET),
        .I2(RXNOTINTABLE_USR),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1__1_n_0 ),
        .Q(D),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_1__1 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_3__0_n_0 ),
        .O(MGT_RX_RESET_INT));
  FDSE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(MGT_RX_RESET_INT),
        .Q(MGT_RX_RESET),
        .S(p_0_out));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.TXBUFERR_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(txbuferr),
        .Q(TXBUFERR_INT),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ));
  FDRE \USE_ROCKET_IO.TXCHARISK_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_0),
        .Q(TXCHARISK),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ));
  FDRE \USE_ROCKET_IO.TXDATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_14),
        .Q(TXDATA_CH2[0]),
        .R(1'b0));
  FDRE \USE_ROCKET_IO.TXDATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_13),
        .Q(TXDATA_CH2[1]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_16),
        .Q(TXDATA_CH2[2]),
        .S(TRANSMITTER_n_15));
  FDSE \USE_ROCKET_IO.TXDATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_17),
        .Q(TXDATA_CH2[3]),
        .S(TRANSMITTER_n_15));
  FDRE \USE_ROCKET_IO.TXDATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_12),
        .Q(TXDATA_CH2[4]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_18),
        .Q(TXDATA_CH2[5]),
        .S(TRANSMITTER_n_15));
  FDRE \USE_ROCKET_IO.TXDATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_11),
        .Q(TXDATA_CH2[6]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_19),
        .Q(TXDATA_CH2[7]),
        .S(TRANSMITTER_n_15));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b1),
        .O(RXRECRESET));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b1),
        .O(RXRECRESET_PIPE));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_1));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_2));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_3));
endmodule

(* ORIG_REF_NAME = "GPCS_PMA_GEN" *) 
module qsgmii_1218_GPCS_PMA_GEN_71
   (Q,
    MGT_RX_RESET,
    STATUS_VECTOR_0_PRE_reg_0,
    status_vector_ch3,
    gmii_rxd_ch3,
    gmii_rx_er_ch3,
    TXCHARISK,
    TXDATA_CH3,
    an_interrupt_ch3,
    gmii_rx_dv_ch3,
    ENABLEALIGN_CH3,
    userclk,
    dcm_locked,
    reset_done,
    signal_detect,
    RESET_OUT,
    rxrecclk,
    configuration_vector_ch3,
    gmii_tx_er_ch3,
    gmii_tx_en_ch3,
    gmii_txd_ch3,
    RXCLKCORCNT_CH3,
    txbuferr,
    an_restart_config_ch3,
    RXCHARISK_USR,
    RXCHARISCOMMA_USR,
    link_timer_value_ch3,
    RXNOTINTABLE_USR,
    RXDATA_USR,
    an_adv_config_vector_ch3,
    RXBUFSTATUS_CH3);
  output [0:0]Q;
  output MGT_RX_RESET;
  output STATUS_VECTOR_0_PRE_reg_0;
  output [12:0]status_vector_ch3;
  output [7:0]gmii_rxd_ch3;
  output gmii_rx_er_ch3;
  output TXCHARISK;
  output [7:0]TXDATA_CH3;
  output an_interrupt_ch3;
  output gmii_rx_dv_ch3;
  output ENABLEALIGN_CH3;
  input userclk;
  input dcm_locked;
  input reset_done;
  input signal_detect;
  input RESET_OUT;
  input rxrecclk;
  input [4:0]configuration_vector_ch3;
  input gmii_tx_er_ch3;
  input gmii_tx_en_ch3;
  input [7:0]gmii_txd_ch3;
  input [1:0]RXCLKCORCNT_CH3;
  input txbuferr;
  input an_restart_config_ch3;
  input RXCHARISK_USR;
  input RXCHARISCOMMA_USR;
  input [8:0]link_timer_value_ch3;
  input RXNOTINTABLE_USR;
  input [7:0]RXDATA_USR;
  input [0:0]an_adv_config_vector_ch3;
  input [0:0]RXBUFSTATUS_CH3;

  wire ACKNOWLEDGE_MATCH_3;
  wire AN_ENABLE_INT;
  wire [1:1]BASEX_REMOTE_FAULT_RSLVD;
  wire D;
  wire DUPLEX_MODE_RSLVD_REG;
  wire ENABLEALIGN_CH3;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_2__1_n_0 ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_3__1_n_0 ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_4__1_n_0 ;
  wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_5__1_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[14] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_2__1_n_0 ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_3__1_n_0 ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_4__1_n_0 ;
  wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_5__1_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[14] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_10 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_11 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_13 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_18 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_19 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_20 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_21 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 ;
  wire \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_8 ;
  wire I0;
  wire K28p5_REG1;
  wire LOOPBACK_INT;
  wire [12:12]LP_ADV_ABILITY;
  wire MASK_RUDI_BUFERR;
  wire MASK_RUDI_BUFERR_TIMER0;
  wire \MGT_RESET.SYNC_ASYNC_RESET_n_0 ;
  wire MGT_RX_RESET;
  wire MGT_RX_RESET_INT;
  wire MGT_TX_RESET_INT;
  wire \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[0] ;
  wire \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[3] ;
  wire \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_i_1__2_n_0 ;
  wire [0:0]Q;
  wire RECEIVED_IDLE;
  (* async_reg = "true" *) wire RESET_INT;
  (* async_reg = "true" *) wire RESET_INT_PIPE;
  (* async_reg = "true" *) wire RESET_INT_PIPE_RXRECCLK;
  (* async_reg = "true" *) wire RESET_INT_RXRECCLK;
  wire RESET_OUT;
  wire RESTART_AN_EN;
  wire RESTART_AN_EN_REG;
  wire RESTART_AN_SET;
  wire [0:0]RXBUFSTATUS_CH3;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISK_USR;
  wire [1:0]RXCLKCORCNT_CH3;
  wire [7:0]RXDATA_USR;
  wire RXDISPERR_SRL1_out;
  wire RXEVEN0_out;
  wire RXNOTINTABLE_SRL0_out;
  wire RXNOTINTABLE_USR;
  (* async_reg = "true" *) wire RXRECRESET;
  (* async_reg = "true" *) wire RXRECRESET_PIPE;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_1;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_2;
  (* async_reg = "true" *) wire RXRECRESET_PIPE_3;
  wire RXSYNC_STATUS;
  wire [15:10]RX_CONFIG_REG;
  wire RX_CONFIG_REG_REG0;
  wire RX_CONFIG_VALID;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_16 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_20 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_21 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_30 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ;
  wire \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_9 ;
  wire \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_3 ;
  wire \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ;
  wire RX_IDLE;
  wire RX_INVALID;
  wire S2;
  wire SOFT_RESET_RXRECCLK;
  (* async_reg = "true" *) wire SRESET;
  (* async_reg = "true" *) wire SRESET_PIPE;
  wire STATUS_VECTOR_0_PRE;
  wire STATUS_VECTOR_0_PRE_reg_0;
  wire SYNC_SIGNAL_DETECT_n_0;
  wire SYNC_STATUS_REG;
  wire TRANSMITTER_n_0;
  wire TRANSMITTER_n_1;
  wire TRANSMITTER_n_10;
  wire TRANSMITTER_n_11;
  wire TRANSMITTER_n_12;
  wire TRANSMITTER_n_13;
  wire TRANSMITTER_n_14;
  wire TRANSMITTER_n_15;
  wire TRANSMITTER_n_16;
  wire TRANSMITTER_n_17;
  wire TRANSMITTER_n_18;
  wire TRANSMITTER_n_19;
  wire TRANSMITTER_n_2;
  wire TRANSMITTER_n_3;
  wire TRANSMITTER_n_4;
  wire TRANSMITTER_n_5;
  wire TRANSMITTER_n_6;
  wire TRANSMITTER_n_7;
  wire TRANSMITTER_n_8;
  wire TRANSMITTER_n_9;
  wire TXBUFERR_INT;
  wire TXCHARISK;
  wire [7:0]TXDATA_CH3;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT[1]_i_1__2_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[0]_i_1__2_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[2]_i_1__2_n_0 ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1__2_n_0 ;
  wire XMIT_DATA;
  wire [0:0]an_adv_config_vector_ch3;
  wire an_interrupt_ch3;
  wire an_restart_config_ch3;
  wire [4:0]configuration_vector_ch3;
  wire data_out;
  wire dcm_locked;
  wire gmii_rx_dv_ch3;
  wire gmii_rx_er_ch3;
  wire [7:0]gmii_rxd_ch3;
  wire gmii_tx_en_ch3;
  wire gmii_tx_er_ch3;
  wire [7:0]gmii_txd_ch3;
  wire [8:0]link_timer_value_ch3;
  wire p_0_in;
  wire p_0_out;
  wire p_1_out;
  wire p_6_out;
  wire reset_done;
  wire rxrecclk;
  wire signal_detect;
  wire [12:0]status_vector_ch3;
  wire txbuferr;
  wire userclk;

  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i3/DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXDISPERR 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(1'b0),
        .Q(RXDISPERR_SRL1_out));
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* XILINX_LEGACY_PRIM = "SRL16" *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i3/DELAY_ERROR_TXOUTCLK.DELAY_RXNOTINTABLE " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \DELAY_ERROR_TXOUTCLK.DELAY_RXNOTINTABLE 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(D),
        .Q(RXNOTINTABLE_SRL0_out));
  FDRE #(
    .INIT(1'b0)) 
    \DELAY_ERROR_TXOUTCLK.RXDISPERR_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXDISPERR_SRL1_out),
        .Q(status_vector_ch3[5]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \DELAY_ERROR_TXOUTCLK.RXNOTINTABLE_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_SRL0_out),
        .Q(status_vector_ch3[6]),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    DUPLEX_MODE_RSLVD_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(LP_ADV_ABILITY),
        .Q(DUPLEX_MODE_RSLVD_REG),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_1__2 
       (.I0(p_0_in),
        .I1(RESET_INT),
        .O(p_0_out));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_2__1 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_3__1_n_0 ),
        .O(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_3__1 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_4__1_n_0 ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_5__1_n_0 ),
        .O(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_3__1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_4__1 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .O(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_4__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_5__1 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .O(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_5__1_n_0 ));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .S(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[10] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[11] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[12] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[14] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_2__1_n_0 ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[14] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[0] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[1] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[2] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[3] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[4] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[5] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[6] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[7] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .R(p_0_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[8] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[9] ),
        .R(p_0_out));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_1__2 
       (.I0(TXBUFERR_INT),
        .I1(RESET_INT),
        .O(p_1_out));
  LUT2 #(
    .INIT(4'hE)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_2__1 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_3__1_n_0 ),
        .O(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_3__1 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_4__1_n_0 ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .I5(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_5__1_n_0 ),
        .O(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_3__1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_4__1 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .O(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_4__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_5__1 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .I2(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .I3(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .I4(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .O(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_5__1_n_0 ));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .S(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[10] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[11] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[12] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[14] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_2__1_n_0 ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[14] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[0] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[1] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[2] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[3] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[4] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[5] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[6] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[7] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .R(p_1_out));
  (* FSM_ENCODED_STATES = "iSTATE:000000000001000,iSTATE0:000000000010000,iSTATE1:010000000000000,iSTATE2:000000000000100,iSTATE3:000100000000000,iSTATE4:001000000000000,iSTATE5:000010000000000,iSTATE6:000000000000010,iSTATE7:000000000000001,iSTATE8:000001000000000,iSTATE9:000000010000000,iSTATE10:000000100000000,iSTATE11:000000001000000,iSTATE12:100000000000000,iSTATE13:000000000100000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[8] ),
        .Q(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[9] ),
        .R(p_1_out));
  qsgmii_1218_AUTO_NEG \HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION 
       (.ACKNOWLEDGE_MATCH_3(ACKNOWLEDGE_MATCH_3),
        .BASEX_REMOTE_FAULT_RSLVD(BASEX_REMOTE_FAULT_RSLVD),
        .CONFIG_REG_MATCH_reg_0({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_19 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_20 }),
        .CONSISTENCY_MATCH_reg_0({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_21 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 }),
        .D({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_18 }),
        .EVEN_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ),
        .EVEN_reg_0(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .I0(I0),
        .LP_ADV_ABILITY(LP_ADV_ABILITY),
        .MASK_RUDI_BUFERR(MASK_RUDI_BUFERR),
        .MASK_RUDI_BUFERR_TIMER0(MASK_RUDI_BUFERR_TIMER0),
        .\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ({AN_ENABLE_INT,Q,\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[0] }),
        .Q({RX_CONFIG_REG[15:14],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_16 ,RX_CONFIG_REG[12:10],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_20 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_21 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 }),
        .RECEIVED_IDLE(RECEIVED_IDLE),
        .RESTART_AN_SET(RESTART_AN_SET),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .\RX_CONFIG_REG_reg[13] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ),
        .RX_CONFIG_VALID(RX_CONFIG_VALID),
        .RX_CONFIG_VALID_INT_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ),
        .RX_CONFIG_VALID_INT_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_INVALID_reg(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_11 ),
        .RX_INVALID_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ),
        .S(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_30 ),
        .SR(RX_CONFIG_REG_REG0),
        .\STATE_reg[1]_0 (\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_8 ),
        .STATUS_VECTOR_0_PRE_reg(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_13 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] (\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_9 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ),
        .XMIT_CONFIG_INT_reg_0(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_10 ),
        .XMIT_DATA(XMIT_DATA),
        .an_adv_config_vector_ch3(an_adv_config_vector_ch3),
        .an_interrupt_ch3(an_interrupt_ch3),
        .data_out(data_out),
        .link_timer_value_ch3(link_timer_value_ch3),
        .out(SRESET),
        .p_0_in(p_0_in),
        .status_vector_ch3({status_vector_ch3[12],status_vector_ch3[10:7],status_vector_ch3[4]}),
        .userclk(userclk));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_PIPE_RXRECCLK_reg 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(p_6_out),
        .Q(RESET_INT_PIPE_RXRECCLK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_PIPE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\MGT_RESET.SYNC_ASYNC_RESET_n_0 ),
        .Q(RESET_INT_PIPE));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_RXRECCLK_reg 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_INT_PIPE_RXRECCLK),
        .PRE(p_6_out),
        .Q(RESET_INT_RXRECCLK));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDPE #(
    .INIT(1'b0)) 
    \MGT_RESET.RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_INT_PIPE),
        .PRE(\MGT_RESET.SYNC_ASYNC_RESET_n_0 ),
        .Q(RESET_INT));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \MGT_RESET.SRESET_PIPE_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_INT),
        .Q(SRESET_PIPE),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b0)) 
    \MGT_RESET.SRESET_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(SRESET_PIPE),
        .Q(SRESET),
        .S(RESET_INT));
  qsgmii_1218_reset_sync_block \MGT_RESET.SYNC_ASYNC_RESET 
       (.\MGT_RESET.RESET_INT_PIPE_reg (\MGT_RESET.SYNC_ASYNC_RESET_n_0 ),
        .RESET_OUT(RESET_OUT),
        .dcm_locked(dcm_locked),
        .userclk(userclk));
  qsgmii_1218_reset_sync_block_134 \MGT_RESET.SYNC_ASYNC_RESET_RECCLK 
       (.RESET_OUT(RESET_OUT),
        .dcm_locked(dcm_locked),
        .p_6_out(p_6_out),
        .reset_out(SOFT_RESET_RXRECCLK),
        .rxrecclk(rxrecclk));
  qsgmii_1218_reset_sync_block_135 \MGT_RESET.SYNC_SOFT_RESET_RECCLK 
       (.reset_out(SOFT_RESET_RXRECCLK),
        .rxrecclk(rxrecclk));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch3[0]),
        .Q(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[0] ),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch3[1]),
        .Q(LOOPBACK_INT),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch3[2]),
        .Q(Q),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch3[3]),
        .Q(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[3] ),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(configuration_vector_ch3[4]),
        .Q(AN_ENABLE_INT),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_REG_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(an_restart_config_ch3),
        .Q(RESTART_AN_EN_REG),
        .R(SRESET));
  LUT2 #(
    .INIT(4'h2)) 
    \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_i_1__2 
       (.I0(an_restart_config_ch3),
        .I1(RESTART_AN_EN_REG),
        .O(\NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_EN_i_1__2_n_0 ),
        .Q(RESTART_AN_EN),
        .R(SRESET));
  FDRE #(
    .INIT(1'b0)) 
    \NO_MANAGEMENT.NO_MDIO_HAS_AN.RESTART_AN_SET_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(RESTART_AN_EN),
        .Q(RESTART_AN_SET),
        .R(SRESET));
  qsgmii_1218_RX \RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK 
       (.ACKNOWLEDGE_MATCH_3(ACKNOWLEDGE_MATCH_3),
        .BASEX_REMOTE_FAULT_RSLVD(BASEX_REMOTE_FAULT_RSLVD),
        .CONSISTENCY_MATCH_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_31 ),
        .D(D),
        .EVEN_reg(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .I0(I0),
        .I_reg_0(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_9 ),
        .I_reg_1(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_10 ),
        .K28p5_REG1(K28p5_REG1),
        .MASK_RUDI_BUFERR(MASK_RUDI_BUFERR),
        .\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] ({\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[3] ,Q}),
        .\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] (\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_11 ),
        .Q({\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ,\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] }),
        .RECEIVED_IDLE(RECEIVED_IDLE),
        .RECEIVED_IDLE_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_32 ),
        .RXEVEN0_out(RXEVEN0_out),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_CONFIG_REG_NULL_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_33 ),
        .RX_CONFIG_REG_NULL_reg_0(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_8 ),
        .\RX_CONFIG_REG_REG_reg[13] ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_19 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_20 }),
        .\RX_CONFIG_SNAPSHOT_reg[13] ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_21 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_22 }),
        .RX_CONFIG_VALID(RX_CONFIG_VALID),
        .RX_IDLE(RX_IDLE),
        .RX_INVALID(RX_INVALID),
        .RX_RUDI_INVALID_REG_reg(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_34 ),
        .S(\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_30 ),
        .S2(S2),
        .SGMII_PHY_STATUS_reg({RX_CONFIG_REG[15:14],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_16 ,RX_CONFIG_REG[12:10],\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_20 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_21 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_22 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_23 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_24 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_25 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_26 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_27 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_28 ,\RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK_n_29 }),
        .SR(RX_CONFIG_REG_REG0),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ),
        .\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg (MGT_RX_RESET),
        .\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 (\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_3 ),
        .XMIT_DATA(XMIT_DATA),
        .XMIT_DATA_INT_reg(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_13 ),
        .gmii_rx_dv_ch3(gmii_rx_dv_ch3),
        .gmii_rx_er_ch3(gmii_rx_er_ch3),
        .gmii_rxd_ch3(gmii_rxd_ch3),
        .out(SRESET),
        .p_0_in(p_0_in),
        .status_vector_ch3(status_vector_ch3[3:2]),
        .userclk(userclk));
  qsgmii_1218_SYNCHRONISE \RX_GMII_AT_TXOUTCLK.SYNCHRONISATION 
       (.D(D),
        .ENABLEALIGN_CH3(ENABLEALIGN_CH3),
        .EXTEND_reg(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_4 ),
        .K28p5_REG1(K28p5_REG1),
        .Q(LOOPBACK_INT),
        .RXEVEN0_out(RXEVEN0_out),
        .RXSYNC_STATUS(RXSYNC_STATUS),
        .RX_INVALID_reg(\RX_GMII_AT_TXOUTCLK.SYNCHRONISATION_n_3 ),
        .S2(S2),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg (\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg (MGT_RX_RESET),
        .data_sync_reg6(SYNC_SIGNAL_DETECT_n_0),
        .p_0_in(p_0_in),
        .userclk(userclk));
  LUT1 #(
    .INIT(2'h1)) 
    STATUS_VECTOR_0_PRE_i_1
       (.I0(reset_done),
        .O(STATUS_VECTOR_0_PRE_reg_0));
  FDRE #(
    .INIT(1'b0)) 
    STATUS_VECTOR_0_PRE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_13 ),
        .Q(STATUS_VECTOR_0_PRE),
        .R(STATUS_VECTOR_0_PRE_reg_0));
  FDRE \STATUS_VECTOR_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(STATUS_VECTOR_0_PRE),
        .Q(status_vector_ch3[0]),
        .R(1'b0));
  FDRE \STATUS_VECTOR_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(DUPLEX_MODE_RSLVD_REG),
        .Q(status_vector_ch3[11]),
        .R(1'b0));
  FDRE \STATUS_VECTOR_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_REG),
        .Q(status_vector_ch3[1]),
        .R(1'b0));
  qsgmii_1218_sync_block SYNC_SIGNAL_DETECT
       (.MASK_RUDI_BUFERR_TIMER0(MASK_RUDI_BUFERR_TIMER0),
        .Q(Q),
        .SIGNAL_DETECT_REG_reg(SYNC_SIGNAL_DETECT_n_0),
        .data_out(data_out),
        .p_0_in(p_0_in),
        .signal_detect(signal_detect),
        .userclk(userclk));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXSYNC_STATUS),
        .Q(SYNC_STATUS_REG),
        .R(1'b0));
  qsgmii_1218_TX TRANSMITTER
       (.D({TRANSMITTER_n_3,TRANSMITTER_n_4,TRANSMITTER_n_5,TRANSMITTER_n_6,TRANSMITTER_n_7,TRANSMITTER_n_8,TRANSMITTER_n_9,TRANSMITTER_n_10}),
        .Q({\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg_n_0_[3] ,LOOPBACK_INT}),
        .RXCHARISCOMMA_USR(RXCHARISCOMMA_USR),
        .RXCHARISK_USR(RXCHARISK_USR),
        .RXDATA_USR(RXDATA_USR),
        .\TX_CONFIG_REG_INT_reg[14] ({\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_16 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_17 ,\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_18 }),
        .\USE_ROCKET_IO.MGT_TX_RESET_INT_reg (\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg (TRANSMITTER_n_2),
        .\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg (TRANSMITTER_n_1),
        .\USE_ROCKET_IO.TXCHARISK_reg (TRANSMITTER_n_0),
        .\USE_ROCKET_IO.TXDATA_reg[2] (TRANSMITTER_n_15),
        .\USE_ROCKET_IO.TXDATA_reg[2]_0 (TRANSMITTER_n_16),
        .\USE_ROCKET_IO.TXDATA_reg[3] (TRANSMITTER_n_17),
        .\USE_ROCKET_IO.TXDATA_reg[5] (TRANSMITTER_n_18),
        .\USE_ROCKET_IO.TXDATA_reg[6] ({TRANSMITTER_n_11,TRANSMITTER_n_12,TRANSMITTER_n_13,TRANSMITTER_n_14}),
        .\USE_ROCKET_IO.TXDATA_reg[7] (TRANSMITTER_n_19),
        .XMIT_CONFIG_INT_reg_0(\HAS_AUTO_NEG.AN_RX_GMII_AT_TXOUTCLK.AUTO_NEGOTIATION_n_10 ),
        .XMIT_DATA(XMIT_DATA),
        .gmii_tx_en_ch3(gmii_tx_en_ch3),
        .gmii_tx_er_ch3(gmii_tx_er_ch3),
        .gmii_txd_ch3(gmii_txd_ch3),
        .userclk(userclk));
  LUT2 #(
    .INIT(4'hB)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_i_1__2 
       (.I0(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.TX_RST_SM[14]_i_3__1_n_0 ),
        .O(MGT_TX_RESET_INT));
  FDSE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.MGT_TX_RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(MGT_TX_RESET_INT),
        .Q(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ),
        .S(p_1_out));
  (* SOFT_HLUTNM = "soft_lutpair281" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT[1]_i_1__2 
       (.I0(RXBUFSTATUS_CH3),
        .I1(MGT_RX_RESET),
        .I2(LOOPBACK_INT),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT[1]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXBUFSTATUS_INT[1]_i_1__2_n_0 ),
        .Q(p_0_in),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_2),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg_n_0 ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_1),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg_n_0 ),
        .R(MGT_RX_RESET));
  (* SOFT_HLUTNM = "soft_lutpair280" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[0]_i_1__2 
       (.I0(RXCLKCORCNT_CH3[0]),
        .I1(MGT_RX_RESET),
        .I2(LOOPBACK_INT),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair280" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[2]_i_1__2 
       (.I0(RXCLKCORCNT_CH3[1]),
        .I1(MGT_RX_RESET),
        .I2(LOOPBACK_INT),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[2]_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[0]_i_1__2_n_0 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[0] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT[2]_i_1__2_n_0 ),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg_n_0_[2] ),
        .R(1'b0));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_10),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[0] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_9),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[1] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_8),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[2] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_7),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[3] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_6),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[4] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_5),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[5] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_4),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[6] ),
        .R(MGT_RX_RESET));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_3),
        .Q(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT_reg_n_0_[7] ),
        .R(MGT_RX_RESET));
  (* SOFT_HLUTNM = "soft_lutpair281" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1__2 
       (.I0(LOOPBACK_INT),
        .I1(MGT_RX_RESET),
        .I2(RXNOTINTABLE_USR),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1__2_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXNOTINTABLE_INT_i_1__2_n_0 ),
        .Q(D),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_i_1__2 
       (.I0(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM_reg_n_0_[13] ),
        .I1(\FSM_onehot_USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.RX_RST_SM[14]_i_3__1_n_0 ),
        .O(MGT_RX_RESET_INT));
  FDSE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(MGT_RX_RESET_INT),
        .Q(MGT_RX_RESET),
        .S(p_0_out));
  FDRE #(
    .INIT(1'b0)) 
    \USE_ROCKET_IO.TXBUFERR_INT_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(txbuferr),
        .Q(TXBUFERR_INT),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ));
  FDRE \USE_ROCKET_IO.TXCHARISK_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_0),
        .Q(TXCHARISK),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg_n_0 ));
  FDRE \USE_ROCKET_IO.TXDATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_14),
        .Q(TXDATA_CH3[0]),
        .R(1'b0));
  FDRE \USE_ROCKET_IO.TXDATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_13),
        .Q(TXDATA_CH3[1]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_16),
        .Q(TXDATA_CH3[2]),
        .S(TRANSMITTER_n_15));
  FDSE \USE_ROCKET_IO.TXDATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_17),
        .Q(TXDATA_CH3[3]),
        .S(TRANSMITTER_n_15));
  FDRE \USE_ROCKET_IO.TXDATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_12),
        .Q(TXDATA_CH3[4]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_18),
        .Q(TXDATA_CH3[5]),
        .S(TRANSMITTER_n_15));
  FDRE \USE_ROCKET_IO.TXDATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_11),
        .Q(TXDATA_CH3[6]),
        .R(1'b0));
  FDSE \USE_ROCKET_IO.TXDATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(TRANSMITTER_n_19),
        .Q(TXDATA_CH3[7]),
        .S(TRANSMITTER_n_15));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b1),
        .O(RXRECRESET));
  LUT1 #(
    .INIT(2'h2)) 
    i_1
       (.I0(1'b1),
        .O(RXRECRESET_PIPE));
  LUT1 #(
    .INIT(2'h2)) 
    i_2
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_1));
  LUT1 #(
    .INIT(2'h2)) 
    i_3
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_2));
  LUT1 #(
    .INIT(2'h2)) 
    i_4
       (.I0(1'b1),
        .O(RXRECRESET_PIPE_3));
endmodule

(* ORIG_REF_NAME = "QSGMII_GEN" *) 
module qsgmii_1218_QSGMII_GEN
   (MGT_RX_RESET,
    powerdown,
    MGT_TX_RESET,
    txcharisk,
    txdata,
    enablealign,
    status_vector_ch0,
    gmii_rxd_ch0,
    gmii_rx_er_ch0,
    an_interrupt_ch0,
    gmii_rx_dv_ch0,
    status_vector_ch1,
    gmii_rxd_ch1,
    gmii_rx_er_ch1,
    an_interrupt_ch1,
    gmii_rx_dv_ch1,
    status_vector_ch2,
    gmii_rxd_ch2,
    gmii_rx_er_ch2,
    an_interrupt_ch2,
    gmii_rx_dv_ch2,
    status_vector_ch3,
    gmii_rxd_ch3,
    gmii_rx_er_ch3,
    an_interrupt_ch3,
    gmii_rx_dv_ch3,
    userclk,
    dcm_locked,
    rxrecclk,
    reset,
    rxchariscomma,
    rxdata,
    rxcharisk,
    rxnotintable,
    signal_detect,
    configuration_vector_ch0,
    gmii_tx_er_ch0,
    gmii_tx_en_ch0,
    gmii_txd_ch0,
    txbuferr,
    an_restart_config_ch0,
    link_timer_value_ch0,
    an_adv_config_vector_ch0,
    reset_done,
    configuration_vector_ch1,
    gmii_tx_er_ch1,
    gmii_tx_en_ch1,
    gmii_txd_ch1,
    an_restart_config_ch1,
    link_timer_value_ch1,
    an_adv_config_vector_ch1,
    configuration_vector_ch2,
    gmii_tx_er_ch2,
    gmii_tx_en_ch2,
    gmii_txd_ch2,
    an_restart_config_ch2,
    link_timer_value_ch2,
    an_adv_config_vector_ch2,
    configuration_vector_ch3,
    gmii_tx_er_ch3,
    gmii_tx_en_ch3,
    gmii_txd_ch3,
    an_restart_config_ch3,
    link_timer_value_ch3,
    an_adv_config_vector_ch3);
  output MGT_RX_RESET;
  output powerdown;
  output MGT_TX_RESET;
  output [3:0]txcharisk;
  output [31:0]txdata;
  output enablealign;
  output [12:0]status_vector_ch0;
  output [7:0]gmii_rxd_ch0;
  output gmii_rx_er_ch0;
  output an_interrupt_ch0;
  output gmii_rx_dv_ch0;
  output [12:0]status_vector_ch1;
  output [7:0]gmii_rxd_ch1;
  output gmii_rx_er_ch1;
  output an_interrupt_ch1;
  output gmii_rx_dv_ch1;
  output [12:0]status_vector_ch2;
  output [7:0]gmii_rxd_ch2;
  output gmii_rx_er_ch2;
  output an_interrupt_ch2;
  output gmii_rx_dv_ch2;
  output [12:0]status_vector_ch3;
  output [7:0]gmii_rxd_ch3;
  output gmii_rx_er_ch3;
  output an_interrupt_ch3;
  output gmii_rx_dv_ch3;
  input userclk;
  input dcm_locked;
  input rxrecclk;
  input reset;
  input [3:0]rxchariscomma;
  input [31:0]rxdata;
  input [3:0]rxcharisk;
  input [3:0]rxnotintable;
  input signal_detect;
  input [4:0]configuration_vector_ch0;
  input gmii_tx_er_ch0;
  input gmii_tx_en_ch0;
  input [7:0]gmii_txd_ch0;
  input txbuferr;
  input an_restart_config_ch0;
  input [8:0]link_timer_value_ch0;
  input [0:0]an_adv_config_vector_ch0;
  input reset_done;
  input [4:0]configuration_vector_ch1;
  input gmii_tx_er_ch1;
  input gmii_tx_en_ch1;
  input [7:0]gmii_txd_ch1;
  input an_restart_config_ch1;
  input [8:0]link_timer_value_ch1;
  input [0:0]an_adv_config_vector_ch1;
  input [4:0]configuration_vector_ch2;
  input gmii_tx_er_ch2;
  input gmii_tx_en_ch2;
  input [7:0]gmii_txd_ch2;
  input an_restart_config_ch2;
  input [8:0]link_timer_value_ch2;
  input [0:0]an_adv_config_vector_ch2;
  input [4:0]configuration_vector_ch3;
  input gmii_tx_er_ch3;
  input gmii_tx_en_ch3;
  input [7:0]gmii_txd_ch3;
  input an_restart_config_ch3;
  input [8:0]link_timer_value_ch3;
  input [0:0]an_adv_config_vector_ch3;

  wire ENABLEALIGN_CH0;
  wire ENABLEALIGN_CH1;
  wire ENABLEALIGN_CH2;
  wire ENABLEALIGN_CH3;
  wire GPCS_PMA_GEN_i0_n_36;
  wire GPCS_PMA_GEN_i3_n_2;
  wire MGT_RX_RESET;
  wire MGT_RX_RESET_REG1;
  wire MGT_RX_RESET_REG2;
  wire MGT_RX_RESET_REG3;
  wire MGT_TX_RESET;
  wire POWERDOWN_CH0;
  wire POWERDOWN_CH1;
  wire POWERDOWN_CH2;
  wire POWERDOWN_CH3;
  wire RESET_PRI;
  wire RXBUFERR;
  wire [1:1]RXBUFSTATUS_CH1;
  wire [1:1]RXBUFSTATUS_CH2;
  wire [1:1]RXBUFSTATUS_CH3;
  wire RXCHARISCOMMA_CH0_ELB;
  wire RXCHARISCOMMA_CH1_ELB;
  wire RXCHARISCOMMA_CH2_ELB;
  wire RXCHARISCOMMA_CH3_ELB;
  wire RXCHARISK_CH0_ELB;
  wire RXCHARISK_CH1_ELB;
  wire RXCHARISK_CH2_ELB;
  wire RXCHARISK_CH3_ELB;
  wire [2:0]RXCLKCORCNT_CH0;
  wire [2:0]RXCLKCORCNT_CH1;
  wire [2:0]RXCLKCORCNT_CH2;
  wire [2:0]RXCLKCORCNT_CH3;
  wire [7:0]RXDATA_CH0_ELB;
  wire [7:0]RXDATA_CH1_ELB;
  wire [7:0]RXDATA_CH2_ELB;
  wire [7:0]RXDATA_CH3_ELB;
  wire [7:0]RXDATA_USR;
  wire RXNOTINTABLE_CH0_ELB;
  wire RXNOTINTABLE_CH1_ELB;
  wire RXNOTINTABLE_CH2_ELB;
  wire RXNOTINTABLE_CH3_ELB;
  wire RXRESET_REC0;
  wire RXRESET_REC1;
  wire RXRESET_REC2;
  wire RXRESET_REC3;
  wire \RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_2 ;
  wire \RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_3 ;
  wire \RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_4 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_10 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_11 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_12 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_13 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_2 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_3 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_4 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_6 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_7 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_8 ;
  wire \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_9 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_10 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_11 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_12 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_13 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_2 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_3 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_4 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_6 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_7 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_8 ;
  wire \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_9 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_10 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_11 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_12 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_13 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_2 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_3 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_4 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_6 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_7 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_8 ;
  wire \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_9 ;
  wire TXCHARISK_CH0;
  wire TXCHARISK_CH1;
  wire TXCHARISK_CH2;
  wire TXCHARISK_CH3;
  wire [6:0]TXDATA_CH0;
  wire [7:0]TXDATA_CH1;
  wire [7:0]TXDATA_CH2;
  wire [7:0]TXDATA_CH3;
  wire [0:0]an_adv_config_vector_ch0;
  wire [0:0]an_adv_config_vector_ch1;
  wire [0:0]an_adv_config_vector_ch2;
  wire [0:0]an_adv_config_vector_ch3;
  wire an_interrupt_ch0;
  wire an_interrupt_ch1;
  wire an_interrupt_ch2;
  wire an_interrupt_ch3;
  wire an_restart_config_ch0;
  wire an_restart_config_ch1;
  wire an_restart_config_ch2;
  wire an_restart_config_ch3;
  wire [4:0]configuration_vector_ch0;
  wire [4:0]configuration_vector_ch1;
  wire [4:0]configuration_vector_ch2;
  wire [4:0]configuration_vector_ch3;
  wire dcm_locked;
  wire enablealign;
  wire gmii_rx_dv_ch0;
  wire gmii_rx_dv_ch1;
  wire gmii_rx_dv_ch2;
  wire gmii_rx_dv_ch3;
  wire gmii_rx_er_ch0;
  wire gmii_rx_er_ch1;
  wire gmii_rx_er_ch2;
  wire gmii_rx_er_ch3;
  wire [7:0]gmii_rxd_ch0;
  wire [7:0]gmii_rxd_ch1;
  wire [7:0]gmii_rxd_ch2;
  wire [7:0]gmii_rxd_ch3;
  wire gmii_tx_en_ch0;
  wire gmii_tx_en_ch1;
  wire gmii_tx_en_ch2;
  wire gmii_tx_en_ch3;
  wire gmii_tx_er_ch0;
  wire gmii_tx_er_ch1;
  wire gmii_tx_er_ch2;
  wire gmii_tx_er_ch3;
  wire [7:0]gmii_txd_ch0;
  wire [7:0]gmii_txd_ch1;
  wire [7:0]gmii_txd_ch2;
  wire [7:0]gmii_txd_ch3;
  wire [8:0]link_timer_value_ch0;
  wire [8:0]link_timer_value_ch1;
  wire [8:0]link_timer_value_ch2;
  wire [8:0]link_timer_value_ch3;
  wire powerdown;
  wire reset;
  wire reset_done;
  wire reset_in0_out;
  wire reset_in1_out;
  wire reset_in2_out;
  wire [3:0]rxchariscomma;
  wire [3:0]rxcharisk;
  wire [31:0]rxdata;
  wire [3:0]rxnotintable;
  wire rxrecclk;
  wire signal_detect;
  wire [12:0]status_vector_ch0;
  wire [12:0]status_vector_ch1;
  wire [12:0]status_vector_ch2;
  wire [12:0]status_vector_ch3;
  wire txbuferr;
  wire [3:0]txcharisk;
  wire [31:0]txdata;
  wire userclk;

  qsgmii_1218_AGGREGATOR AGGREGATOR_I
       (.D({TXCHARISK_CH3,TXCHARISK_CH2,TXCHARISK_CH1,TXCHARISK_CH0}),
        .ENABLEALIGN_CH0(ENABLEALIGN_CH0),
        .ENABLEALIGN_CH1(ENABLEALIGN_CH1),
        .ENABLEALIGN_CH2(ENABLEALIGN_CH2),
        .ENABLEALIGN_CH3(ENABLEALIGN_CH3),
        .MGT_TX_RESET(MGT_TX_RESET),
        .\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2] (POWERDOWN_CH0),
        .\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2]_0 (POWERDOWN_CH1),
        .\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[2]_1 (POWERDOWN_CH2),
        .POWERDOWN(POWERDOWN_CH3),
        .TXDATA_CH0(TXDATA_CH0),
        .TXDATA_CH1(TXDATA_CH1),
        .TXDATA_CH2(TXDATA_CH2),
        .TXDATA_CH3(TXDATA_CH3),
        .\USE_ROCKET_IO.TXCHARISK_reg (GPCS_PMA_GEN_i0_n_36),
        .enablealign(enablealign),
        .powerdown(powerdown),
        .txcharisk(txcharisk),
        .txdata(txdata),
        .userclk(userclk));
  qsgmii_1218_ALIGNER ALIGNER_I
       (.Q({RXCHARISCOMMA_CH3_ELB,RXCHARISCOMMA_CH2_ELB,RXCHARISCOMMA_CH1_ELB,RXCHARISCOMMA_CH0_ELB}),
        .RESET_OUT(RXRESET_REC0),
        .\WR_DATA_REG1_reg[11] ({RXCHARISK_CH3_ELB,RXCHARISK_CH2_ELB,RXCHARISK_CH1_ELB,RXCHARISK_CH0_ELB}),
        .\WR_DATA_REG1_reg[7] ({RXDATA_CH3_ELB,RXDATA_CH2_ELB,RXDATA_CH1_ELB,RXDATA_CH0_ELB}),
        .\WR_DATA_REG1_reg[9] ({RXNOTINTABLE_CH3_ELB,RXNOTINTABLE_CH2_ELB,RXNOTINTABLE_CH1_ELB,RXNOTINTABLE_CH0_ELB}),
        .rxchariscomma(rxchariscomma),
        .rxcharisk(rxcharisk),
        .rxdata(rxdata),
        .rxnotintable(rxnotintable),
        .rxrecclk(rxrecclk));
  qsgmii_1218_GPCS_PMA_GEN GPCS_PMA_GEN_i0
       (.D(TXCHARISK_CH0),
        .ENABLEALIGN_CH0(ENABLEALIGN_CH0),
        .MGT_RX_RESET(MGT_RX_RESET_REG1),
        .MGT_TX_RESET(MGT_TX_RESET),
        .Q(POWERDOWN_CH0),
        .RESET_OUT(RESET_PRI),
        .RESET_SYNC1(reset_in1_out),
        .RESET_SYNC1_0(reset_in0_out),
        .RXBUFERR(RXBUFERR),
        .RXCHARISCOMMA_USR(\RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_2 ),
        .RXCHARISK_USR(\RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_3 ),
        .RXCLKCORCNT_CH0({RXCLKCORCNT_CH0[2],RXCLKCORCNT_CH0[0]}),
        .RXDATA_USR(RXDATA_USR),
        .RXNOTINTABLE_USR(\RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_4 ),
        .SR(MGT_RX_RESET),
        .SS(reset_in2_out),
        .\TXDATA_reg[6] (TXDATA_CH0),
        .\TXDATA_reg[7] (GPCS_PMA_GEN_i0_n_36),
        .\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 (MGT_RX_RESET_REG2),
        .\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_1 (MGT_RX_RESET_REG3),
        .an_adv_config_vector_ch0(an_adv_config_vector_ch0),
        .an_interrupt_ch0(an_interrupt_ch0),
        .an_restart_config_ch0(an_restart_config_ch0),
        .configuration_vector_ch0(configuration_vector_ch0),
        .data_sync_reg6(GPCS_PMA_GEN_i3_n_2),
        .dcm_locked(dcm_locked),
        .gmii_rx_dv_ch0(gmii_rx_dv_ch0),
        .gmii_rx_er_ch0(gmii_rx_er_ch0),
        .gmii_rxd_ch0(gmii_rxd_ch0),
        .gmii_tx_en_ch0(gmii_tx_en_ch0),
        .gmii_tx_er_ch0(gmii_tx_er_ch0),
        .gmii_txd_ch0(gmii_txd_ch0),
        .link_timer_value_ch0(link_timer_value_ch0),
        .rxrecclk(rxrecclk),
        .signal_detect(signal_detect),
        .status_vector_ch0(status_vector_ch0),
        .txbuferr(txbuferr),
        .userclk(userclk));
  qsgmii_1218_GPCS_PMA_GEN_69 GPCS_PMA_GEN_i1
       (.ENABLEALIGN_CH1(ENABLEALIGN_CH1),
        .MGT_RX_RESET(MGT_RX_RESET_REG1),
        .Q(POWERDOWN_CH1),
        .RESET_OUT(RESET_PRI),
        .RXBUFSTATUS_CH1(RXBUFSTATUS_CH1),
        .RXCHARISCOMMA_USR(\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_2 ),
        .RXCHARISK_USR(\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_3 ),
        .RXCLKCORCNT_CH1({RXCLKCORCNT_CH1[2],RXCLKCORCNT_CH1[0]}),
        .RXDATA_USR({\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_6 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_7 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_8 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_9 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_10 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_11 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_12 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_13 }),
        .RXNOTINTABLE_USR(\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_4 ),
        .TXCHARISK(TXCHARISK_CH1),
        .TXDATA_CH1(TXDATA_CH1),
        .an_adv_config_vector_ch1(an_adv_config_vector_ch1),
        .an_interrupt_ch1(an_interrupt_ch1),
        .an_restart_config_ch1(an_restart_config_ch1),
        .configuration_vector_ch1(configuration_vector_ch1),
        .data_sync_reg6(GPCS_PMA_GEN_i3_n_2),
        .dcm_locked(dcm_locked),
        .gmii_rx_dv_ch1(gmii_rx_dv_ch1),
        .gmii_rx_er_ch1(gmii_rx_er_ch1),
        .gmii_rxd_ch1(gmii_rxd_ch1),
        .gmii_tx_en_ch1(gmii_tx_en_ch1),
        .gmii_tx_er_ch1(gmii_tx_er_ch1),
        .gmii_txd_ch1(gmii_txd_ch1),
        .link_timer_value_ch1(link_timer_value_ch1),
        .rxrecclk(rxrecclk),
        .signal_detect(signal_detect),
        .status_vector_ch1(status_vector_ch1),
        .txbuferr(txbuferr),
        .userclk(userclk));
  qsgmii_1218_GPCS_PMA_GEN_70 GPCS_PMA_GEN_i2
       (.ENABLEALIGN_CH2(ENABLEALIGN_CH2),
        .MGT_RX_RESET(MGT_RX_RESET_REG2),
        .Q(POWERDOWN_CH2),
        .RESET_OUT(RESET_PRI),
        .RXBUFSTATUS_CH2(RXBUFSTATUS_CH2),
        .RXCHARISCOMMA_USR(\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_2 ),
        .RXCHARISK_USR(\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_3 ),
        .RXCLKCORCNT_CH2({RXCLKCORCNT_CH2[2],RXCLKCORCNT_CH2[0]}),
        .RXDATA_USR({\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_6 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_7 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_8 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_9 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_10 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_11 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_12 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_13 }),
        .RXNOTINTABLE_USR(\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_4 ),
        .TXCHARISK(TXCHARISK_CH2),
        .TXDATA_CH2(TXDATA_CH2),
        .an_adv_config_vector_ch2(an_adv_config_vector_ch2),
        .an_interrupt_ch2(an_interrupt_ch2),
        .an_restart_config_ch2(an_restart_config_ch2),
        .configuration_vector_ch2(configuration_vector_ch2),
        .data_sync_reg6(GPCS_PMA_GEN_i3_n_2),
        .dcm_locked(dcm_locked),
        .gmii_rx_dv_ch2(gmii_rx_dv_ch2),
        .gmii_rx_er_ch2(gmii_rx_er_ch2),
        .gmii_rxd_ch2(gmii_rxd_ch2),
        .gmii_tx_en_ch2(gmii_tx_en_ch2),
        .gmii_tx_er_ch2(gmii_tx_er_ch2),
        .gmii_txd_ch2(gmii_txd_ch2),
        .link_timer_value_ch2(link_timer_value_ch2),
        .rxrecclk(rxrecclk),
        .signal_detect(signal_detect),
        .status_vector_ch2(status_vector_ch2),
        .txbuferr(txbuferr),
        .userclk(userclk));
  qsgmii_1218_GPCS_PMA_GEN_71 GPCS_PMA_GEN_i3
       (.ENABLEALIGN_CH3(ENABLEALIGN_CH3),
        .MGT_RX_RESET(MGT_RX_RESET_REG3),
        .Q(POWERDOWN_CH3),
        .RESET_OUT(RESET_PRI),
        .RXBUFSTATUS_CH3(RXBUFSTATUS_CH3),
        .RXCHARISCOMMA_USR(\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_2 ),
        .RXCHARISK_USR(\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_3 ),
        .RXCLKCORCNT_CH3({RXCLKCORCNT_CH3[2],RXCLKCORCNT_CH3[0]}),
        .RXDATA_USR({\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_6 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_7 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_8 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_9 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_10 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_11 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_12 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_13 }),
        .RXNOTINTABLE_USR(\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_4 ),
        .STATUS_VECTOR_0_PRE_reg_0(GPCS_PMA_GEN_i3_n_2),
        .TXCHARISK(TXCHARISK_CH3),
        .TXDATA_CH3(TXDATA_CH3),
        .an_adv_config_vector_ch3(an_adv_config_vector_ch3),
        .an_interrupt_ch3(an_interrupt_ch3),
        .an_restart_config_ch3(an_restart_config_ch3),
        .configuration_vector_ch3(configuration_vector_ch3),
        .dcm_locked(dcm_locked),
        .gmii_rx_dv_ch3(gmii_rx_dv_ch3),
        .gmii_rx_er_ch3(gmii_rx_er_ch3),
        .gmii_rxd_ch3(gmii_rxd_ch3),
        .gmii_tx_en_ch3(gmii_tx_en_ch3),
        .gmii_tx_er_ch3(gmii_tx_er_ch3),
        .gmii_txd_ch3(gmii_txd_ch3),
        .link_timer_value_ch3(link_timer_value_ch3),
        .reset_done(reset_done),
        .rxrecclk(rxrecclk),
        .signal_detect(signal_detect),
        .status_vector_ch3(status_vector_ch3),
        .txbuferr(txbuferr),
        .userclk(userclk));
  qsgmii_1218_QSGMII_RX_ELASTIC_BUFFER \RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0 
       (.D({RXCHARISCOMMA_CH0_ELB,RXCHARISK_CH0_ELB,RXNOTINTABLE_CH0_ELB,RXDATA_CH0_ELB}),
        .Q(RXDATA_USR),
        .RESET_IN(MGT_RX_RESET),
        .RESET_OUT(RXRESET_REC0),
        .RXBUFERR(RXBUFERR),
        .RXCHARISCOMMA_USR(\RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_2 ),
        .RXCHARISK_USR(\RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_3 ),
        .RXCLKCORCNT_CH0({RXCLKCORCNT_CH0[2],RXCLKCORCNT_CH0[0]}),
        .RXNOTINTABLE_USR(\RX_GMII_AT_TXOUTCLK_I0.RX_ELASTIC_BUFFER_I0_n_4 ),
        .rxrecclk(rxrecclk),
        .userclk(userclk));
  qsgmii_1218_QSGMII_RX_ELASTIC_BUFFER_72 \RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1 
       (.D({RXCHARISCOMMA_CH1_ELB,RXCHARISK_CH1_ELB,RXNOTINTABLE_CH1_ELB,RXDATA_CH1_ELB}),
        .MGT_RX_RESET(MGT_RX_RESET_REG1),
        .Q({\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_6 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_7 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_8 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_9 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_10 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_11 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_12 ,\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_13 }),
        .RESET_IN(MGT_RX_RESET),
        .RESET_OUT(RXRESET_REC1),
        .RXBUFSTATUS_CH1(RXBUFSTATUS_CH1),
        .RXCHARISCOMMA_USR(\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_2 ),
        .RXCHARISK_USR(\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_3 ),
        .RXCLKCORCNT_CH1({RXCLKCORCNT_CH1[2],RXCLKCORCNT_CH1[0]}),
        .RXNOTINTABLE_USR(\RX_GMII_AT_TXOUTCLK_I1.RX_ELASTIC_BUFFER_I1_n_4 ),
        .SS(reset_in2_out),
        .rxrecclk(rxrecclk),
        .userclk(userclk));
  qsgmii_1218_QSGMII_RX_ELASTIC_BUFFER_73 \RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2 
       (.D({RXCHARISCOMMA_CH2_ELB,RXCHARISK_CH2_ELB,RXNOTINTABLE_CH2_ELB,RXDATA_CH2_ELB}),
        .MGT_RX_RESET(MGT_RX_RESET_REG2),
        .Q({\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_6 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_7 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_8 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_9 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_10 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_11 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_12 ,\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_13 }),
        .RESET_IN(MGT_RX_RESET),
        .RESET_OUT(RXRESET_REC2),
        .RXBUFSTATUS_CH2(RXBUFSTATUS_CH2),
        .RXCHARISCOMMA_USR(\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_2 ),
        .RXCHARISK_USR(\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_3 ),
        .RXCLKCORCNT_CH2({RXCLKCORCNT_CH2[2],RXCLKCORCNT_CH2[0]}),
        .RXNOTINTABLE_USR(\RX_GMII_AT_TXOUTCLK_I2.RX_ELASTIC_BUFFER_I2_n_4 ),
        .SS(reset_in1_out),
        .rxrecclk(rxrecclk),
        .userclk(userclk));
  qsgmii_1218_QSGMII_RX_ELASTIC_BUFFER_74 \RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3 
       (.D({RXCHARISCOMMA_CH3_ELB,RXCHARISK_CH3_ELB,RXNOTINTABLE_CH3_ELB,RXDATA_CH3_ELB}),
        .MGT_RX_RESET(MGT_RX_RESET_REG3),
        .Q({\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_6 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_7 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_8 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_9 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_10 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_11 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_12 ,\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_13 }),
        .RESET_OUT(RXRESET_REC3),
        .RXBUFSTATUS_CH3(RXBUFSTATUS_CH3),
        .RXCHARISCOMMA_USR(\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_2 ),
        .RXCHARISK_USR(\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_3 ),
        .RXCLKCORCNT_CH3({RXCLKCORCNT_CH3[2],RXCLKCORCNT_CH3[0]}),
        .RXNOTINTABLE_USR(\RX_GMII_AT_TXOUTCLK_I3.RX_ELASTIC_BUFFER_I3_n_4 ),
        .SR(MGT_RX_RESET),
        .SS(reset_in0_out),
        .rxrecclk(rxrecclk),
        .userclk(userclk));
  qsgmii_1218_qsgmii_reset_sync reclock_reset
       (.RESET_OUT(RESET_PRI),
        .reset(reset),
        .userclk(userclk));
  qsgmii_1218_qsgmii_reset_sync_75 reclock_rxreset0
       (.RESET_OUT(RXRESET_REC0),
        .SR(MGT_RX_RESET),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_reset_sync_76 reclock_rxreset1
       (.RESET_OUT(RXRESET_REC1),
        .SS(reset_in2_out),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_reset_sync_77 reclock_rxreset2
       (.RESET_OUT(RXRESET_REC2),
        .\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg (reset_in1_out),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_reset_sync_78 reclock_rxreset3
       (.RESET_OUT(RXRESET_REC3),
        .\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg (reset_in0_out),
        .rxrecclk(rxrecclk));
endmodule

(* ORIG_REF_NAME = "QSGMII_RX_ELASTIC_BUFFER" *) 
module qsgmii_1218_QSGMII_RX_ELASTIC_BUFFER
   (RXCLKCORCNT_CH0,
    RXCHARISCOMMA_USR,
    RXCHARISK_USR,
    RXNOTINTABLE_USR,
    RXBUFERR,
    Q,
    userclk,
    rxrecclk,
    RESET_IN,
    RESET_OUT,
    D);
  output [1:0]RXCLKCORCNT_CH0;
  output RXCHARISCOMMA_USR;
  output RXCHARISK_USR;
  output RXNOTINTABLE_USR;
  output RXBUFERR;
  output [7:0]Q;
  input userclk;
  input rxrecclk;
  input RESET_IN;
  input RESET_OUT;
  input [10:0]D;

  wire [5:0]BIN_TO_GRAY;
  wire [10:0]D;
  wire D5P6_WR_REG;
  wire D5P6_WR_REG_i_2_n_0;
  wire DATA_IN;
  wire DATA_OUT;
  wire EVEN;
  wire EVEN_i_1_n_0;
  wire \GEN_FIFO[0].RD_DATA_reg_n_0_[0] ;
  wire \GEN_FIFO[11].RD_DATA_reg_n_0_[11] ;
  wire \GEN_FIFO[12].RD_DATA_reg_n_0_[12] ;
  wire \GEN_FIFO[13].RD_DATA_reg_n_0_[13] ;
  wire \GEN_FIFO[1].RD_DATA_reg_n_0_[1] ;
  wire \GEN_FIFO[25].RD_DATA_reg_n_0_[25] ;
  wire \GEN_FIFO[27].RD_DATA_reg_n_0_[27] ;
  wire \GEN_FIFO[28].RD_DATA_reg ;
  wire \GEN_FIFO[2].RD_DATA_reg_n_0_[2] ;
  wire \GEN_FIFO[3].RD_DATA_reg_n_0_[3] ;
  wire \GEN_FIFO[4].RD_DATA_reg_n_0_[4] ;
  wire \GEN_FIFO[5].RD_DATA_reg_n_0_[5] ;
  wire \GEN_FIFO[6].RD_DATA_reg_n_0_[6] ;
  wire \GEN_FIFO[7].RD_DATA_reg_n_0_[7] ;
  wire \GEN_FIFO[9].RD_DATA_reg_n_0_[9] ;
  wire [4:0]GRAY_TO_BIN;
  wire I1_DETECTED_WR;
  wire I1_DETECTED_WR_REG;
  wire I1_DETECTED_WR_REG_i_2_n_0;
  wire INSERT_IDLE;
  wire INSERT_IDLE_i_1__3_n_0;
  wire K28P5_WR_REG;
  wire K28P5_WR_REG_i_2_n_0;
  wire [7:0]Q;
  wire [6:0]RD_ADDR;
  wire [6:0]RD_ADDR_GRAY;
  wire \RD_ADDR_GRAY[0]_i_1_n_0 ;
  wire \RD_ADDR_GRAY[1]_i_1_n_0 ;
  wire \RD_ADDR_GRAY[2]_i_1_n_0 ;
  wire \RD_ADDR_GRAY[3]_i_1_n_0 ;
  wire \RD_ADDR_GRAY[4]_i_1_n_0 ;
  wire \RD_ADDR_GRAY[5]_i_1_n_0 ;
  wire [6:0]RD_ADDR_PLUS1;
  wire \RD_ADDR_PLUS2[6]_i_2_n_0 ;
  wire \RD_ADDR_PLUS2_reg_n_0_[0] ;
  wire \RD_ADDR_PLUS2_reg_n_0_[2] ;
  wire \RD_ADDR_PLUS2_reg_n_0_[6] ;
  wire RD_DATA_RAM_0;
  wire RD_DATA_RAM_1;
  wire RD_DATA_RAM_11;
  wire RD_DATA_RAM_12;
  wire RD_DATA_RAM_13;
  wire RD_DATA_RAM_16;
  wire RD_DATA_RAM_17;
  wire RD_DATA_RAM_18;
  wire RD_DATA_RAM_19;
  wire RD_DATA_RAM_2;
  wire RD_DATA_RAM_20;
  wire RD_DATA_RAM_21;
  wire RD_DATA_RAM_22;
  wire RD_DATA_RAM_23;
  wire RD_DATA_RAM_25;
  wire RD_DATA_RAM_27;
  wire RD_DATA_RAM_28;
  wire RD_DATA_RAM_3;
  wire RD_DATA_RAM_4;
  wire RD_DATA_RAM_5;
  wire RD_DATA_RAM_6;
  wire RD_DATA_RAM_7;
  wire RD_DATA_RAM_9;
  wire [28:0]RD_DATA_REG;
  wire RD_ENABLE;
  wire RD_ENABLE0;
  wire RD_ENABLE24_out;
  wire RD_ENABLE_i_10_n_0;
  wire RD_ENABLE_i_11_n_0;
  wire RD_ENABLE_i_1_n_0;
  wire RD_ENABLE_i_3_n_0;
  wire RD_ENABLE_i_4_n_0;
  wire RD_ENABLE_i_5_n_0;
  wire RD_ENABLE_i_7_n_0;
  wire RD_ENABLE_i_8_n_0;
  wire RD_ENABLE_i_9_n_0;
  wire [6:0]RD_OCCUPANCY;
  wire [6:0]RD_OCCUPANCY01_out;
  wire \RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ;
  wire \RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY_n_1 ;
  wire \RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 ;
  wire REMOVE_IDLE;
  wire REMOVE_IDLE_i_1_n_0;
  wire REMOVE_IDLE_i_2_n_0;
  wire RESET_IN;
  wire RESET_OUT;
  wire RXBUFERR;
  wire RXBUFERR_i_1_n_0;
  wire RXBUFERR_i_2_n_0;
  wire RXBUFERR_i_3_n_0;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISCOMMA_USR_i_1_n_0;
  wire RXCHARISK_USR;
  wire RXCHARISK_USR_i_1_n_0;
  wire \RXCLKCORCNT[0]_i_1_n_0 ;
  wire \RXCLKCORCNT[2]_i_1_n_0 ;
  wire [1:0]RXCLKCORCNT_CH0;
  wire \RXDATA_USR[0]_i_1_n_0 ;
  wire \RXDATA_USR[1]_i_1_n_0 ;
  wire \RXDATA_USR[2]_i_1_n_0 ;
  wire \RXDATA_USR[3]_i_1_n_0 ;
  wire \RXDATA_USR[4]_i_1_n_0 ;
  wire \RXDATA_USR[5]_i_1_n_0 ;
  wire \RXDATA_USR[6]_i_1_n_0 ;
  wire \RXDATA_USR[7]_i_1_n_0 ;
  wire RXNOTINTABLE_USR;
  wire RXNOTINTABLE_USR_i_1_n_0;
  wire WE;
  wire [6:0]WR_ADDR;
  wire \WR_ADDR_GRAY_reg_n_0_[0] ;
  wire \WR_ADDR_GRAY_reg_n_0_[1] ;
  wire \WR_ADDR_GRAY_reg_n_0_[2] ;
  wire \WR_ADDR_GRAY_reg_n_0_[3] ;
  wire \WR_ADDR_GRAY_reg_n_0_[4] ;
  wire \WR_ADDR_GRAY_reg_n_0_[5] ;
  wire [6:0]WR_ADDR_PLUS1;
  wire \WR_ADDR_PLUS2[6]_i_2_n_0 ;
  wire \WR_ADDR_PLUS2_reg_n_0_[0] ;
  wire \WR_ADDR_PLUS2_reg_n_0_[6] ;
  wire [12:9]WR_DATA_REG1;
  wire \WR_DATA_REG1_reg_n_0_[0] ;
  wire \WR_DATA_REG1_reg_n_0_[1] ;
  wire \WR_DATA_REG1_reg_n_0_[2] ;
  wire \WR_DATA_REG1_reg_n_0_[3] ;
  wire \WR_DATA_REG1_reg_n_0_[4] ;
  wire \WR_DATA_REG1_reg_n_0_[5] ;
  wire \WR_DATA_REG1_reg_n_0_[6] ;
  wire \WR_DATA_REG1_reg_n_0_[7] ;
  wire [12:0]WR_DATA_REG2;
  wire \WR_DATA_reg_n_0_[0] ;
  wire \WR_DATA_reg_n_0_[11] ;
  wire \WR_DATA_reg_n_0_[12] ;
  wire \WR_DATA_reg_n_0_[13] ;
  wire \WR_DATA_reg_n_0_[16] ;
  wire \WR_DATA_reg_n_0_[17] ;
  wire \WR_DATA_reg_n_0_[18] ;
  wire \WR_DATA_reg_n_0_[19] ;
  wire \WR_DATA_reg_n_0_[1] ;
  wire \WR_DATA_reg_n_0_[20] ;
  wire \WR_DATA_reg_n_0_[21] ;
  wire \WR_DATA_reg_n_0_[22] ;
  wire \WR_DATA_reg_n_0_[23] ;
  wire \WR_DATA_reg_n_0_[25] ;
  wire \WR_DATA_reg_n_0_[27] ;
  wire \WR_DATA_reg_n_0_[28] ;
  wire \WR_DATA_reg_n_0_[2] ;
  wire \WR_DATA_reg_n_0_[3] ;
  wire \WR_DATA_reg_n_0_[4] ;
  wire \WR_DATA_reg_n_0_[5] ;
  wire \WR_DATA_reg_n_0_[6] ;
  wire \WR_DATA_reg_n_0_[7] ;
  wire \WR_DATA_reg_n_0_[9] ;
  wire WR_ENABLE_i_1_n_0;
  wire WR_ENABLE_i_2_n_0;
  wire [6:1]WR_OCCUPANCY;
  wire [6:1]WR_OCCUPANCY00_out;
  wire WR_TOGGLE;
  wire WR_TOGGLE_i_1_n_0;
  wire insert_idle_reg;
  wire p_0_in6_in;
  wire p_0_out;
  wire p_17_in;
  wire p_1_in;
  wire p_1_in18_in;
  wire p_1_in5_in;
  wire [7:0]p_2_in;
  wire p_2_in21_in;
  wire p_2_in7_in;
  wire p_2_out;
  wire p_3_in;
  wire p_3_in24_in;
  wire p_3_in9_in;
  wire p_3_out;
  wire p_4_in;
  wire p_4_in11_in;
  wire p_4_out;
  wire p_5_in;
  wire p_5_in13_in;
  wire p_5_out;
  wire p_8_in;
  wire p_9_in;
  wire [6:0]plusOp;
  wire [6:0]plusOp__0;
  wire rxrecclk;
  wire userclk;
  wire \NLW_GEN_FIFO[0].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[11].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[12].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[13].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[16].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[17].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[18].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[19].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[1].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[20].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[21].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[22].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[23].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[25].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[27].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[28].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[2].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[3].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[4].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[5].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[6].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[7].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[9].DIST_RAM_SPO_UNCONNECTED ;

  LUT5 #(
    .INIT(32'h10000004)) 
    D5P6_WR_REG_i_1
       (.I0(D5P6_WR_REG_i_2_n_0),
        .I1(\WR_DATA_REG1_reg_n_0_[4] ),
        .I2(\WR_DATA_REG1_reg_n_0_[2] ),
        .I3(\WR_DATA_REG1_reg_n_0_[0] ),
        .I4(\WR_DATA_REG1_reg_n_0_[7] ),
        .O(p_8_in));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    D5P6_WR_REG_i_2
       (.I0(\WR_DATA_REG1_reg_n_0_[6] ),
        .I1(\WR_DATA_REG1_reg_n_0_[1] ),
        .I2(\WR_DATA_REG1_reg_n_0_[5] ),
        .I3(p_0_in6_in),
        .I4(\WR_DATA_REG1_reg_n_0_[3] ),
        .O(D5P6_WR_REG_i_2_n_0));
  FDRE D5P6_WR_REG_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_8_in),
        .Q(D5P6_WR_REG),
        .R(RESET_OUT));
  LUT1 #(
    .INIT(2'h1)) 
    EVEN_i_1
       (.I0(EVEN),
        .O(EVEN_i_1_n_0));
  FDSE EVEN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EVEN_i_1_n_0),
        .Q(EVEN),
        .S(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[0].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[0] ),
        .DPO(RD_DATA_RAM_0),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[0].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[0].RD_DATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_0),
        .Q(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[11].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[11] ),
        .DPO(RD_DATA_RAM_11),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[11].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[11].RD_DATA_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_11),
        .Q(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[12].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[12] ),
        .DPO(RD_DATA_RAM_12),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[12].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[12].RD_DATA_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_12),
        .Q(\GEN_FIFO[12].RD_DATA_reg_n_0_[12] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[13].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[13] ),
        .DPO(RD_DATA_RAM_13),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[13].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[13].RD_DATA_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_13),
        .Q(\GEN_FIFO[13].RD_DATA_reg_n_0_[13] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[16].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[16] ),
        .DPO(RD_DATA_RAM_16),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[16].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[16].RD_DATA_reg[16] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_16),
        .Q(p_2_in[0]),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[17].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[17] ),
        .DPO(RD_DATA_RAM_17),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[17].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[17].RD_DATA_reg[17] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_17),
        .Q(p_2_in[1]),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[18].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[18] ),
        .DPO(RD_DATA_RAM_18),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[18].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[18].RD_DATA_reg[18] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_18),
        .Q(p_2_in[2]),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[19].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[19] ),
        .DPO(RD_DATA_RAM_19),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[19].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[19].RD_DATA_reg[19] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_19),
        .Q(p_2_in[3]),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[1].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[1] ),
        .DPO(RD_DATA_RAM_1),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[1].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[1].RD_DATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_1),
        .Q(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[20].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[20] ),
        .DPO(RD_DATA_RAM_20),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[20].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[20].RD_DATA_reg[20] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_20),
        .Q(p_2_in[4]),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[21].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[21] ),
        .DPO(RD_DATA_RAM_21),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[21].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[21].RD_DATA_reg[21] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_21),
        .Q(p_2_in[5]),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[22].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[22] ),
        .DPO(RD_DATA_RAM_22),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[22].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[22].RD_DATA_reg[22] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_22),
        .Q(p_2_in[6]),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[23].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[23] ),
        .DPO(RD_DATA_RAM_23),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[23].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[23].RD_DATA_reg[23] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_23),
        .Q(p_2_in[7]),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[25].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[25] ),
        .DPO(RD_DATA_RAM_25),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[25].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[25].RD_DATA_reg[25] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_25),
        .Q(\GEN_FIFO[25].RD_DATA_reg_n_0_[25] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[27].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[27] ),
        .DPO(RD_DATA_RAM_27),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[27].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[27].RD_DATA_reg[27] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_27),
        .Q(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[28].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[28] ),
        .DPO(RD_DATA_RAM_28),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[28].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[28].RD_DATA_reg[28] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_28),
        .Q(\GEN_FIFO[28].RD_DATA_reg ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[2].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[2] ),
        .DPO(RD_DATA_RAM_2),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[2].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[2].RD_DATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_2),
        .Q(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[3].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[3] ),
        .DPO(RD_DATA_RAM_3),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[3].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[3].RD_DATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_3),
        .Q(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[4].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[4] ),
        .DPO(RD_DATA_RAM_4),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[4].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[4].RD_DATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_4),
        .Q(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[5].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[5] ),
        .DPO(RD_DATA_RAM_5),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[5].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[5].RD_DATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_5),
        .Q(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[6].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[6] ),
        .DPO(RD_DATA_RAM_6),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[6].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[6].RD_DATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_6),
        .Q(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[7].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[7] ),
        .DPO(RD_DATA_RAM_7),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[7].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[7].RD_DATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_7),
        .Q(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .R(RESET_IN));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[9].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[9] ),
        .DPO(RD_DATA_RAM_9),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[9].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[9].RD_DATA_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_9),
        .Q(\GEN_FIFO[9].RD_DATA_reg_n_0_[9] ),
        .R(RESET_IN));
  LUT4 #(
    .INIT(16'h8F88)) 
    I1_DETECTED_WR_REG_i_1
       (.I0(p_8_in),
        .I1(K28P5_WR_REG),
        .I2(I1_DETECTED_WR_REG_i_2_n_0),
        .I3(D5P6_WR_REG),
        .O(I1_DETECTED_WR));
  (* SOFT_HLUTNM = "soft_lutpair285" *) 
  LUT4 #(
    .INIT(16'hFFFD)) 
    I1_DETECTED_WR_REG_i_2
       (.I0(\WR_DATA_REG1_reg_n_0_[3] ),
        .I1(\WR_DATA_REG1_reg_n_0_[0] ),
        .I2(\WR_DATA_REG1_reg_n_0_[1] ),
        .I3(K28P5_WR_REG_i_2_n_0),
        .O(I1_DETECTED_WR_REG_i_2_n_0));
  FDRE I1_DETECTED_WR_REG_reg
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(I1_DETECTED_WR),
        .Q(I1_DETECTED_WR_REG),
        .R(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair291" *) 
  LUT3 #(
    .INIT(8'h40)) 
    INSERT_IDLE_i_1__3
       (.I0(RESET_IN),
        .I1(EVEN),
        .I2(RD_ENABLE0),
        .O(INSERT_IDLE_i_1__3_n_0));
  FDRE INSERT_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE_i_1__3_n_0),
        .Q(INSERT_IDLE),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair285" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    K28P5_WR_REG_i_1
       (.I0(K28P5_WR_REG_i_2_n_0),
        .I1(\WR_DATA_REG1_reg_n_0_[1] ),
        .I2(\WR_DATA_REG1_reg_n_0_[0] ),
        .I3(\WR_DATA_REG1_reg_n_0_[3] ),
        .O(p_9_in));
  LUT6 #(
    .INIT(64'hDFFFFFFFFFFFFFFF)) 
    K28P5_WR_REG_i_2
       (.I0(\WR_DATA_REG1_reg_n_0_[2] ),
        .I1(\WR_DATA_REG1_reg_n_0_[6] ),
        .I2(\WR_DATA_REG1_reg_n_0_[7] ),
        .I3(\WR_DATA_REG1_reg_n_0_[4] ),
        .I4(\WR_DATA_REG1_reg_n_0_[5] ),
        .I5(p_0_in6_in),
        .O(K28P5_WR_REG_i_2_n_0));
  FDRE K28P5_WR_REG_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_9_in),
        .Q(K28P5_WR_REG),
        .R(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair299" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[0]_i_1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in),
        .O(\RD_ADDR_GRAY[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair295" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[1]_i_1 
       (.I0(p_1_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(\RD_ADDR_GRAY[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair295" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[2]_i_1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I1(p_3_in),
        .O(\RD_ADDR_GRAY[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair296" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[3]_i_1 
       (.I0(p_3_in),
        .I1(p_4_in),
        .O(\RD_ADDR_GRAY[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair296" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[4]_i_1 
       (.I0(p_4_in),
        .I1(p_5_in),
        .O(\RD_ADDR_GRAY[4]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[5]_i_1 
       (.I0(p_5_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .O(\RD_ADDR_GRAY[5]_i_1_n_0 ));
  FDRE \RD_ADDR_GRAY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[0]_i_1_n_0 ),
        .Q(RD_ADDR_GRAY[0]),
        .R(RESET_IN));
  FDRE \RD_ADDR_GRAY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[1]_i_1_n_0 ),
        .Q(RD_ADDR_GRAY[1]),
        .R(RESET_IN));
  FDRE \RD_ADDR_GRAY_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[2]_i_1_n_0 ),
        .Q(RD_ADDR_GRAY[2]),
        .R(RESET_IN));
  FDRE \RD_ADDR_GRAY_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[3]_i_1_n_0 ),
        .Q(RD_ADDR_GRAY[3]),
        .R(RESET_IN));
  FDRE \RD_ADDR_GRAY_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[4]_i_1_n_0 ),
        .Q(RD_ADDR_GRAY[4]),
        .R(RESET_IN));
  FDRE \RD_ADDR_GRAY_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[5]_i_1_n_0 ),
        .Q(RD_ADDR_GRAY[5]),
        .R(RESET_IN));
  FDRE \RD_ADDR_GRAY_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(RD_ADDR_GRAY[6]),
        .R(RESET_IN));
  FDSE \RD_ADDR_PLUS1_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .Q(RD_ADDR_PLUS1[0]),
        .S(RESET_IN));
  FDRE \RD_ADDR_PLUS1_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_1_in),
        .Q(RD_ADDR_PLUS1[1]),
        .R(RESET_IN));
  FDRE \RD_ADDR_PLUS1_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .Q(RD_ADDR_PLUS1[2]),
        .R(RESET_IN));
  FDRE \RD_ADDR_PLUS1_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_3_in),
        .Q(RD_ADDR_PLUS1[3]),
        .R(RESET_IN));
  FDRE \RD_ADDR_PLUS1_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_4_in),
        .Q(RD_ADDR_PLUS1[4]),
        .R(RESET_IN));
  FDRE \RD_ADDR_PLUS1_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_5_in),
        .Q(RD_ADDR_PLUS1[5]),
        .R(RESET_IN));
  FDRE \RD_ADDR_PLUS1_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(RD_ADDR_PLUS1[6]),
        .R(RESET_IN));
  (* SOFT_HLUTNM = "soft_lutpair299" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \RD_ADDR_PLUS2[0]_i_1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair287" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \RD_ADDR_PLUS2[2]_i_1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair287" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \RD_ADDR_PLUS2[3]_i_1 
       (.I0(p_1_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I3(p_3_in),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair282" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \RD_ADDR_PLUS2[4]_i_1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(p_1_in),
        .I3(p_3_in),
        .I4(p_4_in),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \RD_ADDR_PLUS2[5]_i_1 
       (.I0(p_3_in),
        .I1(p_1_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I4(p_4_in),
        .I5(p_5_in),
        .O(plusOp[5]));
  LUT3 #(
    .INIT(8'h78)) 
    \RD_ADDR_PLUS2[6]_i_1 
       (.I0(\RD_ADDR_PLUS2[6]_i_2_n_0 ),
        .I1(p_5_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair282" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \RD_ADDR_PLUS2[6]_i_2 
       (.I0(p_4_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(p_1_in),
        .I4(p_3_in),
        .O(\RD_ADDR_PLUS2[6]_i_2_n_0 ));
  FDRE \RD_ADDR_PLUS2_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[0]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .R(RESET_IN));
  FDSE \RD_ADDR_PLUS2_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_GRAY[0]_i_1_n_0 ),
        .Q(p_1_in),
        .S(RESET_IN));
  FDRE \RD_ADDR_PLUS2_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[2]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .R(RESET_IN));
  FDRE \RD_ADDR_PLUS2_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[3]),
        .Q(p_3_in),
        .R(RESET_IN));
  FDRE \RD_ADDR_PLUS2_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[4]),
        .Q(p_4_in),
        .R(RESET_IN));
  FDRE \RD_ADDR_PLUS2_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[5]),
        .Q(p_5_in),
        .R(RESET_IN));
  FDRE \RD_ADDR_PLUS2_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[6]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .R(RESET_IN));
  FDRE \RD_ADDR_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[0]),
        .Q(RD_ADDR[0]),
        .R(RESET_IN));
  FDRE \RD_ADDR_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[1]),
        .Q(RD_ADDR[1]),
        .R(RESET_IN));
  FDRE \RD_ADDR_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[2]),
        .Q(RD_ADDR[2]),
        .R(RESET_IN));
  FDRE \RD_ADDR_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[3]),
        .Q(RD_ADDR[3]),
        .R(RESET_IN));
  FDRE \RD_ADDR_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[4]),
        .Q(RD_ADDR[4]),
        .R(RESET_IN));
  FDRE \RD_ADDR_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[5]),
        .Q(RD_ADDR[5]),
        .R(RESET_IN));
  FDRE \RD_ADDR_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[6]),
        .Q(RD_ADDR[6]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .Q(RD_DATA_REG[0]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[11] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .Q(RD_DATA_REG[11]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[12] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[12].RD_DATA_reg_n_0_[12] ),
        .Q(RD_DATA_REG[12]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[13] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[13].RD_DATA_reg_n_0_[13] ),
        .Q(RD_DATA_REG[13]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[16] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[0]),
        .Q(RD_DATA_REG[16]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[17] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[1]),
        .Q(RD_DATA_REG[17]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[18] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[2]),
        .Q(RD_DATA_REG[18]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[19] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[3]),
        .Q(RD_DATA_REG[19]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .Q(RD_DATA_REG[1]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[20] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[4]),
        .Q(RD_DATA_REG[20]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[21] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[5]),
        .Q(RD_DATA_REG[21]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[22] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[6]),
        .Q(RD_DATA_REG[22]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[23] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[7]),
        .Q(RD_DATA_REG[23]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[25] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[25].RD_DATA_reg_n_0_[25] ),
        .Q(RD_DATA_REG[25]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[27] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .Q(RD_DATA_REG[27]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[28] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[28].RD_DATA_reg ),
        .Q(RD_DATA_REG[28]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .Q(RD_DATA_REG[2]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .Q(RD_DATA_REG[3]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .Q(RD_DATA_REG[4]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .Q(RD_DATA_REG[5]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .Q(RD_DATA_REG[6]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[7] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .Q(RD_DATA_REG[7]),
        .R(RESET_IN));
  FDRE \RD_DATA_REG_reg[9] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[9].RD_DATA_reg_n_0_[9] ),
        .Q(RD_DATA_REG[9]),
        .R(RESET_IN));
  (* SOFT_HLUTNM = "soft_lutpair291" *) 
  LUT3 #(
    .INIT(8'h04)) 
    RD_ENABLE_i_1
       (.I0(RESET_IN),
        .I1(EVEN),
        .I2(RD_ENABLE0),
        .O(RD_ENABLE_i_1_n_0));
  LUT3 #(
    .INIT(8'h04)) 
    RD_ENABLE_i_10
       (.I0(p_2_in[1]),
        .I1(p_2_in[2]),
        .I2(p_2_in[0]),
        .O(RD_ENABLE_i_10_n_0));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    RD_ENABLE_i_11
       (.I0(p_2_in[3]),
        .I1(p_2_in[4]),
        .I2(p_2_in[5]),
        .I3(p_2_in[6]),
        .I4(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .I5(p_2_in[7]),
        .O(RD_ENABLE_i_11_n_0));
  LUT5 #(
    .INIT(32'h000E0000)) 
    RD_ENABLE_i_2
       (.I0(RD_ENABLE_i_3_n_0),
        .I1(RD_ENABLE_i_4_n_0),
        .I2(RD_ENABLE_i_5_n_0),
        .I3(RD_OCCUPANCY[6]),
        .I4(RD_ENABLE24_out),
        .O(RD_ENABLE0));
  LUT5 #(
    .INIT(32'h00800200)) 
    RD_ENABLE_i_3
       (.I0(RD_ENABLE_i_7_n_0),
        .I1(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .I2(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .I3(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .I4(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .O(RD_ENABLE_i_3_n_0));
  LUT5 #(
    .INIT(32'h00800200)) 
    RD_ENABLE_i_4
       (.I0(RD_ENABLE_i_8_n_0),
        .I1(p_2_in[2]),
        .I2(p_2_in[0]),
        .I3(p_2_in[4]),
        .I4(p_2_in[7]),
        .O(RD_ENABLE_i_4_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    RD_ENABLE_i_5
       (.I0(RD_OCCUPANCY[4]),
        .I1(RD_OCCUPANCY[5]),
        .I2(RD_OCCUPANCY[2]),
        .I3(RD_OCCUPANCY[3]),
        .I4(RD_OCCUPANCY[1]),
        .I5(RD_OCCUPANCY[0]),
        .O(RD_ENABLE_i_5_n_0));
  LUT6 #(
    .INIT(64'hFFFF040004000400)) 
    RD_ENABLE_i_6
       (.I0(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .I1(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .I2(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .I3(RD_ENABLE_i_9_n_0),
        .I4(RD_ENABLE_i_10_n_0),
        .I5(RD_ENABLE_i_11_n_0),
        .O(RD_ENABLE24_out));
  LUT5 #(
    .INIT(32'h00010000)) 
    RD_ENABLE_i_7
       (.I0(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .I1(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .I2(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .I3(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .I4(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .O(RD_ENABLE_i_7_n_0));
  LUT5 #(
    .INIT(32'h00010000)) 
    RD_ENABLE_i_8
       (.I0(p_2_in[1]),
        .I1(p_2_in[3]),
        .I2(p_2_in[5]),
        .I3(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .I4(p_2_in[6]),
        .O(RD_ENABLE_i_8_n_0));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    RD_ENABLE_i_9
       (.I0(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .I1(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .I2(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .I3(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .I4(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .I5(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .O(RD_ENABLE_i_9_n_0));
  FDRE RD_ENABLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RD_ENABLE_i_1_n_0),
        .Q(RD_ENABLE),
        .R(1'b0));
  FDRE \RD_OCCUPANCY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[0]),
        .Q(RD_OCCUPANCY[0]),
        .R(RESET_IN));
  FDRE \RD_OCCUPANCY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[1]),
        .Q(RD_OCCUPANCY[1]),
        .R(RESET_IN));
  FDRE \RD_OCCUPANCY_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[2]),
        .Q(RD_OCCUPANCY[2]),
        .R(RESET_IN));
  FDRE \RD_OCCUPANCY_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[3]),
        .Q(RD_OCCUPANCY[3]),
        .R(RESET_IN));
  FDRE \RD_OCCUPANCY_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[4]),
        .Q(RD_OCCUPANCY[4]),
        .R(RESET_IN));
  FDRE \RD_OCCUPANCY_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[5]),
        .Q(RD_OCCUPANCY[5]),
        .R(RESET_IN));
  FDSE \RD_OCCUPANCY_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[6]),
        .Q(RD_OCCUPANCY[6]),
        .S(RESET_IN));
  qsgmii_1218_qsgmii_sync_block_120 \RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY 
       (.Q(RD_ADDR_GRAY[0]),
        .data_out(\RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_121 \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY 
       (.CO(\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ),
        .D(WR_OCCUPANCY00_out[3:1]),
        .Q(WR_ADDR[3:0]),
        .\RD_ADDR_GRAY_reg[1] (RD_ADDR_GRAY[1]),
        .S({\RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 }),
        .data_out(p_2_in21_in),
        .data_sync_reg6_0(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg6_1(p_17_in),
        .data_sync_reg6_2(p_1_in18_in),
        .data_sync_reg6_3(p_3_in24_in),
        .data_sync_reg6_4(\RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_122 \RECLOCK_RD_ADDRGRAY[2].SYNC_RD_ADDRGRAY 
       (.Q(RD_ADDR_GRAY[2]),
        .data_out(p_3_in24_in),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_123 \RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[2]),
        .\RD_ADDR_GRAY_reg[3] (RD_ADDR_GRAY[3]),
        .S(\RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(p_2_in21_in),
        .data_sync_reg6_0(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg6_1(p_17_in),
        .data_sync_reg6_2(p_1_in18_in),
        .data_sync_reg6_3(p_3_in24_in),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_124 \RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[3]),
        .\RD_ADDR_GRAY_reg[4] (RD_ADDR_GRAY[4]),
        .S(\RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(p_1_in18_in),
        .data_sync_reg6_0(p_17_in),
        .data_sync_reg6_1(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg6_2(p_2_in21_in),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_125 \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[4]),
        .\RD_ADDR_GRAY_reg[5] (RD_ADDR_GRAY[5]),
        .S(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg6_0(p_17_in),
        .data_sync_reg6_1(p_1_in18_in),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_126 \RECLOCK_RD_ADDRGRAY[6].SYNC_RD_ADDRGRAY 
       (.CO(\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ),
        .D(WR_OCCUPANCY00_out[6:4]),
        .Q(WR_ADDR[6:4]),
        .\RD_ADDR_GRAY_reg[6] (RD_ADDR_GRAY[6]),
        .S(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(p_17_in),
        .data_sync_reg6_0(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_127 \RECLOCK_WR_ADDRGRAY[0].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[0]),
        .GRAY_TO_BIN(GRAY_TO_BIN[1]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[0] ),
        .data_out(p_0_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_128 \RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY 
       (.CO(\RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY_n_1 ),
        .D(RD_OCCUPANCY01_out[3:0]),
        .DI({GRAY_TO_BIN[3:2],GRAY_TO_BIN[0]}),
        .GRAY_TO_BIN(GRAY_TO_BIN[1]),
        .Q(RD_ADDR[1:0]),
        .S({\RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 }),
        .\WR_ADDR_GRAY_reg[1] (\WR_ADDR_GRAY_reg_n_0_[1] ),
        .data_out(p_0_out),
        .data_sync_reg6_0(p_3_out),
        .data_sync_reg6_1(p_5_out),
        .data_sync_reg6_2(DATA_OUT),
        .data_sync_reg6_3(p_4_out),
        .data_sync_reg6_4(p_2_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_129 \RECLOCK_WR_ADDRGRAY[2].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[2]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[2] ),
        .data_out(p_2_out),
        .data_sync_reg6_0(p_4_out),
        .data_sync_reg6_1(DATA_OUT),
        .data_sync_reg6_2(p_5_out),
        .data_sync_reg6_3(p_3_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_130 \RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[3]),
        .Q(RD_ADDR[2]),
        .S(\RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 ),
        .\WR_ADDR_GRAY_reg[3] (\WR_ADDR_GRAY_reg_n_0_[3] ),
        .data_out(p_3_out),
        .data_sync_reg6_0(p_5_out),
        .data_sync_reg6_1(DATA_OUT),
        .data_sync_reg6_2(p_4_out),
        .data_sync_reg6_3(p_2_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_131 \RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[4]),
        .Q(RD_ADDR[3]),
        .S(\RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ),
        .\WR_ADDR_GRAY_reg[4] (\WR_ADDR_GRAY_reg_n_0_[4] ),
        .data_out(p_4_out),
        .data_sync_reg6_0(DATA_OUT),
        .data_sync_reg6_1(p_5_out),
        .data_sync_reg6_2(p_3_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_132 \RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY 
       (.CO(\RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY_n_1 ),
        .D(RD_OCCUPANCY01_out[6:4]),
        .DI(GRAY_TO_BIN[4]),
        .Q(RD_ADDR[4]),
        .S({\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 }),
        .\WR_ADDR_GRAY_reg[5] (\WR_ADDR_GRAY_reg_n_0_[5] ),
        .data_out(p_5_out),
        .data_sync_reg6_0(DATA_OUT),
        .data_sync_reg6_1(p_4_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_133 \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY 
       (.Q(RD_ADDR[6:5]),
        .S({\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 }),
        .\WR_ADDR_GRAY_reg[6] (DATA_IN),
        .data_out(DATA_OUT),
        .data_sync_reg6_0(p_5_out),
        .userclk(userclk));
  LUT6 #(
    .INIT(64'h0000FFFF00800000)) 
    REMOVE_IDLE_i_1
       (.I0(I1_DETECTED_WR),
        .I1(WR_OCCUPANCY[6]),
        .I2(I1_DETECTED_WR_REG),
        .I3(REMOVE_IDLE_i_2_n_0),
        .I4(WR_TOGGLE),
        .I5(REMOVE_IDLE),
        .O(REMOVE_IDLE_i_1_n_0));
  LUT5 #(
    .INIT(32'h00000001)) 
    REMOVE_IDLE_i_2
       (.I0(WR_OCCUPANCY[4]),
        .I1(WR_OCCUPANCY[1]),
        .I2(WR_OCCUPANCY[3]),
        .I3(WR_OCCUPANCY[5]),
        .I4(WR_OCCUPANCY[2]),
        .O(REMOVE_IDLE_i_2_n_0));
  FDRE REMOVE_IDLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(REMOVE_IDLE_i_1_n_0),
        .Q(REMOVE_IDLE),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'hFFFFFFFFC0020002)) 
    RXBUFERR_i_1
       (.I0(RXBUFERR_i_2_n_0),
        .I1(RD_OCCUPANCY[2]),
        .I2(RD_OCCUPANCY[3]),
        .I3(RD_OCCUPANCY[4]),
        .I4(RXBUFERR_i_3_n_0),
        .I5(RXBUFERR),
        .O(RXBUFERR_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair286" *) 
  LUT4 #(
    .INIT(16'h0007)) 
    RXBUFERR_i_2
       (.I0(RD_OCCUPANCY[1]),
        .I1(RD_OCCUPANCY[0]),
        .I2(RD_OCCUPANCY[6]),
        .I3(RD_OCCUPANCY[5]),
        .O(RXBUFERR_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair286" *) 
  LUT4 #(
    .INIT(16'hE000)) 
    RXBUFERR_i_3
       (.I0(RD_OCCUPANCY[1]),
        .I1(RD_OCCUPANCY[0]),
        .I2(RD_OCCUPANCY[6]),
        .I3(RD_OCCUPANCY[5]),
        .O(RXBUFERR_i_3_n_0));
  FDRE RXBUFERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXBUFERR_i_1_n_0),
        .Q(RXBUFERR),
        .R(RESET_IN));
  (* SOFT_HLUTNM = "soft_lutpair288" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXCHARISCOMMA_USR_i_1
       (.I0(RD_DATA_REG[28]),
        .I1(EVEN),
        .I2(RD_DATA_REG[12]),
        .O(RXCHARISCOMMA_USR_i_1_n_0));
  FDRE RXCHARISCOMMA_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISCOMMA_USR_i_1_n_0),
        .Q(RXCHARISCOMMA_USR),
        .R(RESET_IN));
  (* SOFT_HLUTNM = "soft_lutpair288" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXCHARISK_USR_i_1
       (.I0(RD_DATA_REG[27]),
        .I1(EVEN),
        .I2(RD_DATA_REG[11]),
        .O(RXCHARISK_USR_i_1_n_0));
  FDRE RXCHARISK_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISK_USR_i_1_n_0),
        .Q(RXCHARISK_USR),
        .R(RESET_IN));
  LUT3 #(
    .INIT(8'hAE)) 
    \RXCLKCORCNT[0]_i_1 
       (.I0(insert_idle_reg),
        .I1(RD_DATA_REG[13]),
        .I2(RXCLKCORCNT_CH0[0]),
        .O(\RXCLKCORCNT[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h4404)) 
    \RXCLKCORCNT[2]_i_1 
       (.I0(RESET_IN),
        .I1(insert_idle_reg),
        .I2(RD_DATA_REG[13]),
        .I3(RXCLKCORCNT_CH0[0]),
        .O(\RXCLKCORCNT[2]_i_1_n_0 ));
  FDRE \RXCLKCORCNT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXCLKCORCNT[0]_i_1_n_0 ),
        .Q(RXCLKCORCNT_CH0[0]),
        .R(RESET_IN));
  FDRE \RXCLKCORCNT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXCLKCORCNT[2]_i_1_n_0 ),
        .Q(RXCLKCORCNT_CH0[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair292" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[0]_i_1 
       (.I0(RD_DATA_REG[16]),
        .I1(EVEN),
        .I2(RD_DATA_REG[0]),
        .O(\RXDATA_USR[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[1]_i_1 
       (.I0(RD_DATA_REG[17]),
        .I1(EVEN),
        .I2(RD_DATA_REG[1]),
        .O(\RXDATA_USR[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair294" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[2]_i_1 
       (.I0(RD_DATA_REG[18]),
        .I1(EVEN),
        .I2(RD_DATA_REG[2]),
        .O(\RXDATA_USR[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair294" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[3]_i_1 
       (.I0(RD_DATA_REG[19]),
        .I1(EVEN),
        .I2(RD_DATA_REG[3]),
        .O(\RXDATA_USR[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair293" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[4]_i_1 
       (.I0(RD_DATA_REG[20]),
        .I1(EVEN),
        .I2(RD_DATA_REG[4]),
        .O(\RXDATA_USR[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair293" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[5]_i_1 
       (.I0(RD_DATA_REG[21]),
        .I1(EVEN),
        .I2(RD_DATA_REG[5]),
        .O(\RXDATA_USR[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair292" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[6]_i_1 
       (.I0(RD_DATA_REG[22]),
        .I1(EVEN),
        .I2(RD_DATA_REG[6]),
        .O(\RXDATA_USR[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair290" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[7]_i_1 
       (.I0(RD_DATA_REG[23]),
        .I1(EVEN),
        .I2(RD_DATA_REG[7]),
        .O(\RXDATA_USR[7]_i_1_n_0 ));
  FDRE \RXDATA_USR_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[0]_i_1_n_0 ),
        .Q(Q[0]),
        .R(RESET_IN));
  FDRE \RXDATA_USR_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[1]_i_1_n_0 ),
        .Q(Q[1]),
        .R(RESET_IN));
  FDRE \RXDATA_USR_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[2]_i_1_n_0 ),
        .Q(Q[2]),
        .R(RESET_IN));
  FDRE \RXDATA_USR_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[3]_i_1_n_0 ),
        .Q(Q[3]),
        .R(RESET_IN));
  FDRE \RXDATA_USR_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[4]_i_1_n_0 ),
        .Q(Q[4]),
        .R(RESET_IN));
  FDRE \RXDATA_USR_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[5]_i_1_n_0 ),
        .Q(Q[5]),
        .R(RESET_IN));
  FDRE \RXDATA_USR_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[6]_i_1_n_0 ),
        .Q(Q[6]),
        .R(RESET_IN));
  FDRE \RXDATA_USR_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[7]_i_1_n_0 ),
        .Q(Q[7]),
        .R(RESET_IN));
  (* SOFT_HLUTNM = "soft_lutpair290" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXNOTINTABLE_USR_i_1
       (.I0(RD_DATA_REG[25]),
        .I1(EVEN),
        .I2(RD_DATA_REG[9]),
        .O(RXNOTINTABLE_USR_i_1_n_0));
  FDRE RXNOTINTABLE_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_USR_i_1_n_0),
        .Q(RXNOTINTABLE_USR),
        .R(RESET_IN));
  (* SOFT_HLUTNM = "soft_lutpair297" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[0]_i_1 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in5_in),
        .O(BIN_TO_GRAY[0]));
  (* SOFT_HLUTNM = "soft_lutpair297" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[1]_i_1 
       (.I0(p_1_in5_in),
        .I1(p_2_in7_in),
        .O(BIN_TO_GRAY[1]));
  (* SOFT_HLUTNM = "soft_lutpair298" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[2]_i_1 
       (.I0(p_2_in7_in),
        .I1(p_3_in9_in),
        .O(BIN_TO_GRAY[2]));
  (* SOFT_HLUTNM = "soft_lutpair298" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[3]_i_1 
       (.I0(p_3_in9_in),
        .I1(p_4_in11_in),
        .O(BIN_TO_GRAY[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[4]_i_1 
       (.I0(p_4_in11_in),
        .I1(p_5_in13_in),
        .O(BIN_TO_GRAY[4]));
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[5]_i_1 
       (.I0(p_5_in13_in),
        .I1(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .O(BIN_TO_GRAY[5]));
  FDSE \WR_ADDR_GRAY_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[0]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[0] ),
        .S(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[1]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[2]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[3]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[4]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDSE \WR_ADDR_GRAY_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[5]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[5] ),
        .S(RESET_OUT));
  FDSE \WR_ADDR_GRAY_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(DATA_IN),
        .S(RESET_OUT));
  FDSE \WR_ADDR_PLUS1_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .Q(WR_ADDR_PLUS1[0]),
        .S(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_1_in5_in),
        .Q(WR_ADDR_PLUS1[1]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_2_in7_in),
        .Q(WR_ADDR_PLUS1[2]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_3_in9_in),
        .Q(WR_ADDR_PLUS1[3]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_4_in11_in),
        .Q(WR_ADDR_PLUS1[4]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_5_in13_in),
        .Q(WR_ADDR_PLUS1[5]),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS1_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(WR_ADDR_PLUS1[6]),
        .S(RESET_OUT));
  LUT1 #(
    .INIT(2'h1)) 
    \WR_ADDR_PLUS2[0]_i_1 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair289" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \WR_ADDR_PLUS2[2]_i_1 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in5_in),
        .I2(p_2_in7_in),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair284" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \WR_ADDR_PLUS2[3]_i_1 
       (.I0(p_3_in9_in),
        .I1(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(p_1_in5_in),
        .I3(p_2_in7_in),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair284" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \WR_ADDR_PLUS2[4]_i_1 
       (.I0(p_4_in11_in),
        .I1(p_2_in7_in),
        .I2(p_1_in5_in),
        .I3(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I4(p_3_in9_in),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \WR_ADDR_PLUS2[5]_i_1 
       (.I0(p_5_in13_in),
        .I1(p_3_in9_in),
        .I2(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(p_1_in5_in),
        .I4(p_2_in7_in),
        .I5(p_4_in11_in),
        .O(plusOp__0[5]));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \WR_ADDR_PLUS2[6]_i_1 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .I1(p_4_in11_in),
        .I2(\WR_ADDR_PLUS2[6]_i_2_n_0 ),
        .I3(p_3_in9_in),
        .I4(p_5_in13_in),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair289" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \WR_ADDR_PLUS2[6]_i_2 
       (.I0(p_2_in7_in),
        .I1(p_1_in5_in),
        .I2(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .O(\WR_ADDR_PLUS2[6]_i_2_n_0 ));
  FDRE \WR_ADDR_PLUS2_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[0]),
        .Q(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS2_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(BIN_TO_GRAY[0]),
        .Q(p_1_in5_in),
        .S(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[2]),
        .Q(p_2_in7_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[3]),
        .Q(p_3_in9_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[4]),
        .Q(p_4_in11_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[5]),
        .Q(p_5_in13_in),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS2_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[6]),
        .Q(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .S(RESET_OUT));
  FDRE \WR_ADDR_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[0]),
        .Q(WR_ADDR[0]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[1]),
        .Q(WR_ADDR[1]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[2]),
        .Q(WR_ADDR[2]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[3]),
        .Q(WR_ADDR[3]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[4]),
        .Q(WR_ADDR[4]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[5]),
        .Q(WR_ADDR[5]),
        .R(RESET_OUT));
  FDSE \WR_ADDR_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[6]),
        .Q(WR_ADDR[6]),
        .S(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(\WR_DATA_REG1_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[9]),
        .Q(p_0_in6_in),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[10]),
        .Q(WR_DATA_REG1[12]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(\WR_DATA_REG1_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[2]),
        .Q(\WR_DATA_REG1_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[3]),
        .Q(\WR_DATA_REG1_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[4]),
        .Q(\WR_DATA_REG1_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[5]),
        .Q(\WR_DATA_REG1_reg_n_0_[5] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[6]),
        .Q(\WR_DATA_REG1_reg_n_0_[6] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[7]),
        .Q(\WR_DATA_REG1_reg_n_0_[7] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[8]),
        .Q(WR_DATA_REG1[9]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[0] ),
        .Q(WR_DATA_REG2[0]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in6_in),
        .Q(WR_DATA_REG2[11]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[12]),
        .Q(WR_DATA_REG2[12]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[1] ),
        .Q(WR_DATA_REG2[1]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[2] ),
        .Q(WR_DATA_REG2[2]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[3] ),
        .Q(WR_DATA_REG2[3]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[4] ),
        .Q(WR_DATA_REG2[4]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[5] ),
        .Q(WR_DATA_REG2[5]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[6] ),
        .Q(WR_DATA_REG2[6]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[7] ),
        .Q(WR_DATA_REG2[7]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[9]),
        .Q(WR_DATA_REG2[9]),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[0] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[0] ),
        .Q(\WR_DATA_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[11] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(p_0_in6_in),
        .Q(\WR_DATA_reg_n_0_[11] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[12] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[12]),
        .Q(\WR_DATA_reg_n_0_[12] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[13] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(REMOVE_IDLE),
        .Q(\WR_DATA_reg_n_0_[13] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[16] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[0]),
        .Q(\WR_DATA_reg_n_0_[16] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[17] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[1]),
        .Q(\WR_DATA_reg_n_0_[17] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[18] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[2]),
        .Q(\WR_DATA_reg_n_0_[18] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[19] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[3]),
        .Q(\WR_DATA_reg_n_0_[19] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[1] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[1] ),
        .Q(\WR_DATA_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[20] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[4]),
        .Q(\WR_DATA_reg_n_0_[20] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[21] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[5]),
        .Q(\WR_DATA_reg_n_0_[21] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[22] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[6]),
        .Q(\WR_DATA_reg_n_0_[22] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[23] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[7]),
        .Q(\WR_DATA_reg_n_0_[23] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[25] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[9]),
        .Q(\WR_DATA_reg_n_0_[25] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[27] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[11]),
        .Q(\WR_DATA_reg_n_0_[27] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[28] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[12]),
        .Q(\WR_DATA_reg_n_0_[28] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[2] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[2] ),
        .Q(\WR_DATA_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[3] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[3] ),
        .Q(\WR_DATA_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[4] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[4] ),
        .Q(\WR_DATA_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[5] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[5] ),
        .Q(\WR_DATA_reg_n_0_[5] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[6] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[6] ),
        .Q(\WR_DATA_reg_n_0_[6] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[7] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[7] ),
        .Q(\WR_DATA_reg_n_0_[7] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[9] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[9]),
        .Q(\WR_DATA_reg_n_0_[9] ),
        .R(RESET_OUT));
  LUT4 #(
    .INIT(16'h4044)) 
    WR_ENABLE_i_1
       (.I0(RESET_OUT),
        .I1(WR_TOGGLE),
        .I2(WR_ENABLE_i_2_n_0),
        .I3(I1_DETECTED_WR),
        .O(WR_ENABLE_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair283" *) 
  LUT5 #(
    .INIT(32'hFFBFFFFF)) 
    WR_ENABLE_i_2
       (.I0(REMOVE_IDLE_i_2_n_0),
        .I1(WR_TOGGLE),
        .I2(I1_DETECTED_WR_REG),
        .I3(REMOVE_IDLE),
        .I4(WR_OCCUPANCY[6]),
        .O(WR_ENABLE_i_2_n_0));
  FDRE WR_ENABLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_ENABLE_i_1_n_0),
        .Q(WE),
        .R(1'b0));
  FDRE \WR_OCCUPANCY_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[1]),
        .Q(WR_OCCUPANCY[1]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[2]),
        .Q(WR_OCCUPANCY[2]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[3]),
        .Q(WR_OCCUPANCY[3]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[4]),
        .Q(WR_OCCUPANCY[4]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[5]),
        .Q(WR_OCCUPANCY[5]),
        .R(RESET_OUT));
  FDSE \WR_OCCUPANCY_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[6]),
        .Q(WR_OCCUPANCY[6]),
        .S(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair283" *) 
  LUT1 #(
    .INIT(2'h1)) 
    WR_TOGGLE_i_1
       (.I0(WR_TOGGLE),
        .O(WR_TOGGLE_i_1_n_0));
  FDSE WR_TOGGLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_TOGGLE_i_1_n_0),
        .Q(WR_TOGGLE),
        .S(RESET_OUT));
  FDRE insert_idle_reg_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE),
        .Q(insert_idle_reg),
        .R(RESET_IN));
endmodule

(* ORIG_REF_NAME = "QSGMII_RX_ELASTIC_BUFFER" *) 
module qsgmii_1218_QSGMII_RX_ELASTIC_BUFFER_72
   (RXCLKCORCNT_CH1,
    RXCHARISCOMMA_USR,
    RXCHARISK_USR,
    RXNOTINTABLE_USR,
    RXBUFSTATUS_CH1,
    Q,
    userclk,
    rxrecclk,
    SS,
    RESET_OUT,
    D,
    RESET_IN,
    MGT_RX_RESET);
  output [1:0]RXCLKCORCNT_CH1;
  output RXCHARISCOMMA_USR;
  output RXCHARISK_USR;
  output RXNOTINTABLE_USR;
  output [0:0]RXBUFSTATUS_CH1;
  output [7:0]Q;
  input userclk;
  input rxrecclk;
  input [0:0]SS;
  input RESET_OUT;
  input [10:0]D;
  input RESET_IN;
  input MGT_RX_RESET;

  wire [5:0]BIN_TO_GRAY;
  wire [10:0]D;
  wire D5P6_WR_REG;
  wire D5P6_WR_REG_i_2__0_n_0;
  wire DATA_IN;
  wire DATA_OUT;
  wire EVEN;
  wire EVEN_i_1__0_n_0;
  wire \GEN_FIFO[0].RD_DATA_reg_n_0_[0] ;
  wire \GEN_FIFO[11].RD_DATA_reg_n_0_[11] ;
  wire \GEN_FIFO[12].RD_DATA_reg_n_0_[12] ;
  wire \GEN_FIFO[13].RD_DATA_reg_n_0_[13] ;
  wire \GEN_FIFO[1].RD_DATA_reg_n_0_[1] ;
  wire \GEN_FIFO[25].RD_DATA_reg_n_0_[25] ;
  wire \GEN_FIFO[27].RD_DATA_reg_n_0_[27] ;
  wire \GEN_FIFO[28].RD_DATA_reg ;
  wire \GEN_FIFO[2].RD_DATA_reg_n_0_[2] ;
  wire \GEN_FIFO[3].RD_DATA_reg_n_0_[3] ;
  wire \GEN_FIFO[4].RD_DATA_reg_n_0_[4] ;
  wire \GEN_FIFO[5].RD_DATA_reg_n_0_[5] ;
  wire \GEN_FIFO[6].RD_DATA_reg_n_0_[6] ;
  wire \GEN_FIFO[7].RD_DATA_reg_n_0_[7] ;
  wire \GEN_FIFO[9].RD_DATA_reg_n_0_[9] ;
  wire [4:0]GRAY_TO_BIN;
  wire I1_DETECTED_WR;
  wire I1_DETECTED_WR_REG;
  wire I1_DETECTED_WR_REG_i_2__0_n_0;
  wire INSERT_IDLE;
  wire INSERT_IDLE_i_1__4_n_0;
  wire K28P5_WR_REG;
  wire K28P5_WR_REG_i_2__0_n_0;
  wire MGT_RX_RESET;
  wire [7:0]Q;
  wire [6:0]RD_ADDR;
  wire [6:0]RD_ADDR_GRAY;
  wire \RD_ADDR_GRAY[0]_i_1__0_n_0 ;
  wire \RD_ADDR_GRAY[1]_i_1__0_n_0 ;
  wire \RD_ADDR_GRAY[2]_i_1__0_n_0 ;
  wire \RD_ADDR_GRAY[3]_i_1__0_n_0 ;
  wire \RD_ADDR_GRAY[4]_i_1__0_n_0 ;
  wire \RD_ADDR_GRAY[5]_i_1__0_n_0 ;
  wire [6:0]RD_ADDR_PLUS1;
  wire \RD_ADDR_PLUS2[6]_i_2__0_n_0 ;
  wire \RD_ADDR_PLUS2_reg_n_0_[0] ;
  wire \RD_ADDR_PLUS2_reg_n_0_[2] ;
  wire \RD_ADDR_PLUS2_reg_n_0_[6] ;
  wire RD_DATA_RAM_0;
  wire RD_DATA_RAM_1;
  wire RD_DATA_RAM_11;
  wire RD_DATA_RAM_12;
  wire RD_DATA_RAM_13;
  wire RD_DATA_RAM_16;
  wire RD_DATA_RAM_17;
  wire RD_DATA_RAM_18;
  wire RD_DATA_RAM_19;
  wire RD_DATA_RAM_2;
  wire RD_DATA_RAM_20;
  wire RD_DATA_RAM_21;
  wire RD_DATA_RAM_22;
  wire RD_DATA_RAM_23;
  wire RD_DATA_RAM_25;
  wire RD_DATA_RAM_27;
  wire RD_DATA_RAM_28;
  wire RD_DATA_RAM_3;
  wire RD_DATA_RAM_4;
  wire RD_DATA_RAM_5;
  wire RD_DATA_RAM_6;
  wire RD_DATA_RAM_7;
  wire RD_DATA_RAM_9;
  wire [28:0]RD_DATA_REG;
  wire RD_ENABLE;
  wire RD_ENABLE0;
  wire RD_ENABLE24_out;
  wire RD_ENABLE_i_10__0_n_0;
  wire RD_ENABLE_i_11__0_n_0;
  wire RD_ENABLE_i_1__0_n_0;
  wire RD_ENABLE_i_3__0_n_0;
  wire RD_ENABLE_i_4__0_n_0;
  wire RD_ENABLE_i_5__0_n_0;
  wire RD_ENABLE_i_7__0_n_0;
  wire RD_ENABLE_i_8__0_n_0;
  wire RD_ENABLE_i_9__0_n_0;
  wire [6:0]RD_OCCUPANCY;
  wire [6:0]RD_OCCUPANCY01_out;
  wire \RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ;
  wire \RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY_n_1 ;
  wire \RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 ;
  wire REMOVE_IDLE;
  wire REMOVE_IDLE_i_1__0_n_0;
  wire REMOVE_IDLE_i_2__0_n_0;
  wire RESET_IN;
  wire RESET_OUT;
  wire RXBUFERR_i_1__0_n_0;
  wire RXBUFERR_i_2__0_n_0;
  wire RXBUFERR_i_3__0_n_0;
  wire [0:0]RXBUFSTATUS_CH1;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISCOMMA_USR_i_1__0_n_0;
  wire RXCHARISK_USR;
  wire RXCHARISK_USR_i_1__0_n_0;
  wire \RXCLKCORCNT[0]_i_1__0_n_0 ;
  wire \RXCLKCORCNT[2]_i_1__0_n_0 ;
  wire [1:0]RXCLKCORCNT_CH1;
  wire \RXDATA_USR[0]_i_1__0_n_0 ;
  wire \RXDATA_USR[1]_i_1__0_n_0 ;
  wire \RXDATA_USR[2]_i_1__0_n_0 ;
  wire \RXDATA_USR[3]_i_1__0_n_0 ;
  wire \RXDATA_USR[4]_i_1__0_n_0 ;
  wire \RXDATA_USR[5]_i_1__0_n_0 ;
  wire \RXDATA_USR[6]_i_1__0_n_0 ;
  wire \RXDATA_USR[7]_i_1__0_n_0 ;
  wire RXNOTINTABLE_USR;
  wire RXNOTINTABLE_USR_i_1__0_n_0;
  wire [0:0]SS;
  wire WE;
  wire [6:0]WR_ADDR;
  wire \WR_ADDR_GRAY_reg_n_0_[0] ;
  wire \WR_ADDR_GRAY_reg_n_0_[1] ;
  wire \WR_ADDR_GRAY_reg_n_0_[2] ;
  wire \WR_ADDR_GRAY_reg_n_0_[3] ;
  wire \WR_ADDR_GRAY_reg_n_0_[4] ;
  wire \WR_ADDR_GRAY_reg_n_0_[5] ;
  wire [6:0]WR_ADDR_PLUS1;
  wire \WR_ADDR_PLUS2[6]_i_2__0_n_0 ;
  wire \WR_ADDR_PLUS2_reg_n_0_[0] ;
  wire \WR_ADDR_PLUS2_reg_n_0_[6] ;
  wire [12:9]WR_DATA_REG1;
  wire \WR_DATA_REG1_reg_n_0_[0] ;
  wire \WR_DATA_REG1_reg_n_0_[1] ;
  wire \WR_DATA_REG1_reg_n_0_[2] ;
  wire \WR_DATA_REG1_reg_n_0_[3] ;
  wire \WR_DATA_REG1_reg_n_0_[4] ;
  wire \WR_DATA_REG1_reg_n_0_[5] ;
  wire \WR_DATA_REG1_reg_n_0_[6] ;
  wire \WR_DATA_REG1_reg_n_0_[7] ;
  wire [12:0]WR_DATA_REG2;
  wire \WR_DATA_reg_n_0_[0] ;
  wire \WR_DATA_reg_n_0_[11] ;
  wire \WR_DATA_reg_n_0_[12] ;
  wire \WR_DATA_reg_n_0_[13] ;
  wire \WR_DATA_reg_n_0_[16] ;
  wire \WR_DATA_reg_n_0_[17] ;
  wire \WR_DATA_reg_n_0_[18] ;
  wire \WR_DATA_reg_n_0_[19] ;
  wire \WR_DATA_reg_n_0_[1] ;
  wire \WR_DATA_reg_n_0_[20] ;
  wire \WR_DATA_reg_n_0_[21] ;
  wire \WR_DATA_reg_n_0_[22] ;
  wire \WR_DATA_reg_n_0_[23] ;
  wire \WR_DATA_reg_n_0_[25] ;
  wire \WR_DATA_reg_n_0_[27] ;
  wire \WR_DATA_reg_n_0_[28] ;
  wire \WR_DATA_reg_n_0_[2] ;
  wire \WR_DATA_reg_n_0_[3] ;
  wire \WR_DATA_reg_n_0_[4] ;
  wire \WR_DATA_reg_n_0_[5] ;
  wire \WR_DATA_reg_n_0_[6] ;
  wire \WR_DATA_reg_n_0_[7] ;
  wire \WR_DATA_reg_n_0_[9] ;
  wire WR_ENABLE_i_1__0_n_0;
  wire WR_ENABLE_i_2__0_n_0;
  wire [6:1]WR_OCCUPANCY;
  wire [6:1]WR_OCCUPANCY00_out;
  wire WR_TOGGLE;
  wire WR_TOGGLE_i_1__0_n_0;
  wire insert_idle_reg;
  wire p_0_in6_in;
  wire p_0_out;
  wire p_17_in;
  wire p_1_in;
  wire p_1_in18_in;
  wire p_1_in5_in;
  wire [7:0]p_2_in;
  wire p_2_in21_in;
  wire p_2_in7_in;
  wire p_2_out;
  wire p_3_in;
  wire p_3_in24_in;
  wire p_3_in9_in;
  wire p_3_out;
  wire p_4_in;
  wire p_4_in11_in;
  wire p_4_out;
  wire p_5_in;
  wire p_5_in13_in;
  wire p_5_out;
  wire p_8_in;
  wire p_9_in;
  wire [6:0]plusOp;
  wire [6:0]plusOp__0;
  wire rxrecclk;
  wire userclk;
  wire \NLW_GEN_FIFO[0].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[11].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[12].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[13].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[16].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[17].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[18].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[19].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[1].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[20].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[21].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[22].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[23].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[25].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[27].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[28].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[2].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[3].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[4].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[5].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[6].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[7].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[9].DIST_RAM_SPO_UNCONNECTED ;

  LUT5 #(
    .INIT(32'h10000004)) 
    D5P6_WR_REG_i_1__0
       (.I0(D5P6_WR_REG_i_2__0_n_0),
        .I1(\WR_DATA_REG1_reg_n_0_[4] ),
        .I2(\WR_DATA_REG1_reg_n_0_[2] ),
        .I3(\WR_DATA_REG1_reg_n_0_[0] ),
        .I4(\WR_DATA_REG1_reg_n_0_[7] ),
        .O(p_8_in));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    D5P6_WR_REG_i_2__0
       (.I0(\WR_DATA_REG1_reg_n_0_[6] ),
        .I1(\WR_DATA_REG1_reg_n_0_[1] ),
        .I2(\WR_DATA_REG1_reg_n_0_[5] ),
        .I3(p_0_in6_in),
        .I4(\WR_DATA_REG1_reg_n_0_[3] ),
        .O(D5P6_WR_REG_i_2__0_n_0));
  FDRE D5P6_WR_REG_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_8_in),
        .Q(D5P6_WR_REG),
        .R(RESET_OUT));
  LUT1 #(
    .INIT(2'h1)) 
    EVEN_i_1__0
       (.I0(EVEN),
        .O(EVEN_i_1__0_n_0));
  FDSE EVEN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EVEN_i_1__0_n_0),
        .Q(EVEN),
        .S(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[0].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[0] ),
        .DPO(RD_DATA_RAM_0),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[0].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[0].RD_DATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_0),
        .Q(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[11].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[11] ),
        .DPO(RD_DATA_RAM_11),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[11].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[11].RD_DATA_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_11),
        .Q(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[12].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[12] ),
        .DPO(RD_DATA_RAM_12),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[12].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[12].RD_DATA_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_12),
        .Q(\GEN_FIFO[12].RD_DATA_reg_n_0_[12] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[13].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[13] ),
        .DPO(RD_DATA_RAM_13),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[13].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[13].RD_DATA_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_13),
        .Q(\GEN_FIFO[13].RD_DATA_reg_n_0_[13] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[16].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[16] ),
        .DPO(RD_DATA_RAM_16),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[16].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[16].RD_DATA_reg[16] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_16),
        .Q(p_2_in[0]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[17].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[17] ),
        .DPO(RD_DATA_RAM_17),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[17].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[17].RD_DATA_reg[17] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_17),
        .Q(p_2_in[1]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[18].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[18] ),
        .DPO(RD_DATA_RAM_18),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[18].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[18].RD_DATA_reg[18] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_18),
        .Q(p_2_in[2]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[19].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[19] ),
        .DPO(RD_DATA_RAM_19),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[19].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[19].RD_DATA_reg[19] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_19),
        .Q(p_2_in[3]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[1].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[1] ),
        .DPO(RD_DATA_RAM_1),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[1].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[1].RD_DATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_1),
        .Q(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[20].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[20] ),
        .DPO(RD_DATA_RAM_20),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[20].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[20].RD_DATA_reg[20] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_20),
        .Q(p_2_in[4]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[21].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[21] ),
        .DPO(RD_DATA_RAM_21),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[21].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[21].RD_DATA_reg[21] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_21),
        .Q(p_2_in[5]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[22].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[22] ),
        .DPO(RD_DATA_RAM_22),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[22].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[22].RD_DATA_reg[22] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_22),
        .Q(p_2_in[6]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[23].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[23] ),
        .DPO(RD_DATA_RAM_23),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[23].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[23].RD_DATA_reg[23] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_23),
        .Q(p_2_in[7]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[25].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[25] ),
        .DPO(RD_DATA_RAM_25),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[25].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[25].RD_DATA_reg[25] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_25),
        .Q(\GEN_FIFO[25].RD_DATA_reg_n_0_[25] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[27].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[27] ),
        .DPO(RD_DATA_RAM_27),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[27].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[27].RD_DATA_reg[27] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_27),
        .Q(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[28].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[28] ),
        .DPO(RD_DATA_RAM_28),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[28].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[28].RD_DATA_reg[28] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_28),
        .Q(\GEN_FIFO[28].RD_DATA_reg ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[2].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[2] ),
        .DPO(RD_DATA_RAM_2),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[2].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[2].RD_DATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_2),
        .Q(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[3].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[3] ),
        .DPO(RD_DATA_RAM_3),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[3].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[3].RD_DATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_3),
        .Q(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[4].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[4] ),
        .DPO(RD_DATA_RAM_4),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[4].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[4].RD_DATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_4),
        .Q(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[5].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[5] ),
        .DPO(RD_DATA_RAM_5),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[5].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[5].RD_DATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_5),
        .Q(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[6].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[6] ),
        .DPO(RD_DATA_RAM_6),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[6].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[6].RD_DATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_6),
        .Q(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[7].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[7] ),
        .DPO(RD_DATA_RAM_7),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[7].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[7].RD_DATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_7),
        .Q(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[9].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[9] ),
        .DPO(RD_DATA_RAM_9),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[9].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[9].RD_DATA_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_9),
        .Q(\GEN_FIFO[9].RD_DATA_reg_n_0_[9] ),
        .R(SS));
  LUT4 #(
    .INIT(16'h8F88)) 
    I1_DETECTED_WR_REG_i_1__0
       (.I0(p_8_in),
        .I1(K28P5_WR_REG),
        .I2(I1_DETECTED_WR_REG_i_2__0_n_0),
        .I3(D5P6_WR_REG),
        .O(I1_DETECTED_WR));
  (* SOFT_HLUTNM = "soft_lutpair304" *) 
  LUT4 #(
    .INIT(16'hFFFD)) 
    I1_DETECTED_WR_REG_i_2__0
       (.I0(\WR_DATA_REG1_reg_n_0_[3] ),
        .I1(\WR_DATA_REG1_reg_n_0_[0] ),
        .I2(\WR_DATA_REG1_reg_n_0_[1] ),
        .I3(K28P5_WR_REG_i_2__0_n_0),
        .O(I1_DETECTED_WR_REG_i_2__0_n_0));
  FDRE I1_DETECTED_WR_REG_reg
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(I1_DETECTED_WR),
        .Q(I1_DETECTED_WR_REG),
        .R(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair305" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    INSERT_IDLE_i_1__4
       (.I0(RESET_IN),
        .I1(MGT_RX_RESET),
        .I2(EVEN),
        .I3(RD_ENABLE0),
        .O(INSERT_IDLE_i_1__4_n_0));
  FDRE INSERT_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE_i_1__4_n_0),
        .Q(INSERT_IDLE),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair304" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    K28P5_WR_REG_i_1__0
       (.I0(K28P5_WR_REG_i_2__0_n_0),
        .I1(\WR_DATA_REG1_reg_n_0_[1] ),
        .I2(\WR_DATA_REG1_reg_n_0_[0] ),
        .I3(\WR_DATA_REG1_reg_n_0_[3] ),
        .O(p_9_in));
  LUT6 #(
    .INIT(64'hDFFFFFFFFFFFFFFF)) 
    K28P5_WR_REG_i_2__0
       (.I0(\WR_DATA_REG1_reg_n_0_[2] ),
        .I1(\WR_DATA_REG1_reg_n_0_[6] ),
        .I2(\WR_DATA_REG1_reg_n_0_[7] ),
        .I3(\WR_DATA_REG1_reg_n_0_[4] ),
        .I4(\WR_DATA_REG1_reg_n_0_[5] ),
        .I5(p_0_in6_in),
        .O(K28P5_WR_REG_i_2__0_n_0));
  FDRE K28P5_WR_REG_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_9_in),
        .Q(K28P5_WR_REG),
        .R(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair313" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[0]_i_1__0 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in),
        .O(\RD_ADDR_GRAY[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair314" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[1]_i_1__0 
       (.I0(p_1_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(\RD_ADDR_GRAY[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair314" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[2]_i_1__0 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I1(p_3_in),
        .O(\RD_ADDR_GRAY[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair315" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[3]_i_1__0 
       (.I0(p_3_in),
        .I1(p_4_in),
        .O(\RD_ADDR_GRAY[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair315" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[4]_i_1__0 
       (.I0(p_4_in),
        .I1(p_5_in),
        .O(\RD_ADDR_GRAY[4]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[5]_i_1__0 
       (.I0(p_5_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .O(\RD_ADDR_GRAY[5]_i_1__0_n_0 ));
  FDRE \RD_ADDR_GRAY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[0]_i_1__0_n_0 ),
        .Q(RD_ADDR_GRAY[0]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[1]_i_1__0_n_0 ),
        .Q(RD_ADDR_GRAY[1]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[2]_i_1__0_n_0 ),
        .Q(RD_ADDR_GRAY[2]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[3]_i_1__0_n_0 ),
        .Q(RD_ADDR_GRAY[3]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[4]_i_1__0_n_0 ),
        .Q(RD_ADDR_GRAY[4]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[5]_i_1__0_n_0 ),
        .Q(RD_ADDR_GRAY[5]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(RD_ADDR_GRAY[6]),
        .R(SS));
  FDSE \RD_ADDR_PLUS1_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .Q(RD_ADDR_PLUS1[0]),
        .S(SS));
  FDRE \RD_ADDR_PLUS1_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_1_in),
        .Q(RD_ADDR_PLUS1[1]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .Q(RD_ADDR_PLUS1[2]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_3_in),
        .Q(RD_ADDR_PLUS1[3]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_4_in),
        .Q(RD_ADDR_PLUS1[4]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_5_in),
        .Q(RD_ADDR_PLUS1[5]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(RD_ADDR_PLUS1[6]),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair313" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \RD_ADDR_PLUS2[0]_i_1__0 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair306" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \RD_ADDR_PLUS2[2]_i_1__0 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair306" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \RD_ADDR_PLUS2[3]_i_1__0 
       (.I0(p_1_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I3(p_3_in),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair300" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \RD_ADDR_PLUS2[4]_i_1__0 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(p_1_in),
        .I3(p_3_in),
        .I4(p_4_in),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \RD_ADDR_PLUS2[5]_i_1__0 
       (.I0(p_3_in),
        .I1(p_1_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I4(p_4_in),
        .I5(p_5_in),
        .O(plusOp[5]));
  LUT3 #(
    .INIT(8'h78)) 
    \RD_ADDR_PLUS2[6]_i_1__0 
       (.I0(\RD_ADDR_PLUS2[6]_i_2__0_n_0 ),
        .I1(p_5_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair300" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \RD_ADDR_PLUS2[6]_i_2__0 
       (.I0(p_4_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(p_1_in),
        .I4(p_3_in),
        .O(\RD_ADDR_PLUS2[6]_i_2__0_n_0 ));
  FDRE \RD_ADDR_PLUS2_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[0]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .R(SS));
  FDSE \RD_ADDR_PLUS2_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_GRAY[0]_i_1__0_n_0 ),
        .Q(p_1_in),
        .S(SS));
  FDRE \RD_ADDR_PLUS2_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[2]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[3]),
        .Q(p_3_in),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[4]),
        .Q(p_4_in),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[5]),
        .Q(p_5_in),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[6]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .R(SS));
  FDRE \RD_ADDR_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[0]),
        .Q(RD_ADDR[0]),
        .R(SS));
  FDRE \RD_ADDR_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[1]),
        .Q(RD_ADDR[1]),
        .R(SS));
  FDRE \RD_ADDR_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[2]),
        .Q(RD_ADDR[2]),
        .R(SS));
  FDRE \RD_ADDR_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[3]),
        .Q(RD_ADDR[3]),
        .R(SS));
  FDRE \RD_ADDR_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[4]),
        .Q(RD_ADDR[4]),
        .R(SS));
  FDRE \RD_ADDR_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[5]),
        .Q(RD_ADDR[5]),
        .R(SS));
  FDRE \RD_ADDR_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[6]),
        .Q(RD_ADDR[6]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .Q(RD_DATA_REG[0]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[11] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .Q(RD_DATA_REG[11]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[12] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[12].RD_DATA_reg_n_0_[12] ),
        .Q(RD_DATA_REG[12]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[13] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[13].RD_DATA_reg_n_0_[13] ),
        .Q(RD_DATA_REG[13]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[16] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[0]),
        .Q(RD_DATA_REG[16]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[17] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[1]),
        .Q(RD_DATA_REG[17]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[18] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[2]),
        .Q(RD_DATA_REG[18]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[19] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[3]),
        .Q(RD_DATA_REG[19]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .Q(RD_DATA_REG[1]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[20] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[4]),
        .Q(RD_DATA_REG[20]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[21] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[5]),
        .Q(RD_DATA_REG[21]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[22] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[6]),
        .Q(RD_DATA_REG[22]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[23] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[7]),
        .Q(RD_DATA_REG[23]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[25] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[25].RD_DATA_reg_n_0_[25] ),
        .Q(RD_DATA_REG[25]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[27] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .Q(RD_DATA_REG[27]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[28] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[28].RD_DATA_reg ),
        .Q(RD_DATA_REG[28]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .Q(RD_DATA_REG[2]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .Q(RD_DATA_REG[3]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .Q(RD_DATA_REG[4]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .Q(RD_DATA_REG[5]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .Q(RD_DATA_REG[6]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[7] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .Q(RD_DATA_REG[7]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[9] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[9].RD_DATA_reg_n_0_[9] ),
        .Q(RD_DATA_REG[9]),
        .R(SS));
  LUT3 #(
    .INIT(8'h04)) 
    RD_ENABLE_i_10__0
       (.I0(p_2_in[1]),
        .I1(p_2_in[2]),
        .I2(p_2_in[0]),
        .O(RD_ENABLE_i_10__0_n_0));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    RD_ENABLE_i_11__0
       (.I0(p_2_in[3]),
        .I1(p_2_in[4]),
        .I2(p_2_in[5]),
        .I3(p_2_in[6]),
        .I4(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .I5(p_2_in[7]),
        .O(RD_ENABLE_i_11__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair305" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    RD_ENABLE_i_1__0
       (.I0(RESET_IN),
        .I1(MGT_RX_RESET),
        .I2(EVEN),
        .I3(RD_ENABLE0),
        .O(RD_ENABLE_i_1__0_n_0));
  LUT5 #(
    .INIT(32'h000E0000)) 
    RD_ENABLE_i_2__0
       (.I0(RD_ENABLE_i_3__0_n_0),
        .I1(RD_ENABLE_i_4__0_n_0),
        .I2(RD_ENABLE_i_5__0_n_0),
        .I3(RD_OCCUPANCY[6]),
        .I4(RD_ENABLE24_out),
        .O(RD_ENABLE0));
  LUT5 #(
    .INIT(32'h00800200)) 
    RD_ENABLE_i_3__0
       (.I0(RD_ENABLE_i_7__0_n_0),
        .I1(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .I2(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .I3(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .I4(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .O(RD_ENABLE_i_3__0_n_0));
  LUT5 #(
    .INIT(32'h00800200)) 
    RD_ENABLE_i_4__0
       (.I0(RD_ENABLE_i_8__0_n_0),
        .I1(p_2_in[2]),
        .I2(p_2_in[0]),
        .I3(p_2_in[4]),
        .I4(p_2_in[7]),
        .O(RD_ENABLE_i_4__0_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    RD_ENABLE_i_5__0
       (.I0(RD_OCCUPANCY[4]),
        .I1(RD_OCCUPANCY[5]),
        .I2(RD_OCCUPANCY[2]),
        .I3(RD_OCCUPANCY[3]),
        .I4(RD_OCCUPANCY[1]),
        .I5(RD_OCCUPANCY[0]),
        .O(RD_ENABLE_i_5__0_n_0));
  LUT6 #(
    .INIT(64'hFFFF040004000400)) 
    RD_ENABLE_i_6__0
       (.I0(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .I1(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .I2(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .I3(RD_ENABLE_i_9__0_n_0),
        .I4(RD_ENABLE_i_10__0_n_0),
        .I5(RD_ENABLE_i_11__0_n_0),
        .O(RD_ENABLE24_out));
  LUT5 #(
    .INIT(32'h00010000)) 
    RD_ENABLE_i_7__0
       (.I0(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .I1(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .I2(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .I3(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .I4(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .O(RD_ENABLE_i_7__0_n_0));
  LUT5 #(
    .INIT(32'h00010000)) 
    RD_ENABLE_i_8__0
       (.I0(p_2_in[1]),
        .I1(p_2_in[3]),
        .I2(p_2_in[5]),
        .I3(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .I4(p_2_in[6]),
        .O(RD_ENABLE_i_8__0_n_0));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    RD_ENABLE_i_9__0
       (.I0(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .I1(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .I2(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .I3(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .I4(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .I5(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .O(RD_ENABLE_i_9__0_n_0));
  FDRE RD_ENABLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RD_ENABLE_i_1__0_n_0),
        .Q(RD_ENABLE),
        .R(1'b0));
  FDRE \RD_OCCUPANCY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[0]),
        .Q(RD_OCCUPANCY[0]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[1]),
        .Q(RD_OCCUPANCY[1]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[2]),
        .Q(RD_OCCUPANCY[2]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[3]),
        .Q(RD_OCCUPANCY[3]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[4]),
        .Q(RD_OCCUPANCY[4]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[5]),
        .Q(RD_OCCUPANCY[5]),
        .R(SS));
  FDSE \RD_OCCUPANCY_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[6]),
        .Q(RD_OCCUPANCY[6]),
        .S(SS));
  qsgmii_1218_qsgmii_sync_block_106 \RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY 
       (.Q(RD_ADDR_GRAY[0]),
        .data_out(\RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_107 \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY 
       (.CO(\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ),
        .D(WR_OCCUPANCY00_out[3:1]),
        .Q(WR_ADDR[3:0]),
        .\RD_ADDR_GRAY_reg[1] (RD_ADDR_GRAY[1]),
        .S({\RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 }),
        .data_out(p_2_in21_in),
        .data_sync_reg6_0(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg6_1(p_17_in),
        .data_sync_reg6_2(p_1_in18_in),
        .data_sync_reg6_3(p_3_in24_in),
        .data_sync_reg6_4(\RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_108 \RECLOCK_RD_ADDRGRAY[2].SYNC_RD_ADDRGRAY 
       (.Q(RD_ADDR_GRAY[2]),
        .data_out(p_3_in24_in),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_109 \RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[2]),
        .\RD_ADDR_GRAY_reg[3] (RD_ADDR_GRAY[3]),
        .S(\RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(p_2_in21_in),
        .data_sync_reg6_0(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg6_1(p_17_in),
        .data_sync_reg6_2(p_1_in18_in),
        .data_sync_reg6_3(p_3_in24_in),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_110 \RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[3]),
        .\RD_ADDR_GRAY_reg[4] (RD_ADDR_GRAY[4]),
        .S(\RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(p_1_in18_in),
        .data_sync_reg6_0(p_17_in),
        .data_sync_reg6_1(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg6_2(p_2_in21_in),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_111 \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[4]),
        .\RD_ADDR_GRAY_reg[5] (RD_ADDR_GRAY[5]),
        .S(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg6_0(p_17_in),
        .data_sync_reg6_1(p_1_in18_in),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_112 \RECLOCK_RD_ADDRGRAY[6].SYNC_RD_ADDRGRAY 
       (.CO(\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ),
        .D(WR_OCCUPANCY00_out[6:4]),
        .Q(WR_ADDR[6:4]),
        .\RD_ADDR_GRAY_reg[6] (RD_ADDR_GRAY[6]),
        .S(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(p_17_in),
        .data_sync_reg6_0(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_113 \RECLOCK_WR_ADDRGRAY[0].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[0]),
        .GRAY_TO_BIN(GRAY_TO_BIN[1]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[0] ),
        .data_out(p_0_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_114 \RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY 
       (.CO(\RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY_n_1 ),
        .D(RD_OCCUPANCY01_out[3:0]),
        .DI({GRAY_TO_BIN[3:2],GRAY_TO_BIN[0]}),
        .GRAY_TO_BIN(GRAY_TO_BIN[1]),
        .Q(RD_ADDR[1:0]),
        .S({\RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 }),
        .\WR_ADDR_GRAY_reg[1] (\WR_ADDR_GRAY_reg_n_0_[1] ),
        .data_out(p_0_out),
        .data_sync_reg6_0(p_3_out),
        .data_sync_reg6_1(p_5_out),
        .data_sync_reg6_2(DATA_OUT),
        .data_sync_reg6_3(p_4_out),
        .data_sync_reg6_4(p_2_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_115 \RECLOCK_WR_ADDRGRAY[2].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[2]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[2] ),
        .data_out(p_2_out),
        .data_sync_reg6_0(p_4_out),
        .data_sync_reg6_1(DATA_OUT),
        .data_sync_reg6_2(p_5_out),
        .data_sync_reg6_3(p_3_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_116 \RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[3]),
        .Q(RD_ADDR[2]),
        .S(\RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 ),
        .\WR_ADDR_GRAY_reg[3] (\WR_ADDR_GRAY_reg_n_0_[3] ),
        .data_out(p_3_out),
        .data_sync_reg6_0(p_5_out),
        .data_sync_reg6_1(DATA_OUT),
        .data_sync_reg6_2(p_4_out),
        .data_sync_reg6_3(p_2_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_117 \RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[4]),
        .Q(RD_ADDR[3]),
        .S(\RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ),
        .\WR_ADDR_GRAY_reg[4] (\WR_ADDR_GRAY_reg_n_0_[4] ),
        .data_out(p_4_out),
        .data_sync_reg6_0(DATA_OUT),
        .data_sync_reg6_1(p_5_out),
        .data_sync_reg6_2(p_3_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_118 \RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY 
       (.CO(\RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY_n_1 ),
        .D(RD_OCCUPANCY01_out[6:4]),
        .DI(GRAY_TO_BIN[4]),
        .Q(RD_ADDR[4]),
        .S({\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 }),
        .\WR_ADDR_GRAY_reg[5] (\WR_ADDR_GRAY_reg_n_0_[5] ),
        .data_out(p_5_out),
        .data_sync_reg6_0(DATA_OUT),
        .data_sync_reg6_1(p_4_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_119 \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY 
       (.Q(RD_ADDR[6:5]),
        .S({\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 }),
        .\WR_ADDR_GRAY_reg[6] (DATA_IN),
        .data_out(DATA_OUT),
        .data_sync_reg6_0(p_5_out),
        .userclk(userclk));
  LUT6 #(
    .INIT(64'h0000FFFF00800000)) 
    REMOVE_IDLE_i_1__0
       (.I0(I1_DETECTED_WR),
        .I1(WR_OCCUPANCY[6]),
        .I2(I1_DETECTED_WR_REG),
        .I3(REMOVE_IDLE_i_2__0_n_0),
        .I4(WR_TOGGLE),
        .I5(REMOVE_IDLE),
        .O(REMOVE_IDLE_i_1__0_n_0));
  LUT5 #(
    .INIT(32'h00000001)) 
    REMOVE_IDLE_i_2__0
       (.I0(WR_OCCUPANCY[4]),
        .I1(WR_OCCUPANCY[1]),
        .I2(WR_OCCUPANCY[3]),
        .I3(WR_OCCUPANCY[5]),
        .I4(WR_OCCUPANCY[2]),
        .O(REMOVE_IDLE_i_2__0_n_0));
  FDRE REMOVE_IDLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(REMOVE_IDLE_i_1__0_n_0),
        .Q(REMOVE_IDLE),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'hFFFFFFFFC0020002)) 
    RXBUFERR_i_1__0
       (.I0(RXBUFERR_i_2__0_n_0),
        .I1(RD_OCCUPANCY[2]),
        .I2(RD_OCCUPANCY[3]),
        .I3(RD_OCCUPANCY[4]),
        .I4(RXBUFERR_i_3__0_n_0),
        .I5(RXBUFSTATUS_CH1),
        .O(RXBUFERR_i_1__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair303" *) 
  LUT4 #(
    .INIT(16'h0007)) 
    RXBUFERR_i_2__0
       (.I0(RD_OCCUPANCY[1]),
        .I1(RD_OCCUPANCY[0]),
        .I2(RD_OCCUPANCY[6]),
        .I3(RD_OCCUPANCY[5]),
        .O(RXBUFERR_i_2__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair303" *) 
  LUT4 #(
    .INIT(16'hE000)) 
    RXBUFERR_i_3__0
       (.I0(RD_OCCUPANCY[1]),
        .I1(RD_OCCUPANCY[0]),
        .I2(RD_OCCUPANCY[6]),
        .I3(RD_OCCUPANCY[5]),
        .O(RXBUFERR_i_3__0_n_0));
  FDRE RXBUFERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXBUFERR_i_1__0_n_0),
        .Q(RXBUFSTATUS_CH1),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair307" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXCHARISCOMMA_USR_i_1__0
       (.I0(RD_DATA_REG[28]),
        .I1(EVEN),
        .I2(RD_DATA_REG[12]),
        .O(RXCHARISCOMMA_USR_i_1__0_n_0));
  FDRE RXCHARISCOMMA_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISCOMMA_USR_i_1__0_n_0),
        .Q(RXCHARISCOMMA_USR),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair308" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXCHARISK_USR_i_1__0
       (.I0(RD_DATA_REG[27]),
        .I1(EVEN),
        .I2(RD_DATA_REG[11]),
        .O(RXCHARISK_USR_i_1__0_n_0));
  FDRE RXCHARISK_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISK_USR_i_1__0_n_0),
        .Q(RXCHARISK_USR),
        .R(SS));
  LUT3 #(
    .INIT(8'hAE)) 
    \RXCLKCORCNT[0]_i_1__0 
       (.I0(insert_idle_reg),
        .I1(RD_DATA_REG[13]),
        .I2(RXCLKCORCNT_CH1[0]),
        .O(\RXCLKCORCNT[0]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h10100010)) 
    \RXCLKCORCNT[2]_i_1__0 
       (.I0(RESET_IN),
        .I1(MGT_RX_RESET),
        .I2(insert_idle_reg),
        .I3(RD_DATA_REG[13]),
        .I4(RXCLKCORCNT_CH1[0]),
        .O(\RXCLKCORCNT[2]_i_1__0_n_0 ));
  FDRE \RXCLKCORCNT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXCLKCORCNT[0]_i_1__0_n_0 ),
        .Q(RXCLKCORCNT_CH1[0]),
        .R(SS));
  FDRE \RXCLKCORCNT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXCLKCORCNT[2]_i_1__0_n_0 ),
        .Q(RXCLKCORCNT_CH1[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair311" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[0]_i_1__0 
       (.I0(RD_DATA_REG[16]),
        .I1(EVEN),
        .I2(RD_DATA_REG[0]),
        .O(\RXDATA_USR[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair312" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[1]_i_1__0 
       (.I0(RD_DATA_REG[17]),
        .I1(EVEN),
        .I2(RD_DATA_REG[1]),
        .O(\RXDATA_USR[1]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[2]_i_1__0 
       (.I0(RD_DATA_REG[18]),
        .I1(EVEN),
        .I2(RD_DATA_REG[2]),
        .O(\RXDATA_USR[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair312" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[3]_i_1__0 
       (.I0(RD_DATA_REG[19]),
        .I1(EVEN),
        .I2(RD_DATA_REG[3]),
        .O(\RXDATA_USR[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair311" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[4]_i_1__0 
       (.I0(RD_DATA_REG[20]),
        .I1(EVEN),
        .I2(RD_DATA_REG[4]),
        .O(\RXDATA_USR[4]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair310" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[5]_i_1__0 
       (.I0(RD_DATA_REG[21]),
        .I1(EVEN),
        .I2(RD_DATA_REG[5]),
        .O(\RXDATA_USR[5]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair310" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[6]_i_1__0 
       (.I0(RD_DATA_REG[22]),
        .I1(EVEN),
        .I2(RD_DATA_REG[6]),
        .O(\RXDATA_USR[6]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair308" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[7]_i_1__0 
       (.I0(RD_DATA_REG[23]),
        .I1(EVEN),
        .I2(RD_DATA_REG[7]),
        .O(\RXDATA_USR[7]_i_1__0_n_0 ));
  FDRE \RXDATA_USR_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[0]_i_1__0_n_0 ),
        .Q(Q[0]),
        .R(SS));
  FDRE \RXDATA_USR_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[1]_i_1__0_n_0 ),
        .Q(Q[1]),
        .R(SS));
  FDRE \RXDATA_USR_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[2]_i_1__0_n_0 ),
        .Q(Q[2]),
        .R(SS));
  FDRE \RXDATA_USR_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[3]_i_1__0_n_0 ),
        .Q(Q[3]),
        .R(SS));
  FDRE \RXDATA_USR_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[4]_i_1__0_n_0 ),
        .Q(Q[4]),
        .R(SS));
  FDRE \RXDATA_USR_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[5]_i_1__0_n_0 ),
        .Q(Q[5]),
        .R(SS));
  FDRE \RXDATA_USR_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[6]_i_1__0_n_0 ),
        .Q(Q[6]),
        .R(SS));
  FDRE \RXDATA_USR_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[7]_i_1__0_n_0 ),
        .Q(Q[7]),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair307" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXNOTINTABLE_USR_i_1__0
       (.I0(RD_DATA_REG[25]),
        .I1(EVEN),
        .I2(RD_DATA_REG[9]),
        .O(RXNOTINTABLE_USR_i_1__0_n_0));
  FDRE RXNOTINTABLE_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_USR_i_1__0_n_0),
        .Q(RXNOTINTABLE_USR),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair316" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[0]_i_1__0 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in5_in),
        .O(BIN_TO_GRAY[0]));
  (* SOFT_HLUTNM = "soft_lutpair316" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[1]_i_1__0 
       (.I0(p_1_in5_in),
        .I1(p_2_in7_in),
        .O(BIN_TO_GRAY[1]));
  (* SOFT_HLUTNM = "soft_lutpair317" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[2]_i_1__0 
       (.I0(p_2_in7_in),
        .I1(p_3_in9_in),
        .O(BIN_TO_GRAY[2]));
  (* SOFT_HLUTNM = "soft_lutpair317" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[3]_i_1__0 
       (.I0(p_3_in9_in),
        .I1(p_4_in11_in),
        .O(BIN_TO_GRAY[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[4]_i_1__0 
       (.I0(p_4_in11_in),
        .I1(p_5_in13_in),
        .O(BIN_TO_GRAY[4]));
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[5]_i_1__0 
       (.I0(p_5_in13_in),
        .I1(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .O(BIN_TO_GRAY[5]));
  FDSE \WR_ADDR_GRAY_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[0]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[0] ),
        .S(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[1]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[2]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[3]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[4]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDSE \WR_ADDR_GRAY_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[5]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[5] ),
        .S(RESET_OUT));
  FDSE \WR_ADDR_GRAY_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(DATA_IN),
        .S(RESET_OUT));
  FDSE \WR_ADDR_PLUS1_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .Q(WR_ADDR_PLUS1[0]),
        .S(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_1_in5_in),
        .Q(WR_ADDR_PLUS1[1]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_2_in7_in),
        .Q(WR_ADDR_PLUS1[2]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_3_in9_in),
        .Q(WR_ADDR_PLUS1[3]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_4_in11_in),
        .Q(WR_ADDR_PLUS1[4]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_5_in13_in),
        .Q(WR_ADDR_PLUS1[5]),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS1_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(WR_ADDR_PLUS1[6]),
        .S(RESET_OUT));
  LUT1 #(
    .INIT(2'h1)) 
    \WR_ADDR_PLUS2[0]_i_1__0 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair309" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \WR_ADDR_PLUS2[2]_i_1__0 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in5_in),
        .I2(p_2_in7_in),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair301" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \WR_ADDR_PLUS2[3]_i_1__0 
       (.I0(p_3_in9_in),
        .I1(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(p_1_in5_in),
        .I3(p_2_in7_in),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair301" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \WR_ADDR_PLUS2[4]_i_1__0 
       (.I0(p_4_in11_in),
        .I1(p_2_in7_in),
        .I2(p_1_in5_in),
        .I3(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I4(p_3_in9_in),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \WR_ADDR_PLUS2[5]_i_1__0 
       (.I0(p_5_in13_in),
        .I1(p_3_in9_in),
        .I2(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(p_1_in5_in),
        .I4(p_2_in7_in),
        .I5(p_4_in11_in),
        .O(plusOp__0[5]));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \WR_ADDR_PLUS2[6]_i_1__0 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .I1(p_4_in11_in),
        .I2(\WR_ADDR_PLUS2[6]_i_2__0_n_0 ),
        .I3(p_3_in9_in),
        .I4(p_5_in13_in),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair309" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \WR_ADDR_PLUS2[6]_i_2__0 
       (.I0(p_2_in7_in),
        .I1(p_1_in5_in),
        .I2(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .O(\WR_ADDR_PLUS2[6]_i_2__0_n_0 ));
  FDRE \WR_ADDR_PLUS2_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[0]),
        .Q(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS2_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(BIN_TO_GRAY[0]),
        .Q(p_1_in5_in),
        .S(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[2]),
        .Q(p_2_in7_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[3]),
        .Q(p_3_in9_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[4]),
        .Q(p_4_in11_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[5]),
        .Q(p_5_in13_in),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS2_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[6]),
        .Q(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .S(RESET_OUT));
  FDRE \WR_ADDR_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[0]),
        .Q(WR_ADDR[0]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[1]),
        .Q(WR_ADDR[1]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[2]),
        .Q(WR_ADDR[2]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[3]),
        .Q(WR_ADDR[3]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[4]),
        .Q(WR_ADDR[4]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[5]),
        .Q(WR_ADDR[5]),
        .R(RESET_OUT));
  FDSE \WR_ADDR_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[6]),
        .Q(WR_ADDR[6]),
        .S(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(\WR_DATA_REG1_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[9]),
        .Q(p_0_in6_in),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[10]),
        .Q(WR_DATA_REG1[12]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(\WR_DATA_REG1_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[2]),
        .Q(\WR_DATA_REG1_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[3]),
        .Q(\WR_DATA_REG1_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[4]),
        .Q(\WR_DATA_REG1_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[5]),
        .Q(\WR_DATA_REG1_reg_n_0_[5] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[6]),
        .Q(\WR_DATA_REG1_reg_n_0_[6] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[7]),
        .Q(\WR_DATA_REG1_reg_n_0_[7] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[8]),
        .Q(WR_DATA_REG1[9]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[0] ),
        .Q(WR_DATA_REG2[0]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in6_in),
        .Q(WR_DATA_REG2[11]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[12]),
        .Q(WR_DATA_REG2[12]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[1] ),
        .Q(WR_DATA_REG2[1]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[2] ),
        .Q(WR_DATA_REG2[2]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[3] ),
        .Q(WR_DATA_REG2[3]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[4] ),
        .Q(WR_DATA_REG2[4]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[5] ),
        .Q(WR_DATA_REG2[5]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[6] ),
        .Q(WR_DATA_REG2[6]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[7] ),
        .Q(WR_DATA_REG2[7]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[9]),
        .Q(WR_DATA_REG2[9]),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[0] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[0] ),
        .Q(\WR_DATA_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[11] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(p_0_in6_in),
        .Q(\WR_DATA_reg_n_0_[11] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[12] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[12]),
        .Q(\WR_DATA_reg_n_0_[12] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[13] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(REMOVE_IDLE),
        .Q(\WR_DATA_reg_n_0_[13] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[16] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[0]),
        .Q(\WR_DATA_reg_n_0_[16] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[17] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[1]),
        .Q(\WR_DATA_reg_n_0_[17] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[18] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[2]),
        .Q(\WR_DATA_reg_n_0_[18] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[19] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[3]),
        .Q(\WR_DATA_reg_n_0_[19] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[1] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[1] ),
        .Q(\WR_DATA_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[20] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[4]),
        .Q(\WR_DATA_reg_n_0_[20] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[21] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[5]),
        .Q(\WR_DATA_reg_n_0_[21] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[22] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[6]),
        .Q(\WR_DATA_reg_n_0_[22] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[23] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[7]),
        .Q(\WR_DATA_reg_n_0_[23] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[25] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[9]),
        .Q(\WR_DATA_reg_n_0_[25] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[27] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[11]),
        .Q(\WR_DATA_reg_n_0_[27] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[28] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[12]),
        .Q(\WR_DATA_reg_n_0_[28] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[2] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[2] ),
        .Q(\WR_DATA_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[3] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[3] ),
        .Q(\WR_DATA_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[4] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[4] ),
        .Q(\WR_DATA_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[5] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[5] ),
        .Q(\WR_DATA_reg_n_0_[5] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[6] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[6] ),
        .Q(\WR_DATA_reg_n_0_[6] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[7] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[7] ),
        .Q(\WR_DATA_reg_n_0_[7] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[9] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[9]),
        .Q(\WR_DATA_reg_n_0_[9] ),
        .R(RESET_OUT));
  LUT4 #(
    .INIT(16'h4044)) 
    WR_ENABLE_i_1__0
       (.I0(RESET_OUT),
        .I1(WR_TOGGLE),
        .I2(WR_ENABLE_i_2__0_n_0),
        .I3(I1_DETECTED_WR),
        .O(WR_ENABLE_i_1__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair302" *) 
  LUT5 #(
    .INIT(32'hFFBFFFFF)) 
    WR_ENABLE_i_2__0
       (.I0(REMOVE_IDLE_i_2__0_n_0),
        .I1(WR_TOGGLE),
        .I2(I1_DETECTED_WR_REG),
        .I3(REMOVE_IDLE),
        .I4(WR_OCCUPANCY[6]),
        .O(WR_ENABLE_i_2__0_n_0));
  FDRE WR_ENABLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_ENABLE_i_1__0_n_0),
        .Q(WE),
        .R(1'b0));
  FDRE \WR_OCCUPANCY_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[1]),
        .Q(WR_OCCUPANCY[1]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[2]),
        .Q(WR_OCCUPANCY[2]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[3]),
        .Q(WR_OCCUPANCY[3]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[4]),
        .Q(WR_OCCUPANCY[4]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[5]),
        .Q(WR_OCCUPANCY[5]),
        .R(RESET_OUT));
  FDSE \WR_OCCUPANCY_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[6]),
        .Q(WR_OCCUPANCY[6]),
        .S(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair302" *) 
  LUT1 #(
    .INIT(2'h1)) 
    WR_TOGGLE_i_1__0
       (.I0(WR_TOGGLE),
        .O(WR_TOGGLE_i_1__0_n_0));
  FDSE WR_TOGGLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_TOGGLE_i_1__0_n_0),
        .Q(WR_TOGGLE),
        .S(RESET_OUT));
  FDRE insert_idle_reg_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE),
        .Q(insert_idle_reg),
        .R(SS));
endmodule

(* ORIG_REF_NAME = "QSGMII_RX_ELASTIC_BUFFER" *) 
module qsgmii_1218_QSGMII_RX_ELASTIC_BUFFER_73
   (RXCLKCORCNT_CH2,
    RXCHARISCOMMA_USR,
    RXCHARISK_USR,
    RXNOTINTABLE_USR,
    RXBUFSTATUS_CH2,
    Q,
    userclk,
    rxrecclk,
    SS,
    RESET_OUT,
    D,
    RESET_IN,
    MGT_RX_RESET);
  output [1:0]RXCLKCORCNT_CH2;
  output RXCHARISCOMMA_USR;
  output RXCHARISK_USR;
  output RXNOTINTABLE_USR;
  output [0:0]RXBUFSTATUS_CH2;
  output [7:0]Q;
  input userclk;
  input rxrecclk;
  input [0:0]SS;
  input RESET_OUT;
  input [10:0]D;
  input RESET_IN;
  input MGT_RX_RESET;

  wire [5:0]BIN_TO_GRAY;
  wire [10:0]D;
  wire D5P6_WR_REG;
  wire D5P6_WR_REG_i_2__1_n_0;
  wire DATA_IN;
  wire DATA_OUT;
  wire EVEN;
  wire EVEN_i_1__1_n_0;
  wire \GEN_FIFO[0].RD_DATA_reg_n_0_[0] ;
  wire \GEN_FIFO[11].RD_DATA_reg_n_0_[11] ;
  wire \GEN_FIFO[12].RD_DATA_reg_n_0_[12] ;
  wire \GEN_FIFO[13].RD_DATA_reg_n_0_[13] ;
  wire \GEN_FIFO[1].RD_DATA_reg_n_0_[1] ;
  wire \GEN_FIFO[25].RD_DATA_reg_n_0_[25] ;
  wire \GEN_FIFO[27].RD_DATA_reg_n_0_[27] ;
  wire \GEN_FIFO[28].RD_DATA_reg ;
  wire \GEN_FIFO[2].RD_DATA_reg_n_0_[2] ;
  wire \GEN_FIFO[3].RD_DATA_reg_n_0_[3] ;
  wire \GEN_FIFO[4].RD_DATA_reg_n_0_[4] ;
  wire \GEN_FIFO[5].RD_DATA_reg_n_0_[5] ;
  wire \GEN_FIFO[6].RD_DATA_reg_n_0_[6] ;
  wire \GEN_FIFO[7].RD_DATA_reg_n_0_[7] ;
  wire \GEN_FIFO[9].RD_DATA_reg_n_0_[9] ;
  wire [4:0]GRAY_TO_BIN;
  wire I1_DETECTED_WR;
  wire I1_DETECTED_WR_REG;
  wire I1_DETECTED_WR_REG_i_2__1_n_0;
  wire INSERT_IDLE;
  wire INSERT_IDLE_i_1__5_n_0;
  wire K28P5_WR_REG;
  wire K28P5_WR_REG_i_2__1_n_0;
  wire MGT_RX_RESET;
  wire [7:0]Q;
  wire [6:0]RD_ADDR;
  wire [6:0]RD_ADDR_GRAY;
  wire \RD_ADDR_GRAY[0]_i_1__1_n_0 ;
  wire \RD_ADDR_GRAY[1]_i_1__1_n_0 ;
  wire \RD_ADDR_GRAY[2]_i_1__1_n_0 ;
  wire \RD_ADDR_GRAY[3]_i_1__1_n_0 ;
  wire \RD_ADDR_GRAY[4]_i_1__1_n_0 ;
  wire \RD_ADDR_GRAY[5]_i_1__1_n_0 ;
  wire [6:0]RD_ADDR_PLUS1;
  wire \RD_ADDR_PLUS2[6]_i_2__1_n_0 ;
  wire \RD_ADDR_PLUS2_reg_n_0_[0] ;
  wire \RD_ADDR_PLUS2_reg_n_0_[2] ;
  wire \RD_ADDR_PLUS2_reg_n_0_[6] ;
  wire RD_DATA_RAM_0;
  wire RD_DATA_RAM_1;
  wire RD_DATA_RAM_11;
  wire RD_DATA_RAM_12;
  wire RD_DATA_RAM_13;
  wire RD_DATA_RAM_16;
  wire RD_DATA_RAM_17;
  wire RD_DATA_RAM_18;
  wire RD_DATA_RAM_19;
  wire RD_DATA_RAM_2;
  wire RD_DATA_RAM_20;
  wire RD_DATA_RAM_21;
  wire RD_DATA_RAM_22;
  wire RD_DATA_RAM_23;
  wire RD_DATA_RAM_25;
  wire RD_DATA_RAM_27;
  wire RD_DATA_RAM_28;
  wire RD_DATA_RAM_3;
  wire RD_DATA_RAM_4;
  wire RD_DATA_RAM_5;
  wire RD_DATA_RAM_6;
  wire RD_DATA_RAM_7;
  wire RD_DATA_RAM_9;
  wire [28:0]RD_DATA_REG;
  wire RD_ENABLE;
  wire RD_ENABLE0;
  wire RD_ENABLE24_out;
  wire RD_ENABLE_i_10__1_n_0;
  wire RD_ENABLE_i_11__1_n_0;
  wire RD_ENABLE_i_1__1_n_0;
  wire RD_ENABLE_i_3__1_n_0;
  wire RD_ENABLE_i_4__1_n_0;
  wire RD_ENABLE_i_5__1_n_0;
  wire RD_ENABLE_i_7__1_n_0;
  wire RD_ENABLE_i_8__1_n_0;
  wire RD_ENABLE_i_9__1_n_0;
  wire [6:0]RD_OCCUPANCY;
  wire [6:0]RD_OCCUPANCY01_out;
  wire \RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ;
  wire \RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY_n_1 ;
  wire \RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 ;
  wire REMOVE_IDLE;
  wire REMOVE_IDLE_i_1__1_n_0;
  wire REMOVE_IDLE_i_2__1_n_0;
  wire RESET_IN;
  wire RESET_OUT;
  wire RXBUFERR_i_1__1_n_0;
  wire RXBUFERR_i_2__1_n_0;
  wire RXBUFERR_i_3__1_n_0;
  wire [0:0]RXBUFSTATUS_CH2;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISCOMMA_USR_i_1__1_n_0;
  wire RXCHARISK_USR;
  wire RXCHARISK_USR_i_1__1_n_0;
  wire \RXCLKCORCNT[0]_i_1__1_n_0 ;
  wire \RXCLKCORCNT[2]_i_1__1_n_0 ;
  wire [1:0]RXCLKCORCNT_CH2;
  wire \RXDATA_USR[0]_i_1__1_n_0 ;
  wire \RXDATA_USR[1]_i_1__1_n_0 ;
  wire \RXDATA_USR[2]_i_1__1_n_0 ;
  wire \RXDATA_USR[3]_i_1__1_n_0 ;
  wire \RXDATA_USR[4]_i_1__1_n_0 ;
  wire \RXDATA_USR[5]_i_1__1_n_0 ;
  wire \RXDATA_USR[6]_i_1__1_n_0 ;
  wire \RXDATA_USR[7]_i_1__1_n_0 ;
  wire RXNOTINTABLE_USR;
  wire RXNOTINTABLE_USR_i_1__1_n_0;
  wire [0:0]SS;
  wire WE;
  wire [6:0]WR_ADDR;
  wire \WR_ADDR_GRAY_reg_n_0_[0] ;
  wire \WR_ADDR_GRAY_reg_n_0_[1] ;
  wire \WR_ADDR_GRAY_reg_n_0_[2] ;
  wire \WR_ADDR_GRAY_reg_n_0_[3] ;
  wire \WR_ADDR_GRAY_reg_n_0_[4] ;
  wire \WR_ADDR_GRAY_reg_n_0_[5] ;
  wire [6:0]WR_ADDR_PLUS1;
  wire \WR_ADDR_PLUS2[6]_i_2__1_n_0 ;
  wire \WR_ADDR_PLUS2_reg_n_0_[0] ;
  wire \WR_ADDR_PLUS2_reg_n_0_[6] ;
  wire [12:9]WR_DATA_REG1;
  wire \WR_DATA_REG1_reg_n_0_[0] ;
  wire \WR_DATA_REG1_reg_n_0_[1] ;
  wire \WR_DATA_REG1_reg_n_0_[2] ;
  wire \WR_DATA_REG1_reg_n_0_[3] ;
  wire \WR_DATA_REG1_reg_n_0_[4] ;
  wire \WR_DATA_REG1_reg_n_0_[5] ;
  wire \WR_DATA_REG1_reg_n_0_[6] ;
  wire \WR_DATA_REG1_reg_n_0_[7] ;
  wire [12:0]WR_DATA_REG2;
  wire \WR_DATA_reg_n_0_[0] ;
  wire \WR_DATA_reg_n_0_[11] ;
  wire \WR_DATA_reg_n_0_[12] ;
  wire \WR_DATA_reg_n_0_[13] ;
  wire \WR_DATA_reg_n_0_[16] ;
  wire \WR_DATA_reg_n_0_[17] ;
  wire \WR_DATA_reg_n_0_[18] ;
  wire \WR_DATA_reg_n_0_[19] ;
  wire \WR_DATA_reg_n_0_[1] ;
  wire \WR_DATA_reg_n_0_[20] ;
  wire \WR_DATA_reg_n_0_[21] ;
  wire \WR_DATA_reg_n_0_[22] ;
  wire \WR_DATA_reg_n_0_[23] ;
  wire \WR_DATA_reg_n_0_[25] ;
  wire \WR_DATA_reg_n_0_[27] ;
  wire \WR_DATA_reg_n_0_[28] ;
  wire \WR_DATA_reg_n_0_[2] ;
  wire \WR_DATA_reg_n_0_[3] ;
  wire \WR_DATA_reg_n_0_[4] ;
  wire \WR_DATA_reg_n_0_[5] ;
  wire \WR_DATA_reg_n_0_[6] ;
  wire \WR_DATA_reg_n_0_[7] ;
  wire \WR_DATA_reg_n_0_[9] ;
  wire WR_ENABLE_i_1__1_n_0;
  wire WR_ENABLE_i_2__1_n_0;
  wire [6:1]WR_OCCUPANCY;
  wire [6:1]WR_OCCUPANCY00_out;
  wire WR_TOGGLE;
  wire WR_TOGGLE_i_1__1_n_0;
  wire insert_idle_reg;
  wire p_0_in6_in;
  wire p_0_out;
  wire p_17_in;
  wire p_1_in;
  wire p_1_in18_in;
  wire p_1_in5_in;
  wire [7:0]p_2_in;
  wire p_2_in21_in;
  wire p_2_in7_in;
  wire p_2_out;
  wire p_3_in;
  wire p_3_in24_in;
  wire p_3_in9_in;
  wire p_3_out;
  wire p_4_in;
  wire p_4_in11_in;
  wire p_4_out;
  wire p_5_in;
  wire p_5_in13_in;
  wire p_5_out;
  wire p_8_in;
  wire p_9_in;
  wire [6:0]plusOp;
  wire [6:0]plusOp__0;
  wire rxrecclk;
  wire userclk;
  wire \NLW_GEN_FIFO[0].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[11].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[12].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[13].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[16].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[17].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[18].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[19].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[1].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[20].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[21].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[22].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[23].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[25].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[27].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[28].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[2].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[3].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[4].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[5].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[6].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[7].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[9].DIST_RAM_SPO_UNCONNECTED ;

  LUT5 #(
    .INIT(32'h10000004)) 
    D5P6_WR_REG_i_1__1
       (.I0(D5P6_WR_REG_i_2__1_n_0),
        .I1(\WR_DATA_REG1_reg_n_0_[4] ),
        .I2(\WR_DATA_REG1_reg_n_0_[2] ),
        .I3(\WR_DATA_REG1_reg_n_0_[0] ),
        .I4(\WR_DATA_REG1_reg_n_0_[7] ),
        .O(p_8_in));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    D5P6_WR_REG_i_2__1
       (.I0(\WR_DATA_REG1_reg_n_0_[6] ),
        .I1(\WR_DATA_REG1_reg_n_0_[1] ),
        .I2(\WR_DATA_REG1_reg_n_0_[5] ),
        .I3(p_0_in6_in),
        .I4(\WR_DATA_REG1_reg_n_0_[3] ),
        .O(D5P6_WR_REG_i_2__1_n_0));
  FDRE D5P6_WR_REG_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_8_in),
        .Q(D5P6_WR_REG),
        .R(RESET_OUT));
  LUT1 #(
    .INIT(2'h1)) 
    EVEN_i_1__1
       (.I0(EVEN),
        .O(EVEN_i_1__1_n_0));
  FDSE EVEN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EVEN_i_1__1_n_0),
        .Q(EVEN),
        .S(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[0].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[0] ),
        .DPO(RD_DATA_RAM_0),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[0].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[0].RD_DATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_0),
        .Q(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[11].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[11] ),
        .DPO(RD_DATA_RAM_11),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[11].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[11].RD_DATA_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_11),
        .Q(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[12].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[12] ),
        .DPO(RD_DATA_RAM_12),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[12].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[12].RD_DATA_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_12),
        .Q(\GEN_FIFO[12].RD_DATA_reg_n_0_[12] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[13].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[13] ),
        .DPO(RD_DATA_RAM_13),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[13].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[13].RD_DATA_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_13),
        .Q(\GEN_FIFO[13].RD_DATA_reg_n_0_[13] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[16].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[16] ),
        .DPO(RD_DATA_RAM_16),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[16].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[16].RD_DATA_reg[16] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_16),
        .Q(p_2_in[0]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[17].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[17] ),
        .DPO(RD_DATA_RAM_17),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[17].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[17].RD_DATA_reg[17] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_17),
        .Q(p_2_in[1]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[18].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[18] ),
        .DPO(RD_DATA_RAM_18),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[18].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[18].RD_DATA_reg[18] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_18),
        .Q(p_2_in[2]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[19].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[19] ),
        .DPO(RD_DATA_RAM_19),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[19].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[19].RD_DATA_reg[19] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_19),
        .Q(p_2_in[3]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[1].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[1] ),
        .DPO(RD_DATA_RAM_1),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[1].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[1].RD_DATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_1),
        .Q(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[20].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[20] ),
        .DPO(RD_DATA_RAM_20),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[20].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[20].RD_DATA_reg[20] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_20),
        .Q(p_2_in[4]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[21].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[21] ),
        .DPO(RD_DATA_RAM_21),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[21].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[21].RD_DATA_reg[21] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_21),
        .Q(p_2_in[5]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[22].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[22] ),
        .DPO(RD_DATA_RAM_22),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[22].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[22].RD_DATA_reg[22] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_22),
        .Q(p_2_in[6]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[23].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[23] ),
        .DPO(RD_DATA_RAM_23),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[23].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[23].RD_DATA_reg[23] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_23),
        .Q(p_2_in[7]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[25].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[25] ),
        .DPO(RD_DATA_RAM_25),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[25].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[25].RD_DATA_reg[25] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_25),
        .Q(\GEN_FIFO[25].RD_DATA_reg_n_0_[25] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[27].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[27] ),
        .DPO(RD_DATA_RAM_27),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[27].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[27].RD_DATA_reg[27] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_27),
        .Q(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[28].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[28] ),
        .DPO(RD_DATA_RAM_28),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[28].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[28].RD_DATA_reg[28] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_28),
        .Q(\GEN_FIFO[28].RD_DATA_reg ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[2].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[2] ),
        .DPO(RD_DATA_RAM_2),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[2].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[2].RD_DATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_2),
        .Q(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[3].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[3] ),
        .DPO(RD_DATA_RAM_3),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[3].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[3].RD_DATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_3),
        .Q(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[4].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[4] ),
        .DPO(RD_DATA_RAM_4),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[4].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[4].RD_DATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_4),
        .Q(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[5].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[5] ),
        .DPO(RD_DATA_RAM_5),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[5].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[5].RD_DATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_5),
        .Q(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[6].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[6] ),
        .DPO(RD_DATA_RAM_6),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[6].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[6].RD_DATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_6),
        .Q(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[7].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[7] ),
        .DPO(RD_DATA_RAM_7),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[7].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[7].RD_DATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_7),
        .Q(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[9].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[9] ),
        .DPO(RD_DATA_RAM_9),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[9].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[9].RD_DATA_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_9),
        .Q(\GEN_FIFO[9].RD_DATA_reg_n_0_[9] ),
        .R(SS));
  LUT4 #(
    .INIT(16'h8F88)) 
    I1_DETECTED_WR_REG_i_1__1
       (.I0(p_8_in),
        .I1(K28P5_WR_REG),
        .I2(I1_DETECTED_WR_REG_i_2__1_n_0),
        .I3(D5P6_WR_REG),
        .O(I1_DETECTED_WR));
  (* SOFT_HLUTNM = "soft_lutpair322" *) 
  LUT4 #(
    .INIT(16'hFFFD)) 
    I1_DETECTED_WR_REG_i_2__1
       (.I0(\WR_DATA_REG1_reg_n_0_[3] ),
        .I1(\WR_DATA_REG1_reg_n_0_[0] ),
        .I2(\WR_DATA_REG1_reg_n_0_[1] ),
        .I3(K28P5_WR_REG_i_2__1_n_0),
        .O(I1_DETECTED_WR_REG_i_2__1_n_0));
  FDRE I1_DETECTED_WR_REG_reg
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(I1_DETECTED_WR),
        .Q(I1_DETECTED_WR_REG),
        .R(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair323" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    INSERT_IDLE_i_1__5
       (.I0(RESET_IN),
        .I1(MGT_RX_RESET),
        .I2(EVEN),
        .I3(RD_ENABLE0),
        .O(INSERT_IDLE_i_1__5_n_0));
  FDRE INSERT_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE_i_1__5_n_0),
        .Q(INSERT_IDLE),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair322" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    K28P5_WR_REG_i_1__1
       (.I0(K28P5_WR_REG_i_2__1_n_0),
        .I1(\WR_DATA_REG1_reg_n_0_[1] ),
        .I2(\WR_DATA_REG1_reg_n_0_[0] ),
        .I3(\WR_DATA_REG1_reg_n_0_[3] ),
        .O(p_9_in));
  LUT6 #(
    .INIT(64'hDFFFFFFFFFFFFFFF)) 
    K28P5_WR_REG_i_2__1
       (.I0(\WR_DATA_REG1_reg_n_0_[2] ),
        .I1(\WR_DATA_REG1_reg_n_0_[6] ),
        .I2(\WR_DATA_REG1_reg_n_0_[7] ),
        .I3(\WR_DATA_REG1_reg_n_0_[4] ),
        .I4(\WR_DATA_REG1_reg_n_0_[5] ),
        .I5(p_0_in6_in),
        .O(K28P5_WR_REG_i_2__1_n_0));
  FDRE K28P5_WR_REG_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_9_in),
        .Q(K28P5_WR_REG),
        .R(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair331" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[0]_i_1__1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in),
        .O(\RD_ADDR_GRAY[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair332" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[1]_i_1__1 
       (.I0(p_1_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(\RD_ADDR_GRAY[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair332" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[2]_i_1__1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I1(p_3_in),
        .O(\RD_ADDR_GRAY[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair333" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[3]_i_1__1 
       (.I0(p_3_in),
        .I1(p_4_in),
        .O(\RD_ADDR_GRAY[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair333" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[4]_i_1__1 
       (.I0(p_4_in),
        .I1(p_5_in),
        .O(\RD_ADDR_GRAY[4]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[5]_i_1__1 
       (.I0(p_5_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .O(\RD_ADDR_GRAY[5]_i_1__1_n_0 ));
  FDRE \RD_ADDR_GRAY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[0]_i_1__1_n_0 ),
        .Q(RD_ADDR_GRAY[0]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[1]_i_1__1_n_0 ),
        .Q(RD_ADDR_GRAY[1]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[2]_i_1__1_n_0 ),
        .Q(RD_ADDR_GRAY[2]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[3]_i_1__1_n_0 ),
        .Q(RD_ADDR_GRAY[3]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[4]_i_1__1_n_0 ),
        .Q(RD_ADDR_GRAY[4]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[5]_i_1__1_n_0 ),
        .Q(RD_ADDR_GRAY[5]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(RD_ADDR_GRAY[6]),
        .R(SS));
  FDSE \RD_ADDR_PLUS1_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .Q(RD_ADDR_PLUS1[0]),
        .S(SS));
  FDRE \RD_ADDR_PLUS1_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_1_in),
        .Q(RD_ADDR_PLUS1[1]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .Q(RD_ADDR_PLUS1[2]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_3_in),
        .Q(RD_ADDR_PLUS1[3]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_4_in),
        .Q(RD_ADDR_PLUS1[4]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_5_in),
        .Q(RD_ADDR_PLUS1[5]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(RD_ADDR_PLUS1[6]),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair331" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \RD_ADDR_PLUS2[0]_i_1__1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair324" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \RD_ADDR_PLUS2[2]_i_1__1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair324" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \RD_ADDR_PLUS2[3]_i_1__1 
       (.I0(p_1_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I3(p_3_in),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair318" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \RD_ADDR_PLUS2[4]_i_1__1 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(p_1_in),
        .I3(p_3_in),
        .I4(p_4_in),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \RD_ADDR_PLUS2[5]_i_1__1 
       (.I0(p_3_in),
        .I1(p_1_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I4(p_4_in),
        .I5(p_5_in),
        .O(plusOp[5]));
  LUT3 #(
    .INIT(8'h78)) 
    \RD_ADDR_PLUS2[6]_i_1__1 
       (.I0(\RD_ADDR_PLUS2[6]_i_2__1_n_0 ),
        .I1(p_5_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair318" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \RD_ADDR_PLUS2[6]_i_2__1 
       (.I0(p_4_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(p_1_in),
        .I4(p_3_in),
        .O(\RD_ADDR_PLUS2[6]_i_2__1_n_0 ));
  FDRE \RD_ADDR_PLUS2_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[0]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .R(SS));
  FDSE \RD_ADDR_PLUS2_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_GRAY[0]_i_1__1_n_0 ),
        .Q(p_1_in),
        .S(SS));
  FDRE \RD_ADDR_PLUS2_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[2]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[3]),
        .Q(p_3_in),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[4]),
        .Q(p_4_in),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[5]),
        .Q(p_5_in),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[6]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .R(SS));
  FDRE \RD_ADDR_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[0]),
        .Q(RD_ADDR[0]),
        .R(SS));
  FDRE \RD_ADDR_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[1]),
        .Q(RD_ADDR[1]),
        .R(SS));
  FDRE \RD_ADDR_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[2]),
        .Q(RD_ADDR[2]),
        .R(SS));
  FDRE \RD_ADDR_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[3]),
        .Q(RD_ADDR[3]),
        .R(SS));
  FDRE \RD_ADDR_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[4]),
        .Q(RD_ADDR[4]),
        .R(SS));
  FDRE \RD_ADDR_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[5]),
        .Q(RD_ADDR[5]),
        .R(SS));
  FDRE \RD_ADDR_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[6]),
        .Q(RD_ADDR[6]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .Q(RD_DATA_REG[0]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[11] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .Q(RD_DATA_REG[11]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[12] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[12].RD_DATA_reg_n_0_[12] ),
        .Q(RD_DATA_REG[12]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[13] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[13].RD_DATA_reg_n_0_[13] ),
        .Q(RD_DATA_REG[13]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[16] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[0]),
        .Q(RD_DATA_REG[16]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[17] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[1]),
        .Q(RD_DATA_REG[17]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[18] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[2]),
        .Q(RD_DATA_REG[18]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[19] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[3]),
        .Q(RD_DATA_REG[19]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .Q(RD_DATA_REG[1]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[20] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[4]),
        .Q(RD_DATA_REG[20]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[21] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[5]),
        .Q(RD_DATA_REG[21]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[22] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[6]),
        .Q(RD_DATA_REG[22]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[23] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[7]),
        .Q(RD_DATA_REG[23]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[25] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[25].RD_DATA_reg_n_0_[25] ),
        .Q(RD_DATA_REG[25]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[27] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .Q(RD_DATA_REG[27]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[28] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[28].RD_DATA_reg ),
        .Q(RD_DATA_REG[28]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .Q(RD_DATA_REG[2]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .Q(RD_DATA_REG[3]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .Q(RD_DATA_REG[4]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .Q(RD_DATA_REG[5]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .Q(RD_DATA_REG[6]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[7] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .Q(RD_DATA_REG[7]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[9] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[9].RD_DATA_reg_n_0_[9] ),
        .Q(RD_DATA_REG[9]),
        .R(SS));
  LUT3 #(
    .INIT(8'h04)) 
    RD_ENABLE_i_10__1
       (.I0(p_2_in[1]),
        .I1(p_2_in[2]),
        .I2(p_2_in[0]),
        .O(RD_ENABLE_i_10__1_n_0));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    RD_ENABLE_i_11__1
       (.I0(p_2_in[3]),
        .I1(p_2_in[4]),
        .I2(p_2_in[5]),
        .I3(p_2_in[6]),
        .I4(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .I5(p_2_in[7]),
        .O(RD_ENABLE_i_11__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair323" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    RD_ENABLE_i_1__1
       (.I0(RESET_IN),
        .I1(MGT_RX_RESET),
        .I2(EVEN),
        .I3(RD_ENABLE0),
        .O(RD_ENABLE_i_1__1_n_0));
  LUT5 #(
    .INIT(32'h000E0000)) 
    RD_ENABLE_i_2__1
       (.I0(RD_ENABLE_i_3__1_n_0),
        .I1(RD_ENABLE_i_4__1_n_0),
        .I2(RD_ENABLE_i_5__1_n_0),
        .I3(RD_OCCUPANCY[6]),
        .I4(RD_ENABLE24_out),
        .O(RD_ENABLE0));
  LUT5 #(
    .INIT(32'h00800200)) 
    RD_ENABLE_i_3__1
       (.I0(RD_ENABLE_i_7__1_n_0),
        .I1(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .I2(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .I3(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .I4(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .O(RD_ENABLE_i_3__1_n_0));
  LUT5 #(
    .INIT(32'h00800200)) 
    RD_ENABLE_i_4__1
       (.I0(RD_ENABLE_i_8__1_n_0),
        .I1(p_2_in[2]),
        .I2(p_2_in[0]),
        .I3(p_2_in[4]),
        .I4(p_2_in[7]),
        .O(RD_ENABLE_i_4__1_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    RD_ENABLE_i_5__1
       (.I0(RD_OCCUPANCY[4]),
        .I1(RD_OCCUPANCY[5]),
        .I2(RD_OCCUPANCY[2]),
        .I3(RD_OCCUPANCY[3]),
        .I4(RD_OCCUPANCY[1]),
        .I5(RD_OCCUPANCY[0]),
        .O(RD_ENABLE_i_5__1_n_0));
  LUT6 #(
    .INIT(64'hFFFF040004000400)) 
    RD_ENABLE_i_6__1
       (.I0(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .I1(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .I2(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .I3(RD_ENABLE_i_9__1_n_0),
        .I4(RD_ENABLE_i_10__1_n_0),
        .I5(RD_ENABLE_i_11__1_n_0),
        .O(RD_ENABLE24_out));
  LUT5 #(
    .INIT(32'h00010000)) 
    RD_ENABLE_i_7__1
       (.I0(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .I1(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .I2(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .I3(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .I4(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .O(RD_ENABLE_i_7__1_n_0));
  LUT5 #(
    .INIT(32'h00010000)) 
    RD_ENABLE_i_8__1
       (.I0(p_2_in[1]),
        .I1(p_2_in[3]),
        .I2(p_2_in[5]),
        .I3(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .I4(p_2_in[6]),
        .O(RD_ENABLE_i_8__1_n_0));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    RD_ENABLE_i_9__1
       (.I0(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .I1(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .I2(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .I3(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .I4(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .I5(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .O(RD_ENABLE_i_9__1_n_0));
  FDRE RD_ENABLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RD_ENABLE_i_1__1_n_0),
        .Q(RD_ENABLE),
        .R(1'b0));
  FDRE \RD_OCCUPANCY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[0]),
        .Q(RD_OCCUPANCY[0]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[1]),
        .Q(RD_OCCUPANCY[1]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[2]),
        .Q(RD_OCCUPANCY[2]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[3]),
        .Q(RD_OCCUPANCY[3]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[4]),
        .Q(RD_OCCUPANCY[4]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[5]),
        .Q(RD_OCCUPANCY[5]),
        .R(SS));
  FDSE \RD_OCCUPANCY_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[6]),
        .Q(RD_OCCUPANCY[6]),
        .S(SS));
  qsgmii_1218_qsgmii_sync_block_92 \RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY 
       (.Q(RD_ADDR_GRAY[0]),
        .data_out(\RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_93 \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY 
       (.CO(\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ),
        .D(WR_OCCUPANCY00_out[3:1]),
        .Q(WR_ADDR[3:0]),
        .\RD_ADDR_GRAY_reg[1] (RD_ADDR_GRAY[1]),
        .S({\RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 }),
        .data_out(p_2_in21_in),
        .data_sync_reg6_0(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg6_1(p_17_in),
        .data_sync_reg6_2(p_1_in18_in),
        .data_sync_reg6_3(p_3_in24_in),
        .data_sync_reg6_4(\RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_94 \RECLOCK_RD_ADDRGRAY[2].SYNC_RD_ADDRGRAY 
       (.Q(RD_ADDR_GRAY[2]),
        .data_out(p_3_in24_in),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_95 \RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[2]),
        .\RD_ADDR_GRAY_reg[3] (RD_ADDR_GRAY[3]),
        .S(\RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(p_2_in21_in),
        .data_sync_reg6_0(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg6_1(p_17_in),
        .data_sync_reg6_2(p_1_in18_in),
        .data_sync_reg6_3(p_3_in24_in),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_96 \RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[3]),
        .\RD_ADDR_GRAY_reg[4] (RD_ADDR_GRAY[4]),
        .S(\RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(p_1_in18_in),
        .data_sync_reg6_0(p_17_in),
        .data_sync_reg6_1(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg6_2(p_2_in21_in),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_97 \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[4]),
        .\RD_ADDR_GRAY_reg[5] (RD_ADDR_GRAY[5]),
        .S(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg6_0(p_17_in),
        .data_sync_reg6_1(p_1_in18_in),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_98 \RECLOCK_RD_ADDRGRAY[6].SYNC_RD_ADDRGRAY 
       (.CO(\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ),
        .D(WR_OCCUPANCY00_out[6:4]),
        .Q(WR_ADDR[6:4]),
        .\RD_ADDR_GRAY_reg[6] (RD_ADDR_GRAY[6]),
        .S(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(p_17_in),
        .data_sync_reg6_0(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_99 \RECLOCK_WR_ADDRGRAY[0].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[0]),
        .GRAY_TO_BIN(GRAY_TO_BIN[1]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[0] ),
        .data_out(p_0_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_100 \RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY 
       (.CO(\RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY_n_1 ),
        .D(RD_OCCUPANCY01_out[3:0]),
        .DI({GRAY_TO_BIN[3:2],GRAY_TO_BIN[0]}),
        .GRAY_TO_BIN(GRAY_TO_BIN[1]),
        .Q(RD_ADDR[1:0]),
        .S({\RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 }),
        .\WR_ADDR_GRAY_reg[1] (\WR_ADDR_GRAY_reg_n_0_[1] ),
        .data_out(p_0_out),
        .data_sync_reg6_0(p_3_out),
        .data_sync_reg6_1(p_5_out),
        .data_sync_reg6_2(DATA_OUT),
        .data_sync_reg6_3(p_4_out),
        .data_sync_reg6_4(p_2_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_101 \RECLOCK_WR_ADDRGRAY[2].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[2]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[2] ),
        .data_out(p_2_out),
        .data_sync_reg6_0(p_4_out),
        .data_sync_reg6_1(DATA_OUT),
        .data_sync_reg6_2(p_5_out),
        .data_sync_reg6_3(p_3_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_102 \RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[3]),
        .Q(RD_ADDR[2]),
        .S(\RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 ),
        .\WR_ADDR_GRAY_reg[3] (\WR_ADDR_GRAY_reg_n_0_[3] ),
        .data_out(p_3_out),
        .data_sync_reg6_0(p_5_out),
        .data_sync_reg6_1(DATA_OUT),
        .data_sync_reg6_2(p_4_out),
        .data_sync_reg6_3(p_2_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_103 \RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[4]),
        .Q(RD_ADDR[3]),
        .S(\RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ),
        .\WR_ADDR_GRAY_reg[4] (\WR_ADDR_GRAY_reg_n_0_[4] ),
        .data_out(p_4_out),
        .data_sync_reg6_0(DATA_OUT),
        .data_sync_reg6_1(p_5_out),
        .data_sync_reg6_2(p_3_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_104 \RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY 
       (.CO(\RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY_n_1 ),
        .D(RD_OCCUPANCY01_out[6:4]),
        .DI(GRAY_TO_BIN[4]),
        .Q(RD_ADDR[4]),
        .S({\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 }),
        .\WR_ADDR_GRAY_reg[5] (\WR_ADDR_GRAY_reg_n_0_[5] ),
        .data_out(p_5_out),
        .data_sync_reg6_0(DATA_OUT),
        .data_sync_reg6_1(p_4_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_105 \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY 
       (.Q(RD_ADDR[6:5]),
        .S({\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 }),
        .\WR_ADDR_GRAY_reg[6] (DATA_IN),
        .data_out(DATA_OUT),
        .data_sync_reg6_0(p_5_out),
        .userclk(userclk));
  LUT6 #(
    .INIT(64'h0000FFFF00800000)) 
    REMOVE_IDLE_i_1__1
       (.I0(I1_DETECTED_WR),
        .I1(WR_OCCUPANCY[6]),
        .I2(I1_DETECTED_WR_REG),
        .I3(REMOVE_IDLE_i_2__1_n_0),
        .I4(WR_TOGGLE),
        .I5(REMOVE_IDLE),
        .O(REMOVE_IDLE_i_1__1_n_0));
  LUT5 #(
    .INIT(32'h00000001)) 
    REMOVE_IDLE_i_2__1
       (.I0(WR_OCCUPANCY[4]),
        .I1(WR_OCCUPANCY[1]),
        .I2(WR_OCCUPANCY[3]),
        .I3(WR_OCCUPANCY[5]),
        .I4(WR_OCCUPANCY[2]),
        .O(REMOVE_IDLE_i_2__1_n_0));
  FDRE REMOVE_IDLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(REMOVE_IDLE_i_1__1_n_0),
        .Q(REMOVE_IDLE),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'hFFFFFFFFC0020002)) 
    RXBUFERR_i_1__1
       (.I0(RXBUFERR_i_2__1_n_0),
        .I1(RD_OCCUPANCY[2]),
        .I2(RD_OCCUPANCY[3]),
        .I3(RD_OCCUPANCY[4]),
        .I4(RXBUFERR_i_3__1_n_0),
        .I5(RXBUFSTATUS_CH2),
        .O(RXBUFERR_i_1__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair321" *) 
  LUT4 #(
    .INIT(16'h0007)) 
    RXBUFERR_i_2__1
       (.I0(RD_OCCUPANCY[1]),
        .I1(RD_OCCUPANCY[0]),
        .I2(RD_OCCUPANCY[6]),
        .I3(RD_OCCUPANCY[5]),
        .O(RXBUFERR_i_2__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair321" *) 
  LUT4 #(
    .INIT(16'hE000)) 
    RXBUFERR_i_3__1
       (.I0(RD_OCCUPANCY[1]),
        .I1(RD_OCCUPANCY[0]),
        .I2(RD_OCCUPANCY[6]),
        .I3(RD_OCCUPANCY[5]),
        .O(RXBUFERR_i_3__1_n_0));
  FDRE RXBUFERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXBUFERR_i_1__1_n_0),
        .Q(RXBUFSTATUS_CH2),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair325" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXCHARISCOMMA_USR_i_1__1
       (.I0(RD_DATA_REG[28]),
        .I1(EVEN),
        .I2(RD_DATA_REG[12]),
        .O(RXCHARISCOMMA_USR_i_1__1_n_0));
  FDRE RXCHARISCOMMA_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISCOMMA_USR_i_1__1_n_0),
        .Q(RXCHARISCOMMA_USR),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair326" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXCHARISK_USR_i_1__1
       (.I0(RD_DATA_REG[27]),
        .I1(EVEN),
        .I2(RD_DATA_REG[11]),
        .O(RXCHARISK_USR_i_1__1_n_0));
  FDRE RXCHARISK_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISK_USR_i_1__1_n_0),
        .Q(RXCHARISK_USR),
        .R(SS));
  LUT3 #(
    .INIT(8'hAE)) 
    \RXCLKCORCNT[0]_i_1__1 
       (.I0(insert_idle_reg),
        .I1(RD_DATA_REG[13]),
        .I2(RXCLKCORCNT_CH2[0]),
        .O(\RXCLKCORCNT[0]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'h10100010)) 
    \RXCLKCORCNT[2]_i_1__1 
       (.I0(RESET_IN),
        .I1(MGT_RX_RESET),
        .I2(insert_idle_reg),
        .I3(RD_DATA_REG[13]),
        .I4(RXCLKCORCNT_CH2[0]),
        .O(\RXCLKCORCNT[2]_i_1__1_n_0 ));
  FDRE \RXCLKCORCNT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXCLKCORCNT[0]_i_1__1_n_0 ),
        .Q(RXCLKCORCNT_CH2[0]),
        .R(SS));
  FDRE \RXCLKCORCNT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXCLKCORCNT[2]_i_1__1_n_0 ),
        .Q(RXCLKCORCNT_CH2[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair329" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[0]_i_1__1 
       (.I0(RD_DATA_REG[16]),
        .I1(EVEN),
        .I2(RD_DATA_REG[0]),
        .O(\RXDATA_USR[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair330" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[1]_i_1__1 
       (.I0(RD_DATA_REG[17]),
        .I1(EVEN),
        .I2(RD_DATA_REG[1]),
        .O(\RXDATA_USR[1]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[2]_i_1__1 
       (.I0(RD_DATA_REG[18]),
        .I1(EVEN),
        .I2(RD_DATA_REG[2]),
        .O(\RXDATA_USR[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair330" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[3]_i_1__1 
       (.I0(RD_DATA_REG[19]),
        .I1(EVEN),
        .I2(RD_DATA_REG[3]),
        .O(\RXDATA_USR[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair329" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[4]_i_1__1 
       (.I0(RD_DATA_REG[20]),
        .I1(EVEN),
        .I2(RD_DATA_REG[4]),
        .O(\RXDATA_USR[4]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair328" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[5]_i_1__1 
       (.I0(RD_DATA_REG[21]),
        .I1(EVEN),
        .I2(RD_DATA_REG[5]),
        .O(\RXDATA_USR[5]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair328" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[6]_i_1__1 
       (.I0(RD_DATA_REG[22]),
        .I1(EVEN),
        .I2(RD_DATA_REG[6]),
        .O(\RXDATA_USR[6]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair326" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[7]_i_1__1 
       (.I0(RD_DATA_REG[23]),
        .I1(EVEN),
        .I2(RD_DATA_REG[7]),
        .O(\RXDATA_USR[7]_i_1__1_n_0 ));
  FDRE \RXDATA_USR_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[0]_i_1__1_n_0 ),
        .Q(Q[0]),
        .R(SS));
  FDRE \RXDATA_USR_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[1]_i_1__1_n_0 ),
        .Q(Q[1]),
        .R(SS));
  FDRE \RXDATA_USR_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[2]_i_1__1_n_0 ),
        .Q(Q[2]),
        .R(SS));
  FDRE \RXDATA_USR_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[3]_i_1__1_n_0 ),
        .Q(Q[3]),
        .R(SS));
  FDRE \RXDATA_USR_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[4]_i_1__1_n_0 ),
        .Q(Q[4]),
        .R(SS));
  FDRE \RXDATA_USR_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[5]_i_1__1_n_0 ),
        .Q(Q[5]),
        .R(SS));
  FDRE \RXDATA_USR_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[6]_i_1__1_n_0 ),
        .Q(Q[6]),
        .R(SS));
  FDRE \RXDATA_USR_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[7]_i_1__1_n_0 ),
        .Q(Q[7]),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair325" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXNOTINTABLE_USR_i_1__1
       (.I0(RD_DATA_REG[25]),
        .I1(EVEN),
        .I2(RD_DATA_REG[9]),
        .O(RXNOTINTABLE_USR_i_1__1_n_0));
  FDRE RXNOTINTABLE_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_USR_i_1__1_n_0),
        .Q(RXNOTINTABLE_USR),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair334" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[0]_i_1__1 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in5_in),
        .O(BIN_TO_GRAY[0]));
  (* SOFT_HLUTNM = "soft_lutpair334" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[1]_i_1__1 
       (.I0(p_1_in5_in),
        .I1(p_2_in7_in),
        .O(BIN_TO_GRAY[1]));
  (* SOFT_HLUTNM = "soft_lutpair335" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[2]_i_1__1 
       (.I0(p_2_in7_in),
        .I1(p_3_in9_in),
        .O(BIN_TO_GRAY[2]));
  (* SOFT_HLUTNM = "soft_lutpair335" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[3]_i_1__1 
       (.I0(p_3_in9_in),
        .I1(p_4_in11_in),
        .O(BIN_TO_GRAY[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[4]_i_1__1 
       (.I0(p_4_in11_in),
        .I1(p_5_in13_in),
        .O(BIN_TO_GRAY[4]));
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[5]_i_1__1 
       (.I0(p_5_in13_in),
        .I1(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .O(BIN_TO_GRAY[5]));
  FDSE \WR_ADDR_GRAY_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[0]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[0] ),
        .S(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[1]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[2]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[3]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[4]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDSE \WR_ADDR_GRAY_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[5]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[5] ),
        .S(RESET_OUT));
  FDSE \WR_ADDR_GRAY_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(DATA_IN),
        .S(RESET_OUT));
  FDSE \WR_ADDR_PLUS1_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .Q(WR_ADDR_PLUS1[0]),
        .S(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_1_in5_in),
        .Q(WR_ADDR_PLUS1[1]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_2_in7_in),
        .Q(WR_ADDR_PLUS1[2]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_3_in9_in),
        .Q(WR_ADDR_PLUS1[3]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_4_in11_in),
        .Q(WR_ADDR_PLUS1[4]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_5_in13_in),
        .Q(WR_ADDR_PLUS1[5]),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS1_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(WR_ADDR_PLUS1[6]),
        .S(RESET_OUT));
  LUT1 #(
    .INIT(2'h1)) 
    \WR_ADDR_PLUS2[0]_i_1__1 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair327" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \WR_ADDR_PLUS2[2]_i_1__1 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in5_in),
        .I2(p_2_in7_in),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair319" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \WR_ADDR_PLUS2[3]_i_1__1 
       (.I0(p_3_in9_in),
        .I1(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(p_1_in5_in),
        .I3(p_2_in7_in),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair319" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \WR_ADDR_PLUS2[4]_i_1__1 
       (.I0(p_4_in11_in),
        .I1(p_2_in7_in),
        .I2(p_1_in5_in),
        .I3(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I4(p_3_in9_in),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \WR_ADDR_PLUS2[5]_i_1__1 
       (.I0(p_5_in13_in),
        .I1(p_3_in9_in),
        .I2(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(p_1_in5_in),
        .I4(p_2_in7_in),
        .I5(p_4_in11_in),
        .O(plusOp__0[5]));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \WR_ADDR_PLUS2[6]_i_1__1 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .I1(p_4_in11_in),
        .I2(\WR_ADDR_PLUS2[6]_i_2__1_n_0 ),
        .I3(p_3_in9_in),
        .I4(p_5_in13_in),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair327" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \WR_ADDR_PLUS2[6]_i_2__1 
       (.I0(p_2_in7_in),
        .I1(p_1_in5_in),
        .I2(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .O(\WR_ADDR_PLUS2[6]_i_2__1_n_0 ));
  FDRE \WR_ADDR_PLUS2_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[0]),
        .Q(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS2_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(BIN_TO_GRAY[0]),
        .Q(p_1_in5_in),
        .S(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[2]),
        .Q(p_2_in7_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[3]),
        .Q(p_3_in9_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[4]),
        .Q(p_4_in11_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[5]),
        .Q(p_5_in13_in),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS2_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[6]),
        .Q(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .S(RESET_OUT));
  FDRE \WR_ADDR_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[0]),
        .Q(WR_ADDR[0]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[1]),
        .Q(WR_ADDR[1]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[2]),
        .Q(WR_ADDR[2]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[3]),
        .Q(WR_ADDR[3]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[4]),
        .Q(WR_ADDR[4]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[5]),
        .Q(WR_ADDR[5]),
        .R(RESET_OUT));
  FDSE \WR_ADDR_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[6]),
        .Q(WR_ADDR[6]),
        .S(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(\WR_DATA_REG1_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[9]),
        .Q(p_0_in6_in),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[10]),
        .Q(WR_DATA_REG1[12]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(\WR_DATA_REG1_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[2]),
        .Q(\WR_DATA_REG1_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[3]),
        .Q(\WR_DATA_REG1_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[4]),
        .Q(\WR_DATA_REG1_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[5]),
        .Q(\WR_DATA_REG1_reg_n_0_[5] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[6]),
        .Q(\WR_DATA_REG1_reg_n_0_[6] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[7]),
        .Q(\WR_DATA_REG1_reg_n_0_[7] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[8]),
        .Q(WR_DATA_REG1[9]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[0] ),
        .Q(WR_DATA_REG2[0]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in6_in),
        .Q(WR_DATA_REG2[11]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[12]),
        .Q(WR_DATA_REG2[12]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[1] ),
        .Q(WR_DATA_REG2[1]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[2] ),
        .Q(WR_DATA_REG2[2]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[3] ),
        .Q(WR_DATA_REG2[3]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[4] ),
        .Q(WR_DATA_REG2[4]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[5] ),
        .Q(WR_DATA_REG2[5]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[6] ),
        .Q(WR_DATA_REG2[6]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[7] ),
        .Q(WR_DATA_REG2[7]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[9]),
        .Q(WR_DATA_REG2[9]),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[0] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[0] ),
        .Q(\WR_DATA_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[11] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(p_0_in6_in),
        .Q(\WR_DATA_reg_n_0_[11] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[12] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[12]),
        .Q(\WR_DATA_reg_n_0_[12] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[13] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(REMOVE_IDLE),
        .Q(\WR_DATA_reg_n_0_[13] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[16] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[0]),
        .Q(\WR_DATA_reg_n_0_[16] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[17] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[1]),
        .Q(\WR_DATA_reg_n_0_[17] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[18] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[2]),
        .Q(\WR_DATA_reg_n_0_[18] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[19] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[3]),
        .Q(\WR_DATA_reg_n_0_[19] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[1] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[1] ),
        .Q(\WR_DATA_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[20] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[4]),
        .Q(\WR_DATA_reg_n_0_[20] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[21] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[5]),
        .Q(\WR_DATA_reg_n_0_[21] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[22] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[6]),
        .Q(\WR_DATA_reg_n_0_[22] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[23] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[7]),
        .Q(\WR_DATA_reg_n_0_[23] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[25] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[9]),
        .Q(\WR_DATA_reg_n_0_[25] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[27] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[11]),
        .Q(\WR_DATA_reg_n_0_[27] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[28] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[12]),
        .Q(\WR_DATA_reg_n_0_[28] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[2] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[2] ),
        .Q(\WR_DATA_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[3] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[3] ),
        .Q(\WR_DATA_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[4] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[4] ),
        .Q(\WR_DATA_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[5] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[5] ),
        .Q(\WR_DATA_reg_n_0_[5] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[6] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[6] ),
        .Q(\WR_DATA_reg_n_0_[6] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[7] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[7] ),
        .Q(\WR_DATA_reg_n_0_[7] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[9] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[9]),
        .Q(\WR_DATA_reg_n_0_[9] ),
        .R(RESET_OUT));
  LUT4 #(
    .INIT(16'h4044)) 
    WR_ENABLE_i_1__1
       (.I0(RESET_OUT),
        .I1(WR_TOGGLE),
        .I2(WR_ENABLE_i_2__1_n_0),
        .I3(I1_DETECTED_WR),
        .O(WR_ENABLE_i_1__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair320" *) 
  LUT5 #(
    .INIT(32'hFFBFFFFF)) 
    WR_ENABLE_i_2__1
       (.I0(REMOVE_IDLE_i_2__1_n_0),
        .I1(WR_TOGGLE),
        .I2(I1_DETECTED_WR_REG),
        .I3(REMOVE_IDLE),
        .I4(WR_OCCUPANCY[6]),
        .O(WR_ENABLE_i_2__1_n_0));
  FDRE WR_ENABLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_ENABLE_i_1__1_n_0),
        .Q(WE),
        .R(1'b0));
  FDRE \WR_OCCUPANCY_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[1]),
        .Q(WR_OCCUPANCY[1]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[2]),
        .Q(WR_OCCUPANCY[2]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[3]),
        .Q(WR_OCCUPANCY[3]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[4]),
        .Q(WR_OCCUPANCY[4]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[5]),
        .Q(WR_OCCUPANCY[5]),
        .R(RESET_OUT));
  FDSE \WR_OCCUPANCY_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[6]),
        .Q(WR_OCCUPANCY[6]),
        .S(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair320" *) 
  LUT1 #(
    .INIT(2'h1)) 
    WR_TOGGLE_i_1__1
       (.I0(WR_TOGGLE),
        .O(WR_TOGGLE_i_1__1_n_0));
  FDSE WR_TOGGLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_TOGGLE_i_1__1_n_0),
        .Q(WR_TOGGLE),
        .S(RESET_OUT));
  FDRE insert_idle_reg_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE),
        .Q(insert_idle_reg),
        .R(SS));
endmodule

(* ORIG_REF_NAME = "QSGMII_RX_ELASTIC_BUFFER" *) 
module qsgmii_1218_QSGMII_RX_ELASTIC_BUFFER_74
   (RXCLKCORCNT_CH3,
    RXCHARISCOMMA_USR,
    RXCHARISK_USR,
    RXNOTINTABLE_USR,
    RXBUFSTATUS_CH3,
    Q,
    userclk,
    rxrecclk,
    SS,
    RESET_OUT,
    D,
    SR,
    MGT_RX_RESET);
  output [1:0]RXCLKCORCNT_CH3;
  output RXCHARISCOMMA_USR;
  output RXCHARISK_USR;
  output RXNOTINTABLE_USR;
  output [0:0]RXBUFSTATUS_CH3;
  output [7:0]Q;
  input userclk;
  input rxrecclk;
  input [0:0]SS;
  input RESET_OUT;
  input [10:0]D;
  input [0:0]SR;
  input MGT_RX_RESET;

  wire [5:0]BIN_TO_GRAY;
  wire [10:0]D;
  wire D5P6_WR_REG;
  wire D5P6_WR_REG_i_2__2_n_0;
  wire DATA_IN;
  wire DATA_OUT;
  wire EVEN;
  wire EVEN_i_1__2_n_0;
  wire \GEN_FIFO[0].RD_DATA_reg_n_0_[0] ;
  wire \GEN_FIFO[11].RD_DATA_reg_n_0_[11] ;
  wire \GEN_FIFO[12].RD_DATA_reg_n_0_[12] ;
  wire \GEN_FIFO[13].RD_DATA_reg_n_0_[13] ;
  wire \GEN_FIFO[1].RD_DATA_reg_n_0_[1] ;
  wire \GEN_FIFO[25].RD_DATA_reg_n_0_[25] ;
  wire \GEN_FIFO[27].RD_DATA_reg_n_0_[27] ;
  wire \GEN_FIFO[28].RD_DATA_reg ;
  wire \GEN_FIFO[2].RD_DATA_reg_n_0_[2] ;
  wire \GEN_FIFO[3].RD_DATA_reg_n_0_[3] ;
  wire \GEN_FIFO[4].RD_DATA_reg_n_0_[4] ;
  wire \GEN_FIFO[5].RD_DATA_reg_n_0_[5] ;
  wire \GEN_FIFO[6].RD_DATA_reg_n_0_[6] ;
  wire \GEN_FIFO[7].RD_DATA_reg_n_0_[7] ;
  wire \GEN_FIFO[9].RD_DATA_reg_n_0_[9] ;
  wire [4:0]GRAY_TO_BIN;
  wire I1_DETECTED_WR;
  wire I1_DETECTED_WR_REG;
  wire I1_DETECTED_WR_REG_i_2__2_n_0;
  wire INSERT_IDLE;
  wire INSERT_IDLE_i_1__6_n_0;
  wire K28P5_WR_REG;
  wire K28P5_WR_REG_i_2__2_n_0;
  wire MGT_RX_RESET;
  wire [7:0]Q;
  wire [6:0]RD_ADDR;
  wire [6:0]RD_ADDR_GRAY;
  wire \RD_ADDR_GRAY[0]_i_1__2_n_0 ;
  wire \RD_ADDR_GRAY[1]_i_1__2_n_0 ;
  wire \RD_ADDR_GRAY[2]_i_1__2_n_0 ;
  wire \RD_ADDR_GRAY[3]_i_1__2_n_0 ;
  wire \RD_ADDR_GRAY[4]_i_1__2_n_0 ;
  wire \RD_ADDR_GRAY[5]_i_1__2_n_0 ;
  wire [6:0]RD_ADDR_PLUS1;
  wire \RD_ADDR_PLUS2[6]_i_2__2_n_0 ;
  wire \RD_ADDR_PLUS2_reg_n_0_[0] ;
  wire \RD_ADDR_PLUS2_reg_n_0_[2] ;
  wire \RD_ADDR_PLUS2_reg_n_0_[6] ;
  wire RD_DATA_RAM_0;
  wire RD_DATA_RAM_1;
  wire RD_DATA_RAM_11;
  wire RD_DATA_RAM_12;
  wire RD_DATA_RAM_13;
  wire RD_DATA_RAM_16;
  wire RD_DATA_RAM_17;
  wire RD_DATA_RAM_18;
  wire RD_DATA_RAM_19;
  wire RD_DATA_RAM_2;
  wire RD_DATA_RAM_20;
  wire RD_DATA_RAM_21;
  wire RD_DATA_RAM_22;
  wire RD_DATA_RAM_23;
  wire RD_DATA_RAM_25;
  wire RD_DATA_RAM_27;
  wire RD_DATA_RAM_28;
  wire RD_DATA_RAM_3;
  wire RD_DATA_RAM_4;
  wire RD_DATA_RAM_5;
  wire RD_DATA_RAM_6;
  wire RD_DATA_RAM_7;
  wire RD_DATA_RAM_9;
  wire [28:0]RD_DATA_REG;
  wire RD_ENABLE;
  wire RD_ENABLE0;
  wire RD_ENABLE24_out;
  wire RD_ENABLE_i_10__2_n_0;
  wire RD_ENABLE_i_11__2_n_0;
  wire RD_ENABLE_i_1__2_n_0;
  wire RD_ENABLE_i_3__2_n_0;
  wire RD_ENABLE_i_4__2_n_0;
  wire RD_ENABLE_i_5__2_n_0;
  wire RD_ENABLE_i_7__2_n_0;
  wire RD_ENABLE_i_8__2_n_0;
  wire RD_ENABLE_i_9__2_n_0;
  wire [6:0]RD_OCCUPANCY;
  wire [6:0]RD_OCCUPANCY01_out;
  wire \RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ;
  wire \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ;
  wire \RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY_n_1 ;
  wire \RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ;
  wire \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 ;
  wire REMOVE_IDLE;
  wire REMOVE_IDLE_i_1__2_n_0;
  wire REMOVE_IDLE_i_2__2_n_0;
  wire RESET_OUT;
  wire RXBUFERR_i_1__2_n_0;
  wire RXBUFERR_i_2__2_n_0;
  wire RXBUFERR_i_3__2_n_0;
  wire [0:0]RXBUFSTATUS_CH3;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISCOMMA_USR_i_1__2_n_0;
  wire RXCHARISK_USR;
  wire RXCHARISK_USR_i_1__2_n_0;
  wire \RXCLKCORCNT[0]_i_1__2_n_0 ;
  wire \RXCLKCORCNT[2]_i_1__2_n_0 ;
  wire [1:0]RXCLKCORCNT_CH3;
  wire \RXDATA_USR[0]_i_1__2_n_0 ;
  wire \RXDATA_USR[1]_i_1__2_n_0 ;
  wire \RXDATA_USR[2]_i_1__2_n_0 ;
  wire \RXDATA_USR[3]_i_1__2_n_0 ;
  wire \RXDATA_USR[4]_i_1__2_n_0 ;
  wire \RXDATA_USR[5]_i_1__2_n_0 ;
  wire \RXDATA_USR[6]_i_1__2_n_0 ;
  wire \RXDATA_USR[7]_i_1__2_n_0 ;
  wire RXNOTINTABLE_USR;
  wire RXNOTINTABLE_USR_i_1__2_n_0;
  wire [0:0]SR;
  wire [0:0]SS;
  wire WE;
  wire [6:0]WR_ADDR;
  wire \WR_ADDR_GRAY_reg_n_0_[0] ;
  wire \WR_ADDR_GRAY_reg_n_0_[1] ;
  wire \WR_ADDR_GRAY_reg_n_0_[2] ;
  wire \WR_ADDR_GRAY_reg_n_0_[3] ;
  wire \WR_ADDR_GRAY_reg_n_0_[4] ;
  wire \WR_ADDR_GRAY_reg_n_0_[5] ;
  wire [6:0]WR_ADDR_PLUS1;
  wire \WR_ADDR_PLUS2[6]_i_2__2_n_0 ;
  wire \WR_ADDR_PLUS2_reg_n_0_[0] ;
  wire \WR_ADDR_PLUS2_reg_n_0_[6] ;
  wire [12:9]WR_DATA_REG1;
  wire \WR_DATA_REG1_reg_n_0_[0] ;
  wire \WR_DATA_REG1_reg_n_0_[1] ;
  wire \WR_DATA_REG1_reg_n_0_[2] ;
  wire \WR_DATA_REG1_reg_n_0_[3] ;
  wire \WR_DATA_REG1_reg_n_0_[4] ;
  wire \WR_DATA_REG1_reg_n_0_[5] ;
  wire \WR_DATA_REG1_reg_n_0_[6] ;
  wire \WR_DATA_REG1_reg_n_0_[7] ;
  wire [12:0]WR_DATA_REG2;
  wire \WR_DATA_reg_n_0_[0] ;
  wire \WR_DATA_reg_n_0_[11] ;
  wire \WR_DATA_reg_n_0_[12] ;
  wire \WR_DATA_reg_n_0_[13] ;
  wire \WR_DATA_reg_n_0_[16] ;
  wire \WR_DATA_reg_n_0_[17] ;
  wire \WR_DATA_reg_n_0_[18] ;
  wire \WR_DATA_reg_n_0_[19] ;
  wire \WR_DATA_reg_n_0_[1] ;
  wire \WR_DATA_reg_n_0_[20] ;
  wire \WR_DATA_reg_n_0_[21] ;
  wire \WR_DATA_reg_n_0_[22] ;
  wire \WR_DATA_reg_n_0_[23] ;
  wire \WR_DATA_reg_n_0_[25] ;
  wire \WR_DATA_reg_n_0_[27] ;
  wire \WR_DATA_reg_n_0_[28] ;
  wire \WR_DATA_reg_n_0_[2] ;
  wire \WR_DATA_reg_n_0_[3] ;
  wire \WR_DATA_reg_n_0_[4] ;
  wire \WR_DATA_reg_n_0_[5] ;
  wire \WR_DATA_reg_n_0_[6] ;
  wire \WR_DATA_reg_n_0_[7] ;
  wire \WR_DATA_reg_n_0_[9] ;
  wire WR_ENABLE_i_1__2_n_0;
  wire WR_ENABLE_i_2__2_n_0;
  wire [6:1]WR_OCCUPANCY;
  wire [6:1]WR_OCCUPANCY00_out;
  wire WR_TOGGLE;
  wire WR_TOGGLE_i_1__2_n_0;
  wire insert_idle_reg;
  wire p_0_in6_in;
  wire p_0_out;
  wire p_17_in;
  wire p_1_in;
  wire p_1_in18_in;
  wire p_1_in5_in;
  wire [7:0]p_2_in;
  wire p_2_in21_in;
  wire p_2_in7_in;
  wire p_2_out;
  wire p_3_in;
  wire p_3_in24_in;
  wire p_3_in9_in;
  wire p_3_out;
  wire p_4_in;
  wire p_4_in11_in;
  wire p_4_out;
  wire p_5_in;
  wire p_5_in13_in;
  wire p_5_out;
  wire p_8_in;
  wire p_9_in;
  wire [6:0]plusOp;
  wire [6:0]plusOp__0;
  wire rxrecclk;
  wire userclk;
  wire \NLW_GEN_FIFO[0].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[11].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[12].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[13].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[16].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[17].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[18].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[19].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[1].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[20].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[21].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[22].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[23].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[25].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[27].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[28].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[2].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[3].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[4].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[5].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[6].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[7].DIST_RAM_SPO_UNCONNECTED ;
  wire \NLW_GEN_FIFO[9].DIST_RAM_SPO_UNCONNECTED ;

  LUT5 #(
    .INIT(32'h10000004)) 
    D5P6_WR_REG_i_1__2
       (.I0(D5P6_WR_REG_i_2__2_n_0),
        .I1(\WR_DATA_REG1_reg_n_0_[4] ),
        .I2(\WR_DATA_REG1_reg_n_0_[2] ),
        .I3(\WR_DATA_REG1_reg_n_0_[0] ),
        .I4(\WR_DATA_REG1_reg_n_0_[7] ),
        .O(p_8_in));
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    D5P6_WR_REG_i_2__2
       (.I0(\WR_DATA_REG1_reg_n_0_[6] ),
        .I1(\WR_DATA_REG1_reg_n_0_[1] ),
        .I2(\WR_DATA_REG1_reg_n_0_[5] ),
        .I3(p_0_in6_in),
        .I4(\WR_DATA_REG1_reg_n_0_[3] ),
        .O(D5P6_WR_REG_i_2__2_n_0));
  FDRE D5P6_WR_REG_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_8_in),
        .Q(D5P6_WR_REG),
        .R(RESET_OUT));
  LUT1 #(
    .INIT(2'h1)) 
    EVEN_i_1__2
       (.I0(EVEN),
        .O(EVEN_i_1__2_n_0));
  FDSE EVEN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EVEN_i_1__2_n_0),
        .Q(EVEN),
        .S(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[0].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[0] ),
        .DPO(RD_DATA_RAM_0),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[0].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[0].RD_DATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_0),
        .Q(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[11].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[11] ),
        .DPO(RD_DATA_RAM_11),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[11].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[11].RD_DATA_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_11),
        .Q(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[12].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[12] ),
        .DPO(RD_DATA_RAM_12),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[12].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[12].RD_DATA_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_12),
        .Q(\GEN_FIFO[12].RD_DATA_reg_n_0_[12] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[13].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[13] ),
        .DPO(RD_DATA_RAM_13),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[13].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[13].RD_DATA_reg[13] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_13),
        .Q(\GEN_FIFO[13].RD_DATA_reg_n_0_[13] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[16].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[16] ),
        .DPO(RD_DATA_RAM_16),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[16].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[16].RD_DATA_reg[16] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_16),
        .Q(p_2_in[0]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[17].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[17] ),
        .DPO(RD_DATA_RAM_17),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[17].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[17].RD_DATA_reg[17] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_17),
        .Q(p_2_in[1]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[18].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[18] ),
        .DPO(RD_DATA_RAM_18),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[18].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[18].RD_DATA_reg[18] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_18),
        .Q(p_2_in[2]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[19].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[19] ),
        .DPO(RD_DATA_RAM_19),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[19].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[19].RD_DATA_reg[19] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_19),
        .Q(p_2_in[3]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[1].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[1] ),
        .DPO(RD_DATA_RAM_1),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[1].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[1].RD_DATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_1),
        .Q(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[20].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[20] ),
        .DPO(RD_DATA_RAM_20),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[20].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[20].RD_DATA_reg[20] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_20),
        .Q(p_2_in[4]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[21].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[21] ),
        .DPO(RD_DATA_RAM_21),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[21].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[21].RD_DATA_reg[21] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_21),
        .Q(p_2_in[5]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[22].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[22] ),
        .DPO(RD_DATA_RAM_22),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[22].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[22].RD_DATA_reg[22] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_22),
        .Q(p_2_in[6]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[23].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[23] ),
        .DPO(RD_DATA_RAM_23),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[23].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[23].RD_DATA_reg[23] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_23),
        .Q(p_2_in[7]),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[25].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[25] ),
        .DPO(RD_DATA_RAM_25),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[25].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[25].RD_DATA_reg[25] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_25),
        .Q(\GEN_FIFO[25].RD_DATA_reg_n_0_[25] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[27].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[27] ),
        .DPO(RD_DATA_RAM_27),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[27].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[27].RD_DATA_reg[27] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_27),
        .Q(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[28].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[28] ),
        .DPO(RD_DATA_RAM_28),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[28].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[28].RD_DATA_reg[28] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_28),
        .Q(\GEN_FIFO[28].RD_DATA_reg ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[2].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[2] ),
        .DPO(RD_DATA_RAM_2),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[2].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[2].RD_DATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_2),
        .Q(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[3].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[3] ),
        .DPO(RD_DATA_RAM_3),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[3].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[3].RD_DATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_3),
        .Q(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[4].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[4] ),
        .DPO(RD_DATA_RAM_4),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[4].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[4].RD_DATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_4),
        .Q(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[5].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[5] ),
        .DPO(RD_DATA_RAM_5),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[5].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[5].RD_DATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_5),
        .Q(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[6].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[6] ),
        .DPO(RD_DATA_RAM_6),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[6].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[6].RD_DATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_6),
        .Q(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[7].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[7] ),
        .DPO(RD_DATA_RAM_7),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[7].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[7].RD_DATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_7),
        .Q(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .R(SS));
  (* BOX_TYPE = "PRIMITIVE" *) 
  RAM128X1D #(
    .INIT(128'h00000000000000000000000000000000),
    .IS_WCLK_INVERTED(1'b0)) 
    \GEN_FIFO[9].DIST_RAM 
       (.A(WR_ADDR),
        .D(\WR_DATA_reg_n_0_[9] ),
        .DPO(RD_DATA_RAM_9),
        .DPRA(RD_ADDR),
        .SPO(\NLW_GEN_FIFO[9].DIST_RAM_SPO_UNCONNECTED ),
        .WCLK(rxrecclk),
        .WE(WE));
  FDRE \GEN_FIFO[9].RD_DATA_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_DATA_RAM_9),
        .Q(\GEN_FIFO[9].RD_DATA_reg_n_0_[9] ),
        .R(SS));
  LUT4 #(
    .INIT(16'h8F88)) 
    I1_DETECTED_WR_REG_i_1__2
       (.I0(p_8_in),
        .I1(K28P5_WR_REG),
        .I2(I1_DETECTED_WR_REG_i_2__2_n_0),
        .I3(D5P6_WR_REG),
        .O(I1_DETECTED_WR));
  (* SOFT_HLUTNM = "soft_lutpair340" *) 
  LUT4 #(
    .INIT(16'hFFFD)) 
    I1_DETECTED_WR_REG_i_2__2
       (.I0(\WR_DATA_REG1_reg_n_0_[3] ),
        .I1(\WR_DATA_REG1_reg_n_0_[0] ),
        .I2(\WR_DATA_REG1_reg_n_0_[1] ),
        .I3(K28P5_WR_REG_i_2__2_n_0),
        .O(I1_DETECTED_WR_REG_i_2__2_n_0));
  FDRE I1_DETECTED_WR_REG_reg
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(I1_DETECTED_WR),
        .Q(I1_DETECTED_WR_REG),
        .R(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair341" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    INSERT_IDLE_i_1__6
       (.I0(SR),
        .I1(MGT_RX_RESET),
        .I2(EVEN),
        .I3(RD_ENABLE0),
        .O(INSERT_IDLE_i_1__6_n_0));
  FDRE INSERT_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE_i_1__6_n_0),
        .Q(INSERT_IDLE),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair340" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    K28P5_WR_REG_i_1__2
       (.I0(K28P5_WR_REG_i_2__2_n_0),
        .I1(\WR_DATA_REG1_reg_n_0_[1] ),
        .I2(\WR_DATA_REG1_reg_n_0_[0] ),
        .I3(\WR_DATA_REG1_reg_n_0_[3] ),
        .O(p_9_in));
  LUT6 #(
    .INIT(64'hDFFFFFFFFFFFFFFF)) 
    K28P5_WR_REG_i_2__2
       (.I0(\WR_DATA_REG1_reg_n_0_[2] ),
        .I1(\WR_DATA_REG1_reg_n_0_[6] ),
        .I2(\WR_DATA_REG1_reg_n_0_[7] ),
        .I3(\WR_DATA_REG1_reg_n_0_[4] ),
        .I4(\WR_DATA_REG1_reg_n_0_[5] ),
        .I5(p_0_in6_in),
        .O(K28P5_WR_REG_i_2__2_n_0));
  FDRE K28P5_WR_REG_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_9_in),
        .Q(K28P5_WR_REG),
        .R(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair349" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[0]_i_1__2 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in),
        .O(\RD_ADDR_GRAY[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair350" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[1]_i_1__2 
       (.I0(p_1_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(\RD_ADDR_GRAY[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair350" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[2]_i_1__2 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I1(p_3_in),
        .O(\RD_ADDR_GRAY[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair351" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[3]_i_1__2 
       (.I0(p_3_in),
        .I1(p_4_in),
        .O(\RD_ADDR_GRAY[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair351" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[4]_i_1__2 
       (.I0(p_4_in),
        .I1(p_5_in),
        .O(\RD_ADDR_GRAY[4]_i_1__2_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \RD_ADDR_GRAY[5]_i_1__2 
       (.I0(p_5_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .O(\RD_ADDR_GRAY[5]_i_1__2_n_0 ));
  FDRE \RD_ADDR_GRAY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[0]_i_1__2_n_0 ),
        .Q(RD_ADDR_GRAY[0]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[1]_i_1__2_n_0 ),
        .Q(RD_ADDR_GRAY[1]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[2]_i_1__2_n_0 ),
        .Q(RD_ADDR_GRAY[2]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[3]_i_1__2_n_0 ),
        .Q(RD_ADDR_GRAY[3]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[4]_i_1__2_n_0 ),
        .Q(RD_ADDR_GRAY[4]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY[5]_i_1__2_n_0 ),
        .Q(RD_ADDR_GRAY[5]),
        .R(SS));
  FDRE \RD_ADDR_GRAY_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(RD_ADDR_GRAY[6]),
        .R(SS));
  FDSE \RD_ADDR_PLUS1_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .Q(RD_ADDR_PLUS1[0]),
        .S(SS));
  FDRE \RD_ADDR_PLUS1_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_1_in),
        .Q(RD_ADDR_PLUS1[1]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .Q(RD_ADDR_PLUS1[2]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_3_in),
        .Q(RD_ADDR_PLUS1[3]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_4_in),
        .Q(RD_ADDR_PLUS1[4]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_5_in),
        .Q(RD_ADDR_PLUS1[5]),
        .R(SS));
  FDRE \RD_ADDR_PLUS1_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(RD_ADDR_PLUS1[6]),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair349" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \RD_ADDR_PLUS2[0]_i_1__2 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair342" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \RD_ADDR_PLUS2[2]_i_1__2 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair342" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \RD_ADDR_PLUS2[3]_i_1__2 
       (.I0(p_1_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I3(p_3_in),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair336" *) 
  LUT5 #(
    .INIT(32'h7FFF8000)) 
    \RD_ADDR_PLUS2[4]_i_1__2 
       (.I0(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(p_1_in),
        .I3(p_3_in),
        .I4(p_4_in),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h7FFFFFFF80000000)) 
    \RD_ADDR_PLUS2[5]_i_1__2 
       (.I0(p_3_in),
        .I1(p_1_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I4(p_4_in),
        .I5(p_5_in),
        .O(plusOp[5]));
  LUT3 #(
    .INIT(8'h78)) 
    \RD_ADDR_PLUS2[6]_i_1__2 
       (.I0(\RD_ADDR_PLUS2[6]_i_2__2_n_0 ),
        .I1(p_5_in),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair336" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \RD_ADDR_PLUS2[6]_i_2__2 
       (.I0(p_4_in),
        .I1(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .I2(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(p_1_in),
        .I4(p_3_in),
        .O(\RD_ADDR_PLUS2[6]_i_2__2_n_0 ));
  FDRE \RD_ADDR_PLUS2_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[0]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[0] ),
        .R(SS));
  FDSE \RD_ADDR_PLUS2_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\RD_ADDR_GRAY[0]_i_1__2_n_0 ),
        .Q(p_1_in),
        .S(SS));
  FDRE \RD_ADDR_PLUS2_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[2]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[2] ),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[3]),
        .Q(p_3_in),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[4]),
        .Q(p_4_in),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[5]),
        .Q(p_5_in),
        .R(SS));
  FDRE \RD_ADDR_PLUS2_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(plusOp[6]),
        .Q(\RD_ADDR_PLUS2_reg_n_0_[6] ),
        .R(SS));
  FDRE \RD_ADDR_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[0]),
        .Q(RD_ADDR[0]),
        .R(SS));
  FDRE \RD_ADDR_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[1]),
        .Q(RD_ADDR[1]),
        .R(SS));
  FDRE \RD_ADDR_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[2]),
        .Q(RD_ADDR[2]),
        .R(SS));
  FDRE \RD_ADDR_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[3]),
        .Q(RD_ADDR[3]),
        .R(SS));
  FDRE \RD_ADDR_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[4]),
        .Q(RD_ADDR[4]),
        .R(SS));
  FDRE \RD_ADDR_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[5]),
        .Q(RD_ADDR[5]),
        .R(SS));
  FDRE \RD_ADDR_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(RD_ADDR_PLUS1[6]),
        .Q(RD_ADDR[6]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[0] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .Q(RD_DATA_REG[0]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[11] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .Q(RD_DATA_REG[11]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[12] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[12].RD_DATA_reg_n_0_[12] ),
        .Q(RD_DATA_REG[12]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[13] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[13].RD_DATA_reg_n_0_[13] ),
        .Q(RD_DATA_REG[13]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[16] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[0]),
        .Q(RD_DATA_REG[16]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[17] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[1]),
        .Q(RD_DATA_REG[17]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[18] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[2]),
        .Q(RD_DATA_REG[18]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[19] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[3]),
        .Q(RD_DATA_REG[19]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[1] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .Q(RD_DATA_REG[1]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[20] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[4]),
        .Q(RD_DATA_REG[20]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[21] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[5]),
        .Q(RD_DATA_REG[21]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[22] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[6]),
        .Q(RD_DATA_REG[22]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[23] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(p_2_in[7]),
        .Q(RD_DATA_REG[23]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[25] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[25].RD_DATA_reg_n_0_[25] ),
        .Q(RD_DATA_REG[25]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[27] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .Q(RD_DATA_REG[27]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[28] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[28].RD_DATA_reg ),
        .Q(RD_DATA_REG[28]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[2] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .Q(RD_DATA_REG[2]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[3] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .Q(RD_DATA_REG[3]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[4] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .Q(RD_DATA_REG[4]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[5] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .Q(RD_DATA_REG[5]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[6] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .Q(RD_DATA_REG[6]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[7] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .Q(RD_DATA_REG[7]),
        .R(SS));
  FDRE \RD_DATA_REG_reg[9] 
       (.C(userclk),
        .CE(RD_ENABLE),
        .D(\GEN_FIFO[9].RD_DATA_reg_n_0_[9] ),
        .Q(RD_DATA_REG[9]),
        .R(SS));
  LUT3 #(
    .INIT(8'h04)) 
    RD_ENABLE_i_10__2
       (.I0(p_2_in[1]),
        .I1(p_2_in[2]),
        .I2(p_2_in[0]),
        .O(RD_ENABLE_i_10__2_n_0));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    RD_ENABLE_i_11__2
       (.I0(p_2_in[3]),
        .I1(p_2_in[4]),
        .I2(p_2_in[5]),
        .I3(p_2_in[6]),
        .I4(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .I5(p_2_in[7]),
        .O(RD_ENABLE_i_11__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair341" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    RD_ENABLE_i_1__2
       (.I0(SR),
        .I1(MGT_RX_RESET),
        .I2(EVEN),
        .I3(RD_ENABLE0),
        .O(RD_ENABLE_i_1__2_n_0));
  LUT5 #(
    .INIT(32'h000E0000)) 
    RD_ENABLE_i_2__2
       (.I0(RD_ENABLE_i_3__2_n_0),
        .I1(RD_ENABLE_i_4__2_n_0),
        .I2(RD_ENABLE_i_5__2_n_0),
        .I3(RD_OCCUPANCY[6]),
        .I4(RD_ENABLE24_out),
        .O(RD_ENABLE0));
  LUT5 #(
    .INIT(32'h00800200)) 
    RD_ENABLE_i_3__2
       (.I0(RD_ENABLE_i_7__2_n_0),
        .I1(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .I2(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .I3(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .I4(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .O(RD_ENABLE_i_3__2_n_0));
  LUT5 #(
    .INIT(32'h00800200)) 
    RD_ENABLE_i_4__2
       (.I0(RD_ENABLE_i_8__2_n_0),
        .I1(p_2_in[2]),
        .I2(p_2_in[0]),
        .I3(p_2_in[4]),
        .I4(p_2_in[7]),
        .O(RD_ENABLE_i_4__2_n_0));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    RD_ENABLE_i_5__2
       (.I0(RD_OCCUPANCY[4]),
        .I1(RD_OCCUPANCY[5]),
        .I2(RD_OCCUPANCY[2]),
        .I3(RD_OCCUPANCY[3]),
        .I4(RD_OCCUPANCY[1]),
        .I5(RD_OCCUPANCY[0]),
        .O(RD_ENABLE_i_5__2_n_0));
  LUT6 #(
    .INIT(64'hFFFF040004000400)) 
    RD_ENABLE_i_6__2
       (.I0(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .I1(\GEN_FIFO[2].RD_DATA_reg_n_0_[2] ),
        .I2(\GEN_FIFO[0].RD_DATA_reg_n_0_[0] ),
        .I3(RD_ENABLE_i_9__2_n_0),
        .I4(RD_ENABLE_i_10__2_n_0),
        .I5(RD_ENABLE_i_11__2_n_0),
        .O(RD_ENABLE24_out));
  LUT5 #(
    .INIT(32'h00010000)) 
    RD_ENABLE_i_7__2
       (.I0(\GEN_FIFO[1].RD_DATA_reg_n_0_[1] ),
        .I1(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .I2(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .I3(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .I4(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .O(RD_ENABLE_i_7__2_n_0));
  LUT5 #(
    .INIT(32'h00010000)) 
    RD_ENABLE_i_8__2
       (.I0(p_2_in[1]),
        .I1(p_2_in[3]),
        .I2(p_2_in[5]),
        .I3(\GEN_FIFO[27].RD_DATA_reg_n_0_[27] ),
        .I4(p_2_in[6]),
        .O(RD_ENABLE_i_8__2_n_0));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    RD_ENABLE_i_9__2
       (.I0(\GEN_FIFO[3].RD_DATA_reg_n_0_[3] ),
        .I1(\GEN_FIFO[4].RD_DATA_reg_n_0_[4] ),
        .I2(\GEN_FIFO[5].RD_DATA_reg_n_0_[5] ),
        .I3(\GEN_FIFO[6].RD_DATA_reg_n_0_[6] ),
        .I4(\GEN_FIFO[11].RD_DATA_reg_n_0_[11] ),
        .I5(\GEN_FIFO[7].RD_DATA_reg_n_0_[7] ),
        .O(RD_ENABLE_i_9__2_n_0));
  FDRE RD_ENABLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RD_ENABLE_i_1__2_n_0),
        .Q(RD_ENABLE),
        .R(1'b0));
  FDRE \RD_OCCUPANCY_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[0]),
        .Q(RD_OCCUPANCY[0]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[1]),
        .Q(RD_OCCUPANCY[1]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[2]),
        .Q(RD_OCCUPANCY[2]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[3]),
        .Q(RD_OCCUPANCY[3]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[4]),
        .Q(RD_OCCUPANCY[4]),
        .R(SS));
  FDRE \RD_OCCUPANCY_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[5]),
        .Q(RD_OCCUPANCY[5]),
        .R(SS));
  FDSE \RD_OCCUPANCY_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(RD_OCCUPANCY01_out[6]),
        .Q(RD_OCCUPANCY[6]),
        .S(SS));
  qsgmii_1218_qsgmii_sync_block \RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY 
       (.Q(RD_ADDR_GRAY[0]),
        .data_out(\RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_79 \RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY 
       (.CO(\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ),
        .D(WR_OCCUPANCY00_out[3:1]),
        .Q(WR_ADDR[3:0]),
        .\RD_ADDR_GRAY_reg[1] (RD_ADDR_GRAY[1]),
        .S({\RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ,\RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 }),
        .data_out(p_2_in21_in),
        .data_sync_reg6_0(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg6_1(p_17_in),
        .data_sync_reg6_2(p_1_in18_in),
        .data_sync_reg6_3(p_3_in24_in),
        .data_sync_reg6_4(\RECLOCK_RD_ADDRGRAY[0].SYNC_RD_ADDRGRAY_n_0 ),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_80 \RECLOCK_RD_ADDRGRAY[2].SYNC_RD_ADDRGRAY 
       (.Q(RD_ADDR_GRAY[2]),
        .data_out(p_3_in24_in),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_81 \RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[2]),
        .\RD_ADDR_GRAY_reg[3] (RD_ADDR_GRAY[3]),
        .S(\RECLOCK_RD_ADDRGRAY[3].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(p_2_in21_in),
        .data_sync_reg6_0(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg6_1(p_17_in),
        .data_sync_reg6_2(p_1_in18_in),
        .data_sync_reg6_3(p_3_in24_in),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_82 \RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[3]),
        .\RD_ADDR_GRAY_reg[4] (RD_ADDR_GRAY[4]),
        .S(\RECLOCK_RD_ADDRGRAY[4].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(p_1_in18_in),
        .data_sync_reg6_0(p_17_in),
        .data_sync_reg6_1(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg6_2(p_2_in21_in),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_83 \RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY 
       (.Q(WR_ADDR[4]),
        .\RD_ADDR_GRAY_reg[5] (RD_ADDR_GRAY[5]),
        .S(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .data_sync_reg6_0(p_17_in),
        .data_sync_reg6_1(p_1_in18_in),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_84 \RECLOCK_RD_ADDRGRAY[6].SYNC_RD_ADDRGRAY 
       (.CO(\RECLOCK_RD_ADDRGRAY[1].SYNC_RD_ADDRGRAY_n_0 ),
        .D(WR_OCCUPANCY00_out[6:4]),
        .Q(WR_ADDR[6:4]),
        .\RD_ADDR_GRAY_reg[6] (RD_ADDR_GRAY[6]),
        .S(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_0 ),
        .data_out(p_17_in),
        .data_sync_reg6_0(\RECLOCK_RD_ADDRGRAY[5].SYNC_RD_ADDRGRAY_n_1 ),
        .rxrecclk(rxrecclk));
  qsgmii_1218_qsgmii_sync_block_85 \RECLOCK_WR_ADDRGRAY[0].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[0]),
        .GRAY_TO_BIN(GRAY_TO_BIN[1]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[0] ),
        .data_out(p_0_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_86 \RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY 
       (.CO(\RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY_n_1 ),
        .D(RD_OCCUPANCY01_out[3:0]),
        .DI({GRAY_TO_BIN[3:2],GRAY_TO_BIN[0]}),
        .GRAY_TO_BIN(GRAY_TO_BIN[1]),
        .Q(RD_ADDR[1:0]),
        .S({\RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 }),
        .\WR_ADDR_GRAY_reg[1] (\WR_ADDR_GRAY_reg_n_0_[1] ),
        .data_out(p_0_out),
        .data_sync_reg6_0(p_3_out),
        .data_sync_reg6_1(p_5_out),
        .data_sync_reg6_2(DATA_OUT),
        .data_sync_reg6_3(p_4_out),
        .data_sync_reg6_4(p_2_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_87 \RECLOCK_WR_ADDRGRAY[2].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[2]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[2] ),
        .data_out(p_2_out),
        .data_sync_reg6_0(p_4_out),
        .data_sync_reg6_1(DATA_OUT),
        .data_sync_reg6_2(p_5_out),
        .data_sync_reg6_3(p_3_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_88 \RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[3]),
        .Q(RD_ADDR[2]),
        .S(\RECLOCK_WR_ADDRGRAY[3].SYNC_WR_ADDRGRAY_n_0 ),
        .\WR_ADDR_GRAY_reg[3] (\WR_ADDR_GRAY_reg_n_0_[3] ),
        .data_out(p_3_out),
        .data_sync_reg6_0(p_5_out),
        .data_sync_reg6_1(DATA_OUT),
        .data_sync_reg6_2(p_4_out),
        .data_sync_reg6_3(p_2_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_89 \RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY 
       (.DI(GRAY_TO_BIN[4]),
        .Q(RD_ADDR[3]),
        .S(\RECLOCK_WR_ADDRGRAY[4].SYNC_WR_ADDRGRAY_n_0 ),
        .\WR_ADDR_GRAY_reg[4] (\WR_ADDR_GRAY_reg_n_0_[4] ),
        .data_out(p_4_out),
        .data_sync_reg6_0(DATA_OUT),
        .data_sync_reg6_1(p_5_out),
        .data_sync_reg6_2(p_3_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_90 \RECLOCK_WR_ADDRGRAY[5].SYNC_WR_ADDRGRAY 
       (.CO(\RECLOCK_WR_ADDRGRAY[1].SYNC_WR_ADDRGRAY_n_1 ),
        .D(RD_OCCUPANCY01_out[6:4]),
        .DI(GRAY_TO_BIN[4]),
        .Q(RD_ADDR[4]),
        .S({\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 }),
        .\WR_ADDR_GRAY_reg[5] (\WR_ADDR_GRAY_reg_n_0_[5] ),
        .data_out(p_5_out),
        .data_sync_reg6_0(DATA_OUT),
        .data_sync_reg6_1(p_4_out),
        .userclk(userclk));
  qsgmii_1218_qsgmii_sync_block_91 \RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY 
       (.Q(RD_ADDR[6:5]),
        .S({\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_0 ,\RECLOCK_WR_ADDRGRAY[6].SYNC_WR_ADDRGRAY_n_1 }),
        .\WR_ADDR_GRAY_reg[6] (DATA_IN),
        .data_out(DATA_OUT),
        .data_sync_reg6_0(p_5_out),
        .userclk(userclk));
  LUT6 #(
    .INIT(64'h0000FFFF00800000)) 
    REMOVE_IDLE_i_1__2
       (.I0(I1_DETECTED_WR),
        .I1(WR_OCCUPANCY[6]),
        .I2(I1_DETECTED_WR_REG),
        .I3(REMOVE_IDLE_i_2__2_n_0),
        .I4(WR_TOGGLE),
        .I5(REMOVE_IDLE),
        .O(REMOVE_IDLE_i_1__2_n_0));
  LUT5 #(
    .INIT(32'h00000001)) 
    REMOVE_IDLE_i_2__2
       (.I0(WR_OCCUPANCY[4]),
        .I1(WR_OCCUPANCY[1]),
        .I2(WR_OCCUPANCY[3]),
        .I3(WR_OCCUPANCY[5]),
        .I4(WR_OCCUPANCY[2]),
        .O(REMOVE_IDLE_i_2__2_n_0));
  FDRE REMOVE_IDLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(REMOVE_IDLE_i_1__2_n_0),
        .Q(REMOVE_IDLE),
        .R(RESET_OUT));
  LUT6 #(
    .INIT(64'hFFFFFFFFC0020002)) 
    RXBUFERR_i_1__2
       (.I0(RXBUFERR_i_2__2_n_0),
        .I1(RD_OCCUPANCY[2]),
        .I2(RD_OCCUPANCY[3]),
        .I3(RD_OCCUPANCY[4]),
        .I4(RXBUFERR_i_3__2_n_0),
        .I5(RXBUFSTATUS_CH3),
        .O(RXBUFERR_i_1__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair339" *) 
  LUT4 #(
    .INIT(16'h0007)) 
    RXBUFERR_i_2__2
       (.I0(RD_OCCUPANCY[1]),
        .I1(RD_OCCUPANCY[0]),
        .I2(RD_OCCUPANCY[6]),
        .I3(RD_OCCUPANCY[5]),
        .O(RXBUFERR_i_2__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair339" *) 
  LUT4 #(
    .INIT(16'hE000)) 
    RXBUFERR_i_3__2
       (.I0(RD_OCCUPANCY[1]),
        .I1(RD_OCCUPANCY[0]),
        .I2(RD_OCCUPANCY[6]),
        .I3(RD_OCCUPANCY[5]),
        .O(RXBUFERR_i_3__2_n_0));
  FDRE RXBUFERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXBUFERR_i_1__2_n_0),
        .Q(RXBUFSTATUS_CH3),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair343" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXCHARISCOMMA_USR_i_1__2
       (.I0(RD_DATA_REG[28]),
        .I1(EVEN),
        .I2(RD_DATA_REG[12]),
        .O(RXCHARISCOMMA_USR_i_1__2_n_0));
  FDRE RXCHARISCOMMA_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISCOMMA_USR_i_1__2_n_0),
        .Q(RXCHARISCOMMA_USR),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair344" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXCHARISK_USR_i_1__2
       (.I0(RD_DATA_REG[27]),
        .I1(EVEN),
        .I2(RD_DATA_REG[11]),
        .O(RXCHARISK_USR_i_1__2_n_0));
  FDRE RXCHARISK_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXCHARISK_USR_i_1__2_n_0),
        .Q(RXCHARISK_USR),
        .R(SS));
  LUT3 #(
    .INIT(8'hAE)) 
    \RXCLKCORCNT[0]_i_1__2 
       (.I0(insert_idle_reg),
        .I1(RD_DATA_REG[13]),
        .I2(RXCLKCORCNT_CH3[0]),
        .O(\RXCLKCORCNT[0]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h10100010)) 
    \RXCLKCORCNT[2]_i_1__2 
       (.I0(SR),
        .I1(MGT_RX_RESET),
        .I2(insert_idle_reg),
        .I3(RD_DATA_REG[13]),
        .I4(RXCLKCORCNT_CH3[0]),
        .O(\RXCLKCORCNT[2]_i_1__2_n_0 ));
  FDRE \RXCLKCORCNT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXCLKCORCNT[0]_i_1__2_n_0 ),
        .Q(RXCLKCORCNT_CH3[0]),
        .R(SS));
  FDRE \RXCLKCORCNT_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXCLKCORCNT[2]_i_1__2_n_0 ),
        .Q(RXCLKCORCNT_CH3[1]),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair347" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[0]_i_1__2 
       (.I0(RD_DATA_REG[16]),
        .I1(EVEN),
        .I2(RD_DATA_REG[0]),
        .O(\RXDATA_USR[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair348" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[1]_i_1__2 
       (.I0(RD_DATA_REG[17]),
        .I1(EVEN),
        .I2(RD_DATA_REG[1]),
        .O(\RXDATA_USR[1]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[2]_i_1__2 
       (.I0(RD_DATA_REG[18]),
        .I1(EVEN),
        .I2(RD_DATA_REG[2]),
        .O(\RXDATA_USR[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair348" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[3]_i_1__2 
       (.I0(RD_DATA_REG[19]),
        .I1(EVEN),
        .I2(RD_DATA_REG[3]),
        .O(\RXDATA_USR[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair347" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[4]_i_1__2 
       (.I0(RD_DATA_REG[20]),
        .I1(EVEN),
        .I2(RD_DATA_REG[4]),
        .O(\RXDATA_USR[4]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair346" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[5]_i_1__2 
       (.I0(RD_DATA_REG[21]),
        .I1(EVEN),
        .I2(RD_DATA_REG[5]),
        .O(\RXDATA_USR[5]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair346" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[6]_i_1__2 
       (.I0(RD_DATA_REG[22]),
        .I1(EVEN),
        .I2(RD_DATA_REG[6]),
        .O(\RXDATA_USR[6]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair344" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \RXDATA_USR[7]_i_1__2 
       (.I0(RD_DATA_REG[23]),
        .I1(EVEN),
        .I2(RD_DATA_REG[7]),
        .O(\RXDATA_USR[7]_i_1__2_n_0 ));
  FDRE \RXDATA_USR_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[0]_i_1__2_n_0 ),
        .Q(Q[0]),
        .R(SS));
  FDRE \RXDATA_USR_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[1]_i_1__2_n_0 ),
        .Q(Q[1]),
        .R(SS));
  FDRE \RXDATA_USR_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[2]_i_1__2_n_0 ),
        .Q(Q[2]),
        .R(SS));
  FDRE \RXDATA_USR_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[3]_i_1__2_n_0 ),
        .Q(Q[3]),
        .R(SS));
  FDRE \RXDATA_USR_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[4]_i_1__2_n_0 ),
        .Q(Q[4]),
        .R(SS));
  FDRE \RXDATA_USR_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[5]_i_1__2_n_0 ),
        .Q(Q[5]),
        .R(SS));
  FDRE \RXDATA_USR_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[6]_i_1__2_n_0 ),
        .Q(Q[6]),
        .R(SS));
  FDRE \RXDATA_USR_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXDATA_USR[7]_i_1__2_n_0 ),
        .Q(Q[7]),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair343" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    RXNOTINTABLE_USR_i_1__2
       (.I0(RD_DATA_REG[25]),
        .I1(EVEN),
        .I2(RD_DATA_REG[9]),
        .O(RXNOTINTABLE_USR_i_1__2_n_0));
  FDRE RXNOTINTABLE_USR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RXNOTINTABLE_USR_i_1__2_n_0),
        .Q(RXNOTINTABLE_USR),
        .R(SS));
  (* SOFT_HLUTNM = "soft_lutpair352" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[0]_i_1__2 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in5_in),
        .O(BIN_TO_GRAY[0]));
  (* SOFT_HLUTNM = "soft_lutpair352" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[1]_i_1__2 
       (.I0(p_1_in5_in),
        .I1(p_2_in7_in),
        .O(BIN_TO_GRAY[1]));
  (* SOFT_HLUTNM = "soft_lutpair353" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[2]_i_1__2 
       (.I0(p_2_in7_in),
        .I1(p_3_in9_in),
        .O(BIN_TO_GRAY[2]));
  (* SOFT_HLUTNM = "soft_lutpair353" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[3]_i_1__2 
       (.I0(p_3_in9_in),
        .I1(p_4_in11_in),
        .O(BIN_TO_GRAY[3]));
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[4]_i_1__2 
       (.I0(p_4_in11_in),
        .I1(p_5_in13_in),
        .O(BIN_TO_GRAY[4]));
  LUT2 #(
    .INIT(4'h6)) 
    \WR_ADDR_GRAY[5]_i_1__2 
       (.I0(p_5_in13_in),
        .I1(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .O(BIN_TO_GRAY[5]));
  FDSE \WR_ADDR_GRAY_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[0]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[0] ),
        .S(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[1]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[2]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[3]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_ADDR_GRAY_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[4]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDSE \WR_ADDR_GRAY_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(BIN_TO_GRAY[5]),
        .Q(\WR_ADDR_GRAY_reg_n_0_[5] ),
        .S(RESET_OUT));
  FDSE \WR_ADDR_GRAY_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(DATA_IN),
        .S(RESET_OUT));
  FDSE \WR_ADDR_PLUS1_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .Q(WR_ADDR_PLUS1[0]),
        .S(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_1_in5_in),
        .Q(WR_ADDR_PLUS1[1]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_2_in7_in),
        .Q(WR_ADDR_PLUS1[2]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_3_in9_in),
        .Q(WR_ADDR_PLUS1[3]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_4_in11_in),
        .Q(WR_ADDR_PLUS1[4]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS1_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(p_5_in13_in),
        .Q(WR_ADDR_PLUS1[5]),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS1_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .Q(WR_ADDR_PLUS1[6]),
        .S(RESET_OUT));
  LUT1 #(
    .INIT(2'h1)) 
    \WR_ADDR_PLUS2[0]_i_1__2 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair345" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \WR_ADDR_PLUS2[2]_i_1__2 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I1(p_1_in5_in),
        .I2(p_2_in7_in),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair337" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \WR_ADDR_PLUS2[3]_i_1__2 
       (.I0(p_3_in9_in),
        .I1(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I2(p_1_in5_in),
        .I3(p_2_in7_in),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair337" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \WR_ADDR_PLUS2[4]_i_1__2 
       (.I0(p_4_in11_in),
        .I1(p_2_in7_in),
        .I2(p_1_in5_in),
        .I3(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I4(p_3_in9_in),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \WR_ADDR_PLUS2[5]_i_1__2 
       (.I0(p_5_in13_in),
        .I1(p_3_in9_in),
        .I2(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .I3(p_1_in5_in),
        .I4(p_2_in7_in),
        .I5(p_4_in11_in),
        .O(plusOp__0[5]));
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \WR_ADDR_PLUS2[6]_i_1__2 
       (.I0(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .I1(p_4_in11_in),
        .I2(\WR_ADDR_PLUS2[6]_i_2__2_n_0 ),
        .I3(p_3_in9_in),
        .I4(p_5_in13_in),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair345" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \WR_ADDR_PLUS2[6]_i_2__2 
       (.I0(p_2_in7_in),
        .I1(p_1_in5_in),
        .I2(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .O(\WR_ADDR_PLUS2[6]_i_2__2_n_0 ));
  FDRE \WR_ADDR_PLUS2_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[0]),
        .Q(\WR_ADDR_PLUS2_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS2_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(BIN_TO_GRAY[0]),
        .Q(p_1_in5_in),
        .S(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[2]),
        .Q(p_2_in7_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[3]),
        .Q(p_3_in9_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[4]),
        .Q(p_4_in11_in),
        .R(RESET_OUT));
  FDRE \WR_ADDR_PLUS2_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[5]),
        .Q(p_5_in13_in),
        .R(RESET_OUT));
  FDSE \WR_ADDR_PLUS2_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(plusOp__0[6]),
        .Q(\WR_ADDR_PLUS2_reg_n_0_[6] ),
        .S(RESET_OUT));
  FDRE \WR_ADDR_reg[0] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[0]),
        .Q(WR_ADDR[0]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[1] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[1]),
        .Q(WR_ADDR[1]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[2] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[2]),
        .Q(WR_ADDR[2]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[3] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[3]),
        .Q(WR_ADDR[3]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[4] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[4]),
        .Q(WR_ADDR[4]),
        .R(RESET_OUT));
  FDRE \WR_ADDR_reg[5] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[5]),
        .Q(WR_ADDR[5]),
        .R(RESET_OUT));
  FDSE \WR_ADDR_reg[6] 
       (.C(rxrecclk),
        .CE(WE),
        .D(WR_ADDR_PLUS1[6]),
        .Q(WR_ADDR[6]),
        .S(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[0]),
        .Q(\WR_DATA_REG1_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[9]),
        .Q(p_0_in6_in),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[10]),
        .Q(WR_DATA_REG1[12]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[1]),
        .Q(\WR_DATA_REG1_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[2]),
        .Q(\WR_DATA_REG1_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[3]),
        .Q(\WR_DATA_REG1_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[4]),
        .Q(\WR_DATA_REG1_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[5]),
        .Q(\WR_DATA_REG1_reg_n_0_[5] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[6]),
        .Q(\WR_DATA_REG1_reg_n_0_[6] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[7]),
        .Q(\WR_DATA_REG1_reg_n_0_[7] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG1_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(D[8]),
        .Q(WR_DATA_REG1[9]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[0] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[0] ),
        .Q(WR_DATA_REG2[0]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[11] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(p_0_in6_in),
        .Q(WR_DATA_REG2[11]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[12] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[12]),
        .Q(WR_DATA_REG2[12]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[1] ),
        .Q(WR_DATA_REG2[1]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[2] ),
        .Q(WR_DATA_REG2[2]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[3] ),
        .Q(WR_DATA_REG2[3]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[4] ),
        .Q(WR_DATA_REG2[4]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[5] ),
        .Q(WR_DATA_REG2[5]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[6] ),
        .Q(WR_DATA_REG2[6]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[7] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\WR_DATA_REG1_reg_n_0_[7] ),
        .Q(WR_DATA_REG2[7]),
        .R(RESET_OUT));
  FDRE \WR_DATA_REG2_reg[9] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_DATA_REG1[9]),
        .Q(WR_DATA_REG2[9]),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[0] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[0] ),
        .Q(\WR_DATA_reg_n_0_[0] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[11] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(p_0_in6_in),
        .Q(\WR_DATA_reg_n_0_[11] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[12] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[12]),
        .Q(\WR_DATA_reg_n_0_[12] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[13] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(REMOVE_IDLE),
        .Q(\WR_DATA_reg_n_0_[13] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[16] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[0]),
        .Q(\WR_DATA_reg_n_0_[16] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[17] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[1]),
        .Q(\WR_DATA_reg_n_0_[17] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[18] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[2]),
        .Q(\WR_DATA_reg_n_0_[18] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[19] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[3]),
        .Q(\WR_DATA_reg_n_0_[19] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[1] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[1] ),
        .Q(\WR_DATA_reg_n_0_[1] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[20] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[4]),
        .Q(\WR_DATA_reg_n_0_[20] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[21] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[5]),
        .Q(\WR_DATA_reg_n_0_[21] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[22] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[6]),
        .Q(\WR_DATA_reg_n_0_[22] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[23] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[7]),
        .Q(\WR_DATA_reg_n_0_[23] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[25] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[9]),
        .Q(\WR_DATA_reg_n_0_[25] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[27] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[11]),
        .Q(\WR_DATA_reg_n_0_[27] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[28] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG2[12]),
        .Q(\WR_DATA_reg_n_0_[28] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[2] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[2] ),
        .Q(\WR_DATA_reg_n_0_[2] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[3] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[3] ),
        .Q(\WR_DATA_reg_n_0_[3] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[4] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[4] ),
        .Q(\WR_DATA_reg_n_0_[4] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[5] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[5] ),
        .Q(\WR_DATA_reg_n_0_[5] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[6] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[6] ),
        .Q(\WR_DATA_reg_n_0_[6] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[7] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(\WR_DATA_REG1_reg_n_0_[7] ),
        .Q(\WR_DATA_reg_n_0_[7] ),
        .R(RESET_OUT));
  FDRE \WR_DATA_reg[9] 
       (.C(rxrecclk),
        .CE(WR_TOGGLE),
        .D(WR_DATA_REG1[9]),
        .Q(\WR_DATA_reg_n_0_[9] ),
        .R(RESET_OUT));
  LUT4 #(
    .INIT(16'h4044)) 
    WR_ENABLE_i_1__2
       (.I0(RESET_OUT),
        .I1(WR_TOGGLE),
        .I2(WR_ENABLE_i_2__2_n_0),
        .I3(I1_DETECTED_WR),
        .O(WR_ENABLE_i_1__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair338" *) 
  LUT5 #(
    .INIT(32'hFFBFFFFF)) 
    WR_ENABLE_i_2__2
       (.I0(REMOVE_IDLE_i_2__2_n_0),
        .I1(WR_TOGGLE),
        .I2(I1_DETECTED_WR_REG),
        .I3(REMOVE_IDLE),
        .I4(WR_OCCUPANCY[6]),
        .O(WR_ENABLE_i_2__2_n_0));
  FDRE WR_ENABLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_ENABLE_i_1__2_n_0),
        .Q(WE),
        .R(1'b0));
  FDRE \WR_OCCUPANCY_reg[1] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[1]),
        .Q(WR_OCCUPANCY[1]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[2] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[2]),
        .Q(WR_OCCUPANCY[2]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[3] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[3]),
        .Q(WR_OCCUPANCY[3]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[4] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[4]),
        .Q(WR_OCCUPANCY[4]),
        .R(RESET_OUT));
  FDRE \WR_OCCUPANCY_reg[5] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[5]),
        .Q(WR_OCCUPANCY[5]),
        .R(RESET_OUT));
  FDSE \WR_OCCUPANCY_reg[6] 
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_OCCUPANCY00_out[6]),
        .Q(WR_OCCUPANCY[6]),
        .S(RESET_OUT));
  (* SOFT_HLUTNM = "soft_lutpair338" *) 
  LUT1 #(
    .INIT(2'h1)) 
    WR_TOGGLE_i_1__2
       (.I0(WR_TOGGLE),
        .O(WR_TOGGLE_i_1__2_n_0));
  FDSE WR_TOGGLE_reg
       (.C(rxrecclk),
        .CE(1'b1),
        .D(WR_TOGGLE_i_1__2_n_0),
        .Q(WR_TOGGLE),
        .S(RESET_OUT));
  FDRE insert_idle_reg_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE),
        .Q(insert_idle_reg),
        .R(SS));
endmodule

(* ORIG_REF_NAME = "RX" *) 
module qsgmii_1218_RX
   (K28p5_REG1,
    RX_IDLE,
    S2,
    gmii_rx_er_ch3,
    RX_CONFIG_VALID,
    status_vector_ch3,
    gmii_rx_dv_ch3,
    RX_INVALID,
    I_reg_0,
    I_reg_1,
    ACKNOWLEDGE_MATCH_3,
    SR,
    BASEX_REMOTE_FAULT_RSLVD,
    SGMII_PHY_STATUS_reg,
    S,
    CONSISTENCY_MATCH_reg,
    RECEIVED_IDLE_reg,
    RX_CONFIG_REG_NULL_reg,
    RX_RUDI_INVALID_REG_reg,
    gmii_rxd_ch3,
    Q,
    userclk,
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ,
    I0,
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ,
    D,
    p_0_in,
    RXSYNC_STATUS,
    XMIT_DATA,
    XMIT_DATA_INT_reg,
    EVEN_reg,
    RXEVEN0_out,
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] ,
    out,
    MASK_RUDI_BUFERR,
    \RX_CONFIG_REG_REG_reg[13] ,
    \RX_CONFIG_SNAPSHOT_reg[13] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ,
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ,
    RECEIVED_IDLE,
    RX_CONFIG_REG_NULL_reg_0);
  output K28p5_REG1;
  output RX_IDLE;
  output S2;
  output gmii_rx_er_ch3;
  output RX_CONFIG_VALID;
  output [1:0]status_vector_ch3;
  output gmii_rx_dv_ch3;
  output RX_INVALID;
  output I_reg_0;
  output I_reg_1;
  output ACKNOWLEDGE_MATCH_3;
  output [0:0]SR;
  output [0:0]BASEX_REMOTE_FAULT_RSLVD;
  output [15:0]SGMII_PHY_STATUS_reg;
  output [0:0]S;
  output [0:0]CONSISTENCY_MATCH_reg;
  output RECEIVED_IDLE_reg;
  output RX_CONFIG_REG_NULL_reg;
  output RX_RUDI_INVALID_REG_reg;
  output [7:0]gmii_rxd_ch3;
  input [7:0]Q;
  input userclk;
  input \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;
  input I0;
  input \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  input D;
  input p_0_in;
  input RXSYNC_STATUS;
  input XMIT_DATA;
  input XMIT_DATA_INT_reg;
  input EVEN_reg;
  input RXEVEN0_out;
  input [1:0]\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] ;
  input out;
  input MASK_RUDI_BUFERR;
  input [1:0]\RX_CONFIG_REG_REG_reg[13] ;
  input [1:0]\RX_CONFIG_SNAPSHOT_reg[13] ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  input \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ;
  input RECEIVED_IDLE;
  input RX_CONFIG_REG_NULL_reg_0;

  wire ACKNOWLEDGE_MATCH_3;
  wire [0:0]BASEX_REMOTE_FAULT_RSLVD;
  wire C;
  wire C0;
  wire CGBAD;
  wire CGBAD_REG1;
  wire CGBAD_REG2;
  wire CGBAD_REG3;
  wire [0:0]CONSISTENCY_MATCH_reg;
  wire C_HDR_REMOVED;
  wire C_HDR_REMOVED_REG;
  wire C_REG1;
  wire C_REG2;
  wire C_REG3;
  wire C_i_2__2_n_0;
  wire D;
  wire D0p0;
  wire D0p0_REG;
  wire D0p0_REG_i_2__2_n_0;
  wire D0p0_REG_i_3__2_n_0;
  wire EOP;
  wire EOP0;
  wire EOP_REG1;
  wire EOP_REG10;
  wire EOP_i_2__2_n_0;
  wire EVEN_reg;
  wire EXTEND;
  wire EXTEND_ERR;
  wire EXTEND_ERR0;
  wire EXTEND_REG1;
  wire EXTEND_REG2;
  wire EXTEND_REG3;
  wire EXTEND_i_1__2_n_0;
  wire EXT_ILLEGAL_K;
  wire EXT_ILLEGAL_K0;
  wire EXT_ILLEGAL_K_REG1;
  wire EXT_ILLEGAL_K_REG2;
  wire FALSE_CARRIER;
  wire FALSE_CARRIER0;
  wire FALSE_CARRIER_REG1;
  wire FALSE_CARRIER_REG2;
  wire FALSE_CARRIER_REG3;
  wire FALSE_CARRIER_i_1__2_n_0;
  wire FALSE_CARRIER_i_3__2_n_0;
  wire FALSE_DATA;
  wire FALSE_DATA0;
  wire FALSE_DATA_i_10__2_n_0;
  wire FALSE_DATA_i_2__2_n_0;
  wire FALSE_DATA_i_3__2_n_0;
  wire FALSE_DATA_i_4__2_n_0;
  wire FALSE_DATA_i_5__2_n_0;
  wire FALSE_DATA_i_6__2_n_0;
  wire FALSE_DATA_i_7__2_n_0;
  wire FALSE_DATA_i_8__2_n_0;
  wire FALSE_DATA_i_9__2_n_0;
  wire FALSE_K;
  wire FALSE_K0;
  wire FALSE_K_i_2__2_n_0;
  wire FALSE_NIT;
  wire FALSE_NIT0;
  wire FALSE_NIT_i_2__2_n_0;
  wire FALSE_NIT_i_3__2_n_0;
  wire FALSE_NIT_i_4__2_n_0;
  wire FROM_IDLE_D;
  wire FROM_IDLE_D0;
  wire FROM_RX_CX;
  wire FROM_RX_CX0;
  wire FROM_RX_K;
  wire FROM_RX_K0;
  wire I;
  wire I0;
  wire \IDLE_REG_reg_n_0_[0] ;
  wire \IDLE_REG_reg_n_0_[2] ;
  wire ILLEGAL_K;
  wire ILLEGAL_K0;
  wire ILLEGAL_K_REG1;
  wire ILLEGAL_K_REG2;
  wire I_reg_0;
  wire I_reg_1;
  wire K23p7;
  wire K28p5;
  wire K28p5_REG1;
  wire K28p5_REG1_i_2__2_n_0;
  wire K28p5_REG2;
  wire K29p7;
  wire MASK_RUDI_BUFERR;
  wire [1:0]\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] ;
  wire \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ;
  wire [7:0]Q;
  wire R;
  wire RECEIVE;
  wire RECEIVED_IDLE;
  wire RECEIVED_IDLE_reg;
  wire RECEIVE_i_1__2_n_0;
  wire RUDI_C0__0;
  wire RUDI_I0;
  wire RXCHARISK_REG1;
  wire [7:0]RXDATA_REG5;
  wire \RXD[0]_i_1__2_n_0 ;
  wire \RXD[1]_i_1__2_n_0 ;
  wire \RXD[2]_i_1__2_n_0 ;
  wire \RXD[3]_i_1__2_n_0 ;
  wire \RXD[4]_i_1__2_n_0 ;
  wire \RXD[5]_i_1__2_n_0 ;
  wire \RXD[6]_i_1__2_n_0 ;
  wire \RXD[7]_i_1__2_n_0 ;
  wire RXEVEN0_out;
  wire RXSYNC_STATUS;
  wire \RX_CONFIG_REG[15]_i_1__2_n_0 ;
  wire \RX_CONFIG_REG[7]_i_1__2_n_0 ;
  wire RX_CONFIG_REG_NULL_i_2__2_n_0;
  wire RX_CONFIG_REG_NULL_i_3__2_n_0;
  wire RX_CONFIG_REG_NULL_i_4__2_n_0;
  wire RX_CONFIG_REG_NULL_reg;
  wire RX_CONFIG_REG_NULL_reg_0;
  wire [1:0]\RX_CONFIG_REG_REG_reg[13] ;
  wire [1:0]\RX_CONFIG_SNAPSHOT_reg[13] ;
  wire RX_CONFIG_VALID;
  wire RX_CONFIG_VALID_INT0;
  wire RX_CONFIG_VALID_INT_i_2__2_n_0;
  wire \RX_CONFIG_VALID_REG_reg_n_0_[0] ;
  wire \RX_CONFIG_VALID_REG_reg_n_0_[3] ;
  wire RX_DATA_ERROR;
  wire RX_DATA_ERROR0;
  wire RX_DATA_ERROR_i_2__2_n_0;
  wire RX_DATA_ERROR_i_3__2_n_0;
  wire RX_DV_i_1__2_n_0;
  wire RX_DV_i_2__2_n_0;
  wire RX_ER0;
  wire RX_ER_i_2__2_n_0;
  wire RX_ER_i_3__2_n_0;
  wire RX_IDLE;
  wire RX_INVALID;
  wire RX_INVALID_i_1__2_n_0;
  wire RX_RUDI_INVALID_REG_reg;
  wire R_REG1;
  wire R_i_2__2_n_0;
  wire R_i_3__2_n_0;
  wire [0:0]S;
  wire S0;
  wire S2;
  wire [15:0]SGMII_PHY_STATUS_reg;
  wire SOP;
  wire SOP0;
  wire SOP_REG1;
  wire SOP_REG2;
  wire SOP_REG3;
  wire [0:0]SR;
  wire SYNC_STATUS_REG;
  wire S_0;
  wire S_i_2__2_n_0;
  wire T;
  wire T_REG1;
  wire T_REG2;
  wire T_i_2__2_n_0;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ;
  wire WAIT_FOR_K;
  wire WAIT_FOR_K_i_1__2_n_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT_reg;
  wire gmii_rx_dv_ch3;
  wire gmii_rx_er_ch3;
  wire [7:0]gmii_rxd_ch3;
  wire out;
  wire p_0_in;
  wire p_0_in1_in;
  wire p_0_in2_in;
  wire p_1_in;
  wire [1:0]status_vector_ch3;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair253" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    ACKNOWLEDGE_MATCH_3_i_2__2
       (.I0(out),
        .I1(RX_IDLE),
        .I2(MASK_RUDI_BUFERR),
        .O(ACKNOWLEDGE_MATCH_3));
  LUT1 #(
    .INIT(2'h1)) 
    \BASEX_REMOTE_FAULT[1]_i_1__2 
       (.I0(SGMII_PHY_STATUS_reg[15]),
        .O(BASEX_REMOTE_FAULT_RSLVD));
  FDRE CGBAD_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD),
        .Q(CGBAD_REG1),
        .R(1'b0));
  FDRE CGBAD_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD_REG1),
        .Q(CGBAD_REG2),
        .R(1'b0));
  FDRE CGBAD_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD_REG2),
        .Q(CGBAD_REG3),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT2 #(
    .INIT(4'hE)) 
    CGBAD_i_1__2
       (.I0(D),
        .I1(p_0_in),
        .O(S2));
  FDRE CGBAD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S2),
        .Q(CGBAD),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT4 #(
    .INIT(16'h9009)) 
    CONFIG_REG_MATCH_COMB2_carry__0_i_1__2
       (.I0(SGMII_PHY_STATUS_reg[13]),
        .I1(\RX_CONFIG_REG_REG_reg[13] [1]),
        .I2(SGMII_PHY_STATUS_reg[12]),
        .I3(\RX_CONFIG_REG_REG_reg[13] [0]),
        .O(S));
  LUT3 #(
    .INIT(8'h40)) 
    C_HDR_REMOVED_REG_i_1__2
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .I2(C_REG2),
        .O(C_HDR_REMOVED));
  FDRE C_HDR_REMOVED_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_HDR_REMOVED),
        .Q(C_HDR_REMOVED_REG),
        .R(1'b0));
  FDRE C_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C),
        .Q(C_REG1),
        .R(1'b0));
  FDRE C_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_REG1),
        .Q(C_REG2),
        .R(1'b0));
  FDRE C_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_REG2),
        .Q(C_REG3),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000050000030)) 
    C_i_1__2
       (.I0(K28p5_REG1_i_2__2_n_0),
        .I1(C_i_2__2_n_0),
        .I2(K28p5_REG1),
        .I3(Q[0]),
        .I4(Q[7]),
        .I5(D0p0_REG_i_2__2_n_0),
        .O(C0));
  (* SOFT_HLUTNM = "soft_lutpair242" *) 
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    C_i_2__2
       (.I0(Q[2]),
        .I1(Q[4]),
        .I2(Q[5]),
        .I3(Q[6]),
        .I4(Q[1]),
        .O(C_i_2__2_n_0));
  FDRE C_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C0),
        .Q(C),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    D0p0_REG_i_1__2
       (.I0(D0p0_REG_i_2__2_n_0),
        .I1(Q[7]),
        .I2(Q[0]),
        .I3(Q[6]),
        .I4(Q[1]),
        .I5(D0p0_REG_i_3__2_n_0),
        .O(D0p0));
  (* SOFT_HLUTNM = "soft_lutpair255" *) 
  LUT2 #(
    .INIT(4'hE)) 
    D0p0_REG_i_2__2
       (.I0(Q[3]),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(D0p0_REG_i_2__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair254" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    D0p0_REG_i_3__2
       (.I0(Q[5]),
        .I1(Q[4]),
        .I2(Q[2]),
        .O(D0p0_REG_i_3__2_n_0));
  FDRE D0p0_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(D0p0),
        .Q(D0p0_REG),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hF8)) 
    EOP_REG1_i_1__2
       (.I0(EXTEND_REG1),
        .I1(EXTEND),
        .I2(EOP),
        .O(EOP_REG10));
  FDRE EOP_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EOP_REG10),
        .Q(EOP_REG1),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hFFFFFFFFF8000000)) 
    EOP_i_1__2
       (.I0(RXEVEN0_out),
        .I1(K28p5_REG1),
        .I2(R),
        .I3(R_REG1),
        .I4(T_REG2),
        .I5(EOP_i_2__2_n_0),
        .O(EOP0));
  LUT5 #(
    .INIT(32'hF8888888)) 
    EOP_i_2__2
       (.I0(K28p5_REG1),
        .I1(RX_IDLE),
        .I2(D0p0_REG),
        .I3(C_REG1),
        .I4(RXEVEN0_out),
        .O(EOP_i_2__2_n_0));
  FDRE EOP_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EOP0),
        .Q(EOP),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT3 #(
    .INIT(8'hF8)) 
    EXTEND_ERR_i_1__2
       (.I0(EXTEND_REG3),
        .I1(CGBAD_REG3),
        .I2(EXT_ILLEGAL_K_REG2),
        .O(EXTEND_ERR0));
  FDRE EXTEND_ERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_ERR0),
        .Q(EXTEND_ERR),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE EXTEND_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND),
        .Q(EXTEND_REG1),
        .R(1'b0));
  FDRE EXTEND_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_REG1),
        .Q(EXTEND_REG2),
        .R(1'b0));
  FDRE EXTEND_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_REG2),
        .Q(EXTEND_REG3),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hF2222222F0000000)) 
    EXTEND_i_1__2
       (.I0(EVEN_reg),
        .I1(S_0),
        .I2(RECEIVE),
        .I3(R),
        .I4(R_REG1),
        .I5(EXTEND),
        .O(EXTEND_i_1__2_n_0));
  FDRE EXTEND_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_i_1__2_n_0),
        .Q(EXTEND),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE EXT_ILLEGAL_K_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K),
        .Q(EXT_ILLEGAL_K_REG1),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE EXT_ILLEGAL_K_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K_REG1),
        .Q(EXT_ILLEGAL_K_REG2),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT5 #(
    .INIT(32'h00000444)) 
    EXT_ILLEGAL_K_i_1__2
       (.I0(S_0),
        .I1(EXTEND_REG1),
        .I2(RXEVEN0_out),
        .I3(K28p5_REG1),
        .I4(R),
        .O(EXT_ILLEGAL_K0));
  FDRE EXT_ILLEGAL_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K0),
        .Q(EXT_ILLEGAL_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE FALSE_CARRIER_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER),
        .Q(FALSE_CARRIER_REG1),
        .R(1'b0));
  FDRE FALSE_CARRIER_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_REG1),
        .Q(FALSE_CARRIER_REG2),
        .R(1'b0));
  FDRE FALSE_CARRIER_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_REG2),
        .Q(FALSE_CARRIER_REG3),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT4 #(
    .INIT(16'hBFAA)) 
    FALSE_CARRIER_i_1__2
       (.I0(FALSE_CARRIER0),
        .I1(K28p5_REG1),
        .I2(RXEVEN0_out),
        .I3(FALSE_CARRIER),
        .O(FALSE_CARRIER_i_1__2_n_0));
  LUT5 #(
    .INIT(32'h01000000)) 
    FALSE_CARRIER_i_2__2
       (.I0(FALSE_CARRIER_i_3__2_n_0),
        .I1(K28p5_REG1),
        .I2(S_0),
        .I3(RX_IDLE),
        .I4(XMIT_DATA_INT_reg),
        .O(FALSE_CARRIER0));
  (* SOFT_HLUTNM = "soft_lutpair243" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    FALSE_CARRIER_i_3__2
       (.I0(FALSE_DATA),
        .I1(FALSE_K),
        .I2(FALSE_NIT),
        .O(FALSE_CARRIER_i_3__2_n_0));
  FDRE FALSE_CARRIER_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_i_1__2_n_0),
        .Q(FALSE_CARRIER),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    FALSE_DATA_i_10__2
       (.I0(Q[2]),
        .I1(Q[4]),
        .O(FALSE_DATA_i_10__2_n_0));
  LUT6 #(
    .INIT(64'hFFAAFFFFFFAAFFEA)) 
    FALSE_DATA_i_1__2
       (.I0(FALSE_DATA_i_2__2_n_0),
        .I1(FALSE_DATA_i_3__2_n_0),
        .I2(Q[5]),
        .I3(FALSE_DATA_i_4__2_n_0),
        .I4(D),
        .I5(FALSE_DATA_i_5__2_n_0),
        .O(FALSE_DATA0));
  LUT6 #(
    .INIT(64'h0A0A0A0A0A0A0B0A)) 
    FALSE_DATA_i_2__2
       (.I0(FALSE_DATA_i_6__2_n_0),
        .I1(C_i_2__2_n_0),
        .I2(D),
        .I3(Q[0]),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(Q[7]),
        .O(FALSE_DATA_i_2__2_n_0));
  LUT6 #(
    .INIT(64'h0004000000000000)) 
    FALSE_DATA_i_3__2
       (.I0(D0p0_REG_i_2__2_n_0),
        .I1(FALSE_DATA_i_7__2_n_0),
        .I2(Q[4]),
        .I3(Q[6]),
        .I4(Q[1]),
        .I5(Q[2]),
        .O(FALSE_DATA_i_3__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair244" *) 
  LUT5 #(
    .INIT(32'h00000002)) 
    FALSE_DATA_i_4__2
       (.I0(Q[7]),
        .I1(Q[0]),
        .I2(D),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I4(K28p5_REG1_i_2__2_n_0),
        .O(FALSE_DATA_i_4__2_n_0));
  LUT6 #(
    .INIT(64'h0040000000000000)) 
    FALSE_DATA_i_5__2
       (.I0(FALSE_DATA_i_8__2_n_0),
        .I1(FALSE_DATA_i_9__2_n_0),
        .I2(Q[5]),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I4(Q[2]),
        .I5(Q[3]),
        .O(FALSE_DATA_i_5__2_n_0));
  LUT6 #(
    .INIT(64'h0000000000000400)) 
    FALSE_DATA_i_6__2
       (.I0(R_i_2__2_n_0),
        .I1(FALSE_DATA_i_10__2_n_0),
        .I2(D0p0_REG_i_2__2_n_0),
        .I3(Q[0]),
        .I4(Q[5]),
        .I5(Q[7]),
        .O(FALSE_DATA_i_6__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair244" *) 
  LUT2 #(
    .INIT(4'h8)) 
    FALSE_DATA_i_7__2
       (.I0(Q[0]),
        .I1(Q[7]),
        .O(FALSE_DATA_i_7__2_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    FALSE_DATA_i_8__2
       (.I0(Q[1]),
        .I1(Q[6]),
        .O(FALSE_DATA_i_8__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT2 #(
    .INIT(4'h2)) 
    FALSE_DATA_i_9__2
       (.I0(Q[7]),
        .I1(Q[0]),
        .O(FALSE_DATA_i_9__2_n_0));
  FDRE FALSE_DATA_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_DATA0),
        .Q(FALSE_DATA),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair247" *) 
  LUT5 #(
    .INIT(32'h00000082)) 
    FALSE_K_i_1__2
       (.I0(FALSE_K_i_2__2_n_0),
        .I1(Q[5]),
        .I2(Q[6]),
        .I3(D),
        .I4(Q[1]),
        .O(FALSE_K0));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    FALSE_K_i_2__2
       (.I0(Q[2]),
        .I1(Q[4]),
        .I2(Q[7]),
        .I3(Q[0]),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(Q[3]),
        .O(FALSE_K_i_2__2_n_0));
  FDRE FALSE_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_K0),
        .Q(FALSE_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hF000000AC000000A)) 
    FALSE_NIT_i_1__2
       (.I0(FALSE_NIT_i_2__2_n_0),
        .I1(FALSE_NIT_i_3__2_n_0),
        .I2(Q[4]),
        .I3(Q[2]),
        .I4(Q[5]),
        .I5(FALSE_NIT_i_4__2_n_0),
        .O(FALSE_NIT0));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    FALSE_NIT_i_2__2
       (.I0(D0p0_REG_i_2__2_n_0),
        .I1(Q[0]),
        .I2(Q[7]),
        .I3(D),
        .I4(Q[1]),
        .I5(Q[6]),
        .O(FALSE_NIT_i_2__2_n_0));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    FALSE_NIT_i_3__2
       (.I0(Q[1]),
        .I1(Q[6]),
        .I2(T_i_2__2_n_0),
        .I3(D),
        .I4(Q[0]),
        .I5(Q[7]),
        .O(FALSE_NIT_i_3__2_n_0));
  LUT6 #(
    .INIT(64'h0000000028000000)) 
    FALSE_NIT_i_4__2
       (.I0(T_i_2__2_n_0),
        .I1(Q[0]),
        .I2(Q[7]),
        .I3(D),
        .I4(Q[6]),
        .I5(Q[1]),
        .O(FALSE_NIT_i_4__2_n_0));
  FDRE FALSE_NIT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_NIT0),
        .Q(FALSE_NIT),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair252" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    FROM_IDLE_D_i_1__2
       (.I0(WAIT_FOR_K),
        .I1(RX_IDLE),
        .I2(K28p5_REG1),
        .I3(XMIT_DATA),
        .O(FROM_IDLE_D0));
  FDRE FROM_IDLE_D_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_IDLE_D0),
        .Q(FROM_IDLE_D),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFC0FAFAEAC0)) 
    FROM_RX_CX_i_1__2
       (.I0(C_REG2),
        .I1(EVEN_reg),
        .I2(C_REG3),
        .I3(RXCHARISK_REG1),
        .I4(CGBAD),
        .I5(C_REG1),
        .O(FROM_RX_CX0));
  FDRE FROM_RX_CX_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_RX_CX0),
        .Q(FROM_RX_CX),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT4 #(
    .INIT(16'h00A8)) 
    FROM_RX_K_i_1__2
       (.I0(K28p5_REG2),
        .I1(CGBAD),
        .I2(RXCHARISK_REG1),
        .I3(XMIT_DATA),
        .O(FROM_RX_K0));
  FDRE FROM_RX_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_RX_K0),
        .Q(FROM_RX_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE \IDLE_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE),
        .Q(\IDLE_REG_reg_n_0_[0] ),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \IDLE_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IDLE_REG_reg_n_0_[0] ),
        .Q(p_0_in1_in),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \IDLE_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_0_in1_in),
        .Q(\IDLE_REG_reg_n_0_[2] ),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE ILLEGAL_K_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K),
        .Q(ILLEGAL_K_REG1),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE ILLEGAL_K_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K_REG1),
        .Q(ILLEGAL_K_REG2),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair251" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    ILLEGAL_K_i_1__2
       (.I0(R),
        .I1(T),
        .I2(K28p5_REG1),
        .I3(RXCHARISK_REG1),
        .O(ILLEGAL_K0));
  FDRE ILLEGAL_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K0),
        .Q(ILLEGAL_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE I_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(I),
        .Q(RX_IDLE),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair243" *) 
  LUT5 #(
    .INIT(32'h88888880)) 
    I_i_2__2
       (.I0(RXEVEN0_out),
        .I1(RX_IDLE),
        .I2(FALSE_NIT),
        .I3(FALSE_K),
        .I4(FALSE_DATA),
        .O(I_reg_1));
  LUT6 #(
    .INIT(64'hFFFCFFFFFFFFAAAA)) 
    I_i_3__2
       (.I0(C_i_2__2_n_0),
        .I1(R_i_3__2_n_0),
        .I2(Q[1]),
        .I3(Q[6]),
        .I4(Q[7]),
        .I5(Q[0]),
        .O(I_reg_0));
  FDRE I_reg
       (.C(userclk),
        .CE(1'b1),
        .D(I0),
        .Q(I),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair246" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    K28p5_REG1_i_1__2
       (.I0(Q[7]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I4(K28p5_REG1_i_2__2_n_0),
        .O(K28p5));
  (* SOFT_HLUTNM = "soft_lutpair242" *) 
  LUT5 #(
    .INIT(32'hEFFFFFFF)) 
    K28p5_REG1_i_2__2
       (.I0(Q[6]),
        .I1(Q[1]),
        .I2(Q[5]),
        .I3(Q[2]),
        .I4(Q[4]),
        .O(K28p5_REG1_i_2__2_n_0));
  FDRE K28p5_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K28p5),
        .Q(K28p5_REG1),
        .R(1'b0));
  FDRE K28p5_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K28p5_REG1),
        .Q(K28p5_REG2),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hDC)) 
    RECEIVED_IDLE_i_1__2
       (.I0(RX_CONFIG_VALID),
        .I1(RX_IDLE),
        .I2(RECEIVED_IDLE),
        .O(RECEIVED_IDLE_reg));
  LUT3 #(
    .INIT(8'hBA)) 
    RECEIVE_i_1__2
       (.I0(SOP_REG2),
        .I1(EOP),
        .I2(RECEIVE),
        .O(RECEIVE_i_1__2_n_0));
  FDRE RECEIVE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RECEIVE_i_1__2_n_0),
        .Q(RECEIVE),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    RUDI_C0
       (.I0(p_0_in2_in),
        .I1(\RX_CONFIG_VALID_REG_reg_n_0_[3] ),
        .I2(p_1_in),
        .I3(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .O(RUDI_C0__0));
  FDRE RUDI_C_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RUDI_C0__0),
        .Q(status_vector_ch3[0]),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT2 #(
    .INIT(4'hE)) 
    RUDI_I_i_1__2
       (.I0(\IDLE_REG_reg_n_0_[2] ),
        .I1(p_0_in1_in),
        .O(RUDI_I0));
  FDRE RUDI_I_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RUDI_I0),
        .Q(status_vector_ch3[1]),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE RXCHARISK_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .Q(RXCHARISK_REG1),
        .R(1'b0));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[0]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[0]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[0]),
        .Q(RXDATA_REG5[0]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[1]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[1]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[1]),
        .Q(RXDATA_REG5[1]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[2]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[2]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[2]),
        .Q(RXDATA_REG5[2]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[3]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[3]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[3]),
        .Q(RXDATA_REG5[3]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[4]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[4]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[4]),
        .Q(RXDATA_REG5[4]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[5]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[5]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[5]),
        .Q(RXDATA_REG5[5]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[6]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[6]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[6]),
        .Q(RXDATA_REG5[6]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i3/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[7]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[7]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[7]),
        .Q(RXDATA_REG5[7]));
  (* SOFT_HLUTNM = "soft_lutpair248" *) 
  LUT4 #(
    .INIT(16'hAFAE)) 
    \RXD[0]_i_1__2 
       (.I0(SOP_REG3),
        .I1(EXTEND_REG1),
        .I2(FALSE_CARRIER_REG3),
        .I3(RXDATA_REG5[0]),
        .O(\RXD[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair248" *) 
  LUT4 #(
    .INIT(16'h3332)) 
    \RXD[1]_i_1__2 
       (.I0(RXDATA_REG5[1]),
        .I1(SOP_REG3),
        .I2(EXTEND_REG1),
        .I3(FALSE_CARRIER_REG3),
        .O(\RXD[1]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \RXD[2]_i_1__2 
       (.I0(SOP_REG3),
        .I1(EXTEND_REG1),
        .I2(FALSE_CARRIER_REG3),
        .I3(RXDATA_REG5[2]),
        .O(\RXD[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair249" *) 
  LUT4 #(
    .INIT(16'h3332)) 
    \RXD[3]_i_1__2 
       (.I0(RXDATA_REG5[3]),
        .I1(SOP_REG3),
        .I2(EXTEND_REG1),
        .I3(FALSE_CARRIER_REG3),
        .O(\RXD[3]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair245" *) 
  LUT5 #(
    .INIT(32'hAAAAFAEE)) 
    \RXD[4]_i_1__2 
       (.I0(SOP_REG3),
        .I1(RXDATA_REG5[4]),
        .I2(EXTEND_ERR),
        .I3(EXTEND_REG1),
        .I4(FALSE_CARRIER_REG3),
        .O(\RXD[4]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair249" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \RXD[5]_i_1__2 
       (.I0(RXDATA_REG5[5]),
        .I1(SOP_REG3),
        .I2(EXTEND_REG1),
        .I3(FALSE_CARRIER_REG3),
        .O(\RXD[5]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair250" *) 
  LUT4 #(
    .INIT(16'hFF10)) 
    \RXD[6]_i_1__2 
       (.I0(EXTEND_REG1),
        .I1(FALSE_CARRIER_REG3),
        .I2(RXDATA_REG5[6]),
        .I3(SOP_REG3),
        .O(\RXD[6]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair250" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \RXD[7]_i_1__2 
       (.I0(RXDATA_REG5[7]),
        .I1(SOP_REG3),
        .I2(EXTEND_REG1),
        .I3(FALSE_CARRIER_REG3),
        .O(\RXD[7]_i_1__2_n_0 ));
  FDRE \RXD_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[0]_i_1__2_n_0 ),
        .Q(gmii_rxd_ch3[0]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[1]_i_1__2_n_0 ),
        .Q(gmii_rxd_ch3[1]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[2]_i_1__2_n_0 ),
        .Q(gmii_rxd_ch3[2]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[3]_i_1__2_n_0 ),
        .Q(gmii_rxd_ch3[3]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[4]_i_1__2_n_0 ),
        .Q(gmii_rxd_ch3[4]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[5]_i_1__2_n_0 ),
        .Q(gmii_rxd_ch3[5]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[6]_i_1__2_n_0 ),
        .Q(gmii_rxd_ch3[6]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[7]_i_1__2_n_0 ),
        .Q(gmii_rxd_ch3[7]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  LUT4 #(
    .INIT(16'h1110)) 
    \RX_CONFIG_REG[15]_i_1__2 
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I1(RXCHARISK_REG1),
        .I2(C_REG1),
        .I3(C_HDR_REMOVED_REG),
        .O(\RX_CONFIG_REG[15]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h0000AEAA)) 
    \RX_CONFIG_REG[7]_i_1__2 
       (.I0(C),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I3(C_REG2),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(\RX_CONFIG_REG[7]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h80FF8000)) 
    RX_CONFIG_REG_NULL_i_1__2
       (.I0(RX_CONFIG_REG_NULL_i_2__2_n_0),
        .I1(RX_CONFIG_REG_NULL_i_3__2_n_0),
        .I2(RX_CONFIG_REG_NULL_i_4__2_n_0),
        .I3(RX_CONFIG_VALID),
        .I4(RX_CONFIG_REG_NULL_reg_0),
        .O(RX_CONFIG_REG_NULL_reg));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    RX_CONFIG_REG_NULL_i_2__2
       (.I0(SGMII_PHY_STATUS_reg[12]),
        .I1(SGMII_PHY_STATUS_reg[13]),
        .I2(SGMII_PHY_STATUS_reg[10]),
        .I3(SGMII_PHY_STATUS_reg[11]),
        .I4(SGMII_PHY_STATUS_reg[15]),
        .I5(SGMII_PHY_STATUS_reg[14]),
        .O(RX_CONFIG_REG_NULL_i_2__2_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    RX_CONFIG_REG_NULL_i_3__2
       (.I0(SGMII_PHY_STATUS_reg[1]),
        .I1(SGMII_PHY_STATUS_reg[0]),
        .I2(SGMII_PHY_STATUS_reg[3]),
        .I3(SGMII_PHY_STATUS_reg[2]),
        .O(RX_CONFIG_REG_NULL_i_3__2_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    RX_CONFIG_REG_NULL_i_4__2
       (.I0(SGMII_PHY_STATUS_reg[6]),
        .I1(SGMII_PHY_STATUS_reg[7]),
        .I2(SGMII_PHY_STATUS_reg[4]),
        .I3(SGMII_PHY_STATUS_reg[5]),
        .I4(SGMII_PHY_STATUS_reg[9]),
        .I5(SGMII_PHY_STATUS_reg[8]),
        .O(RX_CONFIG_REG_NULL_i_4__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair252" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \RX_CONFIG_REG_REG[15]_i_1__2 
       (.I0(RX_IDLE),
        .I1(out),
        .O(SR));
  FDRE \RX_CONFIG_REG_reg[0] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__2_n_0 ),
        .D(Q[0]),
        .Q(SGMII_PHY_STATUS_reg[0]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[10] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__2_n_0 ),
        .D(Q[2]),
        .Q(SGMII_PHY_STATUS_reg[10]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[11] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__2_n_0 ),
        .D(Q[3]),
        .Q(SGMII_PHY_STATUS_reg[11]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[12] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__2_n_0 ),
        .D(Q[4]),
        .Q(SGMII_PHY_STATUS_reg[12]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[13] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__2_n_0 ),
        .D(Q[5]),
        .Q(SGMII_PHY_STATUS_reg[13]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[14] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__2_n_0 ),
        .D(Q[6]),
        .Q(SGMII_PHY_STATUS_reg[14]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[15] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__2_n_0 ),
        .D(Q[7]),
        .Q(SGMII_PHY_STATUS_reg[15]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[1] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__2_n_0 ),
        .D(Q[1]),
        .Q(SGMII_PHY_STATUS_reg[1]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[2] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__2_n_0 ),
        .D(Q[2]),
        .Q(SGMII_PHY_STATUS_reg[2]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[3] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__2_n_0 ),
        .D(Q[3]),
        .Q(SGMII_PHY_STATUS_reg[3]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[4] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__2_n_0 ),
        .D(Q[4]),
        .Q(SGMII_PHY_STATUS_reg[4]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[5] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__2_n_0 ),
        .D(Q[5]),
        .Q(SGMII_PHY_STATUS_reg[5]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[6] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__2_n_0 ),
        .D(Q[6]),
        .Q(SGMII_PHY_STATUS_reg[6]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[7] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__2_n_0 ),
        .D(Q[7]),
        .Q(SGMII_PHY_STATUS_reg[7]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[8] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__2_n_0 ),
        .D(Q[0]),
        .Q(SGMII_PHY_STATUS_reg[8]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[9] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__2_n_0 ),
        .D(Q[1]),
        .Q(SGMII_PHY_STATUS_reg[9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000540000)) 
    RX_CONFIG_VALID_INT_i_1__2
       (.I0(RX_CONFIG_VALID_INT_i_2__2_n_0),
        .I1(C_HDR_REMOVED_REG),
        .I2(C_REG1),
        .I3(S2),
        .I4(RXSYNC_STATUS),
        .I5(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(RX_CONFIG_VALID_INT0));
  (* SOFT_HLUTNM = "soft_lutpair251" *) 
  LUT2 #(
    .INIT(4'hE)) 
    RX_CONFIG_VALID_INT_i_2__2
       (.I0(CGBAD),
        .I1(RXCHARISK_REG1),
        .O(RX_CONFIG_VALID_INT_i_2__2_n_0));
  FDRE RX_CONFIG_VALID_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID_INT0),
        .Q(RX_CONFIG_VALID),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \RX_CONFIG_VALID_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID),
        .Q(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \RX_CONFIG_VALID_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .Q(p_0_in2_in),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \RX_CONFIG_VALID_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_0_in2_in),
        .Q(p_1_in),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \RX_CONFIG_VALID_REG_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_1_in),
        .Q(\RX_CONFIG_VALID_REG_reg_n_0_[3] ),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hFFFFFFF0FFFEFFF0)) 
    RX_DATA_ERROR_i_1__2
       (.I0(CGBAD_REG3),
        .I1(ILLEGAL_K_REG2),
        .I2(RX_DATA_ERROR_i_2__2_n_0),
        .I3(RX_DATA_ERROR_i_3__2_n_0),
        .I4(RECEIVE),
        .I5(RX_IDLE),
        .O(RX_DATA_ERROR0));
  LUT6 #(
    .INIT(64'hAAAA0000FFBA0000)) 
    RX_DATA_ERROR_i_2__2
       (.I0(C_REG1),
        .I1(T_REG1),
        .I2(R),
        .I3(K28p5_REG1),
        .I4(RECEIVE),
        .I5(R_REG1),
        .O(RX_DATA_ERROR_i_2__2_n_0));
  LUT6 #(
    .INIT(64'h0808088808880888)) 
    RX_DATA_ERROR_i_3__2
       (.I0(T_REG2),
        .I1(RECEIVE),
        .I2(R_REG1),
        .I3(R),
        .I4(K28p5_REG1),
        .I5(RXEVEN0_out),
        .O(RX_DATA_ERROR_i_3__2_n_0));
  FDRE RX_DATA_ERROR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_DATA_ERROR0),
        .Q(RX_DATA_ERROR),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT6 #(
    .INIT(64'h0200FFFF02000000)) 
    RX_DV_i_1__2
       (.I0(SOP_REG3),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [0]),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]),
        .I3(XMIT_DATA_INT_reg),
        .I4(RX_DV_i_2__2_n_0),
        .I5(gmii_rx_dv_ch3),
        .O(RX_DV_i_1__2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFDF1F1F1F)) 
    RX_DV_i_2__2
       (.I0(RECEIVE),
        .I1(RXSYNC_STATUS),
        .I2(XMIT_DATA),
        .I3(RX_ER_i_3__2_n_0),
        .I4(SOP_REG3),
        .I5(EOP_REG1),
        .O(RX_DV_i_2__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    RX_DV_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_DV_i_1__2_n_0),
        .Q(gmii_rx_dv_ch3),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hE0F0E00000000000)) 
    RX_ER_i_1__2
       (.I0(RX_ER_i_2__2_n_0),
        .I1(RX_DATA_ERROR),
        .I2(XMIT_DATA),
        .I3(RXSYNC_STATUS),
        .I4(RECEIVE),
        .I5(RX_ER_i_3__2_n_0),
        .O(RX_ER0));
  (* SOFT_HLUTNM = "soft_lutpair245" *) 
  LUT2 #(
    .INIT(4'hE)) 
    RX_ER_i_2__2
       (.I0(EXTEND_REG1),
        .I1(FALSE_CARRIER_REG3),
        .O(RX_ER_i_2__2_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    RX_ER_i_3__2
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [0]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]),
        .O(RX_ER_i_3__2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    RX_ER_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_ER0),
        .Q(gmii_rx_er_ch3),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hFEAAFFFFFEAAFEAA)) 
    RX_INVALID_i_1__2
       (.I0(FROM_RX_CX),
        .I1(FROM_IDLE_D),
        .I2(FROM_RX_K),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ),
        .I4(K28p5_REG1),
        .I5(RX_INVALID),
        .O(RX_INVALID_i_1__2_n_0));
  FDRE RX_INVALID_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_INVALID_i_1__2_n_0),
        .Q(RX_INVALID),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair253" *) 
  LUT3 #(
    .INIT(8'h08)) 
    RX_RUDI_INVALID_REG_i_1__2
       (.I0(RX_INVALID),
        .I1(RXSYNC_STATUS),
        .I2(out),
        .O(RX_RUDI_INVALID_REG_reg));
  FDRE R_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(R),
        .Q(R_REG1),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000010000000)) 
    R_i_1__5
       (.I0(R_i_2__2_n_0),
        .I1(Q[3]),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I3(Q[7]),
        .I4(Q[0]),
        .I5(R_i_3__2_n_0),
        .O(K23p7));
  (* SOFT_HLUTNM = "soft_lutpair247" *) 
  LUT2 #(
    .INIT(4'h7)) 
    R_i_2__2
       (.I0(Q[1]),
        .I1(Q[6]),
        .O(R_i_2__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair254" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    R_i_3__2
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[5]),
        .O(R_i_3__2_n_0));
  FDRE R_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K23p7),
        .Q(R),
        .R(1'b0));
  FDRE SOP_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP),
        .Q(SOP_REG1),
        .R(1'b0));
  FDRE SOP_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP_REG1),
        .Q(SOP_REG2),
        .R(1'b0));
  FDRE SOP_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP_REG2),
        .Q(SOP_REG3),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00E00000)) 
    SOP_i_1__2
       (.I0(EXTEND),
        .I1(RX_IDLE),
        .I2(S_0),
        .I3(WAIT_FOR_K),
        .I4(XMIT_DATA_INT_reg),
        .O(SOP0));
  FDRE SOP_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP0),
        .Q(SOP),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE SYNC_STATUS_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(1'b1),
        .Q(SYNC_STATUS_REG),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT6 #(
    .INIT(64'h0800000000000000)) 
    S_i_1__5
       (.I0(Q[5]),
        .I1(Q[4]),
        .I2(Q[2]),
        .I3(S_i_2__2_n_0),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(Q[3]),
        .O(S0));
  LUT6 #(
    .INIT(64'h1000000000000000)) 
    S_i_2__2
       (.I0(D),
        .I1(p_0_in),
        .I2(Q[0]),
        .I3(Q[7]),
        .I4(Q[6]),
        .I5(Q[1]),
        .O(S_i_2__2_n_0));
  FDRE S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S0),
        .Q(S_0),
        .R(1'b0));
  FDRE T_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T),
        .Q(T_REG1),
        .R(1'b0));
  FDRE T_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T_REG1),
        .Q(T_REG2),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000020000000)) 
    T_i_1__5
       (.I0(T_i_2__2_n_0),
        .I1(Q[1]),
        .I2(Q[6]),
        .I3(Q[7]),
        .I4(Q[0]),
        .I5(R_i_3__2_n_0),
        .O(K29p7));
  (* SOFT_HLUTNM = "soft_lutpair255" *) 
  LUT2 #(
    .INIT(4'h8)) 
    T_i_2__2
       (.I0(Q[3]),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(T_i_2__2_n_0));
  FDRE T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K29p7),
        .Q(T),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h7F0F)) 
    WAIT_FOR_K_i_1__2
       (.I0(K28p5_REG1),
        .I1(RXEVEN0_out),
        .I2(SYNC_STATUS_REG),
        .I3(WAIT_FOR_K),
        .O(WAIT_FOR_K_i_1__2_n_0));
  FDRE WAIT_FOR_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(WAIT_FOR_K_i_1__2_n_0),
        .Q(WAIT_FOR_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__0_i_1__2
       (.I0(SGMII_PHY_STATUS_reg[13]),
        .I1(\RX_CONFIG_SNAPSHOT_reg[13] [1]),
        .I2(SGMII_PHY_STATUS_reg[12]),
        .I3(\RX_CONFIG_SNAPSHOT_reg[13] [0]),
        .O(CONSISTENCY_MATCH_reg));
endmodule

(* ORIG_REF_NAME = "RX" *) 
module qsgmii_1218_RX_140
   (K28p5_REG1,
    RX_IDLE,
    S2,
    gmii_rx_er_ch2,
    RX_CONFIG_VALID,
    status_vector_ch2,
    gmii_rx_dv_ch2,
    RX_INVALID,
    I_reg_0,
    I_reg_1,
    ACKNOWLEDGE_MATCH_3,
    SR,
    BASEX_REMOTE_FAULT_RSLVD,
    SGMII_PHY_STATUS_reg,
    S,
    CONSISTENCY_MATCH_reg,
    RECEIVED_IDLE_reg,
    RX_CONFIG_REG_NULL_reg,
    RX_RUDI_INVALID_REG_reg,
    gmii_rxd_ch2,
    Q,
    userclk,
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ,
    I0,
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ,
    D,
    p_0_in,
    RXSYNC_STATUS,
    XMIT_DATA,
    XMIT_DATA_INT_reg,
    EVEN_reg,
    RXEVEN0_out,
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] ,
    out,
    MASK_RUDI_BUFERR,
    \RX_CONFIG_REG_REG_reg[13] ,
    \RX_CONFIG_SNAPSHOT_reg[13] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ,
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ,
    RECEIVED_IDLE,
    RX_CONFIG_REG_NULL_reg_0);
  output K28p5_REG1;
  output RX_IDLE;
  output S2;
  output gmii_rx_er_ch2;
  output RX_CONFIG_VALID;
  output [1:0]status_vector_ch2;
  output gmii_rx_dv_ch2;
  output RX_INVALID;
  output I_reg_0;
  output I_reg_1;
  output ACKNOWLEDGE_MATCH_3;
  output [0:0]SR;
  output [0:0]BASEX_REMOTE_FAULT_RSLVD;
  output [15:0]SGMII_PHY_STATUS_reg;
  output [0:0]S;
  output [0:0]CONSISTENCY_MATCH_reg;
  output RECEIVED_IDLE_reg;
  output RX_CONFIG_REG_NULL_reg;
  output RX_RUDI_INVALID_REG_reg;
  output [7:0]gmii_rxd_ch2;
  input [7:0]Q;
  input userclk;
  input \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;
  input I0;
  input \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  input D;
  input p_0_in;
  input RXSYNC_STATUS;
  input XMIT_DATA;
  input XMIT_DATA_INT_reg;
  input EVEN_reg;
  input RXEVEN0_out;
  input [1:0]\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] ;
  input out;
  input MASK_RUDI_BUFERR;
  input [1:0]\RX_CONFIG_REG_REG_reg[13] ;
  input [1:0]\RX_CONFIG_SNAPSHOT_reg[13] ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  input \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ;
  input RECEIVED_IDLE;
  input RX_CONFIG_REG_NULL_reg_0;

  wire ACKNOWLEDGE_MATCH_3;
  wire [0:0]BASEX_REMOTE_FAULT_RSLVD;
  wire C;
  wire C0;
  wire CGBAD;
  wire CGBAD_REG1;
  wire CGBAD_REG2;
  wire CGBAD_REG3;
  wire [0:0]CONSISTENCY_MATCH_reg;
  wire C_HDR_REMOVED;
  wire C_HDR_REMOVED_REG;
  wire C_REG1;
  wire C_REG2;
  wire C_REG3;
  wire C_i_2__1_n_0;
  wire D;
  wire D0p0;
  wire D0p0_REG;
  wire D0p0_REG_i_2__1_n_0;
  wire D0p0_REG_i_3__1_n_0;
  wire EOP;
  wire EOP0;
  wire EOP_REG1;
  wire EOP_REG10;
  wire EOP_i_2__1_n_0;
  wire EVEN_reg;
  wire EXTEND;
  wire EXTEND_ERR;
  wire EXTEND_ERR0;
  wire EXTEND_REG1;
  wire EXTEND_REG2;
  wire EXTEND_REG3;
  wire EXTEND_i_1__1_n_0;
  wire EXT_ILLEGAL_K;
  wire EXT_ILLEGAL_K0;
  wire EXT_ILLEGAL_K_REG1;
  wire EXT_ILLEGAL_K_REG2;
  wire FALSE_CARRIER;
  wire FALSE_CARRIER0;
  wire FALSE_CARRIER_REG1;
  wire FALSE_CARRIER_REG2;
  wire FALSE_CARRIER_REG3;
  wire FALSE_CARRIER_i_1__1_n_0;
  wire FALSE_CARRIER_i_3__1_n_0;
  wire FALSE_DATA;
  wire FALSE_DATA0;
  wire FALSE_DATA_i_10__1_n_0;
  wire FALSE_DATA_i_2__1_n_0;
  wire FALSE_DATA_i_3__1_n_0;
  wire FALSE_DATA_i_4__1_n_0;
  wire FALSE_DATA_i_5__1_n_0;
  wire FALSE_DATA_i_6__1_n_0;
  wire FALSE_DATA_i_7__1_n_0;
  wire FALSE_DATA_i_8__1_n_0;
  wire FALSE_DATA_i_9__1_n_0;
  wire FALSE_K;
  wire FALSE_K0;
  wire FALSE_K_i_2__1_n_0;
  wire FALSE_NIT;
  wire FALSE_NIT0;
  wire FALSE_NIT_i_2__1_n_0;
  wire FALSE_NIT_i_3__1_n_0;
  wire FALSE_NIT_i_4__1_n_0;
  wire FROM_IDLE_D;
  wire FROM_IDLE_D0;
  wire FROM_RX_CX;
  wire FROM_RX_CX0;
  wire FROM_RX_K;
  wire FROM_RX_K0;
  wire I;
  wire I0;
  wire \IDLE_REG_reg_n_0_[0] ;
  wire \IDLE_REG_reg_n_0_[2] ;
  wire ILLEGAL_K;
  wire ILLEGAL_K0;
  wire ILLEGAL_K_REG1;
  wire ILLEGAL_K_REG2;
  wire I_reg_0;
  wire I_reg_1;
  wire K23p7;
  wire K28p5;
  wire K28p5_REG1;
  wire K28p5_REG1_i_2__1_n_0;
  wire K28p5_REG2;
  wire K29p7;
  wire MASK_RUDI_BUFERR;
  wire [1:0]\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] ;
  wire \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ;
  wire [7:0]Q;
  wire R;
  wire RECEIVE;
  wire RECEIVED_IDLE;
  wire RECEIVED_IDLE_reg;
  wire RECEIVE_i_1__1_n_0;
  wire RUDI_C0__0;
  wire RUDI_I0;
  wire RXCHARISK_REG1;
  wire [7:0]RXDATA_REG5;
  wire \RXD[0]_i_1__1_n_0 ;
  wire \RXD[1]_i_1__1_n_0 ;
  wire \RXD[2]_i_1__1_n_0 ;
  wire \RXD[3]_i_1__1_n_0 ;
  wire \RXD[4]_i_1__1_n_0 ;
  wire \RXD[5]_i_1__1_n_0 ;
  wire \RXD[6]_i_1__1_n_0 ;
  wire \RXD[7]_i_1__1_n_0 ;
  wire RXEVEN0_out;
  wire RXSYNC_STATUS;
  wire \RX_CONFIG_REG[15]_i_1__1_n_0 ;
  wire \RX_CONFIG_REG[7]_i_1__1_n_0 ;
  wire RX_CONFIG_REG_NULL_i_2__1_n_0;
  wire RX_CONFIG_REG_NULL_i_3__1_n_0;
  wire RX_CONFIG_REG_NULL_i_4__1_n_0;
  wire RX_CONFIG_REG_NULL_reg;
  wire RX_CONFIG_REG_NULL_reg_0;
  wire [1:0]\RX_CONFIG_REG_REG_reg[13] ;
  wire [1:0]\RX_CONFIG_SNAPSHOT_reg[13] ;
  wire RX_CONFIG_VALID;
  wire RX_CONFIG_VALID_INT0;
  wire RX_CONFIG_VALID_INT_i_2__1_n_0;
  wire \RX_CONFIG_VALID_REG_reg_n_0_[0] ;
  wire \RX_CONFIG_VALID_REG_reg_n_0_[3] ;
  wire RX_DATA_ERROR;
  wire RX_DATA_ERROR0;
  wire RX_DATA_ERROR_i_2__1_n_0;
  wire RX_DATA_ERROR_i_3__1_n_0;
  wire RX_DV_i_1__1_n_0;
  wire RX_DV_i_2__1_n_0;
  wire RX_ER0;
  wire RX_ER_i_2__1_n_0;
  wire RX_ER_i_3__1_n_0;
  wire RX_IDLE;
  wire RX_INVALID;
  wire RX_INVALID_i_1__1_n_0;
  wire RX_RUDI_INVALID_REG_reg;
  wire R_REG1;
  wire R_i_2__1_n_0;
  wire R_i_3__1_n_0;
  wire [0:0]S;
  wire S0;
  wire S2;
  wire [15:0]SGMII_PHY_STATUS_reg;
  wire SOP;
  wire SOP0;
  wire SOP_REG1;
  wire SOP_REG2;
  wire SOP_REG3;
  wire [0:0]SR;
  wire SYNC_STATUS_REG;
  wire S_0;
  wire S_i_2__1_n_0;
  wire T;
  wire T_REG1;
  wire T_REG2;
  wire T_i_2__1_n_0;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ;
  wire WAIT_FOR_K;
  wire WAIT_FOR_K_i_1__1_n_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT_reg;
  wire gmii_rx_dv_ch2;
  wire gmii_rx_er_ch2;
  wire [7:0]gmii_rxd_ch2;
  wire out;
  wire p_0_in;
  wire p_0_in1_in;
  wire p_0_in2_in;
  wire p_1_in;
  wire [1:0]status_vector_ch2;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    ACKNOWLEDGE_MATCH_3_i_2__1
       (.I0(out),
        .I1(RX_IDLE),
        .I2(MASK_RUDI_BUFERR),
        .O(ACKNOWLEDGE_MATCH_3));
  LUT1 #(
    .INIT(2'h1)) 
    \BASEX_REMOTE_FAULT[1]_i_1__1 
       (.I0(SGMII_PHY_STATUS_reg[15]),
        .O(BASEX_REMOTE_FAULT_RSLVD));
  FDRE CGBAD_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD),
        .Q(CGBAD_REG1),
        .R(1'b0));
  FDRE CGBAD_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD_REG1),
        .Q(CGBAD_REG2),
        .R(1'b0));
  FDRE CGBAD_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD_REG2),
        .Q(CGBAD_REG3),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT2 #(
    .INIT(4'hE)) 
    CGBAD_i_1__1
       (.I0(D),
        .I1(p_0_in),
        .O(S2));
  FDRE CGBAD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S2),
        .Q(CGBAD),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT4 #(
    .INIT(16'h9009)) 
    CONFIG_REG_MATCH_COMB2_carry__0_i_1__1
       (.I0(SGMII_PHY_STATUS_reg[13]),
        .I1(\RX_CONFIG_REG_REG_reg[13] [1]),
        .I2(SGMII_PHY_STATUS_reg[12]),
        .I3(\RX_CONFIG_REG_REG_reg[13] [0]),
        .O(S));
  LUT3 #(
    .INIT(8'h40)) 
    C_HDR_REMOVED_REG_i_1__1
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .I2(C_REG2),
        .O(C_HDR_REMOVED));
  FDRE C_HDR_REMOVED_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_HDR_REMOVED),
        .Q(C_HDR_REMOVED_REG),
        .R(1'b0));
  FDRE C_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C),
        .Q(C_REG1),
        .R(1'b0));
  FDRE C_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_REG1),
        .Q(C_REG2),
        .R(1'b0));
  FDRE C_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_REG2),
        .Q(C_REG3),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000050000030)) 
    C_i_1__1
       (.I0(K28p5_REG1_i_2__1_n_0),
        .I1(C_i_2__1_n_0),
        .I2(K28p5_REG1),
        .I3(Q[0]),
        .I4(Q[7]),
        .I5(D0p0_REG_i_2__1_n_0),
        .O(C0));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    C_i_2__1
       (.I0(Q[2]),
        .I1(Q[4]),
        .I2(Q[5]),
        .I3(Q[6]),
        .I4(Q[1]),
        .O(C_i_2__1_n_0));
  FDRE C_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C0),
        .Q(C),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    D0p0_REG_i_1__1
       (.I0(D0p0_REG_i_2__1_n_0),
        .I1(Q[7]),
        .I2(Q[0]),
        .I3(Q[6]),
        .I4(Q[1]),
        .I5(D0p0_REG_i_3__1_n_0),
        .O(D0p0));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT2 #(
    .INIT(4'hE)) 
    D0p0_REG_i_2__1
       (.I0(Q[3]),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(D0p0_REG_i_2__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    D0p0_REG_i_3__1
       (.I0(Q[5]),
        .I1(Q[4]),
        .I2(Q[2]),
        .O(D0p0_REG_i_3__1_n_0));
  FDRE D0p0_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(D0p0),
        .Q(D0p0_REG),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hF8)) 
    EOP_REG1_i_1__1
       (.I0(EXTEND_REG1),
        .I1(EXTEND),
        .I2(EOP),
        .O(EOP_REG10));
  FDRE EOP_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EOP_REG10),
        .Q(EOP_REG1),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hFFFFFFFFF8000000)) 
    EOP_i_1__1
       (.I0(RXEVEN0_out),
        .I1(K28p5_REG1),
        .I2(R),
        .I3(R_REG1),
        .I4(T_REG2),
        .I5(EOP_i_2__1_n_0),
        .O(EOP0));
  LUT5 #(
    .INIT(32'hF8888888)) 
    EOP_i_2__1
       (.I0(K28p5_REG1),
        .I1(RX_IDLE),
        .I2(D0p0_REG),
        .I3(C_REG1),
        .I4(RXEVEN0_out),
        .O(EOP_i_2__1_n_0));
  FDRE EOP_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EOP0),
        .Q(EOP),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT3 #(
    .INIT(8'hF8)) 
    EXTEND_ERR_i_1__1
       (.I0(EXTEND_REG3),
        .I1(CGBAD_REG3),
        .I2(EXT_ILLEGAL_K_REG2),
        .O(EXTEND_ERR0));
  FDRE EXTEND_ERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_ERR0),
        .Q(EXTEND_ERR),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE EXTEND_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND),
        .Q(EXTEND_REG1),
        .R(1'b0));
  FDRE EXTEND_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_REG1),
        .Q(EXTEND_REG2),
        .R(1'b0));
  FDRE EXTEND_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_REG2),
        .Q(EXTEND_REG3),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hF2222222F0000000)) 
    EXTEND_i_1__1
       (.I0(EVEN_reg),
        .I1(S_0),
        .I2(RECEIVE),
        .I3(R),
        .I4(R_REG1),
        .I5(EXTEND),
        .O(EXTEND_i_1__1_n_0));
  FDRE EXTEND_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_i_1__1_n_0),
        .Q(EXTEND),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE EXT_ILLEGAL_K_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K),
        .Q(EXT_ILLEGAL_K_REG1),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE EXT_ILLEGAL_K_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K_REG1),
        .Q(EXT_ILLEGAL_K_REG2),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT5 #(
    .INIT(32'h00000444)) 
    EXT_ILLEGAL_K_i_1__1
       (.I0(S_0),
        .I1(EXTEND_REG1),
        .I2(RXEVEN0_out),
        .I3(K28p5_REG1),
        .I4(R),
        .O(EXT_ILLEGAL_K0));
  FDRE EXT_ILLEGAL_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K0),
        .Q(EXT_ILLEGAL_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE FALSE_CARRIER_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER),
        .Q(FALSE_CARRIER_REG1),
        .R(1'b0));
  FDRE FALSE_CARRIER_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_REG1),
        .Q(FALSE_CARRIER_REG2),
        .R(1'b0));
  FDRE FALSE_CARRIER_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_REG2),
        .Q(FALSE_CARRIER_REG3),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT4 #(
    .INIT(16'hBFAA)) 
    FALSE_CARRIER_i_1__1
       (.I0(FALSE_CARRIER0),
        .I1(K28p5_REG1),
        .I2(RXEVEN0_out),
        .I3(FALSE_CARRIER),
        .O(FALSE_CARRIER_i_1__1_n_0));
  LUT5 #(
    .INIT(32'h01000000)) 
    FALSE_CARRIER_i_2__1
       (.I0(FALSE_CARRIER_i_3__1_n_0),
        .I1(K28p5_REG1),
        .I2(S_0),
        .I3(RX_IDLE),
        .I4(XMIT_DATA_INT_reg),
        .O(FALSE_CARRIER0));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    FALSE_CARRIER_i_3__1
       (.I0(FALSE_DATA),
        .I1(FALSE_K),
        .I2(FALSE_NIT),
        .O(FALSE_CARRIER_i_3__1_n_0));
  FDRE FALSE_CARRIER_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_i_1__1_n_0),
        .Q(FALSE_CARRIER),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    FALSE_DATA_i_10__1
       (.I0(Q[2]),
        .I1(Q[4]),
        .O(FALSE_DATA_i_10__1_n_0));
  LUT6 #(
    .INIT(64'hFFAAFFFFFFAAFFEA)) 
    FALSE_DATA_i_1__1
       (.I0(FALSE_DATA_i_2__1_n_0),
        .I1(FALSE_DATA_i_3__1_n_0),
        .I2(Q[5]),
        .I3(FALSE_DATA_i_4__1_n_0),
        .I4(D),
        .I5(FALSE_DATA_i_5__1_n_0),
        .O(FALSE_DATA0));
  LUT6 #(
    .INIT(64'h0A0A0A0A0A0A0B0A)) 
    FALSE_DATA_i_2__1
       (.I0(FALSE_DATA_i_6__1_n_0),
        .I1(C_i_2__1_n_0),
        .I2(D),
        .I3(Q[0]),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(Q[7]),
        .O(FALSE_DATA_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h0004000000000000)) 
    FALSE_DATA_i_3__1
       (.I0(D0p0_REG_i_2__1_n_0),
        .I1(FALSE_DATA_i_7__1_n_0),
        .I2(Q[4]),
        .I3(Q[6]),
        .I4(Q[1]),
        .I5(Q[2]),
        .O(FALSE_DATA_i_3__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT5 #(
    .INIT(32'h00000002)) 
    FALSE_DATA_i_4__1
       (.I0(Q[7]),
        .I1(Q[0]),
        .I2(D),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I4(K28p5_REG1_i_2__1_n_0),
        .O(FALSE_DATA_i_4__1_n_0));
  LUT6 #(
    .INIT(64'h0040000000000000)) 
    FALSE_DATA_i_5__1
       (.I0(FALSE_DATA_i_8__1_n_0),
        .I1(FALSE_DATA_i_9__1_n_0),
        .I2(Q[5]),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I4(Q[2]),
        .I5(Q[3]),
        .O(FALSE_DATA_i_5__1_n_0));
  LUT6 #(
    .INIT(64'h0000000000000400)) 
    FALSE_DATA_i_6__1
       (.I0(R_i_2__1_n_0),
        .I1(FALSE_DATA_i_10__1_n_0),
        .I2(D0p0_REG_i_2__1_n_0),
        .I3(Q[0]),
        .I4(Q[5]),
        .I5(Q[7]),
        .O(FALSE_DATA_i_6__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT2 #(
    .INIT(4'h8)) 
    FALSE_DATA_i_7__1
       (.I0(Q[0]),
        .I1(Q[7]),
        .O(FALSE_DATA_i_7__1_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    FALSE_DATA_i_8__1
       (.I0(Q[1]),
        .I1(Q[6]),
        .O(FALSE_DATA_i_8__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT2 #(
    .INIT(4'h2)) 
    FALSE_DATA_i_9__1
       (.I0(Q[7]),
        .I1(Q[0]),
        .O(FALSE_DATA_i_9__1_n_0));
  FDRE FALSE_DATA_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_DATA0),
        .Q(FALSE_DATA),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT5 #(
    .INIT(32'h00000082)) 
    FALSE_K_i_1__1
       (.I0(FALSE_K_i_2__1_n_0),
        .I1(Q[5]),
        .I2(Q[6]),
        .I3(D),
        .I4(Q[1]),
        .O(FALSE_K0));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    FALSE_K_i_2__1
       (.I0(Q[2]),
        .I1(Q[4]),
        .I2(Q[7]),
        .I3(Q[0]),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(Q[3]),
        .O(FALSE_K_i_2__1_n_0));
  FDRE FALSE_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_K0),
        .Q(FALSE_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hF000000AC000000A)) 
    FALSE_NIT_i_1__1
       (.I0(FALSE_NIT_i_2__1_n_0),
        .I1(FALSE_NIT_i_3__1_n_0),
        .I2(Q[4]),
        .I3(Q[2]),
        .I4(Q[5]),
        .I5(FALSE_NIT_i_4__1_n_0),
        .O(FALSE_NIT0));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    FALSE_NIT_i_2__1
       (.I0(D0p0_REG_i_2__1_n_0),
        .I1(Q[0]),
        .I2(Q[7]),
        .I3(D),
        .I4(Q[1]),
        .I5(Q[6]),
        .O(FALSE_NIT_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    FALSE_NIT_i_3__1
       (.I0(Q[1]),
        .I1(Q[6]),
        .I2(T_i_2__1_n_0),
        .I3(D),
        .I4(Q[0]),
        .I5(Q[7]),
        .O(FALSE_NIT_i_3__1_n_0));
  LUT6 #(
    .INIT(64'h0000000028000000)) 
    FALSE_NIT_i_4__1
       (.I0(T_i_2__1_n_0),
        .I1(Q[0]),
        .I2(Q[7]),
        .I3(D),
        .I4(Q[6]),
        .I5(Q[1]),
        .O(FALSE_NIT_i_4__1_n_0));
  FDRE FALSE_NIT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_NIT0),
        .Q(FALSE_NIT),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    FROM_IDLE_D_i_1__1
       (.I0(WAIT_FOR_K),
        .I1(RX_IDLE),
        .I2(K28p5_REG1),
        .I3(XMIT_DATA),
        .O(FROM_IDLE_D0));
  FDRE FROM_IDLE_D_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_IDLE_D0),
        .Q(FROM_IDLE_D),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFC0FAFAEAC0)) 
    FROM_RX_CX_i_1__1
       (.I0(C_REG2),
        .I1(EVEN_reg),
        .I2(C_REG3),
        .I3(RXCHARISK_REG1),
        .I4(CGBAD),
        .I5(C_REG1),
        .O(FROM_RX_CX0));
  FDRE FROM_RX_CX_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_RX_CX0),
        .Q(FROM_RX_CX),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT4 #(
    .INIT(16'h00A8)) 
    FROM_RX_K_i_1__1
       (.I0(K28p5_REG2),
        .I1(CGBAD),
        .I2(RXCHARISK_REG1),
        .I3(XMIT_DATA),
        .O(FROM_RX_K0));
  FDRE FROM_RX_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_RX_K0),
        .Q(FROM_RX_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE \IDLE_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE),
        .Q(\IDLE_REG_reg_n_0_[0] ),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \IDLE_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IDLE_REG_reg_n_0_[0] ),
        .Q(p_0_in1_in),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \IDLE_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_0_in1_in),
        .Q(\IDLE_REG_reg_n_0_[2] ),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE ILLEGAL_K_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K),
        .Q(ILLEGAL_K_REG1),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE ILLEGAL_K_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K_REG1),
        .Q(ILLEGAL_K_REG2),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    ILLEGAL_K_i_1__1
       (.I0(R),
        .I1(T),
        .I2(K28p5_REG1),
        .I3(RXCHARISK_REG1),
        .O(ILLEGAL_K0));
  FDRE ILLEGAL_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K0),
        .Q(ILLEGAL_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE I_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(I),
        .Q(RX_IDLE),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT5 #(
    .INIT(32'h88888880)) 
    I_i_2__1
       (.I0(RXEVEN0_out),
        .I1(RX_IDLE),
        .I2(FALSE_NIT),
        .I3(FALSE_K),
        .I4(FALSE_DATA),
        .O(I_reg_1));
  LUT6 #(
    .INIT(64'hFFFCFFFFFFFFAAAA)) 
    I_i_3__1
       (.I0(C_i_2__1_n_0),
        .I1(R_i_3__1_n_0),
        .I2(Q[1]),
        .I3(Q[6]),
        .I4(Q[7]),
        .I5(Q[0]),
        .O(I_reg_0));
  FDRE I_reg
       (.C(userclk),
        .CE(1'b1),
        .D(I0),
        .Q(I),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    K28p5_REG1_i_1__1
       (.I0(Q[7]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I4(K28p5_REG1_i_2__1_n_0),
        .O(K28p5));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT5 #(
    .INIT(32'hEFFFFFFF)) 
    K28p5_REG1_i_2__1
       (.I0(Q[6]),
        .I1(Q[1]),
        .I2(Q[5]),
        .I3(Q[2]),
        .I4(Q[4]),
        .O(K28p5_REG1_i_2__1_n_0));
  FDRE K28p5_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K28p5),
        .Q(K28p5_REG1),
        .R(1'b0));
  FDRE K28p5_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K28p5_REG1),
        .Q(K28p5_REG2),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hDC)) 
    RECEIVED_IDLE_i_1__1
       (.I0(RX_CONFIG_VALID),
        .I1(RX_IDLE),
        .I2(RECEIVED_IDLE),
        .O(RECEIVED_IDLE_reg));
  LUT3 #(
    .INIT(8'hBA)) 
    RECEIVE_i_1__1
       (.I0(SOP_REG2),
        .I1(EOP),
        .I2(RECEIVE),
        .O(RECEIVE_i_1__1_n_0));
  FDRE RECEIVE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RECEIVE_i_1__1_n_0),
        .Q(RECEIVE),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    RUDI_C0
       (.I0(p_0_in2_in),
        .I1(\RX_CONFIG_VALID_REG_reg_n_0_[3] ),
        .I2(p_1_in),
        .I3(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .O(RUDI_C0__0));
  FDRE RUDI_C_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RUDI_C0__0),
        .Q(status_vector_ch2[0]),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT2 #(
    .INIT(4'hE)) 
    RUDI_I_i_1__1
       (.I0(\IDLE_REG_reg_n_0_[2] ),
        .I1(p_0_in1_in),
        .O(RUDI_I0));
  FDRE RUDI_I_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RUDI_I0),
        .Q(status_vector_ch2[1]),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE RXCHARISK_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .Q(RXCHARISK_REG1),
        .R(1'b0));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[0]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[0]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[0]),
        .Q(RXDATA_REG5[0]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[1]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[1]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[1]),
        .Q(RXDATA_REG5[1]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[2]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[2]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[2]),
        .Q(RXDATA_REG5[2]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[3]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[3]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[3]),
        .Q(RXDATA_REG5[3]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[4]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[4]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[4]),
        .Q(RXDATA_REG5[4]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[5]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[5]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[5]),
        .Q(RXDATA_REG5[5]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[6]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[6]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[6]),
        .Q(RXDATA_REG5[6]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i2/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[7]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[7]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[7]),
        .Q(RXDATA_REG5[7]));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT4 #(
    .INIT(16'hAFAE)) 
    \RXD[0]_i_1__1 
       (.I0(SOP_REG3),
        .I1(EXTEND_REG1),
        .I2(FALSE_CARRIER_REG3),
        .I3(RXDATA_REG5[0]),
        .O(\RXD[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT4 #(
    .INIT(16'h3332)) 
    \RXD[1]_i_1__1 
       (.I0(RXDATA_REG5[1]),
        .I1(SOP_REG3),
        .I2(EXTEND_REG1),
        .I3(FALSE_CARRIER_REG3),
        .O(\RXD[1]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \RXD[2]_i_1__1 
       (.I0(SOP_REG3),
        .I1(EXTEND_REG1),
        .I2(FALSE_CARRIER_REG3),
        .I3(RXDATA_REG5[2]),
        .O(\RXD[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT4 #(
    .INIT(16'h3332)) 
    \RXD[3]_i_1__1 
       (.I0(RXDATA_REG5[3]),
        .I1(SOP_REG3),
        .I2(EXTEND_REG1),
        .I3(FALSE_CARRIER_REG3),
        .O(\RXD[3]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT5 #(
    .INIT(32'hAAAAFAEE)) 
    \RXD[4]_i_1__1 
       (.I0(SOP_REG3),
        .I1(RXDATA_REG5[4]),
        .I2(EXTEND_ERR),
        .I3(EXTEND_REG1),
        .I4(FALSE_CARRIER_REG3),
        .O(\RXD[4]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \RXD[5]_i_1__1 
       (.I0(RXDATA_REG5[5]),
        .I1(SOP_REG3),
        .I2(EXTEND_REG1),
        .I3(FALSE_CARRIER_REG3),
        .O(\RXD[5]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT4 #(
    .INIT(16'hFF10)) 
    \RXD[6]_i_1__1 
       (.I0(EXTEND_REG1),
        .I1(FALSE_CARRIER_REG3),
        .I2(RXDATA_REG5[6]),
        .I3(SOP_REG3),
        .O(\RXD[6]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \RXD[7]_i_1__1 
       (.I0(RXDATA_REG5[7]),
        .I1(SOP_REG3),
        .I2(EXTEND_REG1),
        .I3(FALSE_CARRIER_REG3),
        .O(\RXD[7]_i_1__1_n_0 ));
  FDRE \RXD_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[0]_i_1__1_n_0 ),
        .Q(gmii_rxd_ch2[0]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[1]_i_1__1_n_0 ),
        .Q(gmii_rxd_ch2[1]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[2]_i_1__1_n_0 ),
        .Q(gmii_rxd_ch2[2]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[3]_i_1__1_n_0 ),
        .Q(gmii_rxd_ch2[3]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[4]_i_1__1_n_0 ),
        .Q(gmii_rxd_ch2[4]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[5]_i_1__1_n_0 ),
        .Q(gmii_rxd_ch2[5]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[6]_i_1__1_n_0 ),
        .Q(gmii_rxd_ch2[6]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[7]_i_1__1_n_0 ),
        .Q(gmii_rxd_ch2[7]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  LUT4 #(
    .INIT(16'h1110)) 
    \RX_CONFIG_REG[15]_i_1__1 
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I1(RXCHARISK_REG1),
        .I2(C_REG1),
        .I3(C_HDR_REMOVED_REG),
        .O(\RX_CONFIG_REG[15]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'h0000AEAA)) 
    \RX_CONFIG_REG[7]_i_1__1 
       (.I0(C),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I3(C_REG2),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(\RX_CONFIG_REG[7]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'h80FF8000)) 
    RX_CONFIG_REG_NULL_i_1__1
       (.I0(RX_CONFIG_REG_NULL_i_2__1_n_0),
        .I1(RX_CONFIG_REG_NULL_i_3__1_n_0),
        .I2(RX_CONFIG_REG_NULL_i_4__1_n_0),
        .I3(RX_CONFIG_VALID),
        .I4(RX_CONFIG_REG_NULL_reg_0),
        .O(RX_CONFIG_REG_NULL_reg));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    RX_CONFIG_REG_NULL_i_2__1
       (.I0(SGMII_PHY_STATUS_reg[12]),
        .I1(SGMII_PHY_STATUS_reg[13]),
        .I2(SGMII_PHY_STATUS_reg[10]),
        .I3(SGMII_PHY_STATUS_reg[11]),
        .I4(SGMII_PHY_STATUS_reg[15]),
        .I5(SGMII_PHY_STATUS_reg[14]),
        .O(RX_CONFIG_REG_NULL_i_2__1_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    RX_CONFIG_REG_NULL_i_3__1
       (.I0(SGMII_PHY_STATUS_reg[1]),
        .I1(SGMII_PHY_STATUS_reg[0]),
        .I2(SGMII_PHY_STATUS_reg[3]),
        .I3(SGMII_PHY_STATUS_reg[2]),
        .O(RX_CONFIG_REG_NULL_i_3__1_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    RX_CONFIG_REG_NULL_i_4__1
       (.I0(SGMII_PHY_STATUS_reg[6]),
        .I1(SGMII_PHY_STATUS_reg[7]),
        .I2(SGMII_PHY_STATUS_reg[4]),
        .I3(SGMII_PHY_STATUS_reg[5]),
        .I4(SGMII_PHY_STATUS_reg[9]),
        .I5(SGMII_PHY_STATUS_reg[8]),
        .O(RX_CONFIG_REG_NULL_i_4__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \RX_CONFIG_REG_REG[15]_i_1__1 
       (.I0(RX_IDLE),
        .I1(out),
        .O(SR));
  FDRE \RX_CONFIG_REG_reg[0] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__1_n_0 ),
        .D(Q[0]),
        .Q(SGMII_PHY_STATUS_reg[0]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[10] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__1_n_0 ),
        .D(Q[2]),
        .Q(SGMII_PHY_STATUS_reg[10]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[11] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__1_n_0 ),
        .D(Q[3]),
        .Q(SGMII_PHY_STATUS_reg[11]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[12] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__1_n_0 ),
        .D(Q[4]),
        .Q(SGMII_PHY_STATUS_reg[12]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[13] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__1_n_0 ),
        .D(Q[5]),
        .Q(SGMII_PHY_STATUS_reg[13]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[14] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__1_n_0 ),
        .D(Q[6]),
        .Q(SGMII_PHY_STATUS_reg[14]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[15] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__1_n_0 ),
        .D(Q[7]),
        .Q(SGMII_PHY_STATUS_reg[15]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[1] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__1_n_0 ),
        .D(Q[1]),
        .Q(SGMII_PHY_STATUS_reg[1]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[2] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__1_n_0 ),
        .D(Q[2]),
        .Q(SGMII_PHY_STATUS_reg[2]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[3] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__1_n_0 ),
        .D(Q[3]),
        .Q(SGMII_PHY_STATUS_reg[3]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[4] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__1_n_0 ),
        .D(Q[4]),
        .Q(SGMII_PHY_STATUS_reg[4]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[5] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__1_n_0 ),
        .D(Q[5]),
        .Q(SGMII_PHY_STATUS_reg[5]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[6] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__1_n_0 ),
        .D(Q[6]),
        .Q(SGMII_PHY_STATUS_reg[6]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[7] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__1_n_0 ),
        .D(Q[7]),
        .Q(SGMII_PHY_STATUS_reg[7]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[8] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__1_n_0 ),
        .D(Q[0]),
        .Q(SGMII_PHY_STATUS_reg[8]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[9] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__1_n_0 ),
        .D(Q[1]),
        .Q(SGMII_PHY_STATUS_reg[9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000540000)) 
    RX_CONFIG_VALID_INT_i_1__1
       (.I0(RX_CONFIG_VALID_INT_i_2__1_n_0),
        .I1(C_HDR_REMOVED_REG),
        .I2(C_REG1),
        .I3(S2),
        .I4(RXSYNC_STATUS),
        .I5(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(RX_CONFIG_VALID_INT0));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT2 #(
    .INIT(4'hE)) 
    RX_CONFIG_VALID_INT_i_2__1
       (.I0(CGBAD),
        .I1(RXCHARISK_REG1),
        .O(RX_CONFIG_VALID_INT_i_2__1_n_0));
  FDRE RX_CONFIG_VALID_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID_INT0),
        .Q(RX_CONFIG_VALID),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \RX_CONFIG_VALID_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID),
        .Q(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \RX_CONFIG_VALID_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .Q(p_0_in2_in),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \RX_CONFIG_VALID_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_0_in2_in),
        .Q(p_1_in),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \RX_CONFIG_VALID_REG_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_1_in),
        .Q(\RX_CONFIG_VALID_REG_reg_n_0_[3] ),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hFFFFFFF0FFFEFFF0)) 
    RX_DATA_ERROR_i_1__1
       (.I0(CGBAD_REG3),
        .I1(ILLEGAL_K_REG2),
        .I2(RX_DATA_ERROR_i_2__1_n_0),
        .I3(RX_DATA_ERROR_i_3__1_n_0),
        .I4(RECEIVE),
        .I5(RX_IDLE),
        .O(RX_DATA_ERROR0));
  LUT6 #(
    .INIT(64'hAAAA0000FFBA0000)) 
    RX_DATA_ERROR_i_2__1
       (.I0(C_REG1),
        .I1(T_REG1),
        .I2(R),
        .I3(K28p5_REG1),
        .I4(RECEIVE),
        .I5(R_REG1),
        .O(RX_DATA_ERROR_i_2__1_n_0));
  LUT6 #(
    .INIT(64'h0808088808880888)) 
    RX_DATA_ERROR_i_3__1
       (.I0(T_REG2),
        .I1(RECEIVE),
        .I2(R_REG1),
        .I3(R),
        .I4(K28p5_REG1),
        .I5(RXEVEN0_out),
        .O(RX_DATA_ERROR_i_3__1_n_0));
  FDRE RX_DATA_ERROR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_DATA_ERROR0),
        .Q(RX_DATA_ERROR),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT6 #(
    .INIT(64'h0200FFFF02000000)) 
    RX_DV_i_1__1
       (.I0(SOP_REG3),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [0]),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]),
        .I3(XMIT_DATA_INT_reg),
        .I4(RX_DV_i_2__1_n_0),
        .I5(gmii_rx_dv_ch2),
        .O(RX_DV_i_1__1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFDF1F1F1F)) 
    RX_DV_i_2__1
       (.I0(RECEIVE),
        .I1(RXSYNC_STATUS),
        .I2(XMIT_DATA),
        .I3(RX_ER_i_3__1_n_0),
        .I4(SOP_REG3),
        .I5(EOP_REG1),
        .O(RX_DV_i_2__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    RX_DV_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_DV_i_1__1_n_0),
        .Q(gmii_rx_dv_ch2),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hE0F0E00000000000)) 
    RX_ER_i_1__1
       (.I0(RX_ER_i_2__1_n_0),
        .I1(RX_DATA_ERROR),
        .I2(XMIT_DATA),
        .I3(RXSYNC_STATUS),
        .I4(RECEIVE),
        .I5(RX_ER_i_3__1_n_0),
        .O(RX_ER0));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT2 #(
    .INIT(4'hE)) 
    RX_ER_i_2__1
       (.I0(EXTEND_REG1),
        .I1(FALSE_CARRIER_REG3),
        .O(RX_ER_i_2__1_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    RX_ER_i_3__1
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [0]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]),
        .O(RX_ER_i_3__1_n_0));
  FDRE #(
    .INIT(1'b0)) 
    RX_ER_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_ER0),
        .Q(gmii_rx_er_ch2),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hFEAAFFFFFEAAFEAA)) 
    RX_INVALID_i_1__1
       (.I0(FROM_RX_CX),
        .I1(FROM_IDLE_D),
        .I2(FROM_RX_K),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ),
        .I4(K28p5_REG1),
        .I5(RX_INVALID),
        .O(RX_INVALID_i_1__1_n_0));
  FDRE RX_INVALID_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_INVALID_i_1__1_n_0),
        .Q(RX_INVALID),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT3 #(
    .INIT(8'h08)) 
    RX_RUDI_INVALID_REG_i_1__1
       (.I0(RX_INVALID),
        .I1(RXSYNC_STATUS),
        .I2(out),
        .O(RX_RUDI_INVALID_REG_reg));
  FDRE R_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(R),
        .Q(R_REG1),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000010000000)) 
    R_i_1__3
       (.I0(R_i_2__1_n_0),
        .I1(Q[3]),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I3(Q[7]),
        .I4(Q[0]),
        .I5(R_i_3__1_n_0),
        .O(K23p7));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT2 #(
    .INIT(4'h7)) 
    R_i_2__1
       (.I0(Q[1]),
        .I1(Q[6]),
        .O(R_i_2__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    R_i_3__1
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[5]),
        .O(R_i_3__1_n_0));
  FDRE R_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K23p7),
        .Q(R),
        .R(1'b0));
  FDRE SOP_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP),
        .Q(SOP_REG1),
        .R(1'b0));
  FDRE SOP_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP_REG1),
        .Q(SOP_REG2),
        .R(1'b0));
  FDRE SOP_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP_REG2),
        .Q(SOP_REG3),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00E00000)) 
    SOP_i_1__1
       (.I0(EXTEND),
        .I1(RX_IDLE),
        .I2(S_0),
        .I3(WAIT_FOR_K),
        .I4(XMIT_DATA_INT_reg),
        .O(SOP0));
  FDRE SOP_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP0),
        .Q(SOP),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE SYNC_STATUS_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(1'b1),
        .Q(SYNC_STATUS_REG),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT6 #(
    .INIT(64'h0800000000000000)) 
    S_i_1__3
       (.I0(Q[5]),
        .I1(Q[4]),
        .I2(Q[2]),
        .I3(S_i_2__1_n_0),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(Q[3]),
        .O(S0));
  LUT6 #(
    .INIT(64'h1000000000000000)) 
    S_i_2__1
       (.I0(D),
        .I1(p_0_in),
        .I2(Q[0]),
        .I3(Q[7]),
        .I4(Q[6]),
        .I5(Q[1]),
        .O(S_i_2__1_n_0));
  FDRE S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S0),
        .Q(S_0),
        .R(1'b0));
  FDRE T_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T),
        .Q(T_REG1),
        .R(1'b0));
  FDRE T_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T_REG1),
        .Q(T_REG2),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000020000000)) 
    T_i_1__3
       (.I0(T_i_2__1_n_0),
        .I1(Q[1]),
        .I2(Q[6]),
        .I3(Q[7]),
        .I4(Q[0]),
        .I5(R_i_3__1_n_0),
        .O(K29p7));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT2 #(
    .INIT(4'h8)) 
    T_i_2__1
       (.I0(Q[3]),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(T_i_2__1_n_0));
  FDRE T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K29p7),
        .Q(T),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h7F0F)) 
    WAIT_FOR_K_i_1__1
       (.I0(K28p5_REG1),
        .I1(RXEVEN0_out),
        .I2(SYNC_STATUS_REG),
        .I3(WAIT_FOR_K),
        .O(WAIT_FOR_K_i_1__1_n_0));
  FDRE WAIT_FOR_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(WAIT_FOR_K_i_1__1_n_0),
        .Q(WAIT_FOR_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__0_i_1__1
       (.I0(SGMII_PHY_STATUS_reg[13]),
        .I1(\RX_CONFIG_SNAPSHOT_reg[13] [1]),
        .I2(SGMII_PHY_STATUS_reg[12]),
        .I3(\RX_CONFIG_SNAPSHOT_reg[13] [0]),
        .O(CONSISTENCY_MATCH_reg));
endmodule

(* ORIG_REF_NAME = "RX" *) 
module qsgmii_1218_RX_148
   (K28p5_REG1,
    RX_IDLE,
    S2,
    gmii_rx_er_ch1,
    RX_CONFIG_VALID,
    status_vector_ch1,
    gmii_rx_dv_ch1,
    RX_INVALID,
    I_reg_0,
    I_reg_1,
    ACKNOWLEDGE_MATCH_3,
    SR,
    BASEX_REMOTE_FAULT_RSLVD,
    SGMII_PHY_STATUS_reg,
    S,
    CONSISTENCY_MATCH_reg,
    RECEIVED_IDLE_reg,
    RX_CONFIG_REG_NULL_reg,
    RX_RUDI_INVALID_REG_reg,
    gmii_rxd_ch1,
    Q,
    userclk,
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ,
    I0,
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ,
    D,
    p_0_in,
    RXSYNC_STATUS,
    XMIT_DATA,
    XMIT_DATA_INT_reg,
    EVEN_reg,
    RXEVEN0_out,
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] ,
    out,
    MASK_RUDI_BUFERR,
    \RX_CONFIG_REG_REG_reg[13] ,
    \RX_CONFIG_SNAPSHOT_reg[13] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ,
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ,
    RECEIVED_IDLE,
    RX_CONFIG_REG_NULL_reg_0);
  output K28p5_REG1;
  output RX_IDLE;
  output S2;
  output gmii_rx_er_ch1;
  output RX_CONFIG_VALID;
  output [1:0]status_vector_ch1;
  output gmii_rx_dv_ch1;
  output RX_INVALID;
  output I_reg_0;
  output I_reg_1;
  output ACKNOWLEDGE_MATCH_3;
  output [0:0]SR;
  output [0:0]BASEX_REMOTE_FAULT_RSLVD;
  output [15:0]SGMII_PHY_STATUS_reg;
  output [0:0]S;
  output [0:0]CONSISTENCY_MATCH_reg;
  output RECEIVED_IDLE_reg;
  output RX_CONFIG_REG_NULL_reg;
  output RX_RUDI_INVALID_REG_reg;
  output [7:0]gmii_rxd_ch1;
  input [7:0]Q;
  input userclk;
  input \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;
  input I0;
  input \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  input D;
  input p_0_in;
  input RXSYNC_STATUS;
  input XMIT_DATA;
  input XMIT_DATA_INT_reg;
  input EVEN_reg;
  input RXEVEN0_out;
  input [1:0]\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] ;
  input out;
  input MASK_RUDI_BUFERR;
  input [1:0]\RX_CONFIG_REG_REG_reg[13] ;
  input [1:0]\RX_CONFIG_SNAPSHOT_reg[13] ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  input \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ;
  input RECEIVED_IDLE;
  input RX_CONFIG_REG_NULL_reg_0;

  wire ACKNOWLEDGE_MATCH_3;
  wire [0:0]BASEX_REMOTE_FAULT_RSLVD;
  wire C;
  wire C0;
  wire CGBAD;
  wire CGBAD_REG1;
  wire CGBAD_REG2;
  wire CGBAD_REG3;
  wire [0:0]CONSISTENCY_MATCH_reg;
  wire C_HDR_REMOVED;
  wire C_HDR_REMOVED_REG;
  wire C_REG1;
  wire C_REG2;
  wire C_REG3;
  wire C_i_2__0_n_0;
  wire D;
  wire D0p0;
  wire D0p0_REG;
  wire D0p0_REG_i_2__0_n_0;
  wire D0p0_REG_i_3__0_n_0;
  wire EOP;
  wire EOP0;
  wire EOP_REG1;
  wire EOP_REG10;
  wire EOP_i_2__0_n_0;
  wire EVEN_reg;
  wire EXTEND;
  wire EXTEND_ERR;
  wire EXTEND_ERR0;
  wire EXTEND_REG1;
  wire EXTEND_REG2;
  wire EXTEND_REG3;
  wire EXTEND_i_1__0_n_0;
  wire EXT_ILLEGAL_K;
  wire EXT_ILLEGAL_K0;
  wire EXT_ILLEGAL_K_REG1;
  wire EXT_ILLEGAL_K_REG2;
  wire FALSE_CARRIER;
  wire FALSE_CARRIER0;
  wire FALSE_CARRIER_REG1;
  wire FALSE_CARRIER_REG2;
  wire FALSE_CARRIER_REG3;
  wire FALSE_CARRIER_i_1__0_n_0;
  wire FALSE_CARRIER_i_3__0_n_0;
  wire FALSE_DATA;
  wire FALSE_DATA0;
  wire FALSE_DATA_i_10__0_n_0;
  wire FALSE_DATA_i_2__0_n_0;
  wire FALSE_DATA_i_3__0_n_0;
  wire FALSE_DATA_i_4__0_n_0;
  wire FALSE_DATA_i_5__0_n_0;
  wire FALSE_DATA_i_6__0_n_0;
  wire FALSE_DATA_i_7__0_n_0;
  wire FALSE_DATA_i_8__0_n_0;
  wire FALSE_DATA_i_9__0_n_0;
  wire FALSE_K;
  wire FALSE_K0;
  wire FALSE_K_i_2__0_n_0;
  wire FALSE_NIT;
  wire FALSE_NIT0;
  wire FALSE_NIT_i_2__0_n_0;
  wire FALSE_NIT_i_3__0_n_0;
  wire FALSE_NIT_i_4__0_n_0;
  wire FROM_IDLE_D;
  wire FROM_IDLE_D0;
  wire FROM_RX_CX;
  wire FROM_RX_CX0;
  wire FROM_RX_K;
  wire FROM_RX_K0;
  wire I;
  wire I0;
  wire \IDLE_REG_reg_n_0_[0] ;
  wire \IDLE_REG_reg_n_0_[2] ;
  wire ILLEGAL_K;
  wire ILLEGAL_K0;
  wire ILLEGAL_K_REG1;
  wire ILLEGAL_K_REG2;
  wire I_reg_0;
  wire I_reg_1;
  wire K23p7;
  wire K28p5;
  wire K28p5_REG1;
  wire K28p5_REG1_i_2__0_n_0;
  wire K28p5_REG2;
  wire K29p7;
  wire MASK_RUDI_BUFERR;
  wire [1:0]\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] ;
  wire \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ;
  wire [7:0]Q;
  wire R;
  wire RECEIVE;
  wire RECEIVED_IDLE;
  wire RECEIVED_IDLE_reg;
  wire RECEIVE_i_1__0_n_0;
  wire RUDI_C0__0;
  wire RUDI_I0;
  wire RXCHARISK_REG1;
  wire [7:0]RXDATA_REG5;
  wire \RXD[0]_i_1__0_n_0 ;
  wire \RXD[1]_i_1__0_n_0 ;
  wire \RXD[2]_i_1__0_n_0 ;
  wire \RXD[3]_i_1__0_n_0 ;
  wire \RXD[4]_i_1__0_n_0 ;
  wire \RXD[5]_i_1__0_n_0 ;
  wire \RXD[6]_i_1__0_n_0 ;
  wire \RXD[7]_i_1__0_n_0 ;
  wire RXEVEN0_out;
  wire RXSYNC_STATUS;
  wire \RX_CONFIG_REG[15]_i_1__0_n_0 ;
  wire \RX_CONFIG_REG[7]_i_1__0_n_0 ;
  wire RX_CONFIG_REG_NULL_i_2__0_n_0;
  wire RX_CONFIG_REG_NULL_i_3__0_n_0;
  wire RX_CONFIG_REG_NULL_i_4__0_n_0;
  wire RX_CONFIG_REG_NULL_reg;
  wire RX_CONFIG_REG_NULL_reg_0;
  wire [1:0]\RX_CONFIG_REG_REG_reg[13] ;
  wire [1:0]\RX_CONFIG_SNAPSHOT_reg[13] ;
  wire RX_CONFIG_VALID;
  wire RX_CONFIG_VALID_INT0;
  wire RX_CONFIG_VALID_INT_i_2__0_n_0;
  wire \RX_CONFIG_VALID_REG_reg_n_0_[0] ;
  wire \RX_CONFIG_VALID_REG_reg_n_0_[3] ;
  wire RX_DATA_ERROR;
  wire RX_DATA_ERROR0;
  wire RX_DATA_ERROR_i_2__0_n_0;
  wire RX_DATA_ERROR_i_3__0_n_0;
  wire RX_DV_i_1__0_n_0;
  wire RX_DV_i_2__0_n_0;
  wire RX_ER0;
  wire RX_ER_i_2__0_n_0;
  wire RX_ER_i_3__0_n_0;
  wire RX_IDLE;
  wire RX_INVALID;
  wire RX_INVALID_i_1__0_n_0;
  wire RX_RUDI_INVALID_REG_reg;
  wire R_REG1;
  wire R_i_2__0_n_0;
  wire R_i_3__0_n_0;
  wire [0:0]S;
  wire S0;
  wire S2;
  wire [15:0]SGMII_PHY_STATUS_reg;
  wire SOP;
  wire SOP0;
  wire SOP_REG1;
  wire SOP_REG2;
  wire SOP_REG3;
  wire [0:0]SR;
  wire SYNC_STATUS_REG;
  wire S_0;
  wire S_i_2__0_n_0;
  wire T;
  wire T_REG1;
  wire T_REG2;
  wire T_i_2__0_n_0;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ;
  wire WAIT_FOR_K;
  wire WAIT_FOR_K_i_1__0_n_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT_reg;
  wire gmii_rx_dv_ch1;
  wire gmii_rx_er_ch1;
  wire [7:0]gmii_rxd_ch1;
  wire out;
  wire p_0_in;
  wire p_0_in1_in;
  wire p_0_in2_in;
  wire p_1_in;
  wire [1:0]status_vector_ch1;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    ACKNOWLEDGE_MATCH_3_i_2__0
       (.I0(out),
        .I1(RX_IDLE),
        .I2(MASK_RUDI_BUFERR),
        .O(ACKNOWLEDGE_MATCH_3));
  LUT1 #(
    .INIT(2'h1)) 
    \BASEX_REMOTE_FAULT[1]_i_1__0 
       (.I0(SGMII_PHY_STATUS_reg[15]),
        .O(BASEX_REMOTE_FAULT_RSLVD));
  FDRE CGBAD_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD),
        .Q(CGBAD_REG1),
        .R(1'b0));
  FDRE CGBAD_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD_REG1),
        .Q(CGBAD_REG2),
        .R(1'b0));
  FDRE CGBAD_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD_REG2),
        .Q(CGBAD_REG3),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT2 #(
    .INIT(4'hE)) 
    CGBAD_i_1__0
       (.I0(D),
        .I1(p_0_in),
        .O(S2));
  FDRE CGBAD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S2),
        .Q(CGBAD),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT4 #(
    .INIT(16'h9009)) 
    CONFIG_REG_MATCH_COMB2_carry__0_i_1__0
       (.I0(SGMII_PHY_STATUS_reg[13]),
        .I1(\RX_CONFIG_REG_REG_reg[13] [1]),
        .I2(SGMII_PHY_STATUS_reg[12]),
        .I3(\RX_CONFIG_REG_REG_reg[13] [0]),
        .O(S));
  LUT3 #(
    .INIT(8'h40)) 
    C_HDR_REMOVED_REG_i_1__0
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .I2(C_REG2),
        .O(C_HDR_REMOVED));
  FDRE C_HDR_REMOVED_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_HDR_REMOVED),
        .Q(C_HDR_REMOVED_REG),
        .R(1'b0));
  FDRE C_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C),
        .Q(C_REG1),
        .R(1'b0));
  FDRE C_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_REG1),
        .Q(C_REG2),
        .R(1'b0));
  FDRE C_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_REG2),
        .Q(C_REG3),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000050000030)) 
    C_i_1__0
       (.I0(K28p5_REG1_i_2__0_n_0),
        .I1(C_i_2__0_n_0),
        .I2(K28p5_REG1),
        .I3(Q[0]),
        .I4(Q[7]),
        .I5(D0p0_REG_i_2__0_n_0),
        .O(C0));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    C_i_2__0
       (.I0(Q[2]),
        .I1(Q[4]),
        .I2(Q[5]),
        .I3(Q[6]),
        .I4(Q[1]),
        .O(C_i_2__0_n_0));
  FDRE C_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C0),
        .Q(C),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    D0p0_REG_i_1__0
       (.I0(D0p0_REG_i_2__0_n_0),
        .I1(Q[7]),
        .I2(Q[0]),
        .I3(Q[6]),
        .I4(Q[1]),
        .I5(D0p0_REG_i_3__0_n_0),
        .O(D0p0));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT2 #(
    .INIT(4'hE)) 
    D0p0_REG_i_2__0
       (.I0(Q[3]),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(D0p0_REG_i_2__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    D0p0_REG_i_3__0
       (.I0(Q[5]),
        .I1(Q[4]),
        .I2(Q[2]),
        .O(D0p0_REG_i_3__0_n_0));
  FDRE D0p0_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(D0p0),
        .Q(D0p0_REG),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hF8)) 
    EOP_REG1_i_1__0
       (.I0(EXTEND_REG1),
        .I1(EXTEND),
        .I2(EOP),
        .O(EOP_REG10));
  FDRE EOP_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EOP_REG10),
        .Q(EOP_REG1),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hFFFFFFFFF8000000)) 
    EOP_i_1__0
       (.I0(RXEVEN0_out),
        .I1(K28p5_REG1),
        .I2(R),
        .I3(R_REG1),
        .I4(T_REG2),
        .I5(EOP_i_2__0_n_0),
        .O(EOP0));
  LUT5 #(
    .INIT(32'hF8888888)) 
    EOP_i_2__0
       (.I0(K28p5_REG1),
        .I1(RX_IDLE),
        .I2(D0p0_REG),
        .I3(C_REG1),
        .I4(RXEVEN0_out),
        .O(EOP_i_2__0_n_0));
  FDRE EOP_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EOP0),
        .Q(EOP),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT3 #(
    .INIT(8'hF8)) 
    EXTEND_ERR_i_1__0
       (.I0(EXTEND_REG3),
        .I1(CGBAD_REG3),
        .I2(EXT_ILLEGAL_K_REG2),
        .O(EXTEND_ERR0));
  FDRE EXTEND_ERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_ERR0),
        .Q(EXTEND_ERR),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE EXTEND_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND),
        .Q(EXTEND_REG1),
        .R(1'b0));
  FDRE EXTEND_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_REG1),
        .Q(EXTEND_REG2),
        .R(1'b0));
  FDRE EXTEND_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_REG2),
        .Q(EXTEND_REG3),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hF2222222F0000000)) 
    EXTEND_i_1__0
       (.I0(EVEN_reg),
        .I1(S_0),
        .I2(RECEIVE),
        .I3(R),
        .I4(R_REG1),
        .I5(EXTEND),
        .O(EXTEND_i_1__0_n_0));
  FDRE EXTEND_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_i_1__0_n_0),
        .Q(EXTEND),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE EXT_ILLEGAL_K_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K),
        .Q(EXT_ILLEGAL_K_REG1),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE EXT_ILLEGAL_K_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K_REG1),
        .Q(EXT_ILLEGAL_K_REG2),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT5 #(
    .INIT(32'h00000444)) 
    EXT_ILLEGAL_K_i_1__0
       (.I0(S_0),
        .I1(EXTEND_REG1),
        .I2(RXEVEN0_out),
        .I3(K28p5_REG1),
        .I4(R),
        .O(EXT_ILLEGAL_K0));
  FDRE EXT_ILLEGAL_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K0),
        .Q(EXT_ILLEGAL_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE FALSE_CARRIER_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER),
        .Q(FALSE_CARRIER_REG1),
        .R(1'b0));
  FDRE FALSE_CARRIER_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_REG1),
        .Q(FALSE_CARRIER_REG2),
        .R(1'b0));
  FDRE FALSE_CARRIER_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_REG2),
        .Q(FALSE_CARRIER_REG3),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT4 #(
    .INIT(16'hBFAA)) 
    FALSE_CARRIER_i_1__0
       (.I0(FALSE_CARRIER0),
        .I1(K28p5_REG1),
        .I2(RXEVEN0_out),
        .I3(FALSE_CARRIER),
        .O(FALSE_CARRIER_i_1__0_n_0));
  LUT5 #(
    .INIT(32'h01000000)) 
    FALSE_CARRIER_i_2__0
       (.I0(FALSE_CARRIER_i_3__0_n_0),
        .I1(K28p5_REG1),
        .I2(S_0),
        .I3(RX_IDLE),
        .I4(XMIT_DATA_INT_reg),
        .O(FALSE_CARRIER0));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    FALSE_CARRIER_i_3__0
       (.I0(FALSE_DATA),
        .I1(FALSE_K),
        .I2(FALSE_NIT),
        .O(FALSE_CARRIER_i_3__0_n_0));
  FDRE FALSE_CARRIER_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_i_1__0_n_0),
        .Q(FALSE_CARRIER),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    FALSE_DATA_i_10__0
       (.I0(Q[2]),
        .I1(Q[4]),
        .O(FALSE_DATA_i_10__0_n_0));
  LUT6 #(
    .INIT(64'hFFAAFFFFFFAAFFEA)) 
    FALSE_DATA_i_1__0
       (.I0(FALSE_DATA_i_2__0_n_0),
        .I1(FALSE_DATA_i_3__0_n_0),
        .I2(Q[5]),
        .I3(FALSE_DATA_i_4__0_n_0),
        .I4(D),
        .I5(FALSE_DATA_i_5__0_n_0),
        .O(FALSE_DATA0));
  LUT6 #(
    .INIT(64'h0A0A0A0A0A0A0B0A)) 
    FALSE_DATA_i_2__0
       (.I0(FALSE_DATA_i_6__0_n_0),
        .I1(C_i_2__0_n_0),
        .I2(D),
        .I3(Q[0]),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(Q[7]),
        .O(FALSE_DATA_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h0004000000000000)) 
    FALSE_DATA_i_3__0
       (.I0(D0p0_REG_i_2__0_n_0),
        .I1(FALSE_DATA_i_7__0_n_0),
        .I2(Q[4]),
        .I3(Q[6]),
        .I4(Q[1]),
        .I5(Q[2]),
        .O(FALSE_DATA_i_3__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT5 #(
    .INIT(32'h00000002)) 
    FALSE_DATA_i_4__0
       (.I0(Q[7]),
        .I1(Q[0]),
        .I2(D),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I4(K28p5_REG1_i_2__0_n_0),
        .O(FALSE_DATA_i_4__0_n_0));
  LUT6 #(
    .INIT(64'h0040000000000000)) 
    FALSE_DATA_i_5__0
       (.I0(FALSE_DATA_i_8__0_n_0),
        .I1(FALSE_DATA_i_9__0_n_0),
        .I2(Q[5]),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I4(Q[2]),
        .I5(Q[3]),
        .O(FALSE_DATA_i_5__0_n_0));
  LUT6 #(
    .INIT(64'h0000000000000400)) 
    FALSE_DATA_i_6__0
       (.I0(R_i_2__0_n_0),
        .I1(FALSE_DATA_i_10__0_n_0),
        .I2(D0p0_REG_i_2__0_n_0),
        .I3(Q[0]),
        .I4(Q[5]),
        .I5(Q[7]),
        .O(FALSE_DATA_i_6__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT2 #(
    .INIT(4'h8)) 
    FALSE_DATA_i_7__0
       (.I0(Q[0]),
        .I1(Q[7]),
        .O(FALSE_DATA_i_7__0_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    FALSE_DATA_i_8__0
       (.I0(Q[1]),
        .I1(Q[6]),
        .O(FALSE_DATA_i_8__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT2 #(
    .INIT(4'h2)) 
    FALSE_DATA_i_9__0
       (.I0(Q[7]),
        .I1(Q[0]),
        .O(FALSE_DATA_i_9__0_n_0));
  FDRE FALSE_DATA_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_DATA0),
        .Q(FALSE_DATA),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT5 #(
    .INIT(32'h00000082)) 
    FALSE_K_i_1__0
       (.I0(FALSE_K_i_2__0_n_0),
        .I1(Q[5]),
        .I2(Q[6]),
        .I3(D),
        .I4(Q[1]),
        .O(FALSE_K0));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    FALSE_K_i_2__0
       (.I0(Q[2]),
        .I1(Q[4]),
        .I2(Q[7]),
        .I3(Q[0]),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(Q[3]),
        .O(FALSE_K_i_2__0_n_0));
  FDRE FALSE_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_K0),
        .Q(FALSE_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hF000000AC000000A)) 
    FALSE_NIT_i_1__0
       (.I0(FALSE_NIT_i_2__0_n_0),
        .I1(FALSE_NIT_i_3__0_n_0),
        .I2(Q[4]),
        .I3(Q[2]),
        .I4(Q[5]),
        .I5(FALSE_NIT_i_4__0_n_0),
        .O(FALSE_NIT0));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    FALSE_NIT_i_2__0
       (.I0(D0p0_REG_i_2__0_n_0),
        .I1(Q[0]),
        .I2(Q[7]),
        .I3(D),
        .I4(Q[1]),
        .I5(Q[6]),
        .O(FALSE_NIT_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    FALSE_NIT_i_3__0
       (.I0(Q[1]),
        .I1(Q[6]),
        .I2(T_i_2__0_n_0),
        .I3(D),
        .I4(Q[0]),
        .I5(Q[7]),
        .O(FALSE_NIT_i_3__0_n_0));
  LUT6 #(
    .INIT(64'h0000000028000000)) 
    FALSE_NIT_i_4__0
       (.I0(T_i_2__0_n_0),
        .I1(Q[0]),
        .I2(Q[7]),
        .I3(D),
        .I4(Q[6]),
        .I5(Q[1]),
        .O(FALSE_NIT_i_4__0_n_0));
  FDRE FALSE_NIT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_NIT0),
        .Q(FALSE_NIT),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    FROM_IDLE_D_i_1__0
       (.I0(WAIT_FOR_K),
        .I1(RX_IDLE),
        .I2(K28p5_REG1),
        .I3(XMIT_DATA),
        .O(FROM_IDLE_D0));
  FDRE FROM_IDLE_D_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_IDLE_D0),
        .Q(FROM_IDLE_D),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFC0FAFAEAC0)) 
    FROM_RX_CX_i_1__0
       (.I0(C_REG2),
        .I1(EVEN_reg),
        .I2(C_REG3),
        .I3(RXCHARISK_REG1),
        .I4(CGBAD),
        .I5(C_REG1),
        .O(FROM_RX_CX0));
  FDRE FROM_RX_CX_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_RX_CX0),
        .Q(FROM_RX_CX),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT4 #(
    .INIT(16'h00A8)) 
    FROM_RX_K_i_1__0
       (.I0(K28p5_REG2),
        .I1(CGBAD),
        .I2(RXCHARISK_REG1),
        .I3(XMIT_DATA),
        .O(FROM_RX_K0));
  FDRE FROM_RX_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_RX_K0),
        .Q(FROM_RX_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE \IDLE_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE),
        .Q(\IDLE_REG_reg_n_0_[0] ),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \IDLE_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IDLE_REG_reg_n_0_[0] ),
        .Q(p_0_in1_in),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \IDLE_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_0_in1_in),
        .Q(\IDLE_REG_reg_n_0_[2] ),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE ILLEGAL_K_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K),
        .Q(ILLEGAL_K_REG1),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE ILLEGAL_K_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K_REG1),
        .Q(ILLEGAL_K_REG2),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    ILLEGAL_K_i_1__0
       (.I0(R),
        .I1(T),
        .I2(K28p5_REG1),
        .I3(RXCHARISK_REG1),
        .O(ILLEGAL_K0));
  FDRE ILLEGAL_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K0),
        .Q(ILLEGAL_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE I_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(I),
        .Q(RX_IDLE),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT5 #(
    .INIT(32'h88888880)) 
    I_i_2__0
       (.I0(RXEVEN0_out),
        .I1(RX_IDLE),
        .I2(FALSE_NIT),
        .I3(FALSE_K),
        .I4(FALSE_DATA),
        .O(I_reg_1));
  LUT6 #(
    .INIT(64'hFFFCFFFFFFFFAAAA)) 
    I_i_3__0
       (.I0(C_i_2__0_n_0),
        .I1(R_i_3__0_n_0),
        .I2(Q[1]),
        .I3(Q[6]),
        .I4(Q[7]),
        .I5(Q[0]),
        .O(I_reg_0));
  FDRE I_reg
       (.C(userclk),
        .CE(1'b1),
        .D(I0),
        .Q(I),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    K28p5_REG1_i_1__0
       (.I0(Q[7]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I4(K28p5_REG1_i_2__0_n_0),
        .O(K28p5));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT5 #(
    .INIT(32'hEFFFFFFF)) 
    K28p5_REG1_i_2__0
       (.I0(Q[6]),
        .I1(Q[1]),
        .I2(Q[5]),
        .I3(Q[2]),
        .I4(Q[4]),
        .O(K28p5_REG1_i_2__0_n_0));
  FDRE K28p5_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K28p5),
        .Q(K28p5_REG1),
        .R(1'b0));
  FDRE K28p5_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K28p5_REG1),
        .Q(K28p5_REG2),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hDC)) 
    RECEIVED_IDLE_i_1__0
       (.I0(RX_CONFIG_VALID),
        .I1(RX_IDLE),
        .I2(RECEIVED_IDLE),
        .O(RECEIVED_IDLE_reg));
  LUT3 #(
    .INIT(8'hBA)) 
    RECEIVE_i_1__0
       (.I0(SOP_REG2),
        .I1(EOP),
        .I2(RECEIVE),
        .O(RECEIVE_i_1__0_n_0));
  FDRE RECEIVE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RECEIVE_i_1__0_n_0),
        .Q(RECEIVE),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    RUDI_C0
       (.I0(p_0_in2_in),
        .I1(\RX_CONFIG_VALID_REG_reg_n_0_[3] ),
        .I2(p_1_in),
        .I3(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .O(RUDI_C0__0));
  FDRE RUDI_C_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RUDI_C0__0),
        .Q(status_vector_ch1[0]),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT2 #(
    .INIT(4'hE)) 
    RUDI_I_i_1__0
       (.I0(\IDLE_REG_reg_n_0_[2] ),
        .I1(p_0_in1_in),
        .O(RUDI_I0));
  FDRE RUDI_I_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RUDI_I0),
        .Q(status_vector_ch1[1]),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE RXCHARISK_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .Q(RXCHARISK_REG1),
        .R(1'b0));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[0]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[0]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[0]),
        .Q(RXDATA_REG5[0]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[1]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[1]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[1]),
        .Q(RXDATA_REG5[1]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[2]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[2]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[2]),
        .Q(RXDATA_REG5[2]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[3]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[3]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[3]),
        .Q(RXDATA_REG5[3]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[4]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[4]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[4]),
        .Q(RXDATA_REG5[4]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[5]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[5]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[5]),
        .Q(RXDATA_REG5[5]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[6]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[6]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[6]),
        .Q(RXDATA_REG5[6]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i1/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[7]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[7]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[7]),
        .Q(RXDATA_REG5[7]));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT4 #(
    .INIT(16'hAFAE)) 
    \RXD[0]_i_1__0 
       (.I0(SOP_REG3),
        .I1(EXTEND_REG1),
        .I2(FALSE_CARRIER_REG3),
        .I3(RXDATA_REG5[0]),
        .O(\RXD[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT4 #(
    .INIT(16'h3332)) 
    \RXD[1]_i_1__0 
       (.I0(RXDATA_REG5[1]),
        .I1(SOP_REG3),
        .I2(EXTEND_REG1),
        .I3(FALSE_CARRIER_REG3),
        .O(\RXD[1]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \RXD[2]_i_1__0 
       (.I0(SOP_REG3),
        .I1(EXTEND_REG1),
        .I2(FALSE_CARRIER_REG3),
        .I3(RXDATA_REG5[2]),
        .O(\RXD[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT4 #(
    .INIT(16'h3332)) 
    \RXD[3]_i_1__0 
       (.I0(RXDATA_REG5[3]),
        .I1(SOP_REG3),
        .I2(EXTEND_REG1),
        .I3(FALSE_CARRIER_REG3),
        .O(\RXD[3]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT5 #(
    .INIT(32'hAAAAFAEE)) 
    \RXD[4]_i_1__0 
       (.I0(SOP_REG3),
        .I1(RXDATA_REG5[4]),
        .I2(EXTEND_ERR),
        .I3(EXTEND_REG1),
        .I4(FALSE_CARRIER_REG3),
        .O(\RXD[4]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \RXD[5]_i_1__0 
       (.I0(RXDATA_REG5[5]),
        .I1(SOP_REG3),
        .I2(EXTEND_REG1),
        .I3(FALSE_CARRIER_REG3),
        .O(\RXD[5]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT4 #(
    .INIT(16'hFF10)) 
    \RXD[6]_i_1__0 
       (.I0(EXTEND_REG1),
        .I1(FALSE_CARRIER_REG3),
        .I2(RXDATA_REG5[6]),
        .I3(SOP_REG3),
        .O(\RXD[6]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \RXD[7]_i_1__0 
       (.I0(RXDATA_REG5[7]),
        .I1(SOP_REG3),
        .I2(EXTEND_REG1),
        .I3(FALSE_CARRIER_REG3),
        .O(\RXD[7]_i_1__0_n_0 ));
  FDRE \RXD_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[0]_i_1__0_n_0 ),
        .Q(gmii_rxd_ch1[0]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[1]_i_1__0_n_0 ),
        .Q(gmii_rxd_ch1[1]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[2]_i_1__0_n_0 ),
        .Q(gmii_rxd_ch1[2]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[3]_i_1__0_n_0 ),
        .Q(gmii_rxd_ch1[3]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[4]_i_1__0_n_0 ),
        .Q(gmii_rxd_ch1[4]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[5]_i_1__0_n_0 ),
        .Q(gmii_rxd_ch1[5]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[6]_i_1__0_n_0 ),
        .Q(gmii_rxd_ch1[6]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[7]_i_1__0_n_0 ),
        .Q(gmii_rxd_ch1[7]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  LUT4 #(
    .INIT(16'h1110)) 
    \RX_CONFIG_REG[15]_i_1__0 
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I1(RXCHARISK_REG1),
        .I2(C_REG1),
        .I3(C_HDR_REMOVED_REG),
        .O(\RX_CONFIG_REG[15]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h0000AEAA)) 
    \RX_CONFIG_REG[7]_i_1__0 
       (.I0(C),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I3(C_REG2),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(\RX_CONFIG_REG[7]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h80FF8000)) 
    RX_CONFIG_REG_NULL_i_1__0
       (.I0(RX_CONFIG_REG_NULL_i_2__0_n_0),
        .I1(RX_CONFIG_REG_NULL_i_3__0_n_0),
        .I2(RX_CONFIG_REG_NULL_i_4__0_n_0),
        .I3(RX_CONFIG_VALID),
        .I4(RX_CONFIG_REG_NULL_reg_0),
        .O(RX_CONFIG_REG_NULL_reg));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    RX_CONFIG_REG_NULL_i_2__0
       (.I0(SGMII_PHY_STATUS_reg[12]),
        .I1(SGMII_PHY_STATUS_reg[13]),
        .I2(SGMII_PHY_STATUS_reg[10]),
        .I3(SGMII_PHY_STATUS_reg[11]),
        .I4(SGMII_PHY_STATUS_reg[15]),
        .I5(SGMII_PHY_STATUS_reg[14]),
        .O(RX_CONFIG_REG_NULL_i_2__0_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    RX_CONFIG_REG_NULL_i_3__0
       (.I0(SGMII_PHY_STATUS_reg[1]),
        .I1(SGMII_PHY_STATUS_reg[0]),
        .I2(SGMII_PHY_STATUS_reg[3]),
        .I3(SGMII_PHY_STATUS_reg[2]),
        .O(RX_CONFIG_REG_NULL_i_3__0_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    RX_CONFIG_REG_NULL_i_4__0
       (.I0(SGMII_PHY_STATUS_reg[6]),
        .I1(SGMII_PHY_STATUS_reg[7]),
        .I2(SGMII_PHY_STATUS_reg[4]),
        .I3(SGMII_PHY_STATUS_reg[5]),
        .I4(SGMII_PHY_STATUS_reg[9]),
        .I5(SGMII_PHY_STATUS_reg[8]),
        .O(RX_CONFIG_REG_NULL_i_4__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \RX_CONFIG_REG_REG[15]_i_1__0 
       (.I0(RX_IDLE),
        .I1(out),
        .O(SR));
  FDRE \RX_CONFIG_REG_reg[0] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__0_n_0 ),
        .D(Q[0]),
        .Q(SGMII_PHY_STATUS_reg[0]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[10] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__0_n_0 ),
        .D(Q[2]),
        .Q(SGMII_PHY_STATUS_reg[10]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[11] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__0_n_0 ),
        .D(Q[3]),
        .Q(SGMII_PHY_STATUS_reg[11]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[12] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__0_n_0 ),
        .D(Q[4]),
        .Q(SGMII_PHY_STATUS_reg[12]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[13] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__0_n_0 ),
        .D(Q[5]),
        .Q(SGMII_PHY_STATUS_reg[13]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[14] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__0_n_0 ),
        .D(Q[6]),
        .Q(SGMII_PHY_STATUS_reg[14]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[15] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__0_n_0 ),
        .D(Q[7]),
        .Q(SGMII_PHY_STATUS_reg[15]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[1] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__0_n_0 ),
        .D(Q[1]),
        .Q(SGMII_PHY_STATUS_reg[1]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[2] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__0_n_0 ),
        .D(Q[2]),
        .Q(SGMII_PHY_STATUS_reg[2]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[3] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__0_n_0 ),
        .D(Q[3]),
        .Q(SGMII_PHY_STATUS_reg[3]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[4] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__0_n_0 ),
        .D(Q[4]),
        .Q(SGMII_PHY_STATUS_reg[4]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[5] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__0_n_0 ),
        .D(Q[5]),
        .Q(SGMII_PHY_STATUS_reg[5]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[6] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__0_n_0 ),
        .D(Q[6]),
        .Q(SGMII_PHY_STATUS_reg[6]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[7] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1__0_n_0 ),
        .D(Q[7]),
        .Q(SGMII_PHY_STATUS_reg[7]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[8] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__0_n_0 ),
        .D(Q[0]),
        .Q(SGMII_PHY_STATUS_reg[8]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[9] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1__0_n_0 ),
        .D(Q[1]),
        .Q(SGMII_PHY_STATUS_reg[9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000540000)) 
    RX_CONFIG_VALID_INT_i_1__0
       (.I0(RX_CONFIG_VALID_INT_i_2__0_n_0),
        .I1(C_HDR_REMOVED_REG),
        .I2(C_REG1),
        .I3(S2),
        .I4(RXSYNC_STATUS),
        .I5(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(RX_CONFIG_VALID_INT0));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT2 #(
    .INIT(4'hE)) 
    RX_CONFIG_VALID_INT_i_2__0
       (.I0(CGBAD),
        .I1(RXCHARISK_REG1),
        .O(RX_CONFIG_VALID_INT_i_2__0_n_0));
  FDRE RX_CONFIG_VALID_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID_INT0),
        .Q(RX_CONFIG_VALID),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \RX_CONFIG_VALID_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID),
        .Q(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \RX_CONFIG_VALID_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .Q(p_0_in2_in),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \RX_CONFIG_VALID_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_0_in2_in),
        .Q(p_1_in),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \RX_CONFIG_VALID_REG_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_1_in),
        .Q(\RX_CONFIG_VALID_REG_reg_n_0_[3] ),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hFFFFFFF0FFFEFFF0)) 
    RX_DATA_ERROR_i_1__0
       (.I0(CGBAD_REG3),
        .I1(ILLEGAL_K_REG2),
        .I2(RX_DATA_ERROR_i_2__0_n_0),
        .I3(RX_DATA_ERROR_i_3__0_n_0),
        .I4(RECEIVE),
        .I5(RX_IDLE),
        .O(RX_DATA_ERROR0));
  LUT6 #(
    .INIT(64'hAAAA0000FFBA0000)) 
    RX_DATA_ERROR_i_2__0
       (.I0(C_REG1),
        .I1(T_REG1),
        .I2(R),
        .I3(K28p5_REG1),
        .I4(RECEIVE),
        .I5(R_REG1),
        .O(RX_DATA_ERROR_i_2__0_n_0));
  LUT6 #(
    .INIT(64'h0808088808880888)) 
    RX_DATA_ERROR_i_3__0
       (.I0(T_REG2),
        .I1(RECEIVE),
        .I2(R_REG1),
        .I3(R),
        .I4(K28p5_REG1),
        .I5(RXEVEN0_out),
        .O(RX_DATA_ERROR_i_3__0_n_0));
  FDRE RX_DATA_ERROR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_DATA_ERROR0),
        .Q(RX_DATA_ERROR),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT6 #(
    .INIT(64'h0200FFFF02000000)) 
    RX_DV_i_1__0
       (.I0(SOP_REG3),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [0]),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]),
        .I3(XMIT_DATA_INT_reg),
        .I4(RX_DV_i_2__0_n_0),
        .I5(gmii_rx_dv_ch1),
        .O(RX_DV_i_1__0_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFDF1F1F1F)) 
    RX_DV_i_2__0
       (.I0(RECEIVE),
        .I1(RXSYNC_STATUS),
        .I2(XMIT_DATA),
        .I3(RX_ER_i_3__0_n_0),
        .I4(SOP_REG3),
        .I5(EOP_REG1),
        .O(RX_DV_i_2__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    RX_DV_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_DV_i_1__0_n_0),
        .Q(gmii_rx_dv_ch1),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hE0F0E00000000000)) 
    RX_ER_i_1__0
       (.I0(RX_ER_i_2__0_n_0),
        .I1(RX_DATA_ERROR),
        .I2(XMIT_DATA),
        .I3(RXSYNC_STATUS),
        .I4(RECEIVE),
        .I5(RX_ER_i_3__0_n_0),
        .O(RX_ER0));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT2 #(
    .INIT(4'hE)) 
    RX_ER_i_2__0
       (.I0(EXTEND_REG1),
        .I1(FALSE_CARRIER_REG3),
        .O(RX_ER_i_2__0_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    RX_ER_i_3__0
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [0]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]),
        .O(RX_ER_i_3__0_n_0));
  FDRE #(
    .INIT(1'b0)) 
    RX_ER_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_ER0),
        .Q(gmii_rx_er_ch1),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hFEAAFFFFFEAAFEAA)) 
    RX_INVALID_i_1__0
       (.I0(FROM_RX_CX),
        .I1(FROM_IDLE_D),
        .I2(FROM_RX_K),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ),
        .I4(K28p5_REG1),
        .I5(RX_INVALID),
        .O(RX_INVALID_i_1__0_n_0));
  FDRE RX_INVALID_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_INVALID_i_1__0_n_0),
        .Q(RX_INVALID),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT3 #(
    .INIT(8'h08)) 
    RX_RUDI_INVALID_REG_i_1__0
       (.I0(RX_INVALID),
        .I1(RXSYNC_STATUS),
        .I2(out),
        .O(RX_RUDI_INVALID_REG_reg));
  FDRE R_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(R),
        .Q(R_REG1),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000010000000)) 
    R_i_1__1
       (.I0(R_i_2__0_n_0),
        .I1(Q[3]),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I3(Q[7]),
        .I4(Q[0]),
        .I5(R_i_3__0_n_0),
        .O(K23p7));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT2 #(
    .INIT(4'h7)) 
    R_i_2__0
       (.I0(Q[1]),
        .I1(Q[6]),
        .O(R_i_2__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    R_i_3__0
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[5]),
        .O(R_i_3__0_n_0));
  FDRE R_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K23p7),
        .Q(R),
        .R(1'b0));
  FDRE SOP_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP),
        .Q(SOP_REG1),
        .R(1'b0));
  FDRE SOP_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP_REG1),
        .Q(SOP_REG2),
        .R(1'b0));
  FDRE SOP_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP_REG2),
        .Q(SOP_REG3),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00E00000)) 
    SOP_i_1__0
       (.I0(EXTEND),
        .I1(RX_IDLE),
        .I2(S_0),
        .I3(WAIT_FOR_K),
        .I4(XMIT_DATA_INT_reg),
        .O(SOP0));
  FDRE SOP_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP0),
        .Q(SOP),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE SYNC_STATUS_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(1'b1),
        .Q(SYNC_STATUS_REG),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT6 #(
    .INIT(64'h0800000000000000)) 
    S_i_1__1
       (.I0(Q[5]),
        .I1(Q[4]),
        .I2(Q[2]),
        .I3(S_i_2__0_n_0),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(Q[3]),
        .O(S0));
  LUT6 #(
    .INIT(64'h1000000000000000)) 
    S_i_2__0
       (.I0(D),
        .I1(p_0_in),
        .I2(Q[0]),
        .I3(Q[7]),
        .I4(Q[6]),
        .I5(Q[1]),
        .O(S_i_2__0_n_0));
  FDRE S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S0),
        .Q(S_0),
        .R(1'b0));
  FDRE T_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T),
        .Q(T_REG1),
        .R(1'b0));
  FDRE T_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T_REG1),
        .Q(T_REG2),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000020000000)) 
    T_i_1__1
       (.I0(T_i_2__0_n_0),
        .I1(Q[1]),
        .I2(Q[6]),
        .I3(Q[7]),
        .I4(Q[0]),
        .I5(R_i_3__0_n_0),
        .O(K29p7));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT2 #(
    .INIT(4'h8)) 
    T_i_2__0
       (.I0(Q[3]),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(T_i_2__0_n_0));
  FDRE T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K29p7),
        .Q(T),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h7F0F)) 
    WAIT_FOR_K_i_1__0
       (.I0(K28p5_REG1),
        .I1(RXEVEN0_out),
        .I2(SYNC_STATUS_REG),
        .I3(WAIT_FOR_K),
        .O(WAIT_FOR_K_i_1__0_n_0));
  FDRE WAIT_FOR_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(WAIT_FOR_K_i_1__0_n_0),
        .Q(WAIT_FOR_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__0_i_1__0
       (.I0(SGMII_PHY_STATUS_reg[13]),
        .I1(\RX_CONFIG_SNAPSHOT_reg[13] [1]),
        .I2(SGMII_PHY_STATUS_reg[12]),
        .I3(\RX_CONFIG_SNAPSHOT_reg[13] [0]),
        .O(CONSISTENCY_MATCH_reg));
endmodule

(* ORIG_REF_NAME = "RX" *) 
module qsgmii_1218_RX_156
   (K28p5_REG1,
    RX_IDLE,
    S2,
    gmii_rx_er_ch0,
    RX_CONFIG_VALID,
    status_vector_ch0,
    gmii_rx_dv_ch0,
    RX_INVALID,
    RECEIVED_IDLE_reg,
    RX_CONFIG_REG_NULL_reg,
    RX_RUDI_INVALID_REG_reg,
    I_reg_0,
    I_reg_1,
    ACKNOWLEDGE_MATCH_3,
    SR,
    BASEX_REMOTE_FAULT_RSLVD,
    SGMII_PHY_STATUS_reg,
    S,
    CONSISTENCY_MATCH_reg,
    gmii_rxd_ch0,
    Q,
    userclk,
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ,
    I0,
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ,
    RXEVEN0_out,
    EVEN_reg,
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] ,
    XMIT_DATA_INT_reg,
    \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ,
    RECEIVED_IDLE,
    RX_CONFIG_REG_NULL_reg_0,
    RXSYNC_STATUS,
    out,
    D_0,
    p_0_in,
    XMIT_DATA,
    MASK_RUDI_BUFERR,
    \RX_CONFIG_REG_REG_reg[13] ,
    \RX_CONFIG_SNAPSHOT_reg[13] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] );
  output K28p5_REG1;
  output RX_IDLE;
  output S2;
  output gmii_rx_er_ch0;
  output RX_CONFIG_VALID;
  output [1:0]status_vector_ch0;
  output gmii_rx_dv_ch0;
  output RX_INVALID;
  output RECEIVED_IDLE_reg;
  output RX_CONFIG_REG_NULL_reg;
  output RX_RUDI_INVALID_REG_reg;
  output I_reg_0;
  output I_reg_1;
  output ACKNOWLEDGE_MATCH_3;
  output [0:0]SR;
  output [0:0]BASEX_REMOTE_FAULT_RSLVD;
  output [15:0]SGMII_PHY_STATUS_reg;
  output [0:0]S;
  output [0:0]CONSISTENCY_MATCH_reg;
  output [7:0]gmii_rxd_ch0;
  input [7:0]Q;
  input userclk;
  input \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;
  input I0;
  input \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  input RXEVEN0_out;
  input EVEN_reg;
  input [1:0]\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] ;
  input XMIT_DATA_INT_reg;
  input \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ;
  input RECEIVED_IDLE;
  input RX_CONFIG_REG_NULL_reg_0;
  input RXSYNC_STATUS;
  input out;
  input D_0;
  input p_0_in;
  input XMIT_DATA;
  input MASK_RUDI_BUFERR;
  input [1:0]\RX_CONFIG_REG_REG_reg[13] ;
  input [1:0]\RX_CONFIG_SNAPSHOT_reg[13] ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;

  wire ACKNOWLEDGE_MATCH_3;
  wire [0:0]BASEX_REMOTE_FAULT_RSLVD;
  wire C;
  wire C0;
  wire CGBAD;
  wire CGBAD_REG1;
  wire CGBAD_REG2;
  wire CGBAD_REG3;
  wire [0:0]CONSISTENCY_MATCH_reg;
  wire C_HDR_REMOVED;
  wire C_HDR_REMOVED_REG;
  wire C_REG1;
  wire C_REG2;
  wire C_REG3;
  wire C_i_2_n_0;
  wire D0p0;
  wire D0p0_REG;
  wire D0p0_REG_i_2_n_0;
  wire D0p0_REG_i_3_n_0;
  wire D_0;
  wire EOP;
  wire EOP0;
  wire EOP_REG1;
  wire EOP_REG10;
  wire EOP_i_2_n_0;
  wire EVEN_reg;
  wire EXTEND;
  wire EXTEND_ERR;
  wire EXTEND_ERR0;
  wire EXTEND_REG1;
  wire EXTEND_REG2;
  wire EXTEND_REG3;
  wire EXTEND_i_1_n_0;
  wire EXT_ILLEGAL_K;
  wire EXT_ILLEGAL_K0;
  wire EXT_ILLEGAL_K_REG1;
  wire EXT_ILLEGAL_K_REG2;
  wire FALSE_CARRIER;
  wire FALSE_CARRIER0;
  wire FALSE_CARRIER_REG1;
  wire FALSE_CARRIER_REG2;
  wire FALSE_CARRIER_REG3;
  wire FALSE_CARRIER_i_1_n_0;
  wire FALSE_CARRIER_i_3_n_0;
  wire FALSE_DATA;
  wire FALSE_DATA0;
  wire FALSE_DATA_i_10_n_0;
  wire FALSE_DATA_i_2_n_0;
  wire FALSE_DATA_i_3_n_0;
  wire FALSE_DATA_i_4_n_0;
  wire FALSE_DATA_i_5_n_0;
  wire FALSE_DATA_i_6_n_0;
  wire FALSE_DATA_i_7_n_0;
  wire FALSE_DATA_i_8_n_0;
  wire FALSE_DATA_i_9_n_0;
  wire FALSE_K;
  wire FALSE_K0;
  wire FALSE_K_i_2_n_0;
  wire FALSE_NIT;
  wire FALSE_NIT0;
  wire FALSE_NIT_i_2_n_0;
  wire FALSE_NIT_i_3_n_0;
  wire FALSE_NIT_i_4_n_0;
  wire FROM_IDLE_D;
  wire FROM_IDLE_D0;
  wire FROM_RX_CX;
  wire FROM_RX_CX0;
  wire FROM_RX_K;
  wire FROM_RX_K0;
  wire I;
  wire I0;
  wire \IDLE_REG_reg_n_0_[0] ;
  wire \IDLE_REG_reg_n_0_[2] ;
  wire ILLEGAL_K;
  wire ILLEGAL_K0;
  wire ILLEGAL_K_REG1;
  wire ILLEGAL_K_REG2;
  wire I_reg_0;
  wire I_reg_1;
  wire K23p7;
  wire K28p5;
  wire K28p5_REG1;
  wire K28p5_REG1_i_2_n_0;
  wire K28p5_REG2;
  wire K29p7;
  wire MASK_RUDI_BUFERR;
  wire [1:0]\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] ;
  wire \NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ;
  wire [7:0]Q;
  wire R;
  wire RECEIVE;
  wire RECEIVED_IDLE;
  wire RECEIVED_IDLE_reg;
  wire RECEIVE_i_1_n_0;
  wire RUDI_C0__0;
  wire RUDI_I0;
  wire RXCHARISK_REG1;
  wire [7:0]RXDATA_REG5;
  wire \RXD[0]_i_1_n_0 ;
  wire \RXD[1]_i_1_n_0 ;
  wire \RXD[2]_i_1_n_0 ;
  wire \RXD[3]_i_1_n_0 ;
  wire \RXD[4]_i_1_n_0 ;
  wire \RXD[5]_i_1_n_0 ;
  wire \RXD[6]_i_1_n_0 ;
  wire \RXD[7]_i_1_n_0 ;
  wire RXEVEN0_out;
  wire RXSYNC_STATUS;
  wire \RX_CONFIG_REG[15]_i_1_n_0 ;
  wire \RX_CONFIG_REG[7]_i_1_n_0 ;
  wire RX_CONFIG_REG_NULL_i_2_n_0;
  wire RX_CONFIG_REG_NULL_i_3_n_0;
  wire RX_CONFIG_REG_NULL_i_4_n_0;
  wire RX_CONFIG_REG_NULL_reg;
  wire RX_CONFIG_REG_NULL_reg_0;
  wire [1:0]\RX_CONFIG_REG_REG_reg[13] ;
  wire [1:0]\RX_CONFIG_SNAPSHOT_reg[13] ;
  wire RX_CONFIG_VALID;
  wire RX_CONFIG_VALID_INT0;
  wire RX_CONFIG_VALID_INT_i_2_n_0;
  wire \RX_CONFIG_VALID_REG_reg_n_0_[0] ;
  wire \RX_CONFIG_VALID_REG_reg_n_0_[3] ;
  wire RX_DATA_ERROR;
  wire RX_DATA_ERROR0;
  wire RX_DATA_ERROR_i_2_n_0;
  wire RX_DATA_ERROR_i_3_n_0;
  wire RX_DV_i_1_n_0;
  wire RX_DV_i_2_n_0;
  wire RX_ER0;
  wire RX_ER_i_2_n_0;
  wire RX_ER_i_3_n_0;
  wire RX_IDLE;
  wire RX_INVALID;
  wire RX_INVALID_i_1_n_0;
  wire RX_RUDI_INVALID_REG_reg;
  wire R_REG1;
  wire R_i_2_n_0;
  wire R_i_3_n_0;
  wire [0:0]S;
  wire S0;
  wire S2;
  wire [15:0]SGMII_PHY_STATUS_reg;
  wire SOP;
  wire SOP0;
  wire SOP_REG1;
  wire SOP_REG2;
  wire SOP_REG3;
  wire [0:0]SR;
  wire SYNC_STATUS_REG;
  wire S_0;
  wire S_i_2_n_0;
  wire T;
  wire T_REG1;
  wire T_REG2;
  wire T_i_2_n_0;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ;
  wire WAIT_FOR_K;
  wire WAIT_FOR_K_i_1_n_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT_reg;
  wire gmii_rx_dv_ch0;
  wire gmii_rx_er_ch0;
  wire [7:0]gmii_rxd_ch0;
  wire out;
  wire p_0_in;
  wire p_0_in1_in;
  wire p_0_in2_in;
  wire p_1_in;
  wire [1:0]status_vector_ch0;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    ACKNOWLEDGE_MATCH_3_i_2
       (.I0(out),
        .I1(RX_IDLE),
        .I2(MASK_RUDI_BUFERR),
        .O(ACKNOWLEDGE_MATCH_3));
  LUT1 #(
    .INIT(2'h1)) 
    \BASEX_REMOTE_FAULT[1]_i_1 
       (.I0(SGMII_PHY_STATUS_reg[15]),
        .O(BASEX_REMOTE_FAULT_RSLVD));
  FDRE CGBAD_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD),
        .Q(CGBAD_REG1),
        .R(1'b0));
  FDRE CGBAD_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD_REG1),
        .Q(CGBAD_REG2),
        .R(1'b0));
  FDRE CGBAD_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CGBAD_REG2),
        .Q(CGBAD_REG3),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT2 #(
    .INIT(4'hE)) 
    CGBAD_i_1
       (.I0(D_0),
        .I1(p_0_in),
        .O(S2));
  FDRE CGBAD_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S2),
        .Q(CGBAD),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT4 #(
    .INIT(16'h9009)) 
    CONFIG_REG_MATCH_COMB2_carry__0_i_1
       (.I0(SGMII_PHY_STATUS_reg[13]),
        .I1(\RX_CONFIG_REG_REG_reg[13] [1]),
        .I2(SGMII_PHY_STATUS_reg[12]),
        .I3(\RX_CONFIG_REG_REG_reg[13] [0]),
        .O(S));
  LUT3 #(
    .INIT(8'h40)) 
    C_HDR_REMOVED_REG_i_1
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .I2(C_REG2),
        .O(C_HDR_REMOVED));
  FDRE C_HDR_REMOVED_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_HDR_REMOVED),
        .Q(C_HDR_REMOVED_REG),
        .R(1'b0));
  FDRE C_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C),
        .Q(C_REG1),
        .R(1'b0));
  FDRE C_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_REG1),
        .Q(C_REG2),
        .R(1'b0));
  FDRE C_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C_REG2),
        .Q(C_REG3),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000050000030)) 
    C_i_1
       (.I0(K28p5_REG1_i_2_n_0),
        .I1(C_i_2_n_0),
        .I2(K28p5_REG1),
        .I3(Q[0]),
        .I4(Q[7]),
        .I5(D0p0_REG_i_2_n_0),
        .O(C0));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT5 #(
    .INIT(32'hFEFFFFFF)) 
    C_i_2
       (.I0(Q[2]),
        .I1(Q[4]),
        .I2(Q[5]),
        .I3(Q[6]),
        .I4(Q[1]),
        .O(C_i_2_n_0));
  FDRE C_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C0),
        .Q(C),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    D0p0_REG_i_1
       (.I0(D0p0_REG_i_2_n_0),
        .I1(Q[7]),
        .I2(Q[0]),
        .I3(Q[6]),
        .I4(Q[1]),
        .I5(D0p0_REG_i_3_n_0),
        .O(D0p0));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT2 #(
    .INIT(4'hE)) 
    D0p0_REG_i_2
       (.I0(Q[3]),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(D0p0_REG_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    D0p0_REG_i_3
       (.I0(Q[5]),
        .I1(Q[4]),
        .I2(Q[2]),
        .O(D0p0_REG_i_3_n_0));
  FDRE D0p0_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(D0p0),
        .Q(D0p0_REG),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hF8)) 
    EOP_REG1_i_1
       (.I0(EXTEND_REG1),
        .I1(EXTEND),
        .I2(EOP),
        .O(EOP_REG10));
  FDRE EOP_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EOP_REG10),
        .Q(EOP_REG1),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hFFFFFFFFF8000000)) 
    EOP_i_1
       (.I0(RXEVEN0_out),
        .I1(K28p5_REG1),
        .I2(R),
        .I3(R_REG1),
        .I4(T_REG2),
        .I5(EOP_i_2_n_0),
        .O(EOP0));
  LUT5 #(
    .INIT(32'hF8888888)) 
    EOP_i_2
       (.I0(K28p5_REG1),
        .I1(RX_IDLE),
        .I2(D0p0_REG),
        .I3(C_REG1),
        .I4(RXEVEN0_out),
        .O(EOP_i_2_n_0));
  FDRE EOP_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EOP0),
        .Q(EOP),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT3 #(
    .INIT(8'hF8)) 
    EXTEND_ERR_i_1
       (.I0(EXTEND_REG3),
        .I1(CGBAD_REG3),
        .I2(EXT_ILLEGAL_K_REG2),
        .O(EXTEND_ERR0));
  FDRE EXTEND_ERR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_ERR0),
        .Q(EXTEND_ERR),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE EXTEND_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND),
        .Q(EXTEND_REG1),
        .R(1'b0));
  FDRE EXTEND_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_REG1),
        .Q(EXTEND_REG2),
        .R(1'b0));
  FDRE EXTEND_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_REG2),
        .Q(EXTEND_REG3),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hF2222222F0000000)) 
    EXTEND_i_1
       (.I0(EVEN_reg),
        .I1(S_0),
        .I2(RECEIVE),
        .I3(R),
        .I4(R_REG1),
        .I5(EXTEND),
        .O(EXTEND_i_1_n_0));
  FDRE EXTEND_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXTEND_i_1_n_0),
        .Q(EXTEND),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE EXT_ILLEGAL_K_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K),
        .Q(EXT_ILLEGAL_K_REG1),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE EXT_ILLEGAL_K_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K_REG1),
        .Q(EXT_ILLEGAL_K_REG2),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT5 #(
    .INIT(32'h00000444)) 
    EXT_ILLEGAL_K_i_1
       (.I0(S_0),
        .I1(EXTEND_REG1),
        .I2(RXEVEN0_out),
        .I3(K28p5_REG1),
        .I4(R),
        .O(EXT_ILLEGAL_K0));
  FDRE EXT_ILLEGAL_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EXT_ILLEGAL_K0),
        .Q(EXT_ILLEGAL_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE FALSE_CARRIER_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER),
        .Q(FALSE_CARRIER_REG1),
        .R(1'b0));
  FDRE FALSE_CARRIER_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_REG1),
        .Q(FALSE_CARRIER_REG2),
        .R(1'b0));
  FDRE FALSE_CARRIER_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_REG2),
        .Q(FALSE_CARRIER_REG3),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT4 #(
    .INIT(16'hBFAA)) 
    FALSE_CARRIER_i_1
       (.I0(FALSE_CARRIER0),
        .I1(K28p5_REG1),
        .I2(RXEVEN0_out),
        .I3(FALSE_CARRIER),
        .O(FALSE_CARRIER_i_1_n_0));
  LUT5 #(
    .INIT(32'h01000000)) 
    FALSE_CARRIER_i_2
       (.I0(FALSE_CARRIER_i_3_n_0),
        .I1(K28p5_REG1),
        .I2(S_0),
        .I3(RX_IDLE),
        .I4(XMIT_DATA_INT_reg),
        .O(FALSE_CARRIER0));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    FALSE_CARRIER_i_3
       (.I0(FALSE_DATA),
        .I1(FALSE_K),
        .I2(FALSE_NIT),
        .O(FALSE_CARRIER_i_3_n_0));
  FDRE FALSE_CARRIER_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_CARRIER_i_1_n_0),
        .Q(FALSE_CARRIER),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT6 #(
    .INIT(64'hFFAAFFFFFFAAFFEA)) 
    FALSE_DATA_i_1
       (.I0(FALSE_DATA_i_2_n_0),
        .I1(FALSE_DATA_i_3_n_0),
        .I2(Q[5]),
        .I3(FALSE_DATA_i_4_n_0),
        .I4(D_0),
        .I5(FALSE_DATA_i_5_n_0),
        .O(FALSE_DATA0));
  LUT2 #(
    .INIT(4'h7)) 
    FALSE_DATA_i_10
       (.I0(Q[2]),
        .I1(Q[4]),
        .O(FALSE_DATA_i_10_n_0));
  LUT6 #(
    .INIT(64'h0A0A0A0A0A0A0B0A)) 
    FALSE_DATA_i_2
       (.I0(FALSE_DATA_i_6_n_0),
        .I1(C_i_2_n_0),
        .I2(D_0),
        .I3(Q[0]),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(Q[7]),
        .O(FALSE_DATA_i_2_n_0));
  LUT6 #(
    .INIT(64'h0004000000000000)) 
    FALSE_DATA_i_3
       (.I0(D0p0_REG_i_2_n_0),
        .I1(FALSE_DATA_i_7_n_0),
        .I2(Q[4]),
        .I3(Q[6]),
        .I4(Q[1]),
        .I5(Q[2]),
        .O(FALSE_DATA_i_3_n_0));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT5 #(
    .INIT(32'h00000002)) 
    FALSE_DATA_i_4
       (.I0(Q[7]),
        .I1(Q[0]),
        .I2(D_0),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I4(K28p5_REG1_i_2_n_0),
        .O(FALSE_DATA_i_4_n_0));
  LUT6 #(
    .INIT(64'h0040000000000000)) 
    FALSE_DATA_i_5
       (.I0(FALSE_DATA_i_8_n_0),
        .I1(FALSE_DATA_i_9_n_0),
        .I2(Q[5]),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I4(Q[2]),
        .I5(Q[3]),
        .O(FALSE_DATA_i_5_n_0));
  LUT6 #(
    .INIT(64'h0000000000000400)) 
    FALSE_DATA_i_6
       (.I0(R_i_2_n_0),
        .I1(FALSE_DATA_i_10_n_0),
        .I2(D0p0_REG_i_2_n_0),
        .I3(Q[0]),
        .I4(Q[5]),
        .I5(Q[7]),
        .O(FALSE_DATA_i_6_n_0));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT2 #(
    .INIT(4'h8)) 
    FALSE_DATA_i_7
       (.I0(Q[0]),
        .I1(Q[7]),
        .O(FALSE_DATA_i_7_n_0));
  LUT2 #(
    .INIT(4'hE)) 
    FALSE_DATA_i_8
       (.I0(Q[1]),
        .I1(Q[6]),
        .O(FALSE_DATA_i_8_n_0));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT2 #(
    .INIT(4'h2)) 
    FALSE_DATA_i_9
       (.I0(Q[7]),
        .I1(Q[0]),
        .O(FALSE_DATA_i_9_n_0));
  FDRE FALSE_DATA_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_DATA0),
        .Q(FALSE_DATA),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT5 #(
    .INIT(32'h00000082)) 
    FALSE_K_i_1
       (.I0(FALSE_K_i_2_n_0),
        .I1(Q[5]),
        .I2(Q[6]),
        .I3(D_0),
        .I4(Q[1]),
        .O(FALSE_K0));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    FALSE_K_i_2
       (.I0(Q[2]),
        .I1(Q[4]),
        .I2(Q[7]),
        .I3(Q[0]),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(Q[3]),
        .O(FALSE_K_i_2_n_0));
  FDRE FALSE_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_K0),
        .Q(FALSE_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hF000000AC000000A)) 
    FALSE_NIT_i_1
       (.I0(FALSE_NIT_i_2_n_0),
        .I1(FALSE_NIT_i_3_n_0),
        .I2(Q[4]),
        .I3(Q[2]),
        .I4(Q[5]),
        .I5(FALSE_NIT_i_4_n_0),
        .O(FALSE_NIT0));
  LUT6 #(
    .INIT(64'h0000000040000000)) 
    FALSE_NIT_i_2
       (.I0(D0p0_REG_i_2_n_0),
        .I1(Q[0]),
        .I2(Q[7]),
        .I3(D_0),
        .I4(Q[1]),
        .I5(Q[6]),
        .O(FALSE_NIT_i_2_n_0));
  LUT6 #(
    .INIT(64'h0000000000008000)) 
    FALSE_NIT_i_3
       (.I0(Q[1]),
        .I1(Q[6]),
        .I2(T_i_2_n_0),
        .I3(D_0),
        .I4(Q[0]),
        .I5(Q[7]),
        .O(FALSE_NIT_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000028000000)) 
    FALSE_NIT_i_4
       (.I0(T_i_2_n_0),
        .I1(Q[0]),
        .I2(Q[7]),
        .I3(D_0),
        .I4(Q[6]),
        .I5(Q[1]),
        .O(FALSE_NIT_i_4_n_0));
  FDRE FALSE_NIT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FALSE_NIT0),
        .Q(FALSE_NIT),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    FROM_IDLE_D_i_1
       (.I0(WAIT_FOR_K),
        .I1(RX_IDLE),
        .I2(K28p5_REG1),
        .I3(XMIT_DATA),
        .O(FROM_IDLE_D0));
  FDRE FROM_IDLE_D_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_IDLE_D0),
        .Q(FROM_IDLE_D),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFC0FAFAEAC0)) 
    FROM_RX_CX_i_1
       (.I0(C_REG2),
        .I1(EVEN_reg),
        .I2(C_REG3),
        .I3(RXCHARISK_REG1),
        .I4(CGBAD),
        .I5(C_REG1),
        .O(FROM_RX_CX0));
  FDRE FROM_RX_CX_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_RX_CX0),
        .Q(FROM_RX_CX),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT4 #(
    .INIT(16'h00A8)) 
    FROM_RX_K_i_1
       (.I0(K28p5_REG2),
        .I1(CGBAD),
        .I2(RXCHARISK_REG1),
        .I3(XMIT_DATA),
        .O(FROM_RX_K0));
  FDRE FROM_RX_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(FROM_RX_K0),
        .Q(FROM_RX_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE \IDLE_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_IDLE),
        .Q(\IDLE_REG_reg_n_0_[0] ),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \IDLE_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\IDLE_REG_reg_n_0_[0] ),
        .Q(p_0_in1_in),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \IDLE_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_0_in1_in),
        .Q(\IDLE_REG_reg_n_0_[2] ),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE ILLEGAL_K_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K),
        .Q(ILLEGAL_K_REG1),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE ILLEGAL_K_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K_REG1),
        .Q(ILLEGAL_K_REG2),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    ILLEGAL_K_i_1
       (.I0(R),
        .I1(T),
        .I2(K28p5_REG1),
        .I3(RXCHARISK_REG1),
        .O(ILLEGAL_K0));
  FDRE ILLEGAL_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ILLEGAL_K0),
        .Q(ILLEGAL_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  FDRE I_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(I),
        .Q(RX_IDLE),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT5 #(
    .INIT(32'h88888880)) 
    I_i_2
       (.I0(RXEVEN0_out),
        .I1(RX_IDLE),
        .I2(FALSE_NIT),
        .I3(FALSE_K),
        .I4(FALSE_DATA),
        .O(I_reg_1));
  LUT6 #(
    .INIT(64'hFFFCFFFFFFFFAAAA)) 
    I_i_3
       (.I0(C_i_2_n_0),
        .I1(R_i_3_n_0),
        .I2(Q[1]),
        .I3(Q[6]),
        .I4(Q[7]),
        .I5(Q[0]),
        .O(I_reg_0));
  FDRE I_reg
       (.C(userclk),
        .CE(1'b1),
        .D(I0),
        .Q(I),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT5 #(
    .INIT(32'h00002000)) 
    K28p5_REG1_i_1
       (.I0(Q[7]),
        .I1(Q[0]),
        .I2(Q[3]),
        .I3(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I4(K28p5_REG1_i_2_n_0),
        .O(K28p5));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT5 #(
    .INIT(32'hEFFFFFFF)) 
    K28p5_REG1_i_2
       (.I0(Q[6]),
        .I1(Q[1]),
        .I2(Q[5]),
        .I3(Q[2]),
        .I4(Q[4]),
        .O(K28p5_REG1_i_2_n_0));
  FDRE K28p5_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K28p5),
        .Q(K28p5_REG1),
        .R(1'b0));
  FDRE K28p5_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K28p5_REG1),
        .Q(K28p5_REG2),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hDC)) 
    RECEIVED_IDLE_i_1
       (.I0(RX_CONFIG_VALID),
        .I1(RX_IDLE),
        .I2(RECEIVED_IDLE),
        .O(RECEIVED_IDLE_reg));
  LUT3 #(
    .INIT(8'hBA)) 
    RECEIVE_i_1
       (.I0(SOP_REG2),
        .I1(EOP),
        .I2(RECEIVE),
        .O(RECEIVE_i_1_n_0));
  FDRE RECEIVE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RECEIVE_i_1_n_0),
        .Q(RECEIVE),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    RUDI_C0
       (.I0(p_0_in2_in),
        .I1(\RX_CONFIG_VALID_REG_reg_n_0_[3] ),
        .I2(p_1_in),
        .I3(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .O(RUDI_C0__0));
  FDRE RUDI_C_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RUDI_C0__0),
        .Q(status_vector_ch0[0]),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT2 #(
    .INIT(4'hE)) 
    RUDI_I_i_1
       (.I0(\IDLE_REG_reg_n_0_[2] ),
        .I1(p_0_in1_in),
        .O(RUDI_I0));
  FDRE RUDI_I_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RUDI_I0),
        .Q(status_vector_ch0[1]),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE RXCHARISK_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .Q(RXCHARISK_REG1),
        .R(1'b0));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[0]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[0]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[0]),
        .Q(RXDATA_REG5[0]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[1]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[1]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[1]),
        .Q(RXDATA_REG5[1]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[2]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[2]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[2]),
        .Q(RXDATA_REG5[2]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[3]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[3]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[3]),
        .Q(RXDATA_REG5[3]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[4]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[4]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[4]),
        .Q(RXDATA_REG5[4]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[5]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[5]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[5]),
        .Q(RXDATA_REG5[5]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[6]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[6]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[6]),
        .Q(RXDATA_REG5[6]));
  (* srl_bus_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg " *) 
  (* srl_name = "inst/qsgmii_1218_core/\qsgmii_inst/GPCS_PMA_GEN_i0/RX_GMII_AT_TXOUTCLK.RECEIVER_TXOUTCLK/RXDATA_REG5_reg[7]_srl5 " *) 
  SRL16E \RXDATA_REG5_reg[7]_srl5 
       (.A0(1'b0),
        .A1(1'b0),
        .A2(1'b1),
        .A3(1'b0),
        .CE(1'b1),
        .CLK(userclk),
        .D(Q[7]),
        .Q(RXDATA_REG5[7]));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT4 #(
    .INIT(16'hAFAE)) 
    \RXD[0]_i_1 
       (.I0(SOP_REG3),
        .I1(EXTEND_REG1),
        .I2(FALSE_CARRIER_REG3),
        .I3(RXDATA_REG5[0]),
        .O(\RXD[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT4 #(
    .INIT(16'h3332)) 
    \RXD[1]_i_1 
       (.I0(RXDATA_REG5[1]),
        .I1(SOP_REG3),
        .I2(EXTEND_REG1),
        .I3(FALSE_CARRIER_REG3),
        .O(\RXD[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \RXD[2]_i_1 
       (.I0(SOP_REG3),
        .I1(EXTEND_REG1),
        .I2(FALSE_CARRIER_REG3),
        .I3(RXDATA_REG5[2]),
        .O(\RXD[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT4 #(
    .INIT(16'h3332)) 
    \RXD[3]_i_1 
       (.I0(RXDATA_REG5[3]),
        .I1(SOP_REG3),
        .I2(EXTEND_REG1),
        .I3(FALSE_CARRIER_REG3),
        .O(\RXD[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT5 #(
    .INIT(32'hAAAAFAEE)) 
    \RXD[4]_i_1 
       (.I0(SOP_REG3),
        .I1(RXDATA_REG5[4]),
        .I2(EXTEND_ERR),
        .I3(EXTEND_REG1),
        .I4(FALSE_CARRIER_REG3),
        .O(\RXD[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \RXD[5]_i_1 
       (.I0(RXDATA_REG5[5]),
        .I1(SOP_REG3),
        .I2(EXTEND_REG1),
        .I3(FALSE_CARRIER_REG3),
        .O(\RXD[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT4 #(
    .INIT(16'hFF10)) 
    \RXD[6]_i_1 
       (.I0(EXTEND_REG1),
        .I1(FALSE_CARRIER_REG3),
        .I2(RXDATA_REG5[6]),
        .I3(SOP_REG3),
        .O(\RXD[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \RXD[7]_i_1 
       (.I0(RXDATA_REG5[7]),
        .I1(SOP_REG3),
        .I2(EXTEND_REG1),
        .I3(FALSE_CARRIER_REG3),
        .O(\RXD[7]_i_1_n_0 ));
  FDRE \RXD_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[0]_i_1_n_0 ),
        .Q(gmii_rxd_ch0[0]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[1]_i_1_n_0 ),
        .Q(gmii_rxd_ch0[1]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[2]_i_1_n_0 ),
        .Q(gmii_rxd_ch0[2]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[3]_i_1_n_0 ),
        .Q(gmii_rxd_ch0[3]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[4]_i_1_n_0 ),
        .Q(gmii_rxd_ch0[4]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[5]_i_1_n_0 ),
        .Q(gmii_rxd_ch0[5]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[6]_i_1_n_0 ),
        .Q(gmii_rxd_ch0[6]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  FDRE \RXD_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RXD[7]_i_1_n_0 ),
        .Q(gmii_rxd_ch0[7]),
        .R(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]));
  LUT4 #(
    .INIT(16'h1110)) 
    \RX_CONFIG_REG[15]_i_1 
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I1(RXCHARISK_REG1),
        .I2(C_REG1),
        .I3(C_HDR_REMOVED_REG),
        .O(\RX_CONFIG_REG[15]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h0000AEAA)) 
    \RX_CONFIG_REG[7]_i_1 
       (.I0(C),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[0] ),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCLKCORCNT_INT_reg[2] ),
        .I3(C_REG2),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(\RX_CONFIG_REG[7]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h80FF8000)) 
    RX_CONFIG_REG_NULL_i_1
       (.I0(RX_CONFIG_REG_NULL_i_2_n_0),
        .I1(RX_CONFIG_REG_NULL_i_3_n_0),
        .I2(RX_CONFIG_REG_NULL_i_4_n_0),
        .I3(RX_CONFIG_VALID),
        .I4(RX_CONFIG_REG_NULL_reg_0),
        .O(RX_CONFIG_REG_NULL_reg));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    RX_CONFIG_REG_NULL_i_2
       (.I0(SGMII_PHY_STATUS_reg[12]),
        .I1(SGMII_PHY_STATUS_reg[13]),
        .I2(SGMII_PHY_STATUS_reg[10]),
        .I3(SGMII_PHY_STATUS_reg[11]),
        .I4(SGMII_PHY_STATUS_reg[15]),
        .I5(SGMII_PHY_STATUS_reg[14]),
        .O(RX_CONFIG_REG_NULL_i_2_n_0));
  LUT4 #(
    .INIT(16'h0001)) 
    RX_CONFIG_REG_NULL_i_3
       (.I0(SGMII_PHY_STATUS_reg[1]),
        .I1(SGMII_PHY_STATUS_reg[0]),
        .I2(SGMII_PHY_STATUS_reg[3]),
        .I3(SGMII_PHY_STATUS_reg[2]),
        .O(RX_CONFIG_REG_NULL_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    RX_CONFIG_REG_NULL_i_4
       (.I0(SGMII_PHY_STATUS_reg[6]),
        .I1(SGMII_PHY_STATUS_reg[7]),
        .I2(SGMII_PHY_STATUS_reg[4]),
        .I3(SGMII_PHY_STATUS_reg[5]),
        .I4(SGMII_PHY_STATUS_reg[9]),
        .I5(SGMII_PHY_STATUS_reg[8]),
        .O(RX_CONFIG_REG_NULL_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \RX_CONFIG_REG_REG[15]_i_1 
       (.I0(RX_IDLE),
        .I1(out),
        .O(SR));
  FDRE \RX_CONFIG_REG_reg[0] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1_n_0 ),
        .D(Q[0]),
        .Q(SGMII_PHY_STATUS_reg[0]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[10] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1_n_0 ),
        .D(Q[2]),
        .Q(SGMII_PHY_STATUS_reg[10]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[11] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1_n_0 ),
        .D(Q[3]),
        .Q(SGMII_PHY_STATUS_reg[11]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[12] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1_n_0 ),
        .D(Q[4]),
        .Q(SGMII_PHY_STATUS_reg[12]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[13] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1_n_0 ),
        .D(Q[5]),
        .Q(SGMII_PHY_STATUS_reg[13]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[14] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1_n_0 ),
        .D(Q[6]),
        .Q(SGMII_PHY_STATUS_reg[14]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[15] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1_n_0 ),
        .D(Q[7]),
        .Q(SGMII_PHY_STATUS_reg[15]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[1] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1_n_0 ),
        .D(Q[1]),
        .Q(SGMII_PHY_STATUS_reg[1]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[2] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1_n_0 ),
        .D(Q[2]),
        .Q(SGMII_PHY_STATUS_reg[2]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[3] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1_n_0 ),
        .D(Q[3]),
        .Q(SGMII_PHY_STATUS_reg[3]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[4] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1_n_0 ),
        .D(Q[4]),
        .Q(SGMII_PHY_STATUS_reg[4]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[5] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1_n_0 ),
        .D(Q[5]),
        .Q(SGMII_PHY_STATUS_reg[5]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[6] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1_n_0 ),
        .D(Q[6]),
        .Q(SGMII_PHY_STATUS_reg[6]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[7] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[7]_i_1_n_0 ),
        .D(Q[7]),
        .Q(SGMII_PHY_STATUS_reg[7]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[8] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1_n_0 ),
        .D(Q[0]),
        .Q(SGMII_PHY_STATUS_reg[8]),
        .R(1'b0));
  FDRE \RX_CONFIG_REG_reg[9] 
       (.C(userclk),
        .CE(\RX_CONFIG_REG[15]_i_1_n_0 ),
        .D(Q[1]),
        .Q(SGMII_PHY_STATUS_reg[9]),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000000540000)) 
    RX_CONFIG_VALID_INT_i_1
       (.I0(RX_CONFIG_VALID_INT_i_2_n_0),
        .I1(C_HDR_REMOVED_REG),
        .I2(C_REG1),
        .I3(S2),
        .I4(RXSYNC_STATUS),
        .I5(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(RX_CONFIG_VALID_INT0));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT2 #(
    .INIT(4'hE)) 
    RX_CONFIG_VALID_INT_i_2
       (.I0(CGBAD),
        .I1(RXCHARISK_REG1),
        .O(RX_CONFIG_VALID_INT_i_2_n_0));
  FDRE RX_CONFIG_VALID_INT_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID_INT0),
        .Q(RX_CONFIG_VALID),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \RX_CONFIG_VALID_REG_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(RX_CONFIG_VALID),
        .Q(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \RX_CONFIG_VALID_REG_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\RX_CONFIG_VALID_REG_reg_n_0_[0] ),
        .Q(p_0_in2_in),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \RX_CONFIG_VALID_REG_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_0_in2_in),
        .Q(p_1_in),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE \RX_CONFIG_VALID_REG_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(p_1_in),
        .Q(\RX_CONFIG_VALID_REG_reg_n_0_[3] ),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hFFFFFFF0FFFEFFF0)) 
    RX_DATA_ERROR_i_1
       (.I0(CGBAD_REG3),
        .I1(ILLEGAL_K_REG2),
        .I2(RX_DATA_ERROR_i_2_n_0),
        .I3(RX_DATA_ERROR_i_3_n_0),
        .I4(RECEIVE),
        .I5(RX_IDLE),
        .O(RX_DATA_ERROR0));
  LUT6 #(
    .INIT(64'hAAAA0000FFBA0000)) 
    RX_DATA_ERROR_i_2
       (.I0(C_REG1),
        .I1(T_REG1),
        .I2(R),
        .I3(K28p5_REG1),
        .I4(RECEIVE),
        .I5(R_REG1),
        .O(RX_DATA_ERROR_i_2_n_0));
  LUT6 #(
    .INIT(64'h0808088808880888)) 
    RX_DATA_ERROR_i_3
       (.I0(T_REG2),
        .I1(RECEIVE),
        .I2(R_REG1),
        .I3(R),
        .I4(K28p5_REG1),
        .I5(RXEVEN0_out),
        .O(RX_DATA_ERROR_i_3_n_0));
  FDRE RX_DATA_ERROR_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_DATA_ERROR0),
        .Q(RX_DATA_ERROR),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT6 #(
    .INIT(64'h0200FFFF02000000)) 
    RX_DV_i_1
       (.I0(SOP_REG3),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [0]),
        .I2(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]),
        .I3(XMIT_DATA_INT_reg),
        .I4(RX_DV_i_2_n_0),
        .I5(gmii_rx_dv_ch0),
        .O(RX_DV_i_1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFDF1F1F1F)) 
    RX_DV_i_2
       (.I0(RECEIVE),
        .I1(RXSYNC_STATUS),
        .I2(XMIT_DATA),
        .I3(RX_ER_i_3_n_0),
        .I4(SOP_REG3),
        .I5(EOP_REG1),
        .O(RX_DV_i_2_n_0));
  FDRE #(
    .INIT(1'b0)) 
    RX_DV_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_DV_i_1_n_0),
        .Q(gmii_rx_dv_ch0),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hE0F0E00000000000)) 
    RX_ER_i_1
       (.I0(RX_ER_i_2_n_0),
        .I1(RX_DATA_ERROR),
        .I2(XMIT_DATA),
        .I3(RXSYNC_STATUS),
        .I4(RECEIVE),
        .I5(RX_ER_i_3_n_0),
        .O(RX_ER0));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT2 #(
    .INIT(4'hE)) 
    RX_ER_i_2
       (.I0(EXTEND_REG1),
        .I1(FALSE_CARRIER_REG3),
        .O(RX_ER_i_2_n_0));
  LUT2 #(
    .INIT(4'h1)) 
    RX_ER_i_3
       (.I0(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [0]),
        .I1(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[3] [1]),
        .O(RX_ER_i_3_n_0));
  FDRE #(
    .INIT(1'b0)) 
    RX_ER_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_ER0),
        .Q(gmii_rx_er_ch0),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hFEAAFFFFFEAAFEAA)) 
    RX_INVALID_i_1
       (.I0(FROM_RX_CX),
        .I1(FROM_IDLE_D),
        .I2(FROM_RX_K),
        .I3(\NO_MANAGEMENT.CONFIGURATION_VECTOR_REG_reg[4] ),
        .I4(K28p5_REG1),
        .I5(RX_INVALID),
        .O(RX_INVALID_i_1_n_0));
  FDRE RX_INVALID_reg
       (.C(userclk),
        .CE(1'b1),
        .D(RX_INVALID_i_1_n_0),
        .Q(RX_INVALID),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT3 #(
    .INIT(8'h08)) 
    RX_RUDI_INVALID_REG_i_1
       (.I0(RX_INVALID),
        .I1(RXSYNC_STATUS),
        .I2(out),
        .O(RX_RUDI_INVALID_REG_reg));
  FDRE R_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(R),
        .Q(R_REG1),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000010000000)) 
    R_i_1
       (.I0(R_i_2_n_0),
        .I1(Q[3]),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I3(Q[7]),
        .I4(Q[0]),
        .I5(R_i_3_n_0),
        .O(K23p7));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT2 #(
    .INIT(4'h7)) 
    R_i_2
       (.I0(Q[1]),
        .I1(Q[6]),
        .O(R_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT3 #(
    .INIT(8'h7F)) 
    R_i_3
       (.I0(Q[4]),
        .I1(Q[2]),
        .I2(Q[5]),
        .O(R_i_3_n_0));
  FDRE R_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K23p7),
        .Q(R),
        .R(1'b0));
  FDRE SOP_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP),
        .Q(SOP_REG1),
        .R(1'b0));
  FDRE SOP_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP_REG1),
        .Q(SOP_REG2),
        .R(1'b0));
  FDRE SOP_REG3_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP_REG2),
        .Q(SOP_REG3),
        .R(1'b0));
  LUT5 #(
    .INIT(32'h00E00000)) 
    SOP_i_1
       (.I0(EXTEND),
        .I1(RX_IDLE),
        .I2(S_0),
        .I3(WAIT_FOR_K),
        .I4(XMIT_DATA_INT_reg),
        .O(SOP0));
  FDRE SOP_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SOP0),
        .Q(SOP),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  FDRE SYNC_STATUS_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(1'b1),
        .Q(SYNC_STATUS_REG),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT6 #(
    .INIT(64'h0800000000000000)) 
    S_i_1
       (.I0(Q[5]),
        .I1(Q[4]),
        .I2(Q[2]),
        .I3(S_i_2_n_0),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(Q[3]),
        .O(S0));
  LUT6 #(
    .INIT(64'h1000000000000000)) 
    S_i_2
       (.I0(D_0),
        .I1(p_0_in),
        .I2(Q[0]),
        .I3(Q[7]),
        .I4(Q[6]),
        .I5(Q[1]),
        .O(S_i_2_n_0));
  FDRE S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S0),
        .Q(S_0),
        .R(1'b0));
  FDRE T_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T),
        .Q(T_REG1),
        .R(1'b0));
  FDRE T_REG2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T_REG1),
        .Q(T_REG2),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h0000000020000000)) 
    T_i_1
       (.I0(T_i_2_n_0),
        .I1(Q[1]),
        .I2(Q[6]),
        .I3(Q[7]),
        .I4(Q[0]),
        .I5(R_i_3_n_0),
        .O(K29p7));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT2 #(
    .INIT(4'h8)) 
    T_i_2
       (.I0(Q[3]),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(T_i_2_n_0));
  FDRE T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(K29p7),
        .Q(T),
        .R(1'b0));
  LUT4 #(
    .INIT(16'h7F0F)) 
    WAIT_FOR_K_i_1
       (.I0(K28p5_REG1),
        .I1(RXEVEN0_out),
        .I2(SYNC_STATUS_REG),
        .I3(WAIT_FOR_K),
        .O(WAIT_FOR_K_i_1_n_0));
  FDRE WAIT_FOR_K_reg
       (.C(userclk),
        .CE(1'b1),
        .D(WAIT_FOR_K_i_1_n_0),
        .Q(WAIT_FOR_K),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg_0 ));
  LUT4 #(
    .INIT(16'h9009)) 
    i__carry__0_i_1
       (.I0(SGMII_PHY_STATUS_reg[13]),
        .I1(\RX_CONFIG_SNAPSHOT_reg[13] [1]),
        .I2(SGMII_PHY_STATUS_reg[12]),
        .I3(\RX_CONFIG_SNAPSHOT_reg[13] [0]),
        .O(CONSISTENCY_MATCH_reg));
endmodule

(* ORIG_REF_NAME = "SYNCHRONISE" *) 
module qsgmii_1218_SYNCHRONISE
   (RXEVEN0_out,
    RXSYNC_STATUS,
    ENABLEALIGN_CH3,
    RX_INVALID_reg,
    EXTEND_reg,
    data_sync_reg6,
    userclk,
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ,
    Q,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ,
    p_0_in,
    D,
    S2,
    K28p5_REG1);
  output RXEVEN0_out;
  output RXSYNC_STATUS;
  output ENABLEALIGN_CH3;
  output RX_INVALID_reg;
  output EXTEND_reg;
  input data_sync_reg6;
  input userclk;
  input \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  input [0:0]Q;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  input p_0_in;
  input D;
  input S2;
  input K28p5_REG1;

  wire D;
  wire ENABLEALIGN_CH3;
  wire ENCOMMAALIGN_i_1__2_n_0;
  wire EVEN_i_1__6_n_0;
  wire EXTEND_reg;
  wire \FSM_onehot_STATE[0]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[10]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[11]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[12]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[12]_i_2__2_n_0 ;
  wire \FSM_onehot_STATE[12]_i_3__2_n_0 ;
  wire \FSM_onehot_STATE[12]_i_4__2_n_0 ;
  wire \FSM_onehot_STATE[1]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[2]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[2]_i_2__2_n_0 ;
  wire \FSM_onehot_STATE[2]_i_3__2_n_0 ;
  wire \FSM_onehot_STATE[3]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[4]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[5]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[6]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[7]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[8]_i_1__2_n_0 ;
  wire \FSM_onehot_STATE[9]_i_1__2_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[10] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[11] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[12] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[4] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[5] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[6] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[8] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[9] ;
  wire [1:0]GOOD_CGS;
  wire \GOOD_CGS[0]_i_1__2_n_0 ;
  wire \GOOD_CGS[1]_i_1__2_n_0 ;
  wire \GOOD_CGS[1]_i_2__2_n_0 ;
  wire K28p5_REG1;
  wire [0:0]Q;
  wire RXEVEN0_out;
  wire RXSYNC_STATUS;
  wire RX_INVALID_reg;
  wire S2;
  wire SIGNAL_DETECT_REG;
  wire SYNC_STATUS0;
  wire SYNC_STATUS_i_1__2_n_0;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;
  wire data_sync_reg6;
  wire p_0_in;
  (* RTL_KEEP = "yes" *) wire p_0_in_0;
  (* RTL_KEEP = "yes" *) wire p_1_in;
  wire userclk;

  LUT6 #(
    .INIT(64'h00000000FFFFEEEA)) 
    ENCOMMAALIGN_i_1__2
       (.I0(ENABLEALIGN_CH3),
        .I1(\FSM_onehot_STATE[12]_i_4__2_n_0 ),
        .I2(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I3(p_1_in),
        .I4(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I5(SYNC_STATUS0),
        .O(ENCOMMAALIGN_i_1__2_n_0));
  FDRE ENCOMMAALIGN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ENCOMMAALIGN_i_1__2_n_0),
        .Q(ENABLEALIGN_CH3),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair256" *) 
  LUT3 #(
    .INIT(8'h4F)) 
    EVEN_i_1__6
       (.I0(RXSYNC_STATUS),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I2(RXEVEN0_out),
        .O(EVEN_i_1__6_n_0));
  FDRE EVEN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EVEN_i_1__6_n_0),
        .Q(RXEVEN0_out),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT5 #(
    .INIT(32'h00000040)) 
    \FSM_onehot_STATE[0]_i_1__2 
       (.I0(RXEVEN0_out),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I2(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I3(p_0_in),
        .I4(D),
        .O(\FSM_onehot_STATE[0]_i_1__2_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \FSM_onehot_STATE[10]_i_1__2 
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I1(\FSM_onehot_STATE_reg_n_0_[2] ),
        .O(\FSM_onehot_STATE[10]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h33232222)) 
    \FSM_onehot_STATE[11]_i_1__2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I1(\FSM_onehot_STATE[12]_i_4__2_n_0 ),
        .I2(GOOD_CGS[1]),
        .I3(GOOD_CGS[0]),
        .I4(\FSM_onehot_STATE_reg_n_0_[11] ),
        .O(\FSM_onehot_STATE[11]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'hF1)) 
    \FSM_onehot_STATE[12]_i_1__2 
       (.I0(Q),
        .I1(SIGNAL_DETECT_REG),
        .I2(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .O(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h00BA00FF00BA00BA)) 
    \FSM_onehot_STATE[12]_i_2__2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[12] ),
        .I1(\FSM_onehot_STATE[12]_i_3__2_n_0 ),
        .I2(\FSM_onehot_STATE_reg_n_0_[11] ),
        .I3(\FSM_onehot_STATE[12]_i_4__2_n_0 ),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(p_0_in_0),
        .O(\FSM_onehot_STATE[12]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \FSM_onehot_STATE[12]_i_3__2 
       (.I0(GOOD_CGS[0]),
        .I1(GOOD_CGS[1]),
        .O(\FSM_onehot_STATE[12]_i_3__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair256" *) 
  LUT4 #(
    .INIT(16'hFEEE)) 
    \FSM_onehot_STATE[12]_i_4__2 
       (.I0(p_0_in),
        .I1(D),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I3(RXEVEN0_out),
        .O(\FSM_onehot_STATE[12]_i_4__2_n_0 ));
  LUT6 #(
    .INIT(64'h0010001000FF0030)) 
    \FSM_onehot_STATE[1]_i_1__2 
       (.I0(RXEVEN0_out),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I2(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I3(S2),
        .I4(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I5(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .O(\FSM_onehot_STATE[1]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFEEEFFEEFEEE)) 
    \FSM_onehot_STATE[2]_i_1__2 
       (.I0(\FSM_onehot_STATE[2]_i_2__2_n_0 ),
        .I1(\FSM_onehot_STATE[2]_i_3__2_n_0 ),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I3(p_0_in_0),
        .I4(\FSM_onehot_STATE[12]_i_4__2_n_0 ),
        .I5(\FSM_onehot_STATE_reg_n_0_[4] ),
        .O(\FSM_onehot_STATE[2]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFF2FF22FFF22222)) 
    \FSM_onehot_STATE[2]_i_2__2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I2(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I3(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I4(\FSM_onehot_STATE[12]_i_4__2_n_0 ),
        .I5(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(\FSM_onehot_STATE[2]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFEF0FE00)) 
    \FSM_onehot_STATE[2]_i_3__2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I1(p_1_in),
        .I2(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I3(\FSM_onehot_STATE[12]_i_4__2_n_0 ),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(\FSM_onehot_STATE[2]_i_3__2_n_0 ));
  LUT5 #(
    .INIT(32'h00000040)) 
    \FSM_onehot_STATE[3]_i_1__2 
       (.I0(RXEVEN0_out),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I2(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I3(p_0_in),
        .I4(D),
        .O(\FSM_onehot_STATE[3]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h000A003F000A000A)) 
    \FSM_onehot_STATE[4]_i_1__2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I1(RXEVEN0_out),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I3(S2),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(\FSM_onehot_STATE_reg_n_0_[10] ),
        .O(\FSM_onehot_STATE[4]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h00FF00D0)) 
    \FSM_onehot_STATE[5]_i_1__2 
       (.I0(GOOD_CGS[1]),
        .I1(GOOD_CGS[0]),
        .I2(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I3(\FSM_onehot_STATE[12]_i_4__2_n_0 ),
        .I4(p_1_in),
        .O(\FSM_onehot_STATE[5]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hE0E0E0E0EFE0E0E0)) 
    \FSM_onehot_STATE[6]_i_1__2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[11] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I2(\FSM_onehot_STATE[12]_i_4__2_n_0 ),
        .I3(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I4(GOOD_CGS[1]),
        .I5(GOOD_CGS[0]),
        .O(\FSM_onehot_STATE[6]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEE0EEE0EEE0)) 
    \FSM_onehot_STATE[7]_i_1__2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I2(p_0_in),
        .I3(D),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I5(RXEVEN0_out),
        .O(\FSM_onehot_STATE[7]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h33232222)) 
    \FSM_onehot_STATE[8]_i_1__2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I1(\FSM_onehot_STATE[12]_i_4__2_n_0 ),
        .I2(GOOD_CGS[1]),
        .I3(GOOD_CGS[0]),
        .I4(\FSM_onehot_STATE_reg_n_0_[8] ),
        .O(\FSM_onehot_STATE[8]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'hFF000808)) 
    \FSM_onehot_STATE[9]_i_1__2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I1(GOOD_CGS[1]),
        .I2(GOOD_CGS[0]),
        .I3(\FSM_onehot_STATE_reg_n_0_[12] ),
        .I4(\FSM_onehot_STATE[12]_i_4__2_n_0 ),
        .O(\FSM_onehot_STATE[9]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[0]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[0] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[10]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[10] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[11]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[11] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[12]_i_2__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[12] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[1]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[1] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[2]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[2] ),
        .S(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[3]_i_1__2_n_0 ),
        .Q(p_0_in_0),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[4]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[4] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[5]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[5] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[6]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[6] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[7]_i_1__2_n_0 ),
        .Q(p_1_in),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[8]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[8] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[9]_i_1__2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[9] ),
        .R(\FSM_onehot_STATE[12]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000009)) 
    \GOOD_CGS[0]_i_1__2 
       (.I0(GOOD_CGS[0]),
        .I1(\FSM_onehot_STATE[12]_i_4__2_n_0 ),
        .I2(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I3(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .I4(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I5(p_1_in),
        .O(\GOOD_CGS[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair257" *) 
  LUT4 #(
    .INIT(16'h009A)) 
    \GOOD_CGS[1]_i_1__2 
       (.I0(GOOD_CGS[1]),
        .I1(\FSM_onehot_STATE[12]_i_4__2_n_0 ),
        .I2(GOOD_CGS[0]),
        .I3(\GOOD_CGS[1]_i_2__2_n_0 ),
        .O(\GOOD_CGS[1]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \GOOD_CGS[1]_i_2__2 
       (.I0(p_1_in),
        .I1(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I2(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .I3(\FSM_onehot_STATE_reg_n_0_[9] ),
        .O(\GOOD_CGS[1]_i_2__2_n_0 ));
  FDRE \GOOD_CGS_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\GOOD_CGS[0]_i_1__2_n_0 ),
        .Q(GOOD_CGS[0]),
        .R(1'b0));
  FDRE \GOOD_CGS_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\GOOD_CGS[1]_i_1__2_n_0 ),
        .Q(GOOD_CGS[1]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h7)) 
    I_i_4__2
       (.I0(RXEVEN0_out),
        .I1(K28p5_REG1),
        .O(EXTEND_reg));
  FDRE SIGNAL_DETECT_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg6),
        .Q(SIGNAL_DETECT_REG),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    SYNC_STATUS_REG_i_1__2
       (.I0(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .I1(RXSYNC_STATUS),
        .O(RX_INVALID_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFF00022222)) 
    SYNC_STATUS_i_1__2
       (.I0(RXSYNC_STATUS),
        .I1(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I2(p_1_in),
        .I3(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I4(\FSM_onehot_STATE[12]_i_4__2_n_0 ),
        .I5(SYNC_STATUS0),
        .O(SYNC_STATUS_i_1__2_n_0));
  LUT6 #(
    .INIT(64'h0000000200020002)) 
    SYNC_STATUS_i_2__2
       (.I0(p_0_in_0),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I2(p_0_in),
        .I3(D),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I5(RXEVEN0_out),
        .O(SYNC_STATUS0));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_i_1__2_n_0),
        .Q(RXSYNC_STATUS),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "SYNCHRONISE" *) 
module qsgmii_1218_SYNCHRONISE_141
   (RXEVEN0_out,
    RXSYNC_STATUS,
    ENABLEALIGN_CH2,
    RX_INVALID_reg,
    EXTEND_reg,
    data_sync_reg6,
    userclk,
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ,
    Q,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ,
    p_0_in,
    D,
    S2,
    K28p5_REG1);
  output RXEVEN0_out;
  output RXSYNC_STATUS;
  output ENABLEALIGN_CH2;
  output RX_INVALID_reg;
  output EXTEND_reg;
  input data_sync_reg6;
  input userclk;
  input \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  input [0:0]Q;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  input p_0_in;
  input D;
  input S2;
  input K28p5_REG1;

  wire D;
  wire ENABLEALIGN_CH2;
  wire ENCOMMAALIGN_i_1__1_n_0;
  wire EVEN_i_1__5_n_0;
  wire EXTEND_reg;
  wire \FSM_onehot_STATE[0]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[10]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[11]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[12]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[12]_i_2__1_n_0 ;
  wire \FSM_onehot_STATE[12]_i_3__1_n_0 ;
  wire \FSM_onehot_STATE[12]_i_4__1_n_0 ;
  wire \FSM_onehot_STATE[1]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[2]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[2]_i_2__1_n_0 ;
  wire \FSM_onehot_STATE[2]_i_3__1_n_0 ;
  wire \FSM_onehot_STATE[3]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[4]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[5]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[6]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[7]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[8]_i_1__1_n_0 ;
  wire \FSM_onehot_STATE[9]_i_1__1_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[10] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[11] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[12] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[4] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[5] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[6] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[8] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[9] ;
  wire [1:0]GOOD_CGS;
  wire \GOOD_CGS[0]_i_1__1_n_0 ;
  wire \GOOD_CGS[1]_i_1__1_n_0 ;
  wire \GOOD_CGS[1]_i_2__1_n_0 ;
  wire K28p5_REG1;
  wire [0:0]Q;
  wire RXEVEN0_out;
  wire RXSYNC_STATUS;
  wire RX_INVALID_reg;
  wire S2;
  wire SIGNAL_DETECT_REG;
  wire SYNC_STATUS0;
  wire SYNC_STATUS_i_1__1_n_0;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;
  wire data_sync_reg6;
  wire p_0_in;
  (* RTL_KEEP = "yes" *) wire p_0_in_0;
  (* RTL_KEEP = "yes" *) wire p_1_in;
  wire userclk;

  LUT6 #(
    .INIT(64'h00000000FFFFEEEA)) 
    ENCOMMAALIGN_i_1__1
       (.I0(ENABLEALIGN_CH2),
        .I1(\FSM_onehot_STATE[12]_i_4__1_n_0 ),
        .I2(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I3(p_1_in),
        .I4(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I5(SYNC_STATUS0),
        .O(ENCOMMAALIGN_i_1__1_n_0));
  FDRE ENCOMMAALIGN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ENCOMMAALIGN_i_1__1_n_0),
        .Q(ENABLEALIGN_CH2),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT3 #(
    .INIT(8'h4F)) 
    EVEN_i_1__5
       (.I0(RXSYNC_STATUS),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I2(RXEVEN0_out),
        .O(EVEN_i_1__5_n_0));
  FDRE EVEN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EVEN_i_1__5_n_0),
        .Q(RXEVEN0_out),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT5 #(
    .INIT(32'h00000040)) 
    \FSM_onehot_STATE[0]_i_1__1 
       (.I0(RXEVEN0_out),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I2(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I3(p_0_in),
        .I4(D),
        .O(\FSM_onehot_STATE[0]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \FSM_onehot_STATE[10]_i_1__1 
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I1(\FSM_onehot_STATE_reg_n_0_[2] ),
        .O(\FSM_onehot_STATE[10]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'h33232222)) 
    \FSM_onehot_STATE[11]_i_1__1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I1(\FSM_onehot_STATE[12]_i_4__1_n_0 ),
        .I2(GOOD_CGS[1]),
        .I3(GOOD_CGS[0]),
        .I4(\FSM_onehot_STATE_reg_n_0_[11] ),
        .O(\FSM_onehot_STATE[11]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'hF1)) 
    \FSM_onehot_STATE[12]_i_1__1 
       (.I0(Q),
        .I1(SIGNAL_DETECT_REG),
        .I2(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .O(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h00BA00FF00BA00BA)) 
    \FSM_onehot_STATE[12]_i_2__1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[12] ),
        .I1(\FSM_onehot_STATE[12]_i_3__1_n_0 ),
        .I2(\FSM_onehot_STATE_reg_n_0_[11] ),
        .I3(\FSM_onehot_STATE[12]_i_4__1_n_0 ),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(p_0_in_0),
        .O(\FSM_onehot_STATE[12]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \FSM_onehot_STATE[12]_i_3__1 
       (.I0(GOOD_CGS[0]),
        .I1(GOOD_CGS[1]),
        .O(\FSM_onehot_STATE[12]_i_3__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT4 #(
    .INIT(16'hFEEE)) 
    \FSM_onehot_STATE[12]_i_4__1 
       (.I0(p_0_in),
        .I1(D),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I3(RXEVEN0_out),
        .O(\FSM_onehot_STATE[12]_i_4__1_n_0 ));
  LUT6 #(
    .INIT(64'h0010001000FF0030)) 
    \FSM_onehot_STATE[1]_i_1__1 
       (.I0(RXEVEN0_out),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I2(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I3(S2),
        .I4(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I5(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .O(\FSM_onehot_STATE[1]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFEEEFFEEFEEE)) 
    \FSM_onehot_STATE[2]_i_1__1 
       (.I0(\FSM_onehot_STATE[2]_i_2__1_n_0 ),
        .I1(\FSM_onehot_STATE[2]_i_3__1_n_0 ),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I3(p_0_in_0),
        .I4(\FSM_onehot_STATE[12]_i_4__1_n_0 ),
        .I5(\FSM_onehot_STATE_reg_n_0_[4] ),
        .O(\FSM_onehot_STATE[2]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFF2FF22FFF22222)) 
    \FSM_onehot_STATE[2]_i_2__1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I2(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I3(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I4(\FSM_onehot_STATE[12]_i_4__1_n_0 ),
        .I5(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(\FSM_onehot_STATE[2]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFEF0FE00)) 
    \FSM_onehot_STATE[2]_i_3__1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I1(p_1_in),
        .I2(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I3(\FSM_onehot_STATE[12]_i_4__1_n_0 ),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(\FSM_onehot_STATE[2]_i_3__1_n_0 ));
  LUT5 #(
    .INIT(32'h00000040)) 
    \FSM_onehot_STATE[3]_i_1__1 
       (.I0(RXEVEN0_out),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I2(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I3(p_0_in),
        .I4(D),
        .O(\FSM_onehot_STATE[3]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h000A003F000A000A)) 
    \FSM_onehot_STATE[4]_i_1__1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I1(RXEVEN0_out),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I3(S2),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(\FSM_onehot_STATE_reg_n_0_[10] ),
        .O(\FSM_onehot_STATE[4]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'h00FF00D0)) 
    \FSM_onehot_STATE[5]_i_1__1 
       (.I0(GOOD_CGS[1]),
        .I1(GOOD_CGS[0]),
        .I2(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I3(\FSM_onehot_STATE[12]_i_4__1_n_0 ),
        .I4(p_1_in),
        .O(\FSM_onehot_STATE[5]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hE0E0E0E0EFE0E0E0)) 
    \FSM_onehot_STATE[6]_i_1__1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[11] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I2(\FSM_onehot_STATE[12]_i_4__1_n_0 ),
        .I3(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I4(GOOD_CGS[1]),
        .I5(GOOD_CGS[0]),
        .O(\FSM_onehot_STATE[6]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEE0EEE0EEE0)) 
    \FSM_onehot_STATE[7]_i_1__1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I2(p_0_in),
        .I3(D),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I5(RXEVEN0_out),
        .O(\FSM_onehot_STATE[7]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'h33232222)) 
    \FSM_onehot_STATE[8]_i_1__1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I1(\FSM_onehot_STATE[12]_i_4__1_n_0 ),
        .I2(GOOD_CGS[1]),
        .I3(GOOD_CGS[0]),
        .I4(\FSM_onehot_STATE_reg_n_0_[8] ),
        .O(\FSM_onehot_STATE[8]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'hFF000808)) 
    \FSM_onehot_STATE[9]_i_1__1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I1(GOOD_CGS[1]),
        .I2(GOOD_CGS[0]),
        .I3(\FSM_onehot_STATE_reg_n_0_[12] ),
        .I4(\FSM_onehot_STATE[12]_i_4__1_n_0 ),
        .O(\FSM_onehot_STATE[9]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[0]_i_1__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[0] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[10]_i_1__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[10] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[11]_i_1__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[11] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[12]_i_2__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[12] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[1]_i_1__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[1] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[2]_i_1__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[2] ),
        .S(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[3]_i_1__1_n_0 ),
        .Q(p_0_in_0),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[4]_i_1__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[4] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[5]_i_1__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[5] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[6]_i_1__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[6] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[7]_i_1__1_n_0 ),
        .Q(p_1_in),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[8]_i_1__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[8] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[9]_i_1__1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[9] ),
        .R(\FSM_onehot_STATE[12]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000009)) 
    \GOOD_CGS[0]_i_1__1 
       (.I0(GOOD_CGS[0]),
        .I1(\FSM_onehot_STATE[12]_i_4__1_n_0 ),
        .I2(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I3(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .I4(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I5(p_1_in),
        .O(\GOOD_CGS[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair189" *) 
  LUT4 #(
    .INIT(16'h009A)) 
    \GOOD_CGS[1]_i_1__1 
       (.I0(GOOD_CGS[1]),
        .I1(\FSM_onehot_STATE[12]_i_4__1_n_0 ),
        .I2(GOOD_CGS[0]),
        .I3(\GOOD_CGS[1]_i_2__1_n_0 ),
        .O(\GOOD_CGS[1]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \GOOD_CGS[1]_i_2__1 
       (.I0(p_1_in),
        .I1(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I2(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .I3(\FSM_onehot_STATE_reg_n_0_[9] ),
        .O(\GOOD_CGS[1]_i_2__1_n_0 ));
  FDRE \GOOD_CGS_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\GOOD_CGS[0]_i_1__1_n_0 ),
        .Q(GOOD_CGS[0]),
        .R(1'b0));
  FDRE \GOOD_CGS_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\GOOD_CGS[1]_i_1__1_n_0 ),
        .Q(GOOD_CGS[1]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h7)) 
    I_i_4__1
       (.I0(RXEVEN0_out),
        .I1(K28p5_REG1),
        .O(EXTEND_reg));
  FDRE SIGNAL_DETECT_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg6),
        .Q(SIGNAL_DETECT_REG),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    SYNC_STATUS_REG_i_1__1
       (.I0(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .I1(RXSYNC_STATUS),
        .O(RX_INVALID_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFF00022222)) 
    SYNC_STATUS_i_1__1
       (.I0(RXSYNC_STATUS),
        .I1(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I2(p_1_in),
        .I3(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I4(\FSM_onehot_STATE[12]_i_4__1_n_0 ),
        .I5(SYNC_STATUS0),
        .O(SYNC_STATUS_i_1__1_n_0));
  LUT6 #(
    .INIT(64'h0000000200020002)) 
    SYNC_STATUS_i_2__1
       (.I0(p_0_in_0),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I2(p_0_in),
        .I3(D),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I5(RXEVEN0_out),
        .O(SYNC_STATUS0));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_i_1__1_n_0),
        .Q(RXSYNC_STATUS),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "SYNCHRONISE" *) 
module qsgmii_1218_SYNCHRONISE_149
   (RXEVEN0_out,
    RXSYNC_STATUS,
    ENABLEALIGN_CH1,
    RX_INVALID_reg,
    EXTEND_reg,
    data_sync_reg6,
    userclk,
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ,
    Q,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ,
    p_0_in,
    D,
    S2,
    K28p5_REG1);
  output RXEVEN0_out;
  output RXSYNC_STATUS;
  output ENABLEALIGN_CH1;
  output RX_INVALID_reg;
  output EXTEND_reg;
  input data_sync_reg6;
  input userclk;
  input \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  input [0:0]Q;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  input p_0_in;
  input D;
  input S2;
  input K28p5_REG1;

  wire D;
  wire ENABLEALIGN_CH1;
  wire ENCOMMAALIGN_i_1__0_n_0;
  wire EVEN_i_1__4_n_0;
  wire EXTEND_reg;
  wire \FSM_onehot_STATE[0]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[10]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[11]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[12]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[12]_i_2__0_n_0 ;
  wire \FSM_onehot_STATE[12]_i_3__0_n_0 ;
  wire \FSM_onehot_STATE[12]_i_4__0_n_0 ;
  wire \FSM_onehot_STATE[1]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[2]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[2]_i_2__0_n_0 ;
  wire \FSM_onehot_STATE[2]_i_3__0_n_0 ;
  wire \FSM_onehot_STATE[3]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[4]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[5]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[6]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[7]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[8]_i_1__0_n_0 ;
  wire \FSM_onehot_STATE[9]_i_1__0_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[10] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[11] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[12] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[4] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[5] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[6] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[8] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[9] ;
  wire [1:0]GOOD_CGS;
  wire \GOOD_CGS[0]_i_1__0_n_0 ;
  wire \GOOD_CGS[1]_i_1__0_n_0 ;
  wire \GOOD_CGS[1]_i_2__0_n_0 ;
  wire K28p5_REG1;
  wire [0:0]Q;
  wire RXEVEN0_out;
  wire RXSYNC_STATUS;
  wire RX_INVALID_reg;
  wire S2;
  wire SIGNAL_DETECT_REG;
  wire SYNC_STATUS0;
  wire SYNC_STATUS_i_1__0_n_0;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;
  wire data_sync_reg6;
  wire p_0_in;
  (* RTL_KEEP = "yes" *) wire p_0_in_0;
  (* RTL_KEEP = "yes" *) wire p_1_in;
  wire userclk;

  LUT6 #(
    .INIT(64'h00000000FFFFEEEA)) 
    ENCOMMAALIGN_i_1__0
       (.I0(ENABLEALIGN_CH1),
        .I1(\FSM_onehot_STATE[12]_i_4__0_n_0 ),
        .I2(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I3(p_1_in),
        .I4(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I5(SYNC_STATUS0),
        .O(ENCOMMAALIGN_i_1__0_n_0));
  FDRE ENCOMMAALIGN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ENCOMMAALIGN_i_1__0_n_0),
        .Q(ENABLEALIGN_CH1),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT3 #(
    .INIT(8'h4F)) 
    EVEN_i_1__4
       (.I0(RXSYNC_STATUS),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I2(RXEVEN0_out),
        .O(EVEN_i_1__4_n_0));
  FDRE EVEN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EVEN_i_1__4_n_0),
        .Q(RXEVEN0_out),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT5 #(
    .INIT(32'h00000040)) 
    \FSM_onehot_STATE[0]_i_1__0 
       (.I0(RXEVEN0_out),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I2(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I3(p_0_in),
        .I4(D),
        .O(\FSM_onehot_STATE[0]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \FSM_onehot_STATE[10]_i_1__0 
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I1(\FSM_onehot_STATE_reg_n_0_[2] ),
        .O(\FSM_onehot_STATE[10]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h33232222)) 
    \FSM_onehot_STATE[11]_i_1__0 
       (.I0(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I1(\FSM_onehot_STATE[12]_i_4__0_n_0 ),
        .I2(GOOD_CGS[1]),
        .I3(GOOD_CGS[0]),
        .I4(\FSM_onehot_STATE_reg_n_0_[11] ),
        .O(\FSM_onehot_STATE[11]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hF1)) 
    \FSM_onehot_STATE[12]_i_1__0 
       (.I0(Q),
        .I1(SIGNAL_DETECT_REG),
        .I2(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .O(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h00BA00FF00BA00BA)) 
    \FSM_onehot_STATE[12]_i_2__0 
       (.I0(\FSM_onehot_STATE_reg_n_0_[12] ),
        .I1(\FSM_onehot_STATE[12]_i_3__0_n_0 ),
        .I2(\FSM_onehot_STATE_reg_n_0_[11] ),
        .I3(\FSM_onehot_STATE[12]_i_4__0_n_0 ),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(p_0_in_0),
        .O(\FSM_onehot_STATE[12]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \FSM_onehot_STATE[12]_i_3__0 
       (.I0(GOOD_CGS[0]),
        .I1(GOOD_CGS[1]),
        .O(\FSM_onehot_STATE[12]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT4 #(
    .INIT(16'hFEEE)) 
    \FSM_onehot_STATE[12]_i_4__0 
       (.I0(p_0_in),
        .I1(D),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I3(RXEVEN0_out),
        .O(\FSM_onehot_STATE[12]_i_4__0_n_0 ));
  LUT6 #(
    .INIT(64'h0010001000FF0030)) 
    \FSM_onehot_STATE[1]_i_1__0 
       (.I0(RXEVEN0_out),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I2(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I3(S2),
        .I4(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I5(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .O(\FSM_onehot_STATE[1]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFEEEFFEEFEEE)) 
    \FSM_onehot_STATE[2]_i_1__0 
       (.I0(\FSM_onehot_STATE[2]_i_2__0_n_0 ),
        .I1(\FSM_onehot_STATE[2]_i_3__0_n_0 ),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I3(p_0_in_0),
        .I4(\FSM_onehot_STATE[12]_i_4__0_n_0 ),
        .I5(\FSM_onehot_STATE_reg_n_0_[4] ),
        .O(\FSM_onehot_STATE[2]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFF2FF22FFF22222)) 
    \FSM_onehot_STATE[2]_i_2__0 
       (.I0(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I2(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I3(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I4(\FSM_onehot_STATE[12]_i_4__0_n_0 ),
        .I5(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(\FSM_onehot_STATE[2]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFEF0FE00)) 
    \FSM_onehot_STATE[2]_i_3__0 
       (.I0(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I1(p_1_in),
        .I2(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I3(\FSM_onehot_STATE[12]_i_4__0_n_0 ),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(\FSM_onehot_STATE[2]_i_3__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000040)) 
    \FSM_onehot_STATE[3]_i_1__0 
       (.I0(RXEVEN0_out),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I2(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I3(p_0_in),
        .I4(D),
        .O(\FSM_onehot_STATE[3]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h000A003F000A000A)) 
    \FSM_onehot_STATE[4]_i_1__0 
       (.I0(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I1(RXEVEN0_out),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I3(S2),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(\FSM_onehot_STATE_reg_n_0_[10] ),
        .O(\FSM_onehot_STATE[4]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h00FF00D0)) 
    \FSM_onehot_STATE[5]_i_1__0 
       (.I0(GOOD_CGS[1]),
        .I1(GOOD_CGS[0]),
        .I2(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I3(\FSM_onehot_STATE[12]_i_4__0_n_0 ),
        .I4(p_1_in),
        .O(\FSM_onehot_STATE[5]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hE0E0E0E0EFE0E0E0)) 
    \FSM_onehot_STATE[6]_i_1__0 
       (.I0(\FSM_onehot_STATE_reg_n_0_[11] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I2(\FSM_onehot_STATE[12]_i_4__0_n_0 ),
        .I3(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I4(GOOD_CGS[1]),
        .I5(GOOD_CGS[0]),
        .O(\FSM_onehot_STATE[6]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEE0EEE0EEE0)) 
    \FSM_onehot_STATE[7]_i_1__0 
       (.I0(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I2(p_0_in),
        .I3(D),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I5(RXEVEN0_out),
        .O(\FSM_onehot_STATE[7]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h33232222)) 
    \FSM_onehot_STATE[8]_i_1__0 
       (.I0(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I1(\FSM_onehot_STATE[12]_i_4__0_n_0 ),
        .I2(GOOD_CGS[1]),
        .I3(GOOD_CGS[0]),
        .I4(\FSM_onehot_STATE_reg_n_0_[8] ),
        .O(\FSM_onehot_STATE[8]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hFF000808)) 
    \FSM_onehot_STATE[9]_i_1__0 
       (.I0(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I1(GOOD_CGS[1]),
        .I2(GOOD_CGS[0]),
        .I3(\FSM_onehot_STATE_reg_n_0_[12] ),
        .I4(\FSM_onehot_STATE[12]_i_4__0_n_0 ),
        .O(\FSM_onehot_STATE[9]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[0]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[0] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[10]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[10] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[11]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[11] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[12]_i_2__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[12] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[1]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[1] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[2]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[2] ),
        .S(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[3]_i_1__0_n_0 ),
        .Q(p_0_in_0),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[4]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[4] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[5]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[5] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[6]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[6] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[7]_i_1__0_n_0 ),
        .Q(p_1_in),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[8]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[8] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[9]_i_1__0_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[9] ),
        .R(\FSM_onehot_STATE[12]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000009)) 
    \GOOD_CGS[0]_i_1__0 
       (.I0(GOOD_CGS[0]),
        .I1(\FSM_onehot_STATE[12]_i_4__0_n_0 ),
        .I2(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I3(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .I4(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I5(p_1_in),
        .O(\GOOD_CGS[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT4 #(
    .INIT(16'h009A)) 
    \GOOD_CGS[1]_i_1__0 
       (.I0(GOOD_CGS[1]),
        .I1(\FSM_onehot_STATE[12]_i_4__0_n_0 ),
        .I2(GOOD_CGS[0]),
        .I3(\GOOD_CGS[1]_i_2__0_n_0 ),
        .O(\GOOD_CGS[1]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \GOOD_CGS[1]_i_2__0 
       (.I0(p_1_in),
        .I1(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I2(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .I3(\FSM_onehot_STATE_reg_n_0_[9] ),
        .O(\GOOD_CGS[1]_i_2__0_n_0 ));
  FDRE \GOOD_CGS_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\GOOD_CGS[0]_i_1__0_n_0 ),
        .Q(GOOD_CGS[0]),
        .R(1'b0));
  FDRE \GOOD_CGS_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\GOOD_CGS[1]_i_1__0_n_0 ),
        .Q(GOOD_CGS[1]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h7)) 
    I_i_4__0
       (.I0(RXEVEN0_out),
        .I1(K28p5_REG1),
        .O(EXTEND_reg));
  FDRE SIGNAL_DETECT_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg6),
        .Q(SIGNAL_DETECT_REG),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    SYNC_STATUS_REG_i_1__0
       (.I0(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .I1(RXSYNC_STATUS),
        .O(RX_INVALID_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFF00022222)) 
    SYNC_STATUS_i_1__0
       (.I0(RXSYNC_STATUS),
        .I1(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I2(p_1_in),
        .I3(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I4(\FSM_onehot_STATE[12]_i_4__0_n_0 ),
        .I5(SYNC_STATUS0),
        .O(SYNC_STATUS_i_1__0_n_0));
  LUT6 #(
    .INIT(64'h0000000200020002)) 
    SYNC_STATUS_i_2__0
       (.I0(p_0_in_0),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I2(p_0_in),
        .I3(D),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I5(RXEVEN0_out),
        .O(SYNC_STATUS0));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_i_1__0_n_0),
        .Q(RXSYNC_STATUS),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "SYNCHRONISE" *) 
module qsgmii_1218_SYNCHRONISE_157
   (RXEVEN0_out,
    RXSYNC_STATUS,
    ENABLEALIGN_CH0,
    RX_INVALID_reg,
    EXTEND_reg,
    data_sync_reg6,
    userclk,
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ,
    Q,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ,
    p_0_in,
    D_0,
    S2,
    K28p5_REG1);
  output RXEVEN0_out;
  output RXSYNC_STATUS;
  output ENABLEALIGN_CH0;
  output RX_INVALID_reg;
  output EXTEND_reg;
  input data_sync_reg6;
  input userclk;
  input \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  input [0:0]Q;
  input \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  input p_0_in;
  input D_0;
  input S2;
  input K28p5_REG1;

  wire D_0;
  wire ENABLEALIGN_CH0;
  wire ENCOMMAALIGN_i_1_n_0;
  wire EVEN_i_1__3_n_0;
  wire EXTEND_reg;
  wire \FSM_onehot_STATE[0]_i_1_n_0 ;
  wire \FSM_onehot_STATE[10]_i_1_n_0 ;
  wire \FSM_onehot_STATE[11]_i_1_n_0 ;
  wire \FSM_onehot_STATE[12]_i_1_n_0 ;
  wire \FSM_onehot_STATE[12]_i_2_n_0 ;
  wire \FSM_onehot_STATE[12]_i_3_n_0 ;
  wire \FSM_onehot_STATE[12]_i_4_n_0 ;
  wire \FSM_onehot_STATE[1]_i_1_n_0 ;
  wire \FSM_onehot_STATE[2]_i_1_n_0 ;
  wire \FSM_onehot_STATE[2]_i_2_n_0 ;
  wire \FSM_onehot_STATE[2]_i_3_n_0 ;
  wire \FSM_onehot_STATE[3]_i_1_n_0 ;
  wire \FSM_onehot_STATE[4]_i_1_n_0 ;
  wire \FSM_onehot_STATE[5]_i_1_n_0 ;
  wire \FSM_onehot_STATE[6]_i_1_n_0 ;
  wire \FSM_onehot_STATE[7]_i_1_n_0 ;
  wire \FSM_onehot_STATE[8]_i_1_n_0 ;
  wire \FSM_onehot_STATE[9]_i_1_n_0 ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[0] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[10] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[11] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[12] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[1] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[2] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[4] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[5] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[6] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[8] ;
  (* RTL_KEEP = "yes" *) wire \FSM_onehot_STATE_reg_n_0_[9] ;
  wire [1:0]GOOD_CGS;
  wire \GOOD_CGS[0]_i_1_n_0 ;
  wire \GOOD_CGS[1]_i_1_n_0 ;
  wire \GOOD_CGS[1]_i_2_n_0 ;
  wire K28p5_REG1;
  wire [0:0]Q;
  wire RXEVEN0_out;
  wire RXSYNC_STATUS;
  wire RX_INVALID_reg;
  wire S2;
  wire SIGNAL_DETECT_REG;
  wire SYNC_STATUS0;
  wire SYNC_STATUS_i_1_n_0;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  wire \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;
  wire data_sync_reg6;
  wire p_0_in;
  (* RTL_KEEP = "yes" *) wire p_0_in_0;
  (* RTL_KEEP = "yes" *) wire p_1_in;
  wire userclk;

  LUT6 #(
    .INIT(64'h00000000FFFFEEEA)) 
    ENCOMMAALIGN_i_1
       (.I0(ENABLEALIGN_CH0),
        .I1(\FSM_onehot_STATE[12]_i_4_n_0 ),
        .I2(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I3(p_1_in),
        .I4(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I5(SYNC_STATUS0),
        .O(ENCOMMAALIGN_i_1_n_0));
  FDRE ENCOMMAALIGN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(ENCOMMAALIGN_i_1_n_0),
        .Q(ENABLEALIGN_CH0),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT3 #(
    .INIT(8'h4F)) 
    EVEN_i_1__3
       (.I0(RXSYNC_STATUS),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I2(RXEVEN0_out),
        .O(EVEN_i_1__3_n_0));
  FDRE EVEN_reg
       (.C(userclk),
        .CE(1'b1),
        .D(EVEN_i_1__3_n_0),
        .Q(RXEVEN0_out),
        .R(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ));
  LUT5 #(
    .INIT(32'h00000040)) 
    \FSM_onehot_STATE[0]_i_1 
       (.I0(RXEVEN0_out),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I2(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I3(p_0_in),
        .I4(D_0),
        .O(\FSM_onehot_STATE[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \FSM_onehot_STATE[10]_i_1 
       (.I0(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I1(\FSM_onehot_STATE_reg_n_0_[2] ),
        .O(\FSM_onehot_STATE[10]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h33232222)) 
    \FSM_onehot_STATE[11]_i_1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I1(\FSM_onehot_STATE[12]_i_4_n_0 ),
        .I2(GOOD_CGS[1]),
        .I3(GOOD_CGS[0]),
        .I4(\FSM_onehot_STATE_reg_n_0_[11] ),
        .O(\FSM_onehot_STATE[11]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hF1)) 
    \FSM_onehot_STATE[12]_i_1 
       (.I0(Q),
        .I1(SIGNAL_DETECT_REG),
        .I2(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .O(\FSM_onehot_STATE[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00BA00FF00BA00BA)) 
    \FSM_onehot_STATE[12]_i_2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[12] ),
        .I1(\FSM_onehot_STATE[12]_i_3_n_0 ),
        .I2(\FSM_onehot_STATE_reg_n_0_[11] ),
        .I3(\FSM_onehot_STATE[12]_i_4_n_0 ),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(p_0_in_0),
        .O(\FSM_onehot_STATE[12]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \FSM_onehot_STATE[12]_i_3 
       (.I0(GOOD_CGS[0]),
        .I1(GOOD_CGS[1]),
        .O(\FSM_onehot_STATE[12]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT4 #(
    .INIT(16'hFEEE)) 
    \FSM_onehot_STATE[12]_i_4 
       (.I0(p_0_in),
        .I1(D_0),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I3(RXEVEN0_out),
        .O(\FSM_onehot_STATE[12]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h0010001000FF0030)) 
    \FSM_onehot_STATE[1]_i_1 
       (.I0(RXEVEN0_out),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I2(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I3(S2),
        .I4(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I5(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .O(\FSM_onehot_STATE[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFEEEFFEEFEEE)) 
    \FSM_onehot_STATE[2]_i_1 
       (.I0(\FSM_onehot_STATE[2]_i_2_n_0 ),
        .I1(\FSM_onehot_STATE[2]_i_3_n_0 ),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I3(p_0_in_0),
        .I4(\FSM_onehot_STATE[12]_i_4_n_0 ),
        .I5(\FSM_onehot_STATE_reg_n_0_[4] ),
        .O(\FSM_onehot_STATE[2]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFF2FF22FFF22222)) 
    \FSM_onehot_STATE[2]_i_2 
       (.I0(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I2(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I3(\FSM_onehot_STATE_reg_n_0_[0] ),
        .I4(\FSM_onehot_STATE[12]_i_4_n_0 ),
        .I5(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(\FSM_onehot_STATE[2]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFEF0FE00)) 
    \FSM_onehot_STATE[2]_i_3 
       (.I0(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I1(p_1_in),
        .I2(\FSM_onehot_STATE_reg_n_0_[10] ),
        .I3(\FSM_onehot_STATE[12]_i_4_n_0 ),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .O(\FSM_onehot_STATE[2]_i_3_n_0 ));
  LUT5 #(
    .INIT(32'h00000040)) 
    \FSM_onehot_STATE[3]_i_1 
       (.I0(RXEVEN0_out),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I2(\FSM_onehot_STATE_reg_n_0_[1] ),
        .I3(p_0_in),
        .I4(D_0),
        .O(\FSM_onehot_STATE[3]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h000A003F000A000A)) 
    \FSM_onehot_STATE[4]_i_1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[4] ),
        .I1(RXEVEN0_out),
        .I2(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I3(S2),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I5(\FSM_onehot_STATE_reg_n_0_[10] ),
        .O(\FSM_onehot_STATE[4]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00FF00D0)) 
    \FSM_onehot_STATE[5]_i_1 
       (.I0(GOOD_CGS[1]),
        .I1(GOOD_CGS[0]),
        .I2(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I3(\FSM_onehot_STATE[12]_i_4_n_0 ),
        .I4(p_1_in),
        .O(\FSM_onehot_STATE[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hE0E0E0E0EFE0E0E0)) 
    \FSM_onehot_STATE[6]_i_1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[11] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I2(\FSM_onehot_STATE[12]_i_4_n_0 ),
        .I3(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I4(GOOD_CGS[1]),
        .I5(GOOD_CGS[0]),
        .O(\FSM_onehot_STATE[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hEEEEEEE0EEE0EEE0)) 
    \FSM_onehot_STATE[7]_i_1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I1(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I2(p_0_in),
        .I3(D_0),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I5(RXEVEN0_out),
        .O(\FSM_onehot_STATE[7]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h33232222)) 
    \FSM_onehot_STATE[8]_i_1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I1(\FSM_onehot_STATE[12]_i_4_n_0 ),
        .I2(GOOD_CGS[1]),
        .I3(GOOD_CGS[0]),
        .I4(\FSM_onehot_STATE_reg_n_0_[8] ),
        .O(\FSM_onehot_STATE[8]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFF000808)) 
    \FSM_onehot_STATE[9]_i_1 
       (.I0(\FSM_onehot_STATE_reg_n_0_[8] ),
        .I1(GOOD_CGS[1]),
        .I2(GOOD_CGS[0]),
        .I3(\FSM_onehot_STATE_reg_n_0_[12] ),
        .I4(\FSM_onehot_STATE[12]_i_4_n_0 ),
        .O(\FSM_onehot_STATE[9]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[0]_i_1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[0] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[10] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[10]_i_1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[10] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[11] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[11]_i_1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[11] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[12] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[12]_i_2_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[12] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[1]_i_1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[1] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDSE #(
    .INIT(1'b1)) 
    \FSM_onehot_STATE_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[2]_i_1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[2] ),
        .S(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[3]_i_1_n_0 ),
        .Q(p_0_in_0),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[4]_i_1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[4] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[5]_i_1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[5] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[6]_i_1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[6] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[7]_i_1_n_0 ),
        .Q(p_1_in),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[8] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[8]_i_1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[8] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  (* FSM_ENCODED_STATES = "comma_detect_2:0000000000001,aquire_sync_2:0000000000010,aquire_sync_1:0000000010000,sync_acquired_4:0000010000000,sync_acquired_4a:0000000100000,sync_acquired_3a:0000100000000,comma_detect_1:0010000000000,loss_of_sync:0000000000100,sync_acquired_2:0001000000000,sync_acquired_3:0000001000000,sync_acquired_2a:0100000000000,sync_acquired_1:1000000000000,comma_detect_3:0000000001000" *) 
  (* KEEP = "yes" *) 
  FDRE #(
    .INIT(1'b0)) 
    \FSM_onehot_STATE_reg[9] 
       (.C(userclk),
        .CE(1'b1),
        .D(\FSM_onehot_STATE[9]_i_1_n_0 ),
        .Q(\FSM_onehot_STATE_reg_n_0_[9] ),
        .R(\FSM_onehot_STATE[12]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000009)) 
    \GOOD_CGS[0]_i_1 
       (.I0(GOOD_CGS[0]),
        .I1(\FSM_onehot_STATE[12]_i_4_n_0 ),
        .I2(\FSM_onehot_STATE_reg_n_0_[9] ),
        .I3(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .I4(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I5(p_1_in),
        .O(\GOOD_CGS[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT4 #(
    .INIT(16'h009A)) 
    \GOOD_CGS[1]_i_1 
       (.I0(GOOD_CGS[1]),
        .I1(\FSM_onehot_STATE[12]_i_4_n_0 ),
        .I2(GOOD_CGS[0]),
        .I3(\GOOD_CGS[1]_i_2_n_0 ),
        .O(\GOOD_CGS[1]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \GOOD_CGS[1]_i_2 
       (.I0(p_1_in),
        .I1(\FSM_onehot_STATE_reg_n_0_[6] ),
        .I2(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .I3(\FSM_onehot_STATE_reg_n_0_[9] ),
        .O(\GOOD_CGS[1]_i_2_n_0 ));
  FDRE \GOOD_CGS_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\GOOD_CGS[0]_i_1_n_0 ),
        .Q(GOOD_CGS[0]),
        .R(1'b0));
  FDRE \GOOD_CGS_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\GOOD_CGS[1]_i_1_n_0 ),
        .Q(GOOD_CGS[1]),
        .R(1'b0));
  LUT2 #(
    .INIT(4'h7)) 
    I_i_4
       (.I0(RXEVEN0_out),
        .I1(K28p5_REG1),
        .O(EXTEND_reg));
  FDRE SIGNAL_DETECT_REG_reg
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync_reg6),
        .Q(SIGNAL_DETECT_REG),
        .R(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    SYNC_STATUS_REG_i_1
       (.I0(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .I1(RXSYNC_STATUS),
        .O(RX_INVALID_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFF00022222)) 
    SYNC_STATUS_i_1
       (.I0(RXSYNC_STATUS),
        .I1(\FSM_onehot_STATE_reg_n_0_[2] ),
        .I2(p_1_in),
        .I3(\FSM_onehot_STATE_reg_n_0_[5] ),
        .I4(\FSM_onehot_STATE[12]_i_4_n_0 ),
        .I5(SYNC_STATUS0),
        .O(SYNC_STATUS_i_1_n_0));
  LUT6 #(
    .INIT(64'h0000000200020002)) 
    SYNC_STATUS_i_2
       (.I0(p_0_in_0),
        .I1(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ),
        .I2(p_0_in),
        .I3(D_0),
        .I4(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ),
        .I5(RXEVEN0_out),
        .O(SYNC_STATUS0));
  FDRE #(
    .INIT(1'b0)) 
    SYNC_STATUS_reg
       (.C(userclk),
        .CE(1'b1),
        .D(SYNC_STATUS_i_1_n_0),
        .Q(RXSYNC_STATUS),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "TX" *) 
module qsgmii_1218_TX
   (\USE_ROCKET_IO.TXCHARISK_reg ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ,
    D,
    \USE_ROCKET_IO.TXDATA_reg[6] ,
    \USE_ROCKET_IO.TXDATA_reg[2] ,
    \USE_ROCKET_IO.TXDATA_reg[2]_0 ,
    \USE_ROCKET_IO.TXDATA_reg[3] ,
    \USE_ROCKET_IO.TXDATA_reg[5] ,
    \USE_ROCKET_IO.TXDATA_reg[7] ,
    \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ,
    userclk,
    XMIT_CONFIG_INT_reg_0,
    gmii_tx_er_ch3,
    gmii_tx_en_ch3,
    XMIT_DATA,
    gmii_txd_ch3,
    Q,
    RXCHARISK_USR,
    RXCHARISCOMMA_USR,
    RXDATA_USR,
    \TX_CONFIG_REG_INT_reg[14] );
  output \USE_ROCKET_IO.TXCHARISK_reg ;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  output [7:0]D;
  output [3:0]\USE_ROCKET_IO.TXDATA_reg[6] ;
  output \USE_ROCKET_IO.TXDATA_reg[2] ;
  output \USE_ROCKET_IO.TXDATA_reg[2]_0 ;
  output \USE_ROCKET_IO.TXDATA_reg[3] ;
  output \USE_ROCKET_IO.TXDATA_reg[5] ;
  output \USE_ROCKET_IO.TXDATA_reg[7] ;
  input \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ;
  input userclk;
  input XMIT_CONFIG_INT_reg_0;
  input gmii_tx_er_ch3;
  input gmii_tx_en_ch3;
  input XMIT_DATA;
  input [7:0]gmii_txd_ch3;
  input [1:0]Q;
  input RXCHARISK_USR;
  input RXCHARISCOMMA_USR;
  input [7:0]RXDATA_USR;
  input [2:0]\TX_CONFIG_REG_INT_reg[14] ;

  wire C1_OR_C2_i_1__2_n_0;
  wire C1_OR_C2_reg_n_0;
  wire [7:0]CODE_GRP;
  wire CODE_GRPISK;
  wire CODE_GRPISK_i_1__2_n_0;
  wire \CODE_GRP[0]_i_1__2_n_0 ;
  wire \CODE_GRP[0]_i_2__2_n_0 ;
  wire \CODE_GRP[1]_i_1__2_n_0 ;
  wire \CODE_GRP[1]_i_2__2_n_0 ;
  wire \CODE_GRP[2]_i_1__2_n_0 ;
  wire \CODE_GRP[2]_i_2__2_n_0 ;
  wire \CODE_GRP[3]_i_1__2_n_0 ;
  wire \CODE_GRP[3]_i_2__2_n_0 ;
  wire \CODE_GRP[4]_i_1__2_n_0 ;
  wire \CODE_GRP[5]_i_1__2_n_0 ;
  wire \CODE_GRP[6]_i_1__2_n_0 ;
  wire \CODE_GRP[6]_i_2__2_n_0 ;
  wire \CODE_GRP[6]_i_3__2_n_0 ;
  wire \CODE_GRP[7]_i_1__2_n_0 ;
  wire \CODE_GRP[7]_i_2__2_n_0 ;
  wire \CODE_GRP[7]_i_3__2_n_0 ;
  wire \CODE_GRP_CNT_reg_n_0_[1] ;
  wire [7:0]CONFIG_DATA;
  wire \CONFIG_DATA_reg_n_0_[0] ;
  wire \CONFIG_DATA_reg_n_0_[1] ;
  wire \CONFIG_DATA_reg_n_0_[3] ;
  wire \CONFIG_DATA_reg_n_0_[6] ;
  wire \CONFIG_DATA_reg_n_0_[7] ;
  wire [7:0]D;
  wire INSERT_IDLE_i_1__2_n_0;
  wire INSERT_IDLE_i_2__2_n_0;
  wire INSERT_IDLE_reg_n_0;
  wire [1:0]Q;
  wire R;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISK_USR;
  wire [7:0]RXDATA_USR;
  wire R_i_1__6_n_0;
  wire S;
  wire S0;
  wire T;
  wire T0;
  wire TRIGGER_S;
  wire TRIGGER_S0;
  wire TRIGGER_T;
  wire TXCHARISK_INT;
  wire [7:0]TXD_REG1;
  wire [14:0]TX_CONFIG;
  wire [2:0]\TX_CONFIG_REG_INT_reg[14] ;
  wire TX_EN_REG1;
  wire TX_ER_REG1;
  wire TX_EVEN;
  wire TX_PACKET;
  wire TX_PACKET_REG1;
  wire TX_PACKET_i_1__2_n_0;
  wire \USE_QSGMII_DATA.TXCHARISK_i_1__2_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[0]_i_1__2_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[2]_i_1__2_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[5]_i_1__2_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[6]_i_1__2_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[7]_i_1__2_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  wire \USE_ROCKET_IO.TXCHARISK_reg ;
  wire \USE_ROCKET_IO.TXDATA_reg[2] ;
  wire \USE_ROCKET_IO.TXDATA_reg[2]_0 ;
  wire \USE_ROCKET_IO.TXDATA_reg[3] ;
  wire \USE_ROCKET_IO.TXDATA_reg[5] ;
  wire [3:0]\USE_ROCKET_IO.TXDATA_reg[6] ;
  wire \USE_ROCKET_IO.TXDATA_reg[7] ;
  wire V;
  wire V_i_1__2_n_0;
  wire V_i_2__2_n_0;
  wire V_i_3__2_n_0;
  wire V_i_4__2_n_0;
  wire V_i_5__2_n_0;
  wire V_i_6__2_n_0;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_reg_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire XMIT_DATA_INT_reg_n_0;
  wire gmii_tx_en_ch3;
  wire gmii_tx_er_ch3;
  wire [7:0]gmii_txd_ch3;
  wire p_14_in;
  wire [1:0]plusOp;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair265" *) 
  LUT4 #(
    .INIT(16'h3F80)) 
    C1_OR_C2_i_1__2
       (.I0(XMIT_CONFIG_INT),
        .I1(TX_EVEN),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(C1_OR_C2_reg_n_0),
        .O(C1_OR_C2_i_1__2_n_0));
  FDRE C1_OR_C2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C1_OR_C2_i_1__2_n_0),
        .Q(C1_OR_C2_reg_n_0),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT3 #(
    .INIT(8'h40)) 
    CODE_GRPISK_i_1__2
       (.I0(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I1(TX_EVEN),
        .I2(XMIT_CONFIG_INT),
        .O(CODE_GRPISK_i_1__2_n_0));
  FDSE CODE_GRPISK_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRPISK_i_1__2_n_0),
        .Q(CODE_GRPISK),
        .S(\CODE_GRP[7]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'hFFE2)) 
    \CODE_GRP[0]_i_1__2 
       (.I0(S),
        .I1(XMIT_CONFIG_INT),
        .I2(\CONFIG_DATA_reg_n_0_[0] ),
        .I3(\CODE_GRP[0]_i_2__2_n_0 ),
        .O(\CODE_GRP[0]_i_1__2_n_0 ));
  LUT6 #(
    .INIT(64'h1111111011101110)) 
    \CODE_GRP[0]_i_2__2 
       (.I0(V),
        .I1(XMIT_CONFIG_INT),
        .I2(R),
        .I3(T),
        .I4(TXD_REG1[0]),
        .I5(TX_PACKET),
        .O(\CODE_GRP[0]_i_2__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFE0E)) 
    \CODE_GRP[1]_i_1__2 
       (.I0(S),
        .I1(V),
        .I2(XMIT_CONFIG_INT),
        .I3(\CONFIG_DATA_reg_n_0_[1] ),
        .I4(\CODE_GRP[1]_i_2__2_n_0 ),
        .O(\CODE_GRP[1]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair261" *) 
  LUT5 #(
    .INIT(32'h11101010)) 
    \CODE_GRP[1]_i_2__2 
       (.I0(T),
        .I1(XMIT_CONFIG_INT),
        .I2(R),
        .I3(TXD_REG1[1]),
        .I4(TX_PACKET),
        .O(\CODE_GRP[1]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF00FE000000FE)) 
    \CODE_GRP[2]_i_1__2 
       (.I0(V),
        .I1(TXD_REG1[2]),
        .I2(\CODE_GRP[2]_i_2__2_n_0 ),
        .I3(S),
        .I4(XMIT_CONFIG_INT),
        .I5(\CONFIG_DATA_reg_n_0_[7] ),
        .O(\CODE_GRP[2]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair261" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \CODE_GRP[2]_i_2__2 
       (.I0(T),
        .I1(R),
        .I2(TX_PACKET),
        .O(\CODE_GRP[2]_i_2__2_n_0 ));
  LUT6 #(
    .INIT(64'hEEFFEEFFEEFFEEFC)) 
    \CODE_GRP[3]_i_1__2 
       (.I0(\CONFIG_DATA_reg_n_0_[3] ),
        .I1(\CODE_GRP[3]_i_2__2_n_0 ),
        .I2(T),
        .I3(XMIT_CONFIG_INT),
        .I4(V),
        .I5(S),
        .O(\CODE_GRP[3]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'h00AA00EF)) 
    \CODE_GRP[3]_i_2__2 
       (.I0(Q[1]),
        .I1(TXD_REG1[3]),
        .I2(TX_PACKET),
        .I3(XMIT_CONFIG_INT),
        .I4(R),
        .O(\CODE_GRP[3]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair262" *) 
  LUT4 #(
    .INIT(16'hF404)) 
    \CODE_GRP[4]_i_1__2 
       (.I0(\CODE_GRP[7]_i_3__2_n_0 ),
        .I1(TXD_REG1[4]),
        .I2(XMIT_CONFIG_INT),
        .I3(\CONFIG_DATA_reg_n_0_[7] ),
        .O(\CODE_GRP[4]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair262" *) 
  LUT4 #(
    .INIT(16'hF404)) 
    \CODE_GRP[5]_i_1__2 
       (.I0(\CODE_GRP[7]_i_3__2_n_0 ),
        .I1(TXD_REG1[5]),
        .I2(XMIT_CONFIG_INT),
        .I3(\CONFIG_DATA_reg_n_0_[7] ),
        .O(\CODE_GRP[5]_i_1__2_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \CODE_GRP[6]_i_1__2 
       (.I0(Q[1]),
        .I1(XMIT_CONFIG_INT),
        .O(\CODE_GRP[6]_i_1__2_n_0 ));
  LUT5 #(
    .INIT(32'hFFEA00EA)) 
    \CODE_GRP[6]_i_2__2 
       (.I0(\CODE_GRP[6]_i_3__2_n_0 ),
        .I1(TX_PACKET),
        .I2(TXD_REG1[6]),
        .I3(XMIT_CONFIG_INT),
        .I4(\CONFIG_DATA_reg_n_0_[6] ),
        .O(\CODE_GRP[6]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair259" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \CODE_GRP[6]_i_3__2 
       (.I0(S),
        .I1(V),
        .I2(T),
        .I3(R),
        .O(\CODE_GRP[6]_i_3__2_n_0 ));
  LUT3 #(
    .INIT(8'h0E)) 
    \CODE_GRP[7]_i_1__2 
       (.I0(Q[1]),
        .I1(\CODE_GRP[7]_i_3__2_n_0 ),
        .I2(XMIT_CONFIG_INT),
        .O(\CODE_GRP[7]_i_1__2_n_0 ));
  LUT4 #(
    .INIT(16'hF404)) 
    \CODE_GRP[7]_i_2__2 
       (.I0(\CODE_GRP[7]_i_3__2_n_0 ),
        .I1(TXD_REG1[7]),
        .I2(XMIT_CONFIG_INT),
        .I3(\CONFIG_DATA_reg_n_0_[7] ),
        .O(\CODE_GRP[7]_i_2__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair259" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    \CODE_GRP[7]_i_3__2 
       (.I0(TX_PACKET),
        .I1(R),
        .I2(T),
        .I3(S),
        .I4(V),
        .O(\CODE_GRP[7]_i_3__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair279" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CODE_GRP_CNT[0]_i_1__2 
       (.I0(TX_EVEN),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair279" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \CODE_GRP_CNT[1]_i_1__2 
       (.I0(TX_EVEN),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(plusOp[1]));
  FDSE \CODE_GRP_CNT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp[0]),
        .Q(TX_EVEN),
        .S(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDSE \CODE_GRP_CNT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp[1]),
        .Q(\CODE_GRP_CNT_reg_n_0_[1] ),
        .S(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CODE_GRP_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[0]_i_1__2_n_0 ),
        .Q(CODE_GRP[0]),
        .R(\CODE_GRP[6]_i_1__2_n_0 ));
  FDRE \CODE_GRP_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[1]_i_1__2_n_0 ),
        .Q(CODE_GRP[1]),
        .R(\CODE_GRP[6]_i_1__2_n_0 ));
  FDSE \CODE_GRP_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[2]_i_1__2_n_0 ),
        .Q(CODE_GRP[2]),
        .S(\CODE_GRP[6]_i_1__2_n_0 ));
  FDRE \CODE_GRP_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[3]_i_1__2_n_0 ),
        .Q(CODE_GRP[3]),
        .R(1'b0));
  FDSE \CODE_GRP_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[4]_i_1__2_n_0 ),
        .Q(CODE_GRP[4]),
        .S(\CODE_GRP[7]_i_1__2_n_0 ));
  FDSE \CODE_GRP_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[5]_i_1__2_n_0 ),
        .Q(CODE_GRP[5]),
        .S(\CODE_GRP[7]_i_1__2_n_0 ));
  FDRE \CODE_GRP_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[6]_i_2__2_n_0 ),
        .Q(CODE_GRP[6]),
        .R(\CODE_GRP[6]_i_1__2_n_0 ));
  FDSE \CODE_GRP_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[7]_i_2__2_n_0 ),
        .Q(CODE_GRP[7]),
        .S(\CODE_GRP[7]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair264" *) 
  LUT4 #(
    .INIT(16'h202C)) 
    \CONFIG_DATA[0]_i_1__2 
       (.I0(TX_CONFIG[0]),
        .I1(TX_EVEN),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(C1_OR_C2_reg_n_0),
        .O(CONFIG_DATA[0]));
  (* SOFT_HLUTNM = "soft_lutpair265" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \CONFIG_DATA[1]_i_1__2 
       (.I0(TX_EVEN),
        .I1(C1_OR_C2_reg_n_0),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(CONFIG_DATA[1]));
  (* SOFT_HLUTNM = "soft_lutpair270" *) 
  LUT3 #(
    .INIT(8'h83)) 
    \CONFIG_DATA[3]_i_1__2 
       (.I0(TX_CONFIG[11]),
        .I1(TX_EVEN),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(CONFIG_DATA[3]));
  (* SOFT_HLUTNM = "soft_lutpair264" *) 
  LUT4 #(
    .INIT(16'hB800)) 
    \CONFIG_DATA[6]_i_1__2 
       (.I0(TX_CONFIG[14]),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I2(C1_OR_C2_reg_n_0),
        .I3(TX_EVEN),
        .O(CONFIG_DATA[6]));
  (* SOFT_HLUTNM = "soft_lutpair270" *) 
  LUT3 #(
    .INIT(8'h07)) 
    \CONFIG_DATA[7]_i_1__2 
       (.I0(TX_EVEN),
        .I1(C1_OR_C2_reg_n_0),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(CONFIG_DATA[7]));
  FDRE \CONFIG_DATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[0]),
        .Q(\CONFIG_DATA_reg_n_0_[0] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CONFIG_DATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[1]),
        .Q(\CONFIG_DATA_reg_n_0_[1] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CONFIG_DATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[3]),
        .Q(\CONFIG_DATA_reg_n_0_[3] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CONFIG_DATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[6]),
        .Q(\CONFIG_DATA_reg_n_0_[6] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CONFIG_DATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[7]),
        .Q(\CONFIG_DATA_reg_n_0_[7] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'h00000000AAAAAAAB)) 
    INSERT_IDLE_i_1__2
       (.I0(Q[1]),
        .I1(INSERT_IDLE_i_2__2_n_0),
        .I2(V),
        .I3(S),
        .I4(TX_PACKET),
        .I5(XMIT_CONFIG_INT),
        .O(INSERT_IDLE_i_1__2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT2 #(
    .INIT(4'hE)) 
    INSERT_IDLE_i_2__2
       (.I0(R),
        .I1(T),
        .O(INSERT_IDLE_i_2__2_n_0));
  FDRE INSERT_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE_i_1__2_n_0),
        .Q(INSERT_IDLE_reg_n_0),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair260" *) 
  LUT5 #(
    .INIT(32'hDDDCCCCC)) 
    R_i_1__6
       (.I0(S),
        .I1(T),
        .I2(TX_EVEN),
        .I3(TX_ER_REG1),
        .I4(R),
        .O(R_i_1__6_n_0));
  FDRE R_reg
       (.C(userclk),
        .CE(1'b1),
        .D(R_i_1__6_n_0),
        .Q(R),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hAAEFAAAA00000000)) 
    S_i_1__6
       (.I0(TRIGGER_S),
        .I1(TX_ER_REG1),
        .I2(TX_EVEN),
        .I3(TX_EN_REG1),
        .I4(gmii_tx_en_ch3),
        .I5(XMIT_DATA_INT_reg_n_0),
        .O(S0));
  FDRE S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S0),
        .Q(S),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair263" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    TRIGGER_S_i_1__2
       (.I0(TX_EN_REG1),
        .I1(gmii_tx_en_ch3),
        .I2(TX_EVEN),
        .I3(TX_ER_REG1),
        .O(TRIGGER_S0));
  FDRE TRIGGER_S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TRIGGER_S0),
        .Q(TRIGGER_S),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair263" *) 
  LUT2 #(
    .INIT(4'h2)) 
    TRIGGER_T_i_1__2
       (.I0(TX_EN_REG1),
        .I1(gmii_tx_en_ch3),
        .O(p_14_in));
  FDRE TRIGGER_T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(p_14_in),
        .Q(TRIGGER_T),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \TXD_REG1_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch3[0]),
        .Q(TXD_REG1[0]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch3[1]),
        .Q(TXD_REG1[1]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch3[2]),
        .Q(TXD_REG1[2]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch3[3]),
        .Q(TXD_REG1[3]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch3[4]),
        .Q(TXD_REG1[4]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch3[5]),
        .Q(TXD_REG1[5]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch3[6]),
        .Q(TXD_REG1[6]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch3[7]),
        .Q(TXD_REG1[7]),
        .R(1'b0));
  FDRE \TX_CONFIG_reg[0] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_REG_INT_reg[14] [0]),
        .Q(TX_CONFIG[0]),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \TX_CONFIG_reg[11] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_REG_INT_reg[14] [1]),
        .Q(TX_CONFIG[11]),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \TX_CONFIG_reg[14] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_REG_INT_reg[14] [2]),
        .Q(TX_CONFIG[14]),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE TX_EN_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_tx_en_ch3),
        .Q(TX_EN_REG1),
        .R(1'b0));
  FDRE TX_ER_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_tx_er_ch3),
        .Q(TX_ER_REG1),
        .R(1'b0));
  FDRE TX_PACKET_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TX_PACKET),
        .Q(TX_PACKET_REG1),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT3 #(
    .INIT(8'hDC)) 
    TX_PACKET_i_1__2
       (.I0(T),
        .I1(S),
        .I2(TX_PACKET),
        .O(TX_PACKET_i_1__2_n_0));
  FDRE TX_PACKET_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TX_PACKET_i_1__2_n_0),
        .Q(TX_PACKET),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'h88888888FFF88888)) 
    T_i_1__6
       (.I0(V),
        .I1(TRIGGER_T),
        .I2(TX_PACKET),
        .I3(S),
        .I4(TX_EN_REG1),
        .I5(gmii_tx_en_ch3),
        .O(T0));
  FDRE T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T0),
        .Q(T),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair266" *) 
  LUT4 #(
    .INIT(16'h0444)) 
    \USE_QSGMII_DATA.TXCHARISK_i_1__2 
       (.I0(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I1(CODE_GRPISK),
        .I2(TX_EVEN),
        .I3(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXCHARISK_i_1__2_n_0 ));
  FDRE \USE_QSGMII_DATA.TXCHARISK_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXCHARISK_i_1__2_n_0 ),
        .Q(TXCHARISK_INT),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair268" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[0]_i_1__2 
       (.I0(CODE_GRP[0]),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[0]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair271" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[2]_i_1__2 
       (.I0(CODE_GRP[2]),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[2]_i_1__2_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[5]_i_1__2 
       (.I0(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[5]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair271" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[6]_i_1__2 
       (.I0(CODE_GRP[6]),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[6]_i_1__2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair268" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[7]_i_1__2 
       (.I0(CODE_GRP[7]),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[7]_i_1__2_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[0]_i_1__2_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[1]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__2_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[2]_i_1__2_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[3]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__2_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[4]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__2_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[5]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__2_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[6]_i_1__2_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[7]_i_1__2_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair269" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_i_1__2 
       (.I0(TXCHARISK_INT),
        .I1(Q[0]),
        .I2(RXCHARISCOMMA_USR),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair269" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_i_1__2 
       (.I0(TXCHARISK_INT),
        .I1(Q[0]),
        .I2(RXCHARISK_USR),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair273" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[0]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[0]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair278" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[1]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[1]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair277" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[2]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[2]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair276" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[3]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[3]),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair274" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[4]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[4]),
        .O(D[4]));
  (* SOFT_HLUTNM = "soft_lutpair275" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[5]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[5]),
        .O(D[5]));
  (* SOFT_HLUTNM = "soft_lutpair275" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[6]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[6]),
        .O(D[6]));
  (* SOFT_HLUTNM = "soft_lutpair272" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[7]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[7]),
        .O(D[7]));
  (* SOFT_HLUTNM = "soft_lutpair267" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.TXCHARISK_i_1__2 
       (.I0(TX_EVEN),
        .I1(Q[0]),
        .I2(TXCHARISK_INT),
        .O(\USE_ROCKET_IO.TXCHARISK_reg ));
  (* SOFT_HLUTNM = "soft_lutpair273" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[0]_i_1__2 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[6] [0]));
  (* SOFT_HLUTNM = "soft_lutpair278" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[1]_i_1__2 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[6] [1]));
  (* SOFT_HLUTNM = "soft_lutpair277" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[2]_i_1__2 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[2]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair276" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[3]_i_1__2 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair274" *) 
  LUT3 #(
    .INIT(8'h32)) 
    \USE_ROCKET_IO.TXDATA[4]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(Q[0]),
        .O(\USE_ROCKET_IO.TXDATA_reg[6] [2]));
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[5]_i_1__2 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[5] ));
  (* SOFT_HLUTNM = "soft_lutpair267" *) 
  LUT4 #(
    .INIT(16'h003A)) 
    \USE_ROCKET_IO.TXDATA[6]_i_1__2 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .I1(TX_EVEN),
        .I2(Q[0]),
        .I3(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .O(\USE_ROCKET_IO.TXDATA_reg[6] [3]));
  (* SOFT_HLUTNM = "soft_lutpair266" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \USE_ROCKET_IO.TXDATA[7]_i_1__2 
       (.I0(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I1(Q[0]),
        .I2(TX_EVEN),
        .O(\USE_ROCKET_IO.TXDATA_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair272" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[7]_i_2__2 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[7] ));
  LUT4 #(
    .INIT(16'hFEFC)) 
    V_i_1__2
       (.I0(S),
        .I1(V_i_2__2_n_0),
        .I2(V_i_3__2_n_0),
        .I3(V),
        .O(V_i_1__2_n_0));
  LUT4 #(
    .INIT(16'h8000)) 
    V_i_2__2
       (.I0(gmii_tx_en_ch3),
        .I1(TX_PACKET),
        .I2(XMIT_DATA_INT_reg_n_0),
        .I3(gmii_tx_er_ch3),
        .O(V_i_2__2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF08080800)) 
    V_i_3__2
       (.I0(XMIT_DATA_INT_reg_n_0),
        .I1(gmii_tx_er_ch3),
        .I2(gmii_tx_en_ch3),
        .I3(V_i_4__2_n_0),
        .I4(V_i_5__2_n_0),
        .I5(V_i_6__2_n_0),
        .O(V_i_3__2_n_0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    V_i_4__2
       (.I0(gmii_txd_ch3[1]),
        .I1(gmii_txd_ch3[0]),
        .I2(gmii_txd_ch3[3]),
        .I3(gmii_txd_ch3[2]),
        .O(V_i_4__2_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    V_i_5__2
       (.I0(gmii_txd_ch3[5]),
        .I1(gmii_txd_ch3[4]),
        .I2(gmii_txd_ch3[7]),
        .I3(gmii_txd_ch3[6]),
        .O(V_i_5__2_n_0));
  LUT4 #(
    .INIT(16'h4000)) 
    V_i_6__2
       (.I0(TX_PACKET_REG1),
        .I1(TX_ER_REG1),
        .I2(TX_EN_REG1),
        .I3(XMIT_DATA_INT_reg_n_0),
        .O(V_i_6__2_n_0));
  FDRE V_reg
       (.C(userclk),
        .CE(1'b1),
        .D(V_i_1__2_n_0),
        .Q(V),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT2 #(
    .INIT(4'h1)) 
    XMIT_CONFIG_INT_i_1__3
       (.I0(TX_EVEN),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(XMIT_DATA_INT));
  FDSE XMIT_CONFIG_INT_reg
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(XMIT_CONFIG_INT_reg_0),
        .Q(XMIT_CONFIG_INT),
        .S(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE XMIT_DATA_INT_reg
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(XMIT_DATA),
        .Q(XMIT_DATA_INT_reg_n_0),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
endmodule

(* ORIG_REF_NAME = "TX" *) 
module qsgmii_1218_TX_143
   (\USE_ROCKET_IO.TXCHARISK_reg ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ,
    D,
    \USE_ROCKET_IO.TXDATA_reg[6] ,
    \USE_ROCKET_IO.TXDATA_reg[2] ,
    \USE_ROCKET_IO.TXDATA_reg[2]_0 ,
    \USE_ROCKET_IO.TXDATA_reg[3] ,
    \USE_ROCKET_IO.TXDATA_reg[5] ,
    \USE_ROCKET_IO.TXDATA_reg[7] ,
    \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ,
    userclk,
    XMIT_CONFIG_INT_reg_0,
    gmii_tx_er_ch2,
    gmii_tx_en_ch2,
    XMIT_DATA,
    gmii_txd_ch2,
    Q,
    RXCHARISK_USR,
    RXCHARISCOMMA_USR,
    RXDATA_USR,
    \TX_CONFIG_REG_INT_reg[14] );
  output \USE_ROCKET_IO.TXCHARISK_reg ;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  output [7:0]D;
  output [3:0]\USE_ROCKET_IO.TXDATA_reg[6] ;
  output \USE_ROCKET_IO.TXDATA_reg[2] ;
  output \USE_ROCKET_IO.TXDATA_reg[2]_0 ;
  output \USE_ROCKET_IO.TXDATA_reg[3] ;
  output \USE_ROCKET_IO.TXDATA_reg[5] ;
  output \USE_ROCKET_IO.TXDATA_reg[7] ;
  input \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ;
  input userclk;
  input XMIT_CONFIG_INT_reg_0;
  input gmii_tx_er_ch2;
  input gmii_tx_en_ch2;
  input XMIT_DATA;
  input [7:0]gmii_txd_ch2;
  input [1:0]Q;
  input RXCHARISK_USR;
  input RXCHARISCOMMA_USR;
  input [7:0]RXDATA_USR;
  input [2:0]\TX_CONFIG_REG_INT_reg[14] ;

  wire C1_OR_C2_i_1__1_n_0;
  wire C1_OR_C2_reg_n_0;
  wire [7:0]CODE_GRP;
  wire CODE_GRPISK;
  wire CODE_GRPISK_i_1__1_n_0;
  wire \CODE_GRP[0]_i_1__1_n_0 ;
  wire \CODE_GRP[0]_i_2__1_n_0 ;
  wire \CODE_GRP[1]_i_1__1_n_0 ;
  wire \CODE_GRP[1]_i_2__1_n_0 ;
  wire \CODE_GRP[2]_i_1__1_n_0 ;
  wire \CODE_GRP[2]_i_2__1_n_0 ;
  wire \CODE_GRP[3]_i_1__1_n_0 ;
  wire \CODE_GRP[3]_i_2__1_n_0 ;
  wire \CODE_GRP[4]_i_1__1_n_0 ;
  wire \CODE_GRP[5]_i_1__1_n_0 ;
  wire \CODE_GRP[6]_i_1__1_n_0 ;
  wire \CODE_GRP[6]_i_2__1_n_0 ;
  wire \CODE_GRP[6]_i_3__1_n_0 ;
  wire \CODE_GRP[7]_i_1__1_n_0 ;
  wire \CODE_GRP[7]_i_2__1_n_0 ;
  wire \CODE_GRP[7]_i_3__1_n_0 ;
  wire \CODE_GRP_CNT_reg_n_0_[1] ;
  wire [7:0]CONFIG_DATA;
  wire \CONFIG_DATA_reg_n_0_[0] ;
  wire \CONFIG_DATA_reg_n_0_[1] ;
  wire \CONFIG_DATA_reg_n_0_[3] ;
  wire \CONFIG_DATA_reg_n_0_[6] ;
  wire \CONFIG_DATA_reg_n_0_[7] ;
  wire [7:0]D;
  wire INSERT_IDLE_i_1__1_n_0;
  wire INSERT_IDLE_i_2__1_n_0;
  wire INSERT_IDLE_reg_n_0;
  wire [1:0]Q;
  wire R;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISK_USR;
  wire [7:0]RXDATA_USR;
  wire R_i_1__4_n_0;
  wire S;
  wire S0;
  wire T;
  wire T0;
  wire TRIGGER_S;
  wire TRIGGER_S0;
  wire TRIGGER_T;
  wire TXCHARISK_INT;
  wire [7:0]TXD_REG1;
  wire [14:0]TX_CONFIG;
  wire [2:0]\TX_CONFIG_REG_INT_reg[14] ;
  wire TX_EN_REG1;
  wire TX_ER_REG1;
  wire TX_EVEN;
  wire TX_PACKET;
  wire TX_PACKET_REG1;
  wire TX_PACKET_i_1__1_n_0;
  wire \USE_QSGMII_DATA.TXCHARISK_i_1__1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[0]_i_1__1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[2]_i_1__1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[5]_i_1__1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[6]_i_1__1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[7]_i_1__1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  wire \USE_ROCKET_IO.TXCHARISK_reg ;
  wire \USE_ROCKET_IO.TXDATA_reg[2] ;
  wire \USE_ROCKET_IO.TXDATA_reg[2]_0 ;
  wire \USE_ROCKET_IO.TXDATA_reg[3] ;
  wire \USE_ROCKET_IO.TXDATA_reg[5] ;
  wire [3:0]\USE_ROCKET_IO.TXDATA_reg[6] ;
  wire \USE_ROCKET_IO.TXDATA_reg[7] ;
  wire V;
  wire V_i_1__1_n_0;
  wire V_i_2__1_n_0;
  wire V_i_3__1_n_0;
  wire V_i_4__1_n_0;
  wire V_i_5__1_n_0;
  wire V_i_6__1_n_0;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_reg_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire XMIT_DATA_INT_reg_n_0;
  wire gmii_tx_en_ch2;
  wire gmii_tx_er_ch2;
  wire [7:0]gmii_txd_ch2;
  wire p_14_in;
  wire [1:0]plusOp;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT4 #(
    .INIT(16'h3F80)) 
    C1_OR_C2_i_1__1
       (.I0(XMIT_CONFIG_INT),
        .I1(TX_EVEN),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(C1_OR_C2_reg_n_0),
        .O(C1_OR_C2_i_1__1_n_0));
  FDRE C1_OR_C2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C1_OR_C2_i_1__1_n_0),
        .Q(C1_OR_C2_reg_n_0),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT3 #(
    .INIT(8'h40)) 
    CODE_GRPISK_i_1__1
       (.I0(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I1(TX_EVEN),
        .I2(XMIT_CONFIG_INT),
        .O(CODE_GRPISK_i_1__1_n_0));
  FDSE CODE_GRPISK_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRPISK_i_1__1_n_0),
        .Q(CODE_GRPISK),
        .S(\CODE_GRP[7]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'hFFE2)) 
    \CODE_GRP[0]_i_1__1 
       (.I0(S),
        .I1(XMIT_CONFIG_INT),
        .I2(\CONFIG_DATA_reg_n_0_[0] ),
        .I3(\CODE_GRP[0]_i_2__1_n_0 ),
        .O(\CODE_GRP[0]_i_1__1_n_0 ));
  LUT6 #(
    .INIT(64'h1111111011101110)) 
    \CODE_GRP[0]_i_2__1 
       (.I0(V),
        .I1(XMIT_CONFIG_INT),
        .I2(R),
        .I3(T),
        .I4(TXD_REG1[0]),
        .I5(TX_PACKET),
        .O(\CODE_GRP[0]_i_2__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFE0E)) 
    \CODE_GRP[1]_i_1__1 
       (.I0(S),
        .I1(V),
        .I2(XMIT_CONFIG_INT),
        .I3(\CONFIG_DATA_reg_n_0_[1] ),
        .I4(\CODE_GRP[1]_i_2__1_n_0 ),
        .O(\CODE_GRP[1]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT5 #(
    .INIT(32'h11101010)) 
    \CODE_GRP[1]_i_2__1 
       (.I0(T),
        .I1(XMIT_CONFIG_INT),
        .I2(R),
        .I3(TXD_REG1[1]),
        .I4(TX_PACKET),
        .O(\CODE_GRP[1]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF00FE000000FE)) 
    \CODE_GRP[2]_i_1__1 
       (.I0(V),
        .I1(TXD_REG1[2]),
        .I2(\CODE_GRP[2]_i_2__1_n_0 ),
        .I3(S),
        .I4(XMIT_CONFIG_INT),
        .I5(\CONFIG_DATA_reg_n_0_[7] ),
        .O(\CODE_GRP[2]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair193" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \CODE_GRP[2]_i_2__1 
       (.I0(T),
        .I1(R),
        .I2(TX_PACKET),
        .O(\CODE_GRP[2]_i_2__1_n_0 ));
  LUT6 #(
    .INIT(64'hEEFFEEFFEEFFEEFC)) 
    \CODE_GRP[3]_i_1__1 
       (.I0(\CONFIG_DATA_reg_n_0_[3] ),
        .I1(\CODE_GRP[3]_i_2__1_n_0 ),
        .I2(T),
        .I3(XMIT_CONFIG_INT),
        .I4(V),
        .I5(S),
        .O(\CODE_GRP[3]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'h00AA00EF)) 
    \CODE_GRP[3]_i_2__1 
       (.I0(Q[1]),
        .I1(TXD_REG1[3]),
        .I2(TX_PACKET),
        .I3(XMIT_CONFIG_INT),
        .I4(R),
        .O(\CODE_GRP[3]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT4 #(
    .INIT(16'hF404)) 
    \CODE_GRP[4]_i_1__1 
       (.I0(\CODE_GRP[7]_i_3__1_n_0 ),
        .I1(TXD_REG1[4]),
        .I2(XMIT_CONFIG_INT),
        .I3(\CONFIG_DATA_reg_n_0_[7] ),
        .O(\CODE_GRP[4]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair194" *) 
  LUT4 #(
    .INIT(16'hF404)) 
    \CODE_GRP[5]_i_1__1 
       (.I0(\CODE_GRP[7]_i_3__1_n_0 ),
        .I1(TXD_REG1[5]),
        .I2(XMIT_CONFIG_INT),
        .I3(\CONFIG_DATA_reg_n_0_[7] ),
        .O(\CODE_GRP[5]_i_1__1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \CODE_GRP[6]_i_1__1 
       (.I0(Q[1]),
        .I1(XMIT_CONFIG_INT),
        .O(\CODE_GRP[6]_i_1__1_n_0 ));
  LUT5 #(
    .INIT(32'hFFEA00EA)) 
    \CODE_GRP[6]_i_2__1 
       (.I0(\CODE_GRP[6]_i_3__1_n_0 ),
        .I1(TX_PACKET),
        .I2(TXD_REG1[6]),
        .I3(XMIT_CONFIG_INT),
        .I4(\CONFIG_DATA_reg_n_0_[6] ),
        .O(\CODE_GRP[6]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \CODE_GRP[6]_i_3__1 
       (.I0(S),
        .I1(V),
        .I2(T),
        .I3(R),
        .O(\CODE_GRP[6]_i_3__1_n_0 ));
  LUT3 #(
    .INIT(8'h0E)) 
    \CODE_GRP[7]_i_1__1 
       (.I0(Q[1]),
        .I1(\CODE_GRP[7]_i_3__1_n_0 ),
        .I2(XMIT_CONFIG_INT),
        .O(\CODE_GRP[7]_i_1__1_n_0 ));
  LUT4 #(
    .INIT(16'hF404)) 
    \CODE_GRP[7]_i_2__1 
       (.I0(\CODE_GRP[7]_i_3__1_n_0 ),
        .I1(TXD_REG1[7]),
        .I2(XMIT_CONFIG_INT),
        .I3(\CONFIG_DATA_reg_n_0_[7] ),
        .O(\CODE_GRP[7]_i_2__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair191" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    \CODE_GRP[7]_i_3__1 
       (.I0(TX_PACKET),
        .I1(R),
        .I2(T),
        .I3(S),
        .I4(V),
        .O(\CODE_GRP[7]_i_3__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CODE_GRP_CNT[0]_i_1__1 
       (.I0(TX_EVEN),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair211" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \CODE_GRP_CNT[1]_i_1__1 
       (.I0(TX_EVEN),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(plusOp[1]));
  FDSE \CODE_GRP_CNT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp[0]),
        .Q(TX_EVEN),
        .S(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDSE \CODE_GRP_CNT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp[1]),
        .Q(\CODE_GRP_CNT_reg_n_0_[1] ),
        .S(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CODE_GRP_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[0]_i_1__1_n_0 ),
        .Q(CODE_GRP[0]),
        .R(\CODE_GRP[6]_i_1__1_n_0 ));
  FDRE \CODE_GRP_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[1]_i_1__1_n_0 ),
        .Q(CODE_GRP[1]),
        .R(\CODE_GRP[6]_i_1__1_n_0 ));
  FDSE \CODE_GRP_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[2]_i_1__1_n_0 ),
        .Q(CODE_GRP[2]),
        .S(\CODE_GRP[6]_i_1__1_n_0 ));
  FDRE \CODE_GRP_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[3]_i_1__1_n_0 ),
        .Q(CODE_GRP[3]),
        .R(1'b0));
  FDSE \CODE_GRP_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[4]_i_1__1_n_0 ),
        .Q(CODE_GRP[4]),
        .S(\CODE_GRP[7]_i_1__1_n_0 ));
  FDSE \CODE_GRP_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[5]_i_1__1_n_0 ),
        .Q(CODE_GRP[5]),
        .S(\CODE_GRP[7]_i_1__1_n_0 ));
  FDRE \CODE_GRP_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[6]_i_2__1_n_0 ),
        .Q(CODE_GRP[6]),
        .R(\CODE_GRP[6]_i_1__1_n_0 ));
  FDSE \CODE_GRP_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[7]_i_2__1_n_0 ),
        .Q(CODE_GRP[7]),
        .S(\CODE_GRP[7]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT4 #(
    .INIT(16'h202C)) 
    \CONFIG_DATA[0]_i_1__1 
       (.I0(TX_CONFIG[0]),
        .I1(TX_EVEN),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(C1_OR_C2_reg_n_0),
        .O(CONFIG_DATA[0]));
  (* SOFT_HLUTNM = "soft_lutpair197" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \CONFIG_DATA[1]_i_1__1 
       (.I0(TX_EVEN),
        .I1(C1_OR_C2_reg_n_0),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(CONFIG_DATA[1]));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT3 #(
    .INIT(8'h83)) 
    \CONFIG_DATA[3]_i_1__1 
       (.I0(TX_CONFIG[11]),
        .I1(TX_EVEN),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(CONFIG_DATA[3]));
  (* SOFT_HLUTNM = "soft_lutpair196" *) 
  LUT4 #(
    .INIT(16'hB800)) 
    \CONFIG_DATA[6]_i_1__1 
       (.I0(TX_CONFIG[14]),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I2(C1_OR_C2_reg_n_0),
        .I3(TX_EVEN),
        .O(CONFIG_DATA[6]));
  (* SOFT_HLUTNM = "soft_lutpair202" *) 
  LUT3 #(
    .INIT(8'h07)) 
    \CONFIG_DATA[7]_i_1__1 
       (.I0(TX_EVEN),
        .I1(C1_OR_C2_reg_n_0),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(CONFIG_DATA[7]));
  FDRE \CONFIG_DATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[0]),
        .Q(\CONFIG_DATA_reg_n_0_[0] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CONFIG_DATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[1]),
        .Q(\CONFIG_DATA_reg_n_0_[1] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CONFIG_DATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[3]),
        .Q(\CONFIG_DATA_reg_n_0_[3] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CONFIG_DATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[6]),
        .Q(\CONFIG_DATA_reg_n_0_[6] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CONFIG_DATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[7]),
        .Q(\CONFIG_DATA_reg_n_0_[7] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'h00000000AAAAAAAB)) 
    INSERT_IDLE_i_1__1
       (.I0(Q[1]),
        .I1(INSERT_IDLE_i_2__1_n_0),
        .I2(V),
        .I3(S),
        .I4(TX_PACKET),
        .I5(XMIT_CONFIG_INT),
        .O(INSERT_IDLE_i_1__1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT2 #(
    .INIT(4'hE)) 
    INSERT_IDLE_i_2__1
       (.I0(R),
        .I1(T),
        .O(INSERT_IDLE_i_2__1_n_0));
  FDRE INSERT_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE_i_1__1_n_0),
        .Q(INSERT_IDLE_reg_n_0),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair192" *) 
  LUT5 #(
    .INIT(32'hDDDCCCCC)) 
    R_i_1__4
       (.I0(S),
        .I1(T),
        .I2(TX_EVEN),
        .I3(TX_ER_REG1),
        .I4(R),
        .O(R_i_1__4_n_0));
  FDRE R_reg
       (.C(userclk),
        .CE(1'b1),
        .D(R_i_1__4_n_0),
        .Q(R),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hAAEFAAAA00000000)) 
    S_i_1__4
       (.I0(TRIGGER_S),
        .I1(TX_ER_REG1),
        .I2(TX_EVEN),
        .I3(TX_EN_REG1),
        .I4(gmii_tx_en_ch2),
        .I5(XMIT_DATA_INT_reg_n_0),
        .O(S0));
  FDRE S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S0),
        .Q(S),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    TRIGGER_S_i_1__1
       (.I0(TX_EN_REG1),
        .I1(gmii_tx_en_ch2),
        .I2(TX_EVEN),
        .I3(TX_ER_REG1),
        .O(TRIGGER_S0));
  FDRE TRIGGER_S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TRIGGER_S0),
        .Q(TRIGGER_S),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair195" *) 
  LUT2 #(
    .INIT(4'h2)) 
    TRIGGER_T_i_1__1
       (.I0(TX_EN_REG1),
        .I1(gmii_tx_en_ch2),
        .O(p_14_in));
  FDRE TRIGGER_T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(p_14_in),
        .Q(TRIGGER_T),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \TXD_REG1_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch2[0]),
        .Q(TXD_REG1[0]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch2[1]),
        .Q(TXD_REG1[1]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch2[2]),
        .Q(TXD_REG1[2]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch2[3]),
        .Q(TXD_REG1[3]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch2[4]),
        .Q(TXD_REG1[4]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch2[5]),
        .Q(TXD_REG1[5]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch2[6]),
        .Q(TXD_REG1[6]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch2[7]),
        .Q(TXD_REG1[7]),
        .R(1'b0));
  FDRE \TX_CONFIG_reg[0] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_REG_INT_reg[14] [0]),
        .Q(TX_CONFIG[0]),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \TX_CONFIG_reg[11] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_REG_INT_reg[14] [1]),
        .Q(TX_CONFIG[11]),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \TX_CONFIG_reg[14] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_REG_INT_reg[14] [2]),
        .Q(TX_CONFIG[14]),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE TX_EN_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_tx_en_ch2),
        .Q(TX_EN_REG1),
        .R(1'b0));
  FDRE TX_ER_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_tx_er_ch2),
        .Q(TX_ER_REG1),
        .R(1'b0));
  FDRE TX_PACKET_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TX_PACKET),
        .Q(TX_PACKET_REG1),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT3 #(
    .INIT(8'hDC)) 
    TX_PACKET_i_1__1
       (.I0(T),
        .I1(S),
        .I2(TX_PACKET),
        .O(TX_PACKET_i_1__1_n_0));
  FDRE TX_PACKET_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TX_PACKET_i_1__1_n_0),
        .Q(TX_PACKET),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'h88888888FFF88888)) 
    T_i_1__4
       (.I0(V),
        .I1(TRIGGER_T),
        .I2(TX_PACKET),
        .I3(S),
        .I4(TX_EN_REG1),
        .I5(gmii_tx_en_ch2),
        .O(T0));
  FDRE T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T0),
        .Q(T),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT4 #(
    .INIT(16'h0444)) 
    \USE_QSGMII_DATA.TXCHARISK_i_1__1 
       (.I0(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I1(CODE_GRPISK),
        .I2(TX_EVEN),
        .I3(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXCHARISK_i_1__1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXCHARISK_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXCHARISK_i_1__1_n_0 ),
        .Q(TXCHARISK_INT),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[0]_i_1__1 
       (.I0(CODE_GRP[0]),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[0]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[2]_i_1__1 
       (.I0(CODE_GRP[2]),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[2]_i_1__1_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[5]_i_1__1 
       (.I0(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[5]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair203" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[6]_i_1__1 
       (.I0(CODE_GRP[6]),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[6]_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair200" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[7]_i_1__1 
       (.I0(CODE_GRP[7]),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[7]_i_1__1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[0]_i_1__1_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[1]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[2]_i_1__1_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[3]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[4]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[5]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[6]_i_1__1_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[7]_i_1__1_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_i_1__1 
       (.I0(TXCHARISK_INT),
        .I1(Q[0]),
        .I2(RXCHARISCOMMA_USR),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair201" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_i_1__1 
       (.I0(TXCHARISK_INT),
        .I1(Q[0]),
        .I2(RXCHARISK_USR),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[0]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[0]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[1]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[1]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[2]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[2]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[3]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[3]),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[4]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[4]),
        .O(D[4]));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[5]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[5]),
        .O(D[5]));
  (* SOFT_HLUTNM = "soft_lutpair207" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[6]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[6]),
        .O(D[6]));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[7]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[7]),
        .O(D[7]));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.TXCHARISK_i_1__1 
       (.I0(TX_EVEN),
        .I1(Q[0]),
        .I2(TXCHARISK_INT),
        .O(\USE_ROCKET_IO.TXCHARISK_reg ));
  (* SOFT_HLUTNM = "soft_lutpair205" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[0]_i_1__1 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[6] [0]));
  (* SOFT_HLUTNM = "soft_lutpair210" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[1]_i_1__1 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[6] [1]));
  (* SOFT_HLUTNM = "soft_lutpair209" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[2]_i_1__1 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[2]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair208" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[3]_i_1__1 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair206" *) 
  LUT3 #(
    .INIT(8'h32)) 
    \USE_ROCKET_IO.TXDATA[4]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(Q[0]),
        .O(\USE_ROCKET_IO.TXDATA_reg[6] [2]));
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[5]_i_1__1 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[5] ));
  (* SOFT_HLUTNM = "soft_lutpair199" *) 
  LUT4 #(
    .INIT(16'h003A)) 
    \USE_ROCKET_IO.TXDATA[6]_i_1__1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .I1(TX_EVEN),
        .I2(Q[0]),
        .I3(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .O(\USE_ROCKET_IO.TXDATA_reg[6] [3]));
  (* SOFT_HLUTNM = "soft_lutpair198" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \USE_ROCKET_IO.TXDATA[7]_i_1__1 
       (.I0(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I1(Q[0]),
        .I2(TX_EVEN),
        .O(\USE_ROCKET_IO.TXDATA_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair204" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[7]_i_2__1 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[7] ));
  LUT4 #(
    .INIT(16'hFEFC)) 
    V_i_1__1
       (.I0(S),
        .I1(V_i_2__1_n_0),
        .I2(V_i_3__1_n_0),
        .I3(V),
        .O(V_i_1__1_n_0));
  LUT4 #(
    .INIT(16'h8000)) 
    V_i_2__1
       (.I0(gmii_tx_en_ch2),
        .I1(TX_PACKET),
        .I2(XMIT_DATA_INT_reg_n_0),
        .I3(gmii_tx_er_ch2),
        .O(V_i_2__1_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF08080800)) 
    V_i_3__1
       (.I0(XMIT_DATA_INT_reg_n_0),
        .I1(gmii_tx_er_ch2),
        .I2(gmii_tx_en_ch2),
        .I3(V_i_4__1_n_0),
        .I4(V_i_5__1_n_0),
        .I5(V_i_6__1_n_0),
        .O(V_i_3__1_n_0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    V_i_4__1
       (.I0(gmii_txd_ch2[1]),
        .I1(gmii_txd_ch2[0]),
        .I2(gmii_txd_ch2[3]),
        .I3(gmii_txd_ch2[2]),
        .O(V_i_4__1_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    V_i_5__1
       (.I0(gmii_txd_ch2[5]),
        .I1(gmii_txd_ch2[4]),
        .I2(gmii_txd_ch2[7]),
        .I3(gmii_txd_ch2[6]),
        .O(V_i_5__1_n_0));
  LUT4 #(
    .INIT(16'h4000)) 
    V_i_6__1
       (.I0(TX_PACKET_REG1),
        .I1(TX_ER_REG1),
        .I2(TX_EN_REG1),
        .I3(XMIT_DATA_INT_reg_n_0),
        .O(V_i_6__1_n_0));
  FDRE V_reg
       (.C(userclk),
        .CE(1'b1),
        .D(V_i_1__1_n_0),
        .Q(V),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT2 #(
    .INIT(4'h1)) 
    XMIT_CONFIG_INT_i_1__4
       (.I0(TX_EVEN),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(XMIT_DATA_INT));
  FDSE XMIT_CONFIG_INT_reg
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(XMIT_CONFIG_INT_reg_0),
        .Q(XMIT_CONFIG_INT),
        .S(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE XMIT_DATA_INT_reg
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(XMIT_DATA),
        .Q(XMIT_DATA_INT_reg_n_0),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
endmodule

(* ORIG_REF_NAME = "TX" *) 
module qsgmii_1218_TX_151
   (\USE_ROCKET_IO.TXCHARISK_reg ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ,
    D,
    \USE_ROCKET_IO.TXDATA_reg[6] ,
    \USE_ROCKET_IO.TXDATA_reg[2] ,
    \USE_ROCKET_IO.TXDATA_reg[2]_0 ,
    \USE_ROCKET_IO.TXDATA_reg[3] ,
    \USE_ROCKET_IO.TXDATA_reg[5] ,
    \USE_ROCKET_IO.TXDATA_reg[7] ,
    \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ,
    userclk,
    XMIT_CONFIG_INT_reg_0,
    gmii_tx_er_ch1,
    gmii_tx_en_ch1,
    XMIT_DATA,
    gmii_txd_ch1,
    Q,
    RXCHARISK_USR,
    RXCHARISCOMMA_USR,
    RXDATA_USR,
    \TX_CONFIG_REG_INT_reg[14] );
  output \USE_ROCKET_IO.TXCHARISK_reg ;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  output [7:0]D;
  output [3:0]\USE_ROCKET_IO.TXDATA_reg[6] ;
  output \USE_ROCKET_IO.TXDATA_reg[2] ;
  output \USE_ROCKET_IO.TXDATA_reg[2]_0 ;
  output \USE_ROCKET_IO.TXDATA_reg[3] ;
  output \USE_ROCKET_IO.TXDATA_reg[5] ;
  output \USE_ROCKET_IO.TXDATA_reg[7] ;
  input \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ;
  input userclk;
  input XMIT_CONFIG_INT_reg_0;
  input gmii_tx_er_ch1;
  input gmii_tx_en_ch1;
  input XMIT_DATA;
  input [7:0]gmii_txd_ch1;
  input [1:0]Q;
  input RXCHARISK_USR;
  input RXCHARISCOMMA_USR;
  input [7:0]RXDATA_USR;
  input [2:0]\TX_CONFIG_REG_INT_reg[14] ;

  wire C1_OR_C2_i_1__0_n_0;
  wire C1_OR_C2_reg_n_0;
  wire [7:0]CODE_GRP;
  wire CODE_GRPISK;
  wire CODE_GRPISK_i_1__0_n_0;
  wire \CODE_GRP[0]_i_1__0_n_0 ;
  wire \CODE_GRP[0]_i_2__0_n_0 ;
  wire \CODE_GRP[1]_i_1__0_n_0 ;
  wire \CODE_GRP[1]_i_2__0_n_0 ;
  wire \CODE_GRP[2]_i_1__0_n_0 ;
  wire \CODE_GRP[2]_i_2__0_n_0 ;
  wire \CODE_GRP[3]_i_1__0_n_0 ;
  wire \CODE_GRP[3]_i_2__0_n_0 ;
  wire \CODE_GRP[4]_i_1__0_n_0 ;
  wire \CODE_GRP[5]_i_1__0_n_0 ;
  wire \CODE_GRP[6]_i_1__0_n_0 ;
  wire \CODE_GRP[6]_i_2__0_n_0 ;
  wire \CODE_GRP[6]_i_3__0_n_0 ;
  wire \CODE_GRP[7]_i_1__0_n_0 ;
  wire \CODE_GRP[7]_i_2__0_n_0 ;
  wire \CODE_GRP[7]_i_3__0_n_0 ;
  wire \CODE_GRP_CNT_reg_n_0_[1] ;
  wire [7:0]CONFIG_DATA;
  wire \CONFIG_DATA_reg_n_0_[0] ;
  wire \CONFIG_DATA_reg_n_0_[1] ;
  wire \CONFIG_DATA_reg_n_0_[3] ;
  wire \CONFIG_DATA_reg_n_0_[6] ;
  wire \CONFIG_DATA_reg_n_0_[7] ;
  wire [7:0]D;
  wire INSERT_IDLE_i_1__0_n_0;
  wire INSERT_IDLE_i_2__0_n_0;
  wire INSERT_IDLE_reg_n_0;
  wire [1:0]Q;
  wire R;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISK_USR;
  wire [7:0]RXDATA_USR;
  wire R_i_1__2_n_0;
  wire S;
  wire S0;
  wire T;
  wire T0;
  wire TRIGGER_S;
  wire TRIGGER_S0;
  wire TRIGGER_T;
  wire TXCHARISK_INT;
  wire [7:0]TXD_REG1;
  wire [14:0]TX_CONFIG;
  wire [2:0]\TX_CONFIG_REG_INT_reg[14] ;
  wire TX_EN_REG1;
  wire TX_ER_REG1;
  wire TX_EVEN;
  wire TX_PACKET;
  wire TX_PACKET_REG1;
  wire TX_PACKET_i_1__0_n_0;
  wire \USE_QSGMII_DATA.TXCHARISK_i_1__0_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[0]_i_1__0_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[2]_i_1__0_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[5]_i_1__0_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[6]_i_1__0_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[7]_i_1__0_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  wire \USE_ROCKET_IO.TXCHARISK_reg ;
  wire \USE_ROCKET_IO.TXDATA_reg[2] ;
  wire \USE_ROCKET_IO.TXDATA_reg[2]_0 ;
  wire \USE_ROCKET_IO.TXDATA_reg[3] ;
  wire \USE_ROCKET_IO.TXDATA_reg[5] ;
  wire [3:0]\USE_ROCKET_IO.TXDATA_reg[6] ;
  wire \USE_ROCKET_IO.TXDATA_reg[7] ;
  wire V;
  wire V_i_1__0_n_0;
  wire V_i_2__0_n_0;
  wire V_i_3__0_n_0;
  wire V_i_4__0_n_0;
  wire V_i_5__0_n_0;
  wire V_i_6__0_n_0;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_reg_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire XMIT_DATA_INT_reg_n_0;
  wire gmii_tx_en_ch1;
  wire gmii_tx_er_ch1;
  wire [7:0]gmii_txd_ch1;
  wire p_14_in;
  wire [1:0]plusOp;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT4 #(
    .INIT(16'h3F80)) 
    C1_OR_C2_i_1__0
       (.I0(XMIT_CONFIG_INT),
        .I1(TX_EVEN),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(C1_OR_C2_reg_n_0),
        .O(C1_OR_C2_i_1__0_n_0));
  FDRE C1_OR_C2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C1_OR_C2_i_1__0_n_0),
        .Q(C1_OR_C2_reg_n_0),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT3 #(
    .INIT(8'h40)) 
    CODE_GRPISK_i_1__0
       (.I0(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I1(TX_EVEN),
        .I2(XMIT_CONFIG_INT),
        .O(CODE_GRPISK_i_1__0_n_0));
  FDSE CODE_GRPISK_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRPISK_i_1__0_n_0),
        .Q(CODE_GRPISK),
        .S(\CODE_GRP[7]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hFFE2)) 
    \CODE_GRP[0]_i_1__0 
       (.I0(S),
        .I1(XMIT_CONFIG_INT),
        .I2(\CONFIG_DATA_reg_n_0_[0] ),
        .I3(\CODE_GRP[0]_i_2__0_n_0 ),
        .O(\CODE_GRP[0]_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h1111111011101110)) 
    \CODE_GRP[0]_i_2__0 
       (.I0(V),
        .I1(XMIT_CONFIG_INT),
        .I2(R),
        .I3(T),
        .I4(TXD_REG1[0]),
        .I5(TX_PACKET),
        .O(\CODE_GRP[0]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFE0E)) 
    \CODE_GRP[1]_i_1__0 
       (.I0(S),
        .I1(V),
        .I2(XMIT_CONFIG_INT),
        .I3(\CONFIG_DATA_reg_n_0_[1] ),
        .I4(\CODE_GRP[1]_i_2__0_n_0 ),
        .O(\CODE_GRP[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT5 #(
    .INIT(32'h11101010)) 
    \CODE_GRP[1]_i_2__0 
       (.I0(T),
        .I1(XMIT_CONFIG_INT),
        .I2(R),
        .I3(TXD_REG1[1]),
        .I4(TX_PACKET),
        .O(\CODE_GRP[1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF00FE000000FE)) 
    \CODE_GRP[2]_i_1__0 
       (.I0(V),
        .I1(TXD_REG1[2]),
        .I2(\CODE_GRP[2]_i_2__0_n_0 ),
        .I3(S),
        .I4(XMIT_CONFIG_INT),
        .I5(\CONFIG_DATA_reg_n_0_[7] ),
        .O(\CODE_GRP[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \CODE_GRP[2]_i_2__0 
       (.I0(T),
        .I1(R),
        .I2(TX_PACKET),
        .O(\CODE_GRP[2]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hEEFFEEFFEEFFEEFC)) 
    \CODE_GRP[3]_i_1__0 
       (.I0(\CONFIG_DATA_reg_n_0_[3] ),
        .I1(\CODE_GRP[3]_i_2__0_n_0 ),
        .I2(T),
        .I3(XMIT_CONFIG_INT),
        .I4(V),
        .I5(S),
        .O(\CODE_GRP[3]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'h00AA00EF)) 
    \CODE_GRP[3]_i_2__0 
       (.I0(Q[1]),
        .I1(TXD_REG1[3]),
        .I2(TX_PACKET),
        .I3(XMIT_CONFIG_INT),
        .I4(R),
        .O(\CODE_GRP[3]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT4 #(
    .INIT(16'hF404)) 
    \CODE_GRP[4]_i_1__0 
       (.I0(\CODE_GRP[7]_i_3__0_n_0 ),
        .I1(TXD_REG1[4]),
        .I2(XMIT_CONFIG_INT),
        .I3(\CONFIG_DATA_reg_n_0_[7] ),
        .O(\CODE_GRP[4]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT4 #(
    .INIT(16'hF404)) 
    \CODE_GRP[5]_i_1__0 
       (.I0(\CODE_GRP[7]_i_3__0_n_0 ),
        .I1(TXD_REG1[5]),
        .I2(XMIT_CONFIG_INT),
        .I3(\CONFIG_DATA_reg_n_0_[7] ),
        .O(\CODE_GRP[5]_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \CODE_GRP[6]_i_1__0 
       (.I0(Q[1]),
        .I1(XMIT_CONFIG_INT),
        .O(\CODE_GRP[6]_i_1__0_n_0 ));
  LUT5 #(
    .INIT(32'hFFEA00EA)) 
    \CODE_GRP[6]_i_2__0 
       (.I0(\CODE_GRP[6]_i_3__0_n_0 ),
        .I1(TX_PACKET),
        .I2(TXD_REG1[6]),
        .I3(XMIT_CONFIG_INT),
        .I4(\CONFIG_DATA_reg_n_0_[6] ),
        .O(\CODE_GRP[6]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \CODE_GRP[6]_i_3__0 
       (.I0(S),
        .I1(V),
        .I2(T),
        .I3(R),
        .O(\CODE_GRP[6]_i_3__0_n_0 ));
  LUT3 #(
    .INIT(8'h0E)) 
    \CODE_GRP[7]_i_1__0 
       (.I0(Q[1]),
        .I1(\CODE_GRP[7]_i_3__0_n_0 ),
        .I2(XMIT_CONFIG_INT),
        .O(\CODE_GRP[7]_i_1__0_n_0 ));
  LUT4 #(
    .INIT(16'hF404)) 
    \CODE_GRP[7]_i_2__0 
       (.I0(\CODE_GRP[7]_i_3__0_n_0 ),
        .I1(TXD_REG1[7]),
        .I2(XMIT_CONFIG_INT),
        .I3(\CONFIG_DATA_reg_n_0_[7] ),
        .O(\CODE_GRP[7]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    \CODE_GRP[7]_i_3__0 
       (.I0(TX_PACKET),
        .I1(R),
        .I2(T),
        .I3(S),
        .I4(V),
        .O(\CODE_GRP[7]_i_3__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CODE_GRP_CNT[0]_i_1__0 
       (.I0(TX_EVEN),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \CODE_GRP_CNT[1]_i_1__0 
       (.I0(TX_EVEN),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(plusOp[1]));
  FDSE \CODE_GRP_CNT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp[0]),
        .Q(TX_EVEN),
        .S(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDSE \CODE_GRP_CNT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp[1]),
        .Q(\CODE_GRP_CNT_reg_n_0_[1] ),
        .S(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CODE_GRP_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[0]_i_1__0_n_0 ),
        .Q(CODE_GRP[0]),
        .R(\CODE_GRP[6]_i_1__0_n_0 ));
  FDRE \CODE_GRP_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[1]_i_1__0_n_0 ),
        .Q(CODE_GRP[1]),
        .R(\CODE_GRP[6]_i_1__0_n_0 ));
  FDSE \CODE_GRP_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[2]_i_1__0_n_0 ),
        .Q(CODE_GRP[2]),
        .S(\CODE_GRP[6]_i_1__0_n_0 ));
  FDRE \CODE_GRP_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[3]_i_1__0_n_0 ),
        .Q(CODE_GRP[3]),
        .R(1'b0));
  FDSE \CODE_GRP_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[4]_i_1__0_n_0 ),
        .Q(CODE_GRP[4]),
        .S(\CODE_GRP[7]_i_1__0_n_0 ));
  FDSE \CODE_GRP_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[5]_i_1__0_n_0 ),
        .Q(CODE_GRP[5]),
        .S(\CODE_GRP[7]_i_1__0_n_0 ));
  FDRE \CODE_GRP_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[6]_i_2__0_n_0 ),
        .Q(CODE_GRP[6]),
        .R(\CODE_GRP[6]_i_1__0_n_0 ));
  FDSE \CODE_GRP_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[7]_i_2__0_n_0 ),
        .Q(CODE_GRP[7]),
        .S(\CODE_GRP[7]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT4 #(
    .INIT(16'h202C)) 
    \CONFIG_DATA[0]_i_1__0 
       (.I0(TX_CONFIG[0]),
        .I1(TX_EVEN),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(C1_OR_C2_reg_n_0),
        .O(CONFIG_DATA[0]));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \CONFIG_DATA[1]_i_1__0 
       (.I0(TX_EVEN),
        .I1(C1_OR_C2_reg_n_0),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(CONFIG_DATA[1]));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT3 #(
    .INIT(8'h83)) 
    \CONFIG_DATA[3]_i_1__0 
       (.I0(TX_CONFIG[11]),
        .I1(TX_EVEN),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(CONFIG_DATA[3]));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT4 #(
    .INIT(16'hB800)) 
    \CONFIG_DATA[6]_i_1__0 
       (.I0(TX_CONFIG[14]),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I2(C1_OR_C2_reg_n_0),
        .I3(TX_EVEN),
        .O(CONFIG_DATA[6]));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT3 #(
    .INIT(8'h07)) 
    \CONFIG_DATA[7]_i_1__0 
       (.I0(TX_EVEN),
        .I1(C1_OR_C2_reg_n_0),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(CONFIG_DATA[7]));
  FDRE \CONFIG_DATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[0]),
        .Q(\CONFIG_DATA_reg_n_0_[0] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CONFIG_DATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[1]),
        .Q(\CONFIG_DATA_reg_n_0_[1] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CONFIG_DATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[3]),
        .Q(\CONFIG_DATA_reg_n_0_[3] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CONFIG_DATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[6]),
        .Q(\CONFIG_DATA_reg_n_0_[6] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CONFIG_DATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[7]),
        .Q(\CONFIG_DATA_reg_n_0_[7] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'h00000000AAAAAAAB)) 
    INSERT_IDLE_i_1__0
       (.I0(Q[1]),
        .I1(INSERT_IDLE_i_2__0_n_0),
        .I2(V),
        .I3(S),
        .I4(TX_PACKET),
        .I5(XMIT_CONFIG_INT),
        .O(INSERT_IDLE_i_1__0_n_0));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT2 #(
    .INIT(4'hE)) 
    INSERT_IDLE_i_2__0
       (.I0(R),
        .I1(T),
        .O(INSERT_IDLE_i_2__0_n_0));
  FDRE INSERT_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE_i_1__0_n_0),
        .Q(INSERT_IDLE_reg_n_0),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT5 #(
    .INIT(32'hDDDCCCCC)) 
    R_i_1__2
       (.I0(S),
        .I1(T),
        .I2(TX_EVEN),
        .I3(TX_ER_REG1),
        .I4(R),
        .O(R_i_1__2_n_0));
  FDRE R_reg
       (.C(userclk),
        .CE(1'b1),
        .D(R_i_1__2_n_0),
        .Q(R),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hAAEFAAAA00000000)) 
    S_i_1__2
       (.I0(TRIGGER_S),
        .I1(TX_ER_REG1),
        .I2(TX_EVEN),
        .I3(TX_EN_REG1),
        .I4(gmii_tx_en_ch1),
        .I5(XMIT_DATA_INT_reg_n_0),
        .O(S0));
  FDRE S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S0),
        .Q(S),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT4 #(
    .INIT(16'h0040)) 
    TRIGGER_S_i_1__0
       (.I0(TX_EN_REG1),
        .I1(gmii_tx_en_ch1),
        .I2(TX_EVEN),
        .I3(TX_ER_REG1),
        .O(TRIGGER_S0));
  FDRE TRIGGER_S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TRIGGER_S0),
        .Q(TRIGGER_S),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT2 #(
    .INIT(4'h2)) 
    TRIGGER_T_i_1__0
       (.I0(TX_EN_REG1),
        .I1(gmii_tx_en_ch1),
        .O(p_14_in));
  FDRE TRIGGER_T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(p_14_in),
        .Q(TRIGGER_T),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \TXD_REG1_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch1[0]),
        .Q(TXD_REG1[0]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch1[1]),
        .Q(TXD_REG1[1]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch1[2]),
        .Q(TXD_REG1[2]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch1[3]),
        .Q(TXD_REG1[3]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch1[4]),
        .Q(TXD_REG1[4]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch1[5]),
        .Q(TXD_REG1[5]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch1[6]),
        .Q(TXD_REG1[6]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch1[7]),
        .Q(TXD_REG1[7]),
        .R(1'b0));
  FDRE \TX_CONFIG_reg[0] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_REG_INT_reg[14] [0]),
        .Q(TX_CONFIG[0]),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \TX_CONFIG_reg[11] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_REG_INT_reg[14] [1]),
        .Q(TX_CONFIG[11]),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \TX_CONFIG_reg[14] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_REG_INT_reg[14] [2]),
        .Q(TX_CONFIG[14]),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE TX_EN_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_tx_en_ch1),
        .Q(TX_EN_REG1),
        .R(1'b0));
  FDRE TX_ER_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_tx_er_ch1),
        .Q(TX_ER_REG1),
        .R(1'b0));
  FDRE TX_PACKET_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TX_PACKET),
        .Q(TX_PACKET_REG1),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT3 #(
    .INIT(8'hDC)) 
    TX_PACKET_i_1__0
       (.I0(T),
        .I1(S),
        .I2(TX_PACKET),
        .O(TX_PACKET_i_1__0_n_0));
  FDRE TX_PACKET_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TX_PACKET_i_1__0_n_0),
        .Q(TX_PACKET),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'h88888888FFF88888)) 
    T_i_1__2
       (.I0(V),
        .I1(TRIGGER_T),
        .I2(TX_PACKET),
        .I3(S),
        .I4(TX_EN_REG1),
        .I5(gmii_tx_en_ch1),
        .O(T0));
  FDRE T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T0),
        .Q(T),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT4 #(
    .INIT(16'h0444)) 
    \USE_QSGMII_DATA.TXCHARISK_i_1__0 
       (.I0(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I1(CODE_GRPISK),
        .I2(TX_EVEN),
        .I3(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXCHARISK_i_1__0_n_0 ));
  FDRE \USE_QSGMII_DATA.TXCHARISK_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXCHARISK_i_1__0_n_0 ),
        .Q(TXCHARISK_INT),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[0]_i_1__0 
       (.I0(CODE_GRP[0]),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[2]_i_1__0 
       (.I0(CODE_GRP[2]),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[2]_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[5]_i_1__0 
       (.I0(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[5]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[6]_i_1__0 
       (.I0(CODE_GRP[6]),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[6]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[7]_i_1__0 
       (.I0(CODE_GRP[7]),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[7]_i_1__0_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[0]_i_1__0_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[1]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__0_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[2]_i_1__0_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[3]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__0_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[4]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__0_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[5]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1__0_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[6]_i_1__0_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[7]_i_1__0_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_i_1__0 
       (.I0(TXCHARISK_INT),
        .I1(Q[0]),
        .I2(RXCHARISCOMMA_USR),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_i_1__0 
       (.I0(TXCHARISK_INT),
        .I1(Q[0]),
        .I2(RXCHARISK_USR),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[0]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[0]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[1]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[1]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[2]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[2]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[3]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[3]),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[4]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[4]),
        .O(D[4]));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[5]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[5]),
        .O(D[5]));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[6]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[6]),
        .O(D[6]));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[7]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[7]),
        .O(D[7]));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.TXCHARISK_i_1__0 
       (.I0(TX_EVEN),
        .I1(Q[0]),
        .I2(TXCHARISK_INT),
        .O(\USE_ROCKET_IO.TXCHARISK_reg ));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[0]_i_1__0 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[6] [0]));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[1]_i_1__0 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[6] [1]));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[2]_i_1__0 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[2]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[3]_i_1__0 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT3 #(
    .INIT(8'h32)) 
    \USE_ROCKET_IO.TXDATA[4]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(Q[0]),
        .O(\USE_ROCKET_IO.TXDATA_reg[6] [2]));
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[5]_i_1__0 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[5] ));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT4 #(
    .INIT(16'h003A)) 
    \USE_ROCKET_IO.TXDATA[6]_i_1__0 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .I1(TX_EVEN),
        .I2(Q[0]),
        .I3(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .O(\USE_ROCKET_IO.TXDATA_reg[6] [3]));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \USE_ROCKET_IO.TXDATA[7]_i_1__0 
       (.I0(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I1(Q[0]),
        .I2(TX_EVEN),
        .O(\USE_ROCKET_IO.TXDATA_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[7]_i_2__0 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[7] ));
  LUT4 #(
    .INIT(16'hFEFC)) 
    V_i_1__0
       (.I0(S),
        .I1(V_i_2__0_n_0),
        .I2(V_i_3__0_n_0),
        .I3(V),
        .O(V_i_1__0_n_0));
  LUT4 #(
    .INIT(16'h8000)) 
    V_i_2__0
       (.I0(gmii_tx_en_ch1),
        .I1(TX_PACKET),
        .I2(XMIT_DATA_INT_reg_n_0),
        .I3(gmii_tx_er_ch1),
        .O(V_i_2__0_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF08080800)) 
    V_i_3__0
       (.I0(XMIT_DATA_INT_reg_n_0),
        .I1(gmii_tx_er_ch1),
        .I2(gmii_tx_en_ch1),
        .I3(V_i_4__0_n_0),
        .I4(V_i_5__0_n_0),
        .I5(V_i_6__0_n_0),
        .O(V_i_3__0_n_0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    V_i_4__0
       (.I0(gmii_txd_ch1[1]),
        .I1(gmii_txd_ch1[0]),
        .I2(gmii_txd_ch1[3]),
        .I3(gmii_txd_ch1[2]),
        .O(V_i_4__0_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    V_i_5__0
       (.I0(gmii_txd_ch1[5]),
        .I1(gmii_txd_ch1[4]),
        .I2(gmii_txd_ch1[7]),
        .I3(gmii_txd_ch1[6]),
        .O(V_i_5__0_n_0));
  LUT4 #(
    .INIT(16'h4000)) 
    V_i_6__0
       (.I0(TX_PACKET_REG1),
        .I1(TX_ER_REG1),
        .I2(TX_EN_REG1),
        .I3(XMIT_DATA_INT_reg_n_0),
        .O(V_i_6__0_n_0));
  FDRE V_reg
       (.C(userclk),
        .CE(1'b1),
        .D(V_i_1__0_n_0),
        .Q(V),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT2 #(
    .INIT(4'h1)) 
    XMIT_CONFIG_INT_i_1__5
       (.I0(TX_EVEN),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(XMIT_DATA_INT));
  FDSE XMIT_CONFIG_INT_reg
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(XMIT_CONFIG_INT_reg_0),
        .Q(XMIT_CONFIG_INT),
        .S(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE XMIT_DATA_INT_reg
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(XMIT_DATA),
        .Q(XMIT_DATA_INT_reg_n_0),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
endmodule

(* ORIG_REF_NAME = "TX" *) 
module qsgmii_1218_TX_159
   (\USE_ROCKET_IO.TXCHARISK_reg ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ,
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ,
    D,
    \USE_ROCKET_IO.TXDATA_reg[6] ,
    \USE_ROCKET_IO.TXDATA_reg[2] ,
    \USE_ROCKET_IO.TXDATA_reg[2]_0 ,
    \USE_ROCKET_IO.TXDATA_reg[3] ,
    \USE_ROCKET_IO.TXDATA_reg[5] ,
    \USE_ROCKET_IO.TXDATA_reg[7] ,
    \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ,
    userclk,
    XMIT_CONFIG_INT_reg_0,
    gmii_tx_er_ch0,
    gmii_tx_en_ch0,
    XMIT_DATA,
    Q,
    gmii_txd_ch0,
    RXCHARISK_USR,
    RXCHARISCOMMA_USR,
    RXDATA_USR,
    \TX_CONFIG_REG_INT_reg[14] );
  output \USE_ROCKET_IO.TXCHARISK_reg ;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  output \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  output [7:0]D;
  output [3:0]\USE_ROCKET_IO.TXDATA_reg[6] ;
  output \USE_ROCKET_IO.TXDATA_reg[2] ;
  output \USE_ROCKET_IO.TXDATA_reg[2]_0 ;
  output \USE_ROCKET_IO.TXDATA_reg[3] ;
  output \USE_ROCKET_IO.TXDATA_reg[5] ;
  output \USE_ROCKET_IO.TXDATA_reg[7] ;
  input \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ;
  input userclk;
  input XMIT_CONFIG_INT_reg_0;
  input gmii_tx_er_ch0;
  input gmii_tx_en_ch0;
  input XMIT_DATA;
  input [1:0]Q;
  input [7:0]gmii_txd_ch0;
  input RXCHARISK_USR;
  input RXCHARISCOMMA_USR;
  input [7:0]RXDATA_USR;
  input [2:0]\TX_CONFIG_REG_INT_reg[14] ;

  wire C1_OR_C2_i_1_n_0;
  wire C1_OR_C2_reg_n_0;
  wire [7:0]CODE_GRP;
  wire CODE_GRPISK;
  wire CODE_GRPISK_i_1_n_0;
  wire \CODE_GRP[0]_i_1_n_0 ;
  wire \CODE_GRP[0]_i_2_n_0 ;
  wire \CODE_GRP[1]_i_1_n_0 ;
  wire \CODE_GRP[1]_i_2_n_0 ;
  wire \CODE_GRP[2]_i_1_n_0 ;
  wire \CODE_GRP[2]_i_2_n_0 ;
  wire \CODE_GRP[3]_i_1_n_0 ;
  wire \CODE_GRP[3]_i_2_n_0 ;
  wire \CODE_GRP[4]_i_1_n_0 ;
  wire \CODE_GRP[5]_i_1_n_0 ;
  wire \CODE_GRP[6]_i_1_n_0 ;
  wire \CODE_GRP[6]_i_2_n_0 ;
  wire \CODE_GRP[6]_i_3_n_0 ;
  wire \CODE_GRP[7]_i_1_n_0 ;
  wire \CODE_GRP[7]_i_2_n_0 ;
  wire \CODE_GRP[7]_i_3_n_0 ;
  wire \CODE_GRP_CNT_reg_n_0_[1] ;
  wire [7:0]CONFIG_DATA;
  wire \CONFIG_DATA_reg_n_0_[0] ;
  wire \CONFIG_DATA_reg_n_0_[1] ;
  wire \CONFIG_DATA_reg_n_0_[3] ;
  wire \CONFIG_DATA_reg_n_0_[6] ;
  wire \CONFIG_DATA_reg_n_0_[7] ;
  wire [7:0]D;
  wire INSERT_IDLE_i_1_n_0;
  wire INSERT_IDLE_i_2_n_0;
  wire INSERT_IDLE_reg_n_0;
  wire [1:0]Q;
  wire R;
  wire RXCHARISCOMMA_USR;
  wire RXCHARISK_USR;
  wire [7:0]RXDATA_USR;
  wire R_i_1__0_n_0;
  wire S;
  wire S0;
  wire T;
  wire T0;
  wire TRIGGER_S;
  wire TRIGGER_S0;
  wire TRIGGER_T;
  wire TXCHARISK_INT;
  wire [7:0]TXD_REG1;
  wire [14:0]TX_CONFIG;
  wire [2:0]\TX_CONFIG_REG_INT_reg[14] ;
  wire TX_EN_REG1;
  wire TX_ER_REG1;
  wire TX_EVEN;
  wire TX_PACKET;
  wire TX_PACKET_REG1;
  wire TX_PACKET_i_1_n_0;
  wire \USE_QSGMII_DATA.TXCHARISK_i_1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[0]_i_1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[2]_i_1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[5]_i_1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[6]_i_1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA[7]_i_1_n_0 ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ;
  wire \USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ;
  wire \USE_ROCKET_IO.MGT_TX_RESET_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ;
  wire \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ;
  wire \USE_ROCKET_IO.TXCHARISK_reg ;
  wire \USE_ROCKET_IO.TXDATA_reg[2] ;
  wire \USE_ROCKET_IO.TXDATA_reg[2]_0 ;
  wire \USE_ROCKET_IO.TXDATA_reg[3] ;
  wire \USE_ROCKET_IO.TXDATA_reg[5] ;
  wire [3:0]\USE_ROCKET_IO.TXDATA_reg[6] ;
  wire \USE_ROCKET_IO.TXDATA_reg[7] ;
  wire V;
  wire V_i_1_n_0;
  wire V_i_2_n_0;
  wire V_i_3_n_0;
  wire V_i_4_n_0;
  wire V_i_5_n_0;
  wire V_i_6_n_0;
  wire XMIT_CONFIG_INT;
  wire XMIT_CONFIG_INT_reg_0;
  wire XMIT_DATA;
  wire XMIT_DATA_INT;
  wire XMIT_DATA_INT_reg_n_0;
  wire gmii_tx_en_ch0;
  wire gmii_tx_er_ch0;
  wire [7:0]gmii_txd_ch0;
  wire p_14_in;
  wire [1:0]plusOp;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT4 #(
    .INIT(16'h3F80)) 
    C1_OR_C2_i_1
       (.I0(XMIT_CONFIG_INT),
        .I1(TX_EVEN),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(C1_OR_C2_reg_n_0),
        .O(C1_OR_C2_i_1_n_0));
  FDRE C1_OR_C2_reg
       (.C(userclk),
        .CE(1'b1),
        .D(C1_OR_C2_i_1_n_0),
        .Q(C1_OR_C2_reg_n_0),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT3 #(
    .INIT(8'h40)) 
    CODE_GRPISK_i_1
       (.I0(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I1(TX_EVEN),
        .I2(XMIT_CONFIG_INT),
        .O(CODE_GRPISK_i_1_n_0));
  FDSE CODE_GRPISK_reg
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRPISK_i_1_n_0),
        .Q(CODE_GRPISK),
        .S(\CODE_GRP[7]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFFE2)) 
    \CODE_GRP[0]_i_1 
       (.I0(S),
        .I1(XMIT_CONFIG_INT),
        .I2(\CONFIG_DATA_reg_n_0_[0] ),
        .I3(\CODE_GRP[0]_i_2_n_0 ),
        .O(\CODE_GRP[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h1111111011101110)) 
    \CODE_GRP[0]_i_2 
       (.I0(V),
        .I1(XMIT_CONFIG_INT),
        .I2(R),
        .I3(T),
        .I4(TXD_REG1[0]),
        .I5(TX_PACKET),
        .O(\CODE_GRP[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'hFFFFFE0E)) 
    \CODE_GRP[1]_i_1 
       (.I0(S),
        .I1(V),
        .I2(XMIT_CONFIG_INT),
        .I3(\CONFIG_DATA_reg_n_0_[1] ),
        .I4(\CODE_GRP[1]_i_2_n_0 ),
        .O(\CODE_GRP[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT5 #(
    .INIT(32'h11101010)) 
    \CODE_GRP[1]_i_2 
       (.I0(T),
        .I1(XMIT_CONFIG_INT),
        .I2(R),
        .I3(TXD_REG1[1]),
        .I4(TX_PACKET),
        .O(\CODE_GRP[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFF00FE000000FE)) 
    \CODE_GRP[2]_i_1 
       (.I0(V),
        .I1(TXD_REG1[2]),
        .I2(\CODE_GRP[2]_i_2_n_0 ),
        .I3(S),
        .I4(XMIT_CONFIG_INT),
        .I5(\CONFIG_DATA_reg_n_0_[7] ),
        .O(\CODE_GRP[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \CODE_GRP[2]_i_2 
       (.I0(T),
        .I1(R),
        .I2(TX_PACKET),
        .O(\CODE_GRP[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hEEFFEEFFEEFFEEFC)) 
    \CODE_GRP[3]_i_1 
       (.I0(\CONFIG_DATA_reg_n_0_[3] ),
        .I1(\CODE_GRP[3]_i_2_n_0 ),
        .I2(T),
        .I3(XMIT_CONFIG_INT),
        .I4(V),
        .I5(S),
        .O(\CODE_GRP[3]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h00AA00EF)) 
    \CODE_GRP[3]_i_2 
       (.I0(Q[1]),
        .I1(TXD_REG1[3]),
        .I2(TX_PACKET),
        .I3(XMIT_CONFIG_INT),
        .I4(R),
        .O(\CODE_GRP[3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT4 #(
    .INIT(16'hF404)) 
    \CODE_GRP[4]_i_1 
       (.I0(\CODE_GRP[7]_i_3_n_0 ),
        .I1(TXD_REG1[4]),
        .I2(XMIT_CONFIG_INT),
        .I3(\CONFIG_DATA_reg_n_0_[7] ),
        .O(\CODE_GRP[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT4 #(
    .INIT(16'hF404)) 
    \CODE_GRP[5]_i_1 
       (.I0(\CODE_GRP[7]_i_3_n_0 ),
        .I1(TXD_REG1[5]),
        .I2(XMIT_CONFIG_INT),
        .I3(\CONFIG_DATA_reg_n_0_[7] ),
        .O(\CODE_GRP[5]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h2)) 
    \CODE_GRP[6]_i_1 
       (.I0(Q[1]),
        .I1(XMIT_CONFIG_INT),
        .O(\CODE_GRP[6]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'hFFEA00EA)) 
    \CODE_GRP[6]_i_2 
       (.I0(\CODE_GRP[6]_i_3_n_0 ),
        .I1(TX_PACKET),
        .I2(TXD_REG1[6]),
        .I3(XMIT_CONFIG_INT),
        .I4(\CONFIG_DATA_reg_n_0_[6] ),
        .O(\CODE_GRP[6]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \CODE_GRP[6]_i_3 
       (.I0(S),
        .I1(V),
        .I2(T),
        .I3(R),
        .O(\CODE_GRP[6]_i_3_n_0 ));
  LUT3 #(
    .INIT(8'h0E)) 
    \CODE_GRP[7]_i_1 
       (.I0(Q[1]),
        .I1(\CODE_GRP[7]_i_3_n_0 ),
        .I2(XMIT_CONFIG_INT),
        .O(\CODE_GRP[7]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hF404)) 
    \CODE_GRP[7]_i_2 
       (.I0(\CODE_GRP[7]_i_3_n_0 ),
        .I1(TXD_REG1[7]),
        .I2(XMIT_CONFIG_INT),
        .I3(\CONFIG_DATA_reg_n_0_[7] ),
        .O(\CODE_GRP[7]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT5 #(
    .INIT(32'hFFFFFFFD)) 
    \CODE_GRP[7]_i_3 
       (.I0(TX_PACKET),
        .I1(R),
        .I2(T),
        .I3(S),
        .I4(V),
        .O(\CODE_GRP[7]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \CODE_GRP_CNT[0]_i_1 
       (.I0(TX_EVEN),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \CODE_GRP_CNT[1]_i_1 
       (.I0(TX_EVEN),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(plusOp[1]));
  FDSE \CODE_GRP_CNT_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp[0]),
        .Q(TX_EVEN),
        .S(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDSE \CODE_GRP_CNT_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(plusOp[1]),
        .Q(\CODE_GRP_CNT_reg_n_0_[1] ),
        .S(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CODE_GRP_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[0]_i_1_n_0 ),
        .Q(CODE_GRP[0]),
        .R(\CODE_GRP[6]_i_1_n_0 ));
  FDRE \CODE_GRP_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[1]_i_1_n_0 ),
        .Q(CODE_GRP[1]),
        .R(\CODE_GRP[6]_i_1_n_0 ));
  FDSE \CODE_GRP_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[2]_i_1_n_0 ),
        .Q(CODE_GRP[2]),
        .S(\CODE_GRP[6]_i_1_n_0 ));
  FDRE \CODE_GRP_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[3]_i_1_n_0 ),
        .Q(CODE_GRP[3]),
        .R(1'b0));
  FDSE \CODE_GRP_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[4]_i_1_n_0 ),
        .Q(CODE_GRP[4]),
        .S(\CODE_GRP[7]_i_1_n_0 ));
  FDSE \CODE_GRP_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[5]_i_1_n_0 ),
        .Q(CODE_GRP[5]),
        .S(\CODE_GRP[7]_i_1_n_0 ));
  FDRE \CODE_GRP_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[6]_i_2_n_0 ),
        .Q(CODE_GRP[6]),
        .R(\CODE_GRP[6]_i_1_n_0 ));
  FDSE \CODE_GRP_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\CODE_GRP[7]_i_2_n_0 ),
        .Q(CODE_GRP[7]),
        .S(\CODE_GRP[7]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT4 #(
    .INIT(16'h202C)) 
    \CONFIG_DATA[0]_i_1 
       (.I0(TX_CONFIG[0]),
        .I1(TX_EVEN),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I3(C1_OR_C2_reg_n_0),
        .O(CONFIG_DATA[0]));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT3 #(
    .INIT(8'h08)) 
    \CONFIG_DATA[1]_i_1 
       (.I0(TX_EVEN),
        .I1(C1_OR_C2_reg_n_0),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(CONFIG_DATA[1]));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT3 #(
    .INIT(8'h83)) 
    \CONFIG_DATA[3]_i_1 
       (.I0(TX_CONFIG[11]),
        .I1(TX_EVEN),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(CONFIG_DATA[3]));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT4 #(
    .INIT(16'hB800)) 
    \CONFIG_DATA[6]_i_1 
       (.I0(TX_CONFIG[14]),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .I2(C1_OR_C2_reg_n_0),
        .I3(TX_EVEN),
        .O(CONFIG_DATA[6]));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT3 #(
    .INIT(8'h07)) 
    \CONFIG_DATA[7]_i_1 
       (.I0(TX_EVEN),
        .I1(C1_OR_C2_reg_n_0),
        .I2(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(CONFIG_DATA[7]));
  FDRE \CONFIG_DATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[0]),
        .Q(\CONFIG_DATA_reg_n_0_[0] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CONFIG_DATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[1]),
        .Q(\CONFIG_DATA_reg_n_0_[1] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CONFIG_DATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[3]),
        .Q(\CONFIG_DATA_reg_n_0_[3] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CONFIG_DATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[6]),
        .Q(\CONFIG_DATA_reg_n_0_[6] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \CONFIG_DATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(CONFIG_DATA[7]),
        .Q(\CONFIG_DATA_reg_n_0_[7] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'h00000000AAAAAAAB)) 
    INSERT_IDLE_i_1
       (.I0(Q[1]),
        .I1(INSERT_IDLE_i_2_n_0),
        .I2(V),
        .I3(S),
        .I4(TX_PACKET),
        .I5(XMIT_CONFIG_INT),
        .O(INSERT_IDLE_i_1_n_0));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT2 #(
    .INIT(4'hE)) 
    INSERT_IDLE_i_2
       (.I0(R),
        .I1(T),
        .O(INSERT_IDLE_i_2_n_0));
  FDRE INSERT_IDLE_reg
       (.C(userclk),
        .CE(1'b1),
        .D(INSERT_IDLE_i_1_n_0),
        .Q(INSERT_IDLE_reg_n_0),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT5 #(
    .INIT(32'hDDDCCCCC)) 
    R_i_1__0
       (.I0(S),
        .I1(T),
        .I2(TX_EVEN),
        .I3(TX_ER_REG1),
        .I4(R),
        .O(R_i_1__0_n_0));
  FDRE R_reg
       (.C(userclk),
        .CE(1'b1),
        .D(R_i_1__0_n_0),
        .Q(R),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'hAAEFAAAA00000000)) 
    S_i_1__0
       (.I0(TRIGGER_S),
        .I1(TX_ER_REG1),
        .I2(TX_EVEN),
        .I3(TX_EN_REG1),
        .I4(gmii_tx_en_ch0),
        .I5(XMIT_DATA_INT_reg_n_0),
        .O(S0));
  FDRE S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(S0),
        .Q(S),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT4 #(
    .INIT(16'h0040)) 
    TRIGGER_S_i_1
       (.I0(TX_EN_REG1),
        .I1(gmii_tx_en_ch0),
        .I2(TX_EVEN),
        .I3(TX_ER_REG1),
        .O(TRIGGER_S0));
  FDRE TRIGGER_S_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TRIGGER_S0),
        .Q(TRIGGER_S),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT2 #(
    .INIT(4'h2)) 
    TRIGGER_T_i_1
       (.I0(TX_EN_REG1),
        .I1(gmii_tx_en_ch0),
        .O(p_14_in));
  FDRE TRIGGER_T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(p_14_in),
        .Q(TRIGGER_T),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \TXD_REG1_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch0[0]),
        .Q(TXD_REG1[0]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch0[1]),
        .Q(TXD_REG1[1]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch0[2]),
        .Q(TXD_REG1[2]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch0[3]),
        .Q(TXD_REG1[3]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch0[4]),
        .Q(TXD_REG1[4]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch0[5]),
        .Q(TXD_REG1[5]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch0[6]),
        .Q(TXD_REG1[6]),
        .R(1'b0));
  FDRE \TXD_REG1_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_txd_ch0[7]),
        .Q(TXD_REG1[7]),
        .R(1'b0));
  FDRE \TX_CONFIG_reg[0] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_REG_INT_reg[14] [0]),
        .Q(TX_CONFIG[0]),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \TX_CONFIG_reg[11] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_REG_INT_reg[14] [1]),
        .Q(TX_CONFIG[11]),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \TX_CONFIG_reg[14] 
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(\TX_CONFIG_REG_INT_reg[14] [2]),
        .Q(TX_CONFIG[14]),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE TX_EN_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_tx_en_ch0),
        .Q(TX_EN_REG1),
        .R(1'b0));
  FDRE TX_ER_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(gmii_tx_er_ch0),
        .Q(TX_ER_REG1),
        .R(1'b0));
  FDRE TX_PACKET_REG1_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TX_PACKET),
        .Q(TX_PACKET_REG1),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT3 #(
    .INIT(8'hDC)) 
    TX_PACKET_i_1
       (.I0(T),
        .I1(S),
        .I2(TX_PACKET),
        .O(TX_PACKET_i_1_n_0));
  FDRE TX_PACKET_reg
       (.C(userclk),
        .CE(1'b1),
        .D(TX_PACKET_i_1_n_0),
        .Q(TX_PACKET),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT6 #(
    .INIT(64'h88888888FFF88888)) 
    T_i_1__0
       (.I0(V),
        .I1(TRIGGER_T),
        .I2(TX_PACKET),
        .I3(S),
        .I4(TX_EN_REG1),
        .I5(gmii_tx_en_ch0),
        .O(T0));
  FDRE T_reg
       (.C(userclk),
        .CE(1'b1),
        .D(T0),
        .Q(T),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT4 #(
    .INIT(16'h0444)) 
    \USE_QSGMII_DATA.TXCHARISK_i_1 
       (.I0(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I1(CODE_GRPISK),
        .I2(TX_EVEN),
        .I3(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXCHARISK_i_1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXCHARISK_reg 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXCHARISK_i_1_n_0 ),
        .Q(TXCHARISK_INT),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[0]_i_1 
       (.I0(CODE_GRP[0]),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[2]_i_1 
       (.I0(CODE_GRP[2]),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[2]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[5]_i_1 
       (.I0(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[5]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[6]_i_1 
       (.I0(CODE_GRP[6]),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[6]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \USE_QSGMII_DATA.TXDATA[7]_i_1 
       (.I0(CODE_GRP[7]),
        .I1(TX_EVEN),
        .I2(INSERT_IDLE_reg_n_0),
        .O(\USE_QSGMII_DATA.TXDATA[7]_i_1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[0] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[0]_i_1_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[1] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[1]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[2] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[2]_i_1_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[3] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[3]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[4] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[4]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[5] 
       (.C(userclk),
        .CE(1'b1),
        .D(CODE_GRP[5]),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .R(\USE_QSGMII_DATA.TXDATA[5]_i_1_n_0 ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[6] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[6]_i_1_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE \USE_QSGMII_DATA.TXDATA_reg[7] 
       (.C(userclk),
        .CE(1'b1),
        .D(\USE_QSGMII_DATA.TXDATA[7]_i_1_n_0 ),
        .Q(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_i_1 
       (.I0(TXCHARISK_INT),
        .I1(Q[0]),
        .I2(RXCHARISCOMMA_USR),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISCOMMA_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_i_1 
       (.I0(TXCHARISK_INT),
        .I1(Q[0]),
        .I2(RXCHARISK_USR),
        .O(\USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXCHARISK_INT_reg ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[0]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[0]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[1]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[1]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[2]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[2]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[3]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[3]),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[4]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[4]),
        .O(D[4]));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[5]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[5]),
        .O(D[5]));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[6]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[6]),
        .O(D[6]));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.NO_1588.RECLOCK_MGT_SIGNALS_TXOUTCLK.RXDATA_INT[7]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .I1(Q[0]),
        .I2(RXDATA_USR[7]),
        .O(D[7]));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \USE_ROCKET_IO.TXCHARISK_i_1 
       (.I0(TX_EVEN),
        .I1(Q[0]),
        .I2(TXCHARISK_INT),
        .O(\USE_ROCKET_IO.TXCHARISK_reg ));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[0]_i_1 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[0] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[6] [0]));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[1]_i_1 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[1] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[6] [1]));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[2]_i_1 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[2] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[2]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[3]_i_1 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[3] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT3 #(
    .INIT(8'h32)) 
    \USE_ROCKET_IO.TXDATA[4]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[4] ),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(Q[0]),
        .O(\USE_ROCKET_IO.TXDATA_reg[6] [2]));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[5]_i_1 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[5] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[5] ));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT4 #(
    .INIT(16'h003A)) 
    \USE_ROCKET_IO.TXDATA[6]_i_1 
       (.I0(\USE_QSGMII_DATA.TXDATA_reg_n_0_[6] ),
        .I1(TX_EVEN),
        .I2(Q[0]),
        .I3(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .O(\USE_ROCKET_IO.TXDATA_reg[6] [3]));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \USE_ROCKET_IO.TXDATA[7]_i_1 
       (.I0(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I1(Q[0]),
        .I2(TX_EVEN),
        .O(\USE_ROCKET_IO.TXDATA_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT3 #(
    .INIT(8'h10)) 
    \USE_ROCKET_IO.TXDATA[7]_i_2 
       (.I0(Q[0]),
        .I1(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ),
        .I2(\USE_QSGMII_DATA.TXDATA_reg_n_0_[7] ),
        .O(\USE_ROCKET_IO.TXDATA_reg[7] ));
  LUT4 #(
    .INIT(16'hFEFC)) 
    V_i_1
       (.I0(S),
        .I1(V_i_2_n_0),
        .I2(V_i_3_n_0),
        .I3(V),
        .O(V_i_1_n_0));
  LUT4 #(
    .INIT(16'h8000)) 
    V_i_2
       (.I0(gmii_tx_en_ch0),
        .I1(TX_PACKET),
        .I2(XMIT_DATA_INT_reg_n_0),
        .I3(gmii_tx_er_ch0),
        .O(V_i_2_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFF08080800)) 
    V_i_3
       (.I0(XMIT_DATA_INT_reg_n_0),
        .I1(gmii_tx_er_ch0),
        .I2(gmii_tx_en_ch0),
        .I3(V_i_4_n_0),
        .I4(V_i_5_n_0),
        .I5(V_i_6_n_0),
        .O(V_i_3_n_0));
  LUT4 #(
    .INIT(16'h7FFF)) 
    V_i_4
       (.I0(gmii_txd_ch0[1]),
        .I1(gmii_txd_ch0[0]),
        .I2(gmii_txd_ch0[3]),
        .I3(gmii_txd_ch0[2]),
        .O(V_i_4_n_0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    V_i_5
       (.I0(gmii_txd_ch0[5]),
        .I1(gmii_txd_ch0[4]),
        .I2(gmii_txd_ch0[7]),
        .I3(gmii_txd_ch0[6]),
        .O(V_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    V_i_6
       (.I0(TX_PACKET_REG1),
        .I1(TX_ER_REG1),
        .I2(TX_EN_REG1),
        .I3(XMIT_DATA_INT_reg_n_0),
        .O(V_i_6_n_0));
  FDRE V_reg
       (.C(userclk),
        .CE(1'b1),
        .D(V_i_1_n_0),
        .Q(V),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  LUT2 #(
    .INIT(4'h1)) 
    XMIT_CONFIG_INT_i_1__6
       (.I0(TX_EVEN),
        .I1(\CODE_GRP_CNT_reg_n_0_[1] ),
        .O(XMIT_DATA_INT));
  FDSE XMIT_CONFIG_INT_reg
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(XMIT_CONFIG_INT_reg_0),
        .Q(XMIT_CONFIG_INT),
        .S(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
  FDRE XMIT_DATA_INT_reg
       (.C(userclk),
        .CE(XMIT_DATA_INT),
        .D(XMIT_DATA),
        .Q(XMIT_DATA_INT_reg_n_0),
        .R(\USE_ROCKET_IO.MGT_TX_RESET_INT_reg ));
endmodule

(* ORIG_REF_NAME = "qsgmii_reset_sync" *) 
module qsgmii_1218_qsgmii_reset_sync
   (RESET_OUT,
    userclk,
    reset);
  output RESET_OUT;
  input userclk;
  input reset;

  wire RESET_OUT;
  wire RESET_SYNC_REG1;
  wire RESET_SYNC_REG2;
  wire RESET_SYNC_REG3;
  wire RESET_SYNC_REG4;
  wire RESET_SYNC_REG5;
  wire reset;
  wire userclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC1
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(reset),
        .Q(RESET_SYNC_REG1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC2
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG1),
        .PRE(reset),
        .Q(RESET_SYNC_REG2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC3
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG2),
        .PRE(reset),
        .Q(RESET_SYNC_REG3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC4
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG3),
        .PRE(reset),
        .Q(RESET_SYNC_REG4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC5
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG4),
        .PRE(reset),
        .Q(RESET_SYNC_REG5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    RESET_SYNC6
       (.C(userclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG5),
        .Q(RESET_OUT),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_reset_sync" *) 
module qsgmii_1218_qsgmii_reset_sync_75
   (RESET_OUT,
    rxrecclk,
    SR);
  output RESET_OUT;
  input rxrecclk;
  input [0:0]SR;

  wire RESET_OUT;
  wire RESET_SYNC_REG1;
  wire RESET_SYNC_REG2;
  wire RESET_SYNC_REG3;
  wire RESET_SYNC_REG4;
  wire RESET_SYNC_REG5;
  wire [0:0]SR;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(SR),
        .Q(RESET_SYNC_REG1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG1),
        .PRE(SR),
        .Q(RESET_SYNC_REG2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG2),
        .PRE(SR),
        .Q(RESET_SYNC_REG3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG3),
        .PRE(SR),
        .Q(RESET_SYNC_REG4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG4),
        .PRE(SR),
        .Q(RESET_SYNC_REG5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    RESET_SYNC6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG5),
        .Q(RESET_OUT),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_reset_sync" *) 
module qsgmii_1218_qsgmii_reset_sync_76
   (RESET_OUT,
    rxrecclk,
    SS);
  output RESET_OUT;
  input rxrecclk;
  input [0:0]SS;

  wire RESET_OUT;
  wire RESET_SYNC_REG1;
  wire RESET_SYNC_REG2;
  wire RESET_SYNC_REG3;
  wire RESET_SYNC_REG4;
  wire RESET_SYNC_REG5;
  wire [0:0]SS;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(SS),
        .Q(RESET_SYNC_REG1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG1),
        .PRE(SS),
        .Q(RESET_SYNC_REG2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG2),
        .PRE(SS),
        .Q(RESET_SYNC_REG3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG3),
        .PRE(SS),
        .Q(RESET_SYNC_REG4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG4),
        .PRE(SS),
        .Q(RESET_SYNC_REG5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    RESET_SYNC6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG5),
        .Q(RESET_OUT),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_reset_sync" *) 
module qsgmii_1218_qsgmii_reset_sync_77
   (RESET_OUT,
    rxrecclk,
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg );
  output RESET_OUT;
  input rxrecclk;
  input [0:0]\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;

  wire RESET_OUT;
  wire RESET_SYNC_REG1;
  wire RESET_SYNC_REG2;
  wire RESET_SYNC_REG3;
  wire RESET_SYNC_REG4;
  wire RESET_SYNC_REG5;
  wire [0:0]\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .Q(RESET_SYNC_REG1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG1),
        .PRE(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .Q(RESET_SYNC_REG2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG2),
        .PRE(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .Q(RESET_SYNC_REG3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG3),
        .PRE(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .Q(RESET_SYNC_REG4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG4),
        .PRE(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .Q(RESET_SYNC_REG5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    RESET_SYNC6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG5),
        .Q(RESET_OUT),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_reset_sync" *) 
module qsgmii_1218_qsgmii_reset_sync_78
   (RESET_OUT,
    rxrecclk,
    \USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg );
  output RESET_OUT;
  input rxrecclk;
  input [0:0]\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;

  wire RESET_OUT;
  wire RESET_SYNC_REG1;
  wire RESET_SYNC_REG2;
  wire RESET_SYNC_REG3;
  wire RESET_SYNC_REG4;
  wire RESET_SYNC_REG5;
  wire [0:0]\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .Q(RESET_SYNC_REG1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG1),
        .PRE(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .Q(RESET_SYNC_REG2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG2),
        .PRE(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .Q(RESET_SYNC_REG3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG3),
        .PRE(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .Q(RESET_SYNC_REG4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    RESET_SYNC5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG4),
        .PRE(\USE_ROCKET_IO.RX_RST_SM_TXOUTCLK.MGT_RX_RESET_INT_reg ),
        .Q(RESET_SYNC_REG5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b1)) 
    RESET_SYNC6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(RESET_SYNC_REG5),
        .Q(RESET_OUT),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block
   (data_out,
    Q,
    rxrecclk);
  output data_out;
  input [0:0]Q;
  input rxrecclk;

  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_100
   (GRAY_TO_BIN,
    CO,
    D,
    Q,
    data_out,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    data_sync_reg6_4,
    DI,
    S,
    \WR_ADDR_GRAY_reg[1] ,
    userclk);
  output [0:0]GRAY_TO_BIN;
  output [0:0]CO;
  output [3:0]D;
  input [1:0]Q;
  input data_out;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input data_sync_reg6_4;
  input [2:0]DI;
  input [1:0]S;
  input [0:0]\WR_ADDR_GRAY_reg[1] ;
  input userclk;

  wire [0:0]CO;
  wire [3:0]D;
  wire [2:0]DI;
  wire [0:0]GRAY_TO_BIN;
  wire [1:0]Q;
  wire \RD_OCCUPANCY[3]_i_8__1_n_0 ;
  wire \RD_OCCUPANCY[3]_i_9__1_n_0 ;
  wire \RD_OCCUPANCY_reg[3]_i_1__1_n_1 ;
  wire \RD_OCCUPANCY_reg[3]_i_1__1_n_2 ;
  wire \RD_OCCUPANCY_reg[3]_i_1__1_n_3 ;
  wire [1:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[1] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire data_sync_reg6_4;
  wire p_1_out;
  wire userclk;

  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \RD_OCCUPANCY[3]_i_4__1 
       (.I0(p_1_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .I4(data_sync_reg6_3),
        .I5(data_sync_reg6_4),
        .O(GRAY_TO_BIN));
  LUT2 #(
    .INIT(4'h9)) 
    \RD_OCCUPANCY[3]_i_8__1 
       (.I0(GRAY_TO_BIN),
        .I1(Q[1]),
        .O(\RD_OCCUPANCY[3]_i_8__1_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \RD_OCCUPANCY[3]_i_9__1 
       (.I0(GRAY_TO_BIN),
        .I1(data_out),
        .I2(Q[0]),
        .O(\RD_OCCUPANCY[3]_i_9__1_n_0 ));
  CARRY4 \RD_OCCUPANCY_reg[3]_i_1__1 
       (.CI(1'b0),
        .CO({CO,\RD_OCCUPANCY_reg[3]_i_1__1_n_1 ,\RD_OCCUPANCY_reg[3]_i_1__1_n_2 ,\RD_OCCUPANCY_reg[3]_i_1__1_n_3 }),
        .CYINIT(1'b1),
        .DI({DI[2:1],GRAY_TO_BIN,DI[0]}),
        .O(D),
        .S({S,\RD_OCCUPANCY[3]_i_8__1_n_0 ,\RD_OCCUPANCY[3]_i_9__1_n_0 }));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[1] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(p_1_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_101
   (DI,
    data_out,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    Q,
    userclk);
  output [0:0]DI;
  output data_out;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input [0:0]Q;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire userclk;

  LUT5 #(
    .INIT(32'h96696996)) 
    \RD_OCCUPANCY[3]_i_3__1 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .I4(data_sync_reg6_3),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_102
   (S,
    data_out,
    DI,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    Q,
    \WR_ADDR_GRAY_reg[3] ,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input [0:0]Q;
  input [0:0]\WR_ADDR_GRAY_reg[3] ;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire [0:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[3] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire userclk;

  LUT4 #(
    .INIT(16'h6996)) 
    \RD_OCCUPANCY[3]_i_2__1 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .O(DI));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \RD_OCCUPANCY[3]_i_7__1 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .I4(data_sync_reg6_3),
        .I5(Q),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[3] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_103
   (S,
    data_out,
    DI,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    Q,
    \WR_ADDR_GRAY_reg[4] ,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input [0:0]Q;
  input [0:0]\WR_ADDR_GRAY_reg[4] ;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire [0:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[4] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire userclk;

  LUT5 #(
    .INIT(32'h69969669)) 
    \RD_OCCUPANCY[3]_i_6__1 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .I4(Q),
        .O(S));
  LUT3 #(
    .INIT(8'h96)) 
    \RD_OCCUPANCY[6]_i_3__1 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[4] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_104
   (data_out,
    D,
    data_sync_reg6_0,
    data_sync_reg6_1,
    Q,
    DI,
    CO,
    S,
    \WR_ADDR_GRAY_reg[5] ,
    userclk);
  output data_out;
  output [2:0]D;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input [0:0]Q;
  input [0:0]DI;
  input [0:0]CO;
  input [1:0]S;
  input [0:0]\WR_ADDR_GRAY_reg[5] ;
  input userclk;

  wire [0:0]CO;
  wire [2:0]D;
  wire [0:0]DI;
  wire [5:5]GRAY_TO_BIN;
  wire [0:0]Q;
  wire \RD_OCCUPANCY[6]_i_6__1_n_0 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__1_n_2 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__1_n_3 ;
  wire [1:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[5] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire userclk;
  wire [3:2]\NLW_RD_OCCUPANCY_reg[6]_i_1__1_CO_UNCONNECTED ;
  wire [3:3]\NLW_RD_OCCUPANCY_reg[6]_i_1__1_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h6)) 
    \RD_OCCUPANCY[6]_i_2__1 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .O(GRAY_TO_BIN));
  LUT4 #(
    .INIT(16'h9669)) 
    \RD_OCCUPANCY[6]_i_6__1 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(Q),
        .O(\RD_OCCUPANCY[6]_i_6__1_n_0 ));
  CARRY4 \RD_OCCUPANCY_reg[6]_i_1__1 
       (.CI(CO),
        .CO({\NLW_RD_OCCUPANCY_reg[6]_i_1__1_CO_UNCONNECTED [3:2],\RD_OCCUPANCY_reg[6]_i_1__1_n_2 ,\RD_OCCUPANCY_reg[6]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,GRAY_TO_BIN,DI}),
        .O({\NLW_RD_OCCUPANCY_reg[6]_i_1__1_O_UNCONNECTED [3],D}),
        .S({1'b0,S,\RD_OCCUPANCY[6]_i_6__1_n_0 }));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[5] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_105
   (S,
    data_out,
    data_sync_reg6_0,
    Q,
    \WR_ADDR_GRAY_reg[6] ,
    userclk);
  output [1:0]S;
  output data_out;
  input data_sync_reg6_0;
  input [1:0]Q;
  input [0:0]\WR_ADDR_GRAY_reg[6] ;
  input userclk;

  wire [1:0]Q;
  wire [1:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[6] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire userclk;

  LUT2 #(
    .INIT(4'h9)) 
    \RD_OCCUPANCY[6]_i_4__1 
       (.I0(data_out),
        .I1(Q[1]),
        .O(S[1]));
  LUT3 #(
    .INIT(8'h69)) 
    \RD_OCCUPANCY[6]_i_5__1 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(Q[0]),
        .O(S[0]));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[6] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_106
   (data_out,
    Q,
    rxrecclk);
  output data_out;
  input [0:0]Q;
  input rxrecclk;

  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_107
   (CO,
    D,
    Q,
    data_out,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    S,
    data_sync_reg6_4,
    \RD_ADDR_GRAY_reg[1] ,
    rxrecclk);
  output [0:0]CO;
  output [2:0]D;
  input [3:0]Q;
  input data_out;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input [1:0]S;
  input data_sync_reg6_4;
  input [0:0]\RD_ADDR_GRAY_reg[1] ;
  input rxrecclk;

  wire [0:0]CO;
  wire [2:0]D;
  wire [3:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[1] ;
  wire [1:0]S;
  wire \WR_OCCUPANCY[3]_i_4__0_n_0 ;
  wire \WR_OCCUPANCY[3]_i_5__0_n_0 ;
  wire \WR_OCCUPANCY_reg[3]_i_1__0_n_1 ;
  wire \WR_OCCUPANCY_reg[3]_i_1__0_n_2 ;
  wire \WR_OCCUPANCY_reg[3]_i_1__0_n_3 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire data_sync_reg6_4;
  wire p_31_in;
  wire p_4_in27_in;
  wire rxrecclk;
  wire [0:0]\NLW_WR_OCCUPANCY_reg[3]_i_1__0_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h9)) 
    \WR_OCCUPANCY[3]_i_4__0 
       (.I0(Q[1]),
        .I1(p_31_in),
        .O(\WR_OCCUPANCY[3]_i_4__0_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \WR_OCCUPANCY[3]_i_5__0 
       (.I0(Q[0]),
        .I1(p_31_in),
        .I2(data_sync_reg6_4),
        .O(\WR_OCCUPANCY[3]_i_5__0_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \WR_OCCUPANCY[3]_i_6__0 
       (.I0(p_4_in27_in),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .I3(data_sync_reg6_1),
        .I4(data_sync_reg6_2),
        .I5(data_sync_reg6_3),
        .O(p_31_in));
  CARRY4 \WR_OCCUPANCY_reg[3]_i_1__0 
       (.CI(1'b0),
        .CO({CO,\WR_OCCUPANCY_reg[3]_i_1__0_n_1 ,\WR_OCCUPANCY_reg[3]_i_1__0_n_2 ,\WR_OCCUPANCY_reg[3]_i_1__0_n_3 }),
        .CYINIT(1'b1),
        .DI(Q),
        .O({D,\NLW_WR_OCCUPANCY_reg[3]_i_1__0_O_UNCONNECTED [0]}),
        .S({S,\WR_OCCUPANCY[3]_i_4__0_n_0 ,\WR_OCCUPANCY[3]_i_5__0_n_0 }));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[1] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(p_4_in27_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_108
   (data_out,
    Q,
    rxrecclk);
  output data_out;
  input [0:0]Q;
  input rxrecclk;

  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_109
   (S,
    data_out,
    Q,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    \RD_ADDR_GRAY_reg[3] ,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input [0:0]\RD_ADDR_GRAY_reg[3] ;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[3] ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire rxrecclk;

  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \WR_OCCUPANCY[3]_i_3__0 
       (.I0(Q),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .I3(data_sync_reg6_1),
        .I4(data_sync_reg6_2),
        .I5(data_sync_reg6_3),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[3] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_110
   (S,
    data_out,
    Q,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    \RD_ADDR_GRAY_reg[4] ,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input [0:0]\RD_ADDR_GRAY_reg[4] ;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[4] ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire rxrecclk;

  LUT5 #(
    .INIT(32'h69969669)) 
    \WR_OCCUPANCY[3]_i_2__0 
       (.I0(Q),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .I3(data_sync_reg6_1),
        .I4(data_sync_reg6_2),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[4] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_111
   (S,
    data_out,
    Q,
    data_sync_reg6_0,
    data_sync_reg6_1,
    \RD_ADDR_GRAY_reg[5] ,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input [0:0]\RD_ADDR_GRAY_reg[5] ;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[5] ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire rxrecclk;

  LUT4 #(
    .INIT(16'h9669)) 
    \WR_OCCUPANCY[6]_i_4__0 
       (.I0(Q),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .I3(data_sync_reg6_1),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[5] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_112
   (data_out,
    D,
    Q,
    data_sync_reg6_0,
    CO,
    S,
    \RD_ADDR_GRAY_reg[6] ,
    rxrecclk);
  output data_out;
  output [2:0]D;
  input [2:0]Q;
  input data_sync_reg6_0;
  input [0:0]CO;
  input [0:0]S;
  input [0:0]\RD_ADDR_GRAY_reg[6] ;
  input rxrecclk;

  wire [0:0]CO;
  wire [2:0]D;
  wire [2:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[6] ;
  wire [0:0]S;
  wire \WR_OCCUPANCY[6]_i_2__0_n_0 ;
  wire \WR_OCCUPANCY[6]_i_3__0_n_0 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__0_n_2 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__0_n_3 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire rxrecclk;
  wire [3:2]\NLW_WR_OCCUPANCY_reg[6]_i_1__0_CO_UNCONNECTED ;
  wire [3:3]\NLW_WR_OCCUPANCY_reg[6]_i_1__0_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h9)) 
    \WR_OCCUPANCY[6]_i_2__0 
       (.I0(Q[2]),
        .I1(data_out),
        .O(\WR_OCCUPANCY[6]_i_2__0_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \WR_OCCUPANCY[6]_i_3__0 
       (.I0(Q[1]),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .O(\WR_OCCUPANCY[6]_i_3__0_n_0 ));
  CARRY4 \WR_OCCUPANCY_reg[6]_i_1__0 
       (.CI(CO),
        .CO({\NLW_WR_OCCUPANCY_reg[6]_i_1__0_CO_UNCONNECTED [3:2],\WR_OCCUPANCY_reg[6]_i_1__0_n_2 ,\WR_OCCUPANCY_reg[6]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,Q[1:0]}),
        .O({\NLW_WR_OCCUPANCY_reg[6]_i_1__0_O_UNCONNECTED [3],D}),
        .S({1'b0,\WR_OCCUPANCY[6]_i_2__0_n_0 ,\WR_OCCUPANCY[6]_i_3__0_n_0 ,S}));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[6] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_113
   (DI,
    data_out,
    GRAY_TO_BIN,
    Q,
    userclk);
  output [0:0]DI;
  output data_out;
  input [0:0]GRAY_TO_BIN;
  input [0:0]Q;
  input userclk;

  wire [0:0]DI;
  wire [0:0]GRAY_TO_BIN;
  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire userclk;

  LUT2 #(
    .INIT(4'h6)) 
    \RD_OCCUPANCY[3]_i_5__0 
       (.I0(data_out),
        .I1(GRAY_TO_BIN),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_114
   (GRAY_TO_BIN,
    CO,
    D,
    Q,
    data_out,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    data_sync_reg6_4,
    DI,
    S,
    \WR_ADDR_GRAY_reg[1] ,
    userclk);
  output [0:0]GRAY_TO_BIN;
  output [0:0]CO;
  output [3:0]D;
  input [1:0]Q;
  input data_out;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input data_sync_reg6_4;
  input [2:0]DI;
  input [1:0]S;
  input [0:0]\WR_ADDR_GRAY_reg[1] ;
  input userclk;

  wire [0:0]CO;
  wire [3:0]D;
  wire [2:0]DI;
  wire [0:0]GRAY_TO_BIN;
  wire [1:0]Q;
  wire \RD_OCCUPANCY[3]_i_8__0_n_0 ;
  wire \RD_OCCUPANCY[3]_i_9__0_n_0 ;
  wire \RD_OCCUPANCY_reg[3]_i_1__0_n_1 ;
  wire \RD_OCCUPANCY_reg[3]_i_1__0_n_2 ;
  wire \RD_OCCUPANCY_reg[3]_i_1__0_n_3 ;
  wire [1:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[1] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire data_sync_reg6_4;
  wire p_1_out;
  wire userclk;

  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \RD_OCCUPANCY[3]_i_4__0 
       (.I0(p_1_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .I4(data_sync_reg6_3),
        .I5(data_sync_reg6_4),
        .O(GRAY_TO_BIN));
  LUT2 #(
    .INIT(4'h9)) 
    \RD_OCCUPANCY[3]_i_8__0 
       (.I0(GRAY_TO_BIN),
        .I1(Q[1]),
        .O(\RD_OCCUPANCY[3]_i_8__0_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \RD_OCCUPANCY[3]_i_9__0 
       (.I0(GRAY_TO_BIN),
        .I1(data_out),
        .I2(Q[0]),
        .O(\RD_OCCUPANCY[3]_i_9__0_n_0 ));
  CARRY4 \RD_OCCUPANCY_reg[3]_i_1__0 
       (.CI(1'b0),
        .CO({CO,\RD_OCCUPANCY_reg[3]_i_1__0_n_1 ,\RD_OCCUPANCY_reg[3]_i_1__0_n_2 ,\RD_OCCUPANCY_reg[3]_i_1__0_n_3 }),
        .CYINIT(1'b1),
        .DI({DI[2:1],GRAY_TO_BIN,DI[0]}),
        .O(D),
        .S({S,\RD_OCCUPANCY[3]_i_8__0_n_0 ,\RD_OCCUPANCY[3]_i_9__0_n_0 }));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[1] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(p_1_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_115
   (DI,
    data_out,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    Q,
    userclk);
  output [0:0]DI;
  output data_out;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input [0:0]Q;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire userclk;

  LUT5 #(
    .INIT(32'h96696996)) 
    \RD_OCCUPANCY[3]_i_3__0 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .I4(data_sync_reg6_3),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_116
   (S,
    data_out,
    DI,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    Q,
    \WR_ADDR_GRAY_reg[3] ,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input [0:0]Q;
  input [0:0]\WR_ADDR_GRAY_reg[3] ;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire [0:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[3] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire userclk;

  LUT4 #(
    .INIT(16'h6996)) 
    \RD_OCCUPANCY[3]_i_2__0 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .O(DI));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \RD_OCCUPANCY[3]_i_7__0 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .I4(data_sync_reg6_3),
        .I5(Q),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[3] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_117
   (S,
    data_out,
    DI,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    Q,
    \WR_ADDR_GRAY_reg[4] ,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input [0:0]Q;
  input [0:0]\WR_ADDR_GRAY_reg[4] ;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire [0:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[4] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire userclk;

  LUT5 #(
    .INIT(32'h69969669)) 
    \RD_OCCUPANCY[3]_i_6__0 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .I4(Q),
        .O(S));
  LUT3 #(
    .INIT(8'h96)) 
    \RD_OCCUPANCY[6]_i_3__0 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[4] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_118
   (data_out,
    D,
    data_sync_reg6_0,
    data_sync_reg6_1,
    Q,
    DI,
    CO,
    S,
    \WR_ADDR_GRAY_reg[5] ,
    userclk);
  output data_out;
  output [2:0]D;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input [0:0]Q;
  input [0:0]DI;
  input [0:0]CO;
  input [1:0]S;
  input [0:0]\WR_ADDR_GRAY_reg[5] ;
  input userclk;

  wire [0:0]CO;
  wire [2:0]D;
  wire [0:0]DI;
  wire [5:5]GRAY_TO_BIN;
  wire [0:0]Q;
  wire \RD_OCCUPANCY[6]_i_6__0_n_0 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__0_n_2 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__0_n_3 ;
  wire [1:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[5] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire userclk;
  wire [3:2]\NLW_RD_OCCUPANCY_reg[6]_i_1__0_CO_UNCONNECTED ;
  wire [3:3]\NLW_RD_OCCUPANCY_reg[6]_i_1__0_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h6)) 
    \RD_OCCUPANCY[6]_i_2__0 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .O(GRAY_TO_BIN));
  LUT4 #(
    .INIT(16'h9669)) 
    \RD_OCCUPANCY[6]_i_6__0 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(Q),
        .O(\RD_OCCUPANCY[6]_i_6__0_n_0 ));
  CARRY4 \RD_OCCUPANCY_reg[6]_i_1__0 
       (.CI(CO),
        .CO({\NLW_RD_OCCUPANCY_reg[6]_i_1__0_CO_UNCONNECTED [3:2],\RD_OCCUPANCY_reg[6]_i_1__0_n_2 ,\RD_OCCUPANCY_reg[6]_i_1__0_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,GRAY_TO_BIN,DI}),
        .O({\NLW_RD_OCCUPANCY_reg[6]_i_1__0_O_UNCONNECTED [3],D}),
        .S({1'b0,S,\RD_OCCUPANCY[6]_i_6__0_n_0 }));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[5] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_119
   (S,
    data_out,
    data_sync_reg6_0,
    Q,
    \WR_ADDR_GRAY_reg[6] ,
    userclk);
  output [1:0]S;
  output data_out;
  input data_sync_reg6_0;
  input [1:0]Q;
  input [0:0]\WR_ADDR_GRAY_reg[6] ;
  input userclk;

  wire [1:0]Q;
  wire [1:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[6] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire userclk;

  LUT2 #(
    .INIT(4'h9)) 
    \RD_OCCUPANCY[6]_i_4__0 
       (.I0(data_out),
        .I1(Q[1]),
        .O(S[1]));
  LUT3 #(
    .INIT(8'h69)) 
    \RD_OCCUPANCY[6]_i_5__0 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(Q[0]),
        .O(S[0]));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[6] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_120
   (data_out,
    Q,
    rxrecclk);
  output data_out;
  input [0:0]Q;
  input rxrecclk;

  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_121
   (CO,
    D,
    Q,
    data_out,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    S,
    data_sync_reg6_4,
    \RD_ADDR_GRAY_reg[1] ,
    rxrecclk);
  output [0:0]CO;
  output [2:0]D;
  input [3:0]Q;
  input data_out;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input [1:0]S;
  input data_sync_reg6_4;
  input [0:0]\RD_ADDR_GRAY_reg[1] ;
  input rxrecclk;

  wire [0:0]CO;
  wire [2:0]D;
  wire [3:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[1] ;
  wire [1:0]S;
  wire \WR_OCCUPANCY[3]_i_4_n_0 ;
  wire \WR_OCCUPANCY[3]_i_5_n_0 ;
  wire \WR_OCCUPANCY_reg[3]_i_1_n_1 ;
  wire \WR_OCCUPANCY_reg[3]_i_1_n_2 ;
  wire \WR_OCCUPANCY_reg[3]_i_1_n_3 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire data_sync_reg6_4;
  wire p_31_in;
  wire p_4_in27_in;
  wire rxrecclk;
  wire [0:0]\NLW_WR_OCCUPANCY_reg[3]_i_1_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h9)) 
    \WR_OCCUPANCY[3]_i_4 
       (.I0(Q[1]),
        .I1(p_31_in),
        .O(\WR_OCCUPANCY[3]_i_4_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \WR_OCCUPANCY[3]_i_5 
       (.I0(Q[0]),
        .I1(p_31_in),
        .I2(data_sync_reg6_4),
        .O(\WR_OCCUPANCY[3]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \WR_OCCUPANCY[3]_i_6 
       (.I0(p_4_in27_in),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .I3(data_sync_reg6_1),
        .I4(data_sync_reg6_2),
        .I5(data_sync_reg6_3),
        .O(p_31_in));
  CARRY4 \WR_OCCUPANCY_reg[3]_i_1 
       (.CI(1'b0),
        .CO({CO,\WR_OCCUPANCY_reg[3]_i_1_n_1 ,\WR_OCCUPANCY_reg[3]_i_1_n_2 ,\WR_OCCUPANCY_reg[3]_i_1_n_3 }),
        .CYINIT(1'b1),
        .DI(Q),
        .O({D,\NLW_WR_OCCUPANCY_reg[3]_i_1_O_UNCONNECTED [0]}),
        .S({S,\WR_OCCUPANCY[3]_i_4_n_0 ,\WR_OCCUPANCY[3]_i_5_n_0 }));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[1] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(p_4_in27_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_122
   (data_out,
    Q,
    rxrecclk);
  output data_out;
  input [0:0]Q;
  input rxrecclk;

  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_123
   (S,
    data_out,
    Q,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    \RD_ADDR_GRAY_reg[3] ,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input [0:0]\RD_ADDR_GRAY_reg[3] ;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[3] ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire rxrecclk;

  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \WR_OCCUPANCY[3]_i_3 
       (.I0(Q),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .I3(data_sync_reg6_1),
        .I4(data_sync_reg6_2),
        .I5(data_sync_reg6_3),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[3] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_124
   (S,
    data_out,
    Q,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    \RD_ADDR_GRAY_reg[4] ,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input [0:0]\RD_ADDR_GRAY_reg[4] ;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[4] ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire rxrecclk;

  LUT5 #(
    .INIT(32'h69969669)) 
    \WR_OCCUPANCY[3]_i_2 
       (.I0(Q),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .I3(data_sync_reg6_1),
        .I4(data_sync_reg6_2),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[4] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_125
   (S,
    data_out,
    Q,
    data_sync_reg6_0,
    data_sync_reg6_1,
    \RD_ADDR_GRAY_reg[5] ,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input [0:0]\RD_ADDR_GRAY_reg[5] ;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[5] ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire rxrecclk;

  LUT4 #(
    .INIT(16'h9669)) 
    \WR_OCCUPANCY[6]_i_4 
       (.I0(Q),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .I3(data_sync_reg6_1),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[5] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_126
   (data_out,
    D,
    Q,
    data_sync_reg6_0,
    CO,
    S,
    \RD_ADDR_GRAY_reg[6] ,
    rxrecclk);
  output data_out;
  output [2:0]D;
  input [2:0]Q;
  input data_sync_reg6_0;
  input [0:0]CO;
  input [0:0]S;
  input [0:0]\RD_ADDR_GRAY_reg[6] ;
  input rxrecclk;

  wire [0:0]CO;
  wire [2:0]D;
  wire [2:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[6] ;
  wire [0:0]S;
  wire \WR_OCCUPANCY[6]_i_2_n_0 ;
  wire \WR_OCCUPANCY[6]_i_3_n_0 ;
  wire \WR_OCCUPANCY_reg[6]_i_1_n_2 ;
  wire \WR_OCCUPANCY_reg[6]_i_1_n_3 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire rxrecclk;
  wire [3:2]\NLW_WR_OCCUPANCY_reg[6]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_WR_OCCUPANCY_reg[6]_i_1_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h9)) 
    \WR_OCCUPANCY[6]_i_2 
       (.I0(Q[2]),
        .I1(data_out),
        .O(\WR_OCCUPANCY[6]_i_2_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \WR_OCCUPANCY[6]_i_3 
       (.I0(Q[1]),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .O(\WR_OCCUPANCY[6]_i_3_n_0 ));
  CARRY4 \WR_OCCUPANCY_reg[6]_i_1 
       (.CI(CO),
        .CO({\NLW_WR_OCCUPANCY_reg[6]_i_1_CO_UNCONNECTED [3:2],\WR_OCCUPANCY_reg[6]_i_1_n_2 ,\WR_OCCUPANCY_reg[6]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,Q[1:0]}),
        .O({\NLW_WR_OCCUPANCY_reg[6]_i_1_O_UNCONNECTED [3],D}),
        .S({1'b0,\WR_OCCUPANCY[6]_i_2_n_0 ,\WR_OCCUPANCY[6]_i_3_n_0 ,S}));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[6] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_127
   (DI,
    data_out,
    GRAY_TO_BIN,
    Q,
    userclk);
  output [0:0]DI;
  output data_out;
  input [0:0]GRAY_TO_BIN;
  input [0:0]Q;
  input userclk;

  wire [0:0]DI;
  wire [0:0]GRAY_TO_BIN;
  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire userclk;

  LUT2 #(
    .INIT(4'h6)) 
    \RD_OCCUPANCY[3]_i_5 
       (.I0(data_out),
        .I1(GRAY_TO_BIN),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_128
   (GRAY_TO_BIN,
    CO,
    D,
    Q,
    data_out,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    data_sync_reg6_4,
    DI,
    S,
    \WR_ADDR_GRAY_reg[1] ,
    userclk);
  output [0:0]GRAY_TO_BIN;
  output [0:0]CO;
  output [3:0]D;
  input [1:0]Q;
  input data_out;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input data_sync_reg6_4;
  input [2:0]DI;
  input [1:0]S;
  input [0:0]\WR_ADDR_GRAY_reg[1] ;
  input userclk;

  wire [0:0]CO;
  wire [3:0]D;
  wire [2:0]DI;
  wire [0:0]GRAY_TO_BIN;
  wire [1:0]Q;
  wire \RD_OCCUPANCY[3]_i_8_n_0 ;
  wire \RD_OCCUPANCY[3]_i_9_n_0 ;
  wire \RD_OCCUPANCY_reg[3]_i_1_n_1 ;
  wire \RD_OCCUPANCY_reg[3]_i_1_n_2 ;
  wire \RD_OCCUPANCY_reg[3]_i_1_n_3 ;
  wire [1:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[1] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire data_sync_reg6_4;
  wire p_1_out;
  wire userclk;

  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \RD_OCCUPANCY[3]_i_4 
       (.I0(p_1_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .I4(data_sync_reg6_3),
        .I5(data_sync_reg6_4),
        .O(GRAY_TO_BIN));
  LUT2 #(
    .INIT(4'h9)) 
    \RD_OCCUPANCY[3]_i_8 
       (.I0(GRAY_TO_BIN),
        .I1(Q[1]),
        .O(\RD_OCCUPANCY[3]_i_8_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \RD_OCCUPANCY[3]_i_9 
       (.I0(GRAY_TO_BIN),
        .I1(data_out),
        .I2(Q[0]),
        .O(\RD_OCCUPANCY[3]_i_9_n_0 ));
  CARRY4 \RD_OCCUPANCY_reg[3]_i_1 
       (.CI(1'b0),
        .CO({CO,\RD_OCCUPANCY_reg[3]_i_1_n_1 ,\RD_OCCUPANCY_reg[3]_i_1_n_2 ,\RD_OCCUPANCY_reg[3]_i_1_n_3 }),
        .CYINIT(1'b1),
        .DI({DI[2:1],GRAY_TO_BIN,DI[0]}),
        .O(D),
        .S({S,\RD_OCCUPANCY[3]_i_8_n_0 ,\RD_OCCUPANCY[3]_i_9_n_0 }));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[1] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(p_1_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_129
   (DI,
    data_out,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    Q,
    userclk);
  output [0:0]DI;
  output data_out;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input [0:0]Q;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire userclk;

  LUT5 #(
    .INIT(32'h96696996)) 
    \RD_OCCUPANCY[3]_i_3 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .I4(data_sync_reg6_3),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_130
   (S,
    data_out,
    DI,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    Q,
    \WR_ADDR_GRAY_reg[3] ,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input [0:0]Q;
  input [0:0]\WR_ADDR_GRAY_reg[3] ;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire [0:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[3] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire userclk;

  LUT4 #(
    .INIT(16'h6996)) 
    \RD_OCCUPANCY[3]_i_2 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .O(DI));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \RD_OCCUPANCY[3]_i_7 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .I4(data_sync_reg6_3),
        .I5(Q),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[3] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_131
   (S,
    data_out,
    DI,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    Q,
    \WR_ADDR_GRAY_reg[4] ,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input [0:0]Q;
  input [0:0]\WR_ADDR_GRAY_reg[4] ;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire [0:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[4] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire userclk;

  LUT5 #(
    .INIT(32'h69969669)) 
    \RD_OCCUPANCY[3]_i_6 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .I4(Q),
        .O(S));
  LUT3 #(
    .INIT(8'h96)) 
    \RD_OCCUPANCY[6]_i_3 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[4] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_132
   (data_out,
    D,
    data_sync_reg6_0,
    data_sync_reg6_1,
    Q,
    DI,
    CO,
    S,
    \WR_ADDR_GRAY_reg[5] ,
    userclk);
  output data_out;
  output [2:0]D;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input [0:0]Q;
  input [0:0]DI;
  input [0:0]CO;
  input [1:0]S;
  input [0:0]\WR_ADDR_GRAY_reg[5] ;
  input userclk;

  wire [0:0]CO;
  wire [2:0]D;
  wire [0:0]DI;
  wire [5:5]GRAY_TO_BIN;
  wire [0:0]Q;
  wire \RD_OCCUPANCY[6]_i_6_n_0 ;
  wire \RD_OCCUPANCY_reg[6]_i_1_n_2 ;
  wire \RD_OCCUPANCY_reg[6]_i_1_n_3 ;
  wire [1:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[5] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire userclk;
  wire [3:2]\NLW_RD_OCCUPANCY_reg[6]_i_1_CO_UNCONNECTED ;
  wire [3:3]\NLW_RD_OCCUPANCY_reg[6]_i_1_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h6)) 
    \RD_OCCUPANCY[6]_i_2 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .O(GRAY_TO_BIN));
  LUT4 #(
    .INIT(16'h9669)) 
    \RD_OCCUPANCY[6]_i_6 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(Q),
        .O(\RD_OCCUPANCY[6]_i_6_n_0 ));
  CARRY4 \RD_OCCUPANCY_reg[6]_i_1 
       (.CI(CO),
        .CO({\NLW_RD_OCCUPANCY_reg[6]_i_1_CO_UNCONNECTED [3:2],\RD_OCCUPANCY_reg[6]_i_1_n_2 ,\RD_OCCUPANCY_reg[6]_i_1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,GRAY_TO_BIN,DI}),
        .O({\NLW_RD_OCCUPANCY_reg[6]_i_1_O_UNCONNECTED [3],D}),
        .S({1'b0,S,\RD_OCCUPANCY[6]_i_6_n_0 }));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[5] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_133
   (S,
    data_out,
    data_sync_reg6_0,
    Q,
    \WR_ADDR_GRAY_reg[6] ,
    userclk);
  output [1:0]S;
  output data_out;
  input data_sync_reg6_0;
  input [1:0]Q;
  input [0:0]\WR_ADDR_GRAY_reg[6] ;
  input userclk;

  wire [1:0]Q;
  wire [1:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[6] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire userclk;

  LUT2 #(
    .INIT(4'h9)) 
    \RD_OCCUPANCY[6]_i_4 
       (.I0(data_out),
        .I1(Q[1]),
        .O(S[1]));
  LUT3 #(
    .INIT(8'h69)) 
    \RD_OCCUPANCY[6]_i_5 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(Q[0]),
        .O(S[0]));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[6] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_79
   (CO,
    D,
    Q,
    data_out,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    S,
    data_sync_reg6_4,
    \RD_ADDR_GRAY_reg[1] ,
    rxrecclk);
  output [0:0]CO;
  output [2:0]D;
  input [3:0]Q;
  input data_out;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input [1:0]S;
  input data_sync_reg6_4;
  input [0:0]\RD_ADDR_GRAY_reg[1] ;
  input rxrecclk;

  wire [0:0]CO;
  wire [2:0]D;
  wire [3:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[1] ;
  wire [1:0]S;
  wire \WR_OCCUPANCY[3]_i_4__2_n_0 ;
  wire \WR_OCCUPANCY[3]_i_5__2_n_0 ;
  wire \WR_OCCUPANCY_reg[3]_i_1__2_n_1 ;
  wire \WR_OCCUPANCY_reg[3]_i_1__2_n_2 ;
  wire \WR_OCCUPANCY_reg[3]_i_1__2_n_3 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire data_sync_reg6_4;
  wire p_31_in;
  wire p_4_in27_in;
  wire rxrecclk;
  wire [0:0]\NLW_WR_OCCUPANCY_reg[3]_i_1__2_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h9)) 
    \WR_OCCUPANCY[3]_i_4__2 
       (.I0(Q[1]),
        .I1(p_31_in),
        .O(\WR_OCCUPANCY[3]_i_4__2_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \WR_OCCUPANCY[3]_i_5__2 
       (.I0(Q[0]),
        .I1(p_31_in),
        .I2(data_sync_reg6_4),
        .O(\WR_OCCUPANCY[3]_i_5__2_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \WR_OCCUPANCY[3]_i_6__2 
       (.I0(p_4_in27_in),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .I3(data_sync_reg6_1),
        .I4(data_sync_reg6_2),
        .I5(data_sync_reg6_3),
        .O(p_31_in));
  CARRY4 \WR_OCCUPANCY_reg[3]_i_1__2 
       (.CI(1'b0),
        .CO({CO,\WR_OCCUPANCY_reg[3]_i_1__2_n_1 ,\WR_OCCUPANCY_reg[3]_i_1__2_n_2 ,\WR_OCCUPANCY_reg[3]_i_1__2_n_3 }),
        .CYINIT(1'b1),
        .DI(Q),
        .O({D,\NLW_WR_OCCUPANCY_reg[3]_i_1__2_O_UNCONNECTED [0]}),
        .S({S,\WR_OCCUPANCY[3]_i_4__2_n_0 ,\WR_OCCUPANCY[3]_i_5__2_n_0 }));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[1] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(p_4_in27_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_80
   (data_out,
    Q,
    rxrecclk);
  output data_out;
  input [0:0]Q;
  input rxrecclk;

  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_81
   (S,
    data_out,
    Q,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    \RD_ADDR_GRAY_reg[3] ,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input [0:0]\RD_ADDR_GRAY_reg[3] ;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[3] ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire rxrecclk;

  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \WR_OCCUPANCY[3]_i_3__2 
       (.I0(Q),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .I3(data_sync_reg6_1),
        .I4(data_sync_reg6_2),
        .I5(data_sync_reg6_3),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[3] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_82
   (S,
    data_out,
    Q,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    \RD_ADDR_GRAY_reg[4] ,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input [0:0]\RD_ADDR_GRAY_reg[4] ;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[4] ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire rxrecclk;

  LUT5 #(
    .INIT(32'h69969669)) 
    \WR_OCCUPANCY[3]_i_2__2 
       (.I0(Q),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .I3(data_sync_reg6_1),
        .I4(data_sync_reg6_2),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[4] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_83
   (S,
    data_out,
    Q,
    data_sync_reg6_0,
    data_sync_reg6_1,
    \RD_ADDR_GRAY_reg[5] ,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input [0:0]\RD_ADDR_GRAY_reg[5] ;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[5] ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire rxrecclk;

  LUT4 #(
    .INIT(16'h9669)) 
    \WR_OCCUPANCY[6]_i_4__2 
       (.I0(Q),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .I3(data_sync_reg6_1),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[5] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_84
   (data_out,
    D,
    Q,
    data_sync_reg6_0,
    CO,
    S,
    \RD_ADDR_GRAY_reg[6] ,
    rxrecclk);
  output data_out;
  output [2:0]D;
  input [2:0]Q;
  input data_sync_reg6_0;
  input [0:0]CO;
  input [0:0]S;
  input [0:0]\RD_ADDR_GRAY_reg[6] ;
  input rxrecclk;

  wire [0:0]CO;
  wire [2:0]D;
  wire [2:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[6] ;
  wire [0:0]S;
  wire \WR_OCCUPANCY[6]_i_2__2_n_0 ;
  wire \WR_OCCUPANCY[6]_i_3__2_n_0 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__2_n_2 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__2_n_3 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire rxrecclk;
  wire [3:2]\NLW_WR_OCCUPANCY_reg[6]_i_1__2_CO_UNCONNECTED ;
  wire [3:3]\NLW_WR_OCCUPANCY_reg[6]_i_1__2_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h9)) 
    \WR_OCCUPANCY[6]_i_2__2 
       (.I0(Q[2]),
        .I1(data_out),
        .O(\WR_OCCUPANCY[6]_i_2__2_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \WR_OCCUPANCY[6]_i_3__2 
       (.I0(Q[1]),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .O(\WR_OCCUPANCY[6]_i_3__2_n_0 ));
  CARRY4 \WR_OCCUPANCY_reg[6]_i_1__2 
       (.CI(CO),
        .CO({\NLW_WR_OCCUPANCY_reg[6]_i_1__2_CO_UNCONNECTED [3:2],\WR_OCCUPANCY_reg[6]_i_1__2_n_2 ,\WR_OCCUPANCY_reg[6]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,Q[1:0]}),
        .O({\NLW_WR_OCCUPANCY_reg[6]_i_1__2_O_UNCONNECTED [3],D}),
        .S({1'b0,\WR_OCCUPANCY[6]_i_2__2_n_0 ,\WR_OCCUPANCY[6]_i_3__2_n_0 ,S}));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[6] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_85
   (DI,
    data_out,
    GRAY_TO_BIN,
    Q,
    userclk);
  output [0:0]DI;
  output data_out;
  input [0:0]GRAY_TO_BIN;
  input [0:0]Q;
  input userclk;

  wire [0:0]DI;
  wire [0:0]GRAY_TO_BIN;
  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire userclk;

  LUT2 #(
    .INIT(4'h6)) 
    \RD_OCCUPANCY[3]_i_5__2 
       (.I0(data_out),
        .I1(GRAY_TO_BIN),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_86
   (GRAY_TO_BIN,
    CO,
    D,
    Q,
    data_out,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    data_sync_reg6_4,
    DI,
    S,
    \WR_ADDR_GRAY_reg[1] ,
    userclk);
  output [0:0]GRAY_TO_BIN;
  output [0:0]CO;
  output [3:0]D;
  input [1:0]Q;
  input data_out;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input data_sync_reg6_4;
  input [2:0]DI;
  input [1:0]S;
  input [0:0]\WR_ADDR_GRAY_reg[1] ;
  input userclk;

  wire [0:0]CO;
  wire [3:0]D;
  wire [2:0]DI;
  wire [0:0]GRAY_TO_BIN;
  wire [1:0]Q;
  wire \RD_OCCUPANCY[3]_i_8__2_n_0 ;
  wire \RD_OCCUPANCY[3]_i_9__2_n_0 ;
  wire \RD_OCCUPANCY_reg[3]_i_1__2_n_1 ;
  wire \RD_OCCUPANCY_reg[3]_i_1__2_n_2 ;
  wire \RD_OCCUPANCY_reg[3]_i_1__2_n_3 ;
  wire [1:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[1] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire data_sync_reg6_4;
  wire p_1_out;
  wire userclk;

  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \RD_OCCUPANCY[3]_i_4__2 
       (.I0(p_1_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .I4(data_sync_reg6_3),
        .I5(data_sync_reg6_4),
        .O(GRAY_TO_BIN));
  LUT2 #(
    .INIT(4'h9)) 
    \RD_OCCUPANCY[3]_i_8__2 
       (.I0(GRAY_TO_BIN),
        .I1(Q[1]),
        .O(\RD_OCCUPANCY[3]_i_8__2_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \RD_OCCUPANCY[3]_i_9__2 
       (.I0(GRAY_TO_BIN),
        .I1(data_out),
        .I2(Q[0]),
        .O(\RD_OCCUPANCY[3]_i_9__2_n_0 ));
  CARRY4 \RD_OCCUPANCY_reg[3]_i_1__2 
       (.CI(1'b0),
        .CO({CO,\RD_OCCUPANCY_reg[3]_i_1__2_n_1 ,\RD_OCCUPANCY_reg[3]_i_1__2_n_2 ,\RD_OCCUPANCY_reg[3]_i_1__2_n_3 }),
        .CYINIT(1'b1),
        .DI({DI[2:1],GRAY_TO_BIN,DI[0]}),
        .O(D),
        .S({S,\RD_OCCUPANCY[3]_i_8__2_n_0 ,\RD_OCCUPANCY[3]_i_9__2_n_0 }));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[1] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(p_1_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_87
   (DI,
    data_out,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    Q,
    userclk);
  output [0:0]DI;
  output data_out;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input [0:0]Q;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire userclk;

  LUT5 #(
    .INIT(32'h96696996)) 
    \RD_OCCUPANCY[3]_i_3__2 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .I4(data_sync_reg6_3),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_88
   (S,
    data_out,
    DI,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    Q,
    \WR_ADDR_GRAY_reg[3] ,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input [0:0]Q;
  input [0:0]\WR_ADDR_GRAY_reg[3] ;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire [0:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[3] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire userclk;

  LUT4 #(
    .INIT(16'h6996)) 
    \RD_OCCUPANCY[3]_i_2__2 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .O(DI));
  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \RD_OCCUPANCY[3]_i_7__2 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .I4(data_sync_reg6_3),
        .I5(Q),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[3] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_89
   (S,
    data_out,
    DI,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    Q,
    \WR_ADDR_GRAY_reg[4] ,
    userclk);
  output [0:0]S;
  output data_out;
  output [0:0]DI;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input [0:0]Q;
  input [0:0]\WR_ADDR_GRAY_reg[4] ;
  input userclk;

  wire [0:0]DI;
  wire [0:0]Q;
  wire [0:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[4] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire userclk;

  LUT5 #(
    .INIT(32'h69969669)) 
    \RD_OCCUPANCY[3]_i_6__2 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(data_sync_reg6_2),
        .I4(Q),
        .O(S));
  LUT3 #(
    .INIT(8'h96)) 
    \RD_OCCUPANCY[6]_i_3__2 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[4] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_90
   (data_out,
    D,
    data_sync_reg6_0,
    data_sync_reg6_1,
    Q,
    DI,
    CO,
    S,
    \WR_ADDR_GRAY_reg[5] ,
    userclk);
  output data_out;
  output [2:0]D;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input [0:0]Q;
  input [0:0]DI;
  input [0:0]CO;
  input [1:0]S;
  input [0:0]\WR_ADDR_GRAY_reg[5] ;
  input userclk;

  wire [0:0]CO;
  wire [2:0]D;
  wire [0:0]DI;
  wire [5:5]GRAY_TO_BIN;
  wire [0:0]Q;
  wire \RD_OCCUPANCY[6]_i_6__2_n_0 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__2_n_2 ;
  wire \RD_OCCUPANCY_reg[6]_i_1__2_n_3 ;
  wire [1:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[5] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire userclk;
  wire [3:2]\NLW_RD_OCCUPANCY_reg[6]_i_1__2_CO_UNCONNECTED ;
  wire [3:3]\NLW_RD_OCCUPANCY_reg[6]_i_1__2_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h6)) 
    \RD_OCCUPANCY[6]_i_2__2 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .O(GRAY_TO_BIN));
  LUT4 #(
    .INIT(16'h9669)) 
    \RD_OCCUPANCY[6]_i_6__2 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(data_sync_reg6_1),
        .I3(Q),
        .O(\RD_OCCUPANCY[6]_i_6__2_n_0 ));
  CARRY4 \RD_OCCUPANCY_reg[6]_i_1__2 
       (.CI(CO),
        .CO({\NLW_RD_OCCUPANCY_reg[6]_i_1__2_CO_UNCONNECTED [3:2],\RD_OCCUPANCY_reg[6]_i_1__2_n_2 ,\RD_OCCUPANCY_reg[6]_i_1__2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,GRAY_TO_BIN,DI}),
        .O({\NLW_RD_OCCUPANCY_reg[6]_i_1__2_O_UNCONNECTED [3],D}),
        .S({1'b0,S,\RD_OCCUPANCY[6]_i_6__2_n_0 }));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[5] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_91
   (S,
    data_out,
    data_sync_reg6_0,
    Q,
    \WR_ADDR_GRAY_reg[6] ,
    userclk);
  output [1:0]S;
  output data_out;
  input data_sync_reg6_0;
  input [1:0]Q;
  input [0:0]\WR_ADDR_GRAY_reg[6] ;
  input userclk;

  wire [1:0]Q;
  wire [1:0]S;
  wire [0:0]\WR_ADDR_GRAY_reg[6] ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire userclk;

  LUT2 #(
    .INIT(4'h9)) 
    \RD_OCCUPANCY[6]_i_4__2 
       (.I0(data_out),
        .I1(Q[1]),
        .O(S[1]));
  LUT3 #(
    .INIT(8'h69)) 
    \RD_OCCUPANCY[6]_i_5__2 
       (.I0(data_out),
        .I1(data_sync_reg6_0),
        .I2(Q[0]),
        .O(S[0]));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(\WR_ADDR_GRAY_reg[6] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_92
   (data_out,
    Q,
    rxrecclk);
  output data_out;
  input [0:0]Q;
  input rxrecclk;

  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_93
   (CO,
    D,
    Q,
    data_out,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    S,
    data_sync_reg6_4,
    \RD_ADDR_GRAY_reg[1] ,
    rxrecclk);
  output [0:0]CO;
  output [2:0]D;
  input [3:0]Q;
  input data_out;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input [1:0]S;
  input data_sync_reg6_4;
  input [0:0]\RD_ADDR_GRAY_reg[1] ;
  input rxrecclk;

  wire [0:0]CO;
  wire [2:0]D;
  wire [3:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[1] ;
  wire [1:0]S;
  wire \WR_OCCUPANCY[3]_i_4__1_n_0 ;
  wire \WR_OCCUPANCY[3]_i_5__1_n_0 ;
  wire \WR_OCCUPANCY_reg[3]_i_1__1_n_1 ;
  wire \WR_OCCUPANCY_reg[3]_i_1__1_n_2 ;
  wire \WR_OCCUPANCY_reg[3]_i_1__1_n_3 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire data_sync_reg6_4;
  wire p_31_in;
  wire p_4_in27_in;
  wire rxrecclk;
  wire [0:0]\NLW_WR_OCCUPANCY_reg[3]_i_1__1_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h9)) 
    \WR_OCCUPANCY[3]_i_4__1 
       (.I0(Q[1]),
        .I1(p_31_in),
        .O(\WR_OCCUPANCY[3]_i_4__1_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \WR_OCCUPANCY[3]_i_5__1 
       (.I0(Q[0]),
        .I1(p_31_in),
        .I2(data_sync_reg6_4),
        .O(\WR_OCCUPANCY[3]_i_5__1_n_0 ));
  LUT6 #(
    .INIT(64'h6996966996696996)) 
    \WR_OCCUPANCY[3]_i_6__1 
       (.I0(p_4_in27_in),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .I3(data_sync_reg6_1),
        .I4(data_sync_reg6_2),
        .I5(data_sync_reg6_3),
        .O(p_31_in));
  CARRY4 \WR_OCCUPANCY_reg[3]_i_1__1 
       (.CI(1'b0),
        .CO({CO,\WR_OCCUPANCY_reg[3]_i_1__1_n_1 ,\WR_OCCUPANCY_reg[3]_i_1__1_n_2 ,\WR_OCCUPANCY_reg[3]_i_1__1_n_3 }),
        .CYINIT(1'b1),
        .DI(Q),
        .O({D,\NLW_WR_OCCUPANCY_reg[3]_i_1__1_O_UNCONNECTED [0]}),
        .S({S,\WR_OCCUPANCY[3]_i_4__1_n_0 ,\WR_OCCUPANCY[3]_i_5__1_n_0 }));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[1] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(p_4_in27_in),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_94
   (data_out,
    Q,
    rxrecclk);
  output data_out;
  input [0:0]Q;
  input rxrecclk;

  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_95
   (S,
    data_out,
    Q,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    data_sync_reg6_3,
    \RD_ADDR_GRAY_reg[3] ,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input data_sync_reg6_3;
  input [0:0]\RD_ADDR_GRAY_reg[3] ;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[3] ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire data_sync_reg6_3;
  wire rxrecclk;

  LUT6 #(
    .INIT(64'h9669699669969669)) 
    \WR_OCCUPANCY[3]_i_3__1 
       (.I0(Q),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .I3(data_sync_reg6_1),
        .I4(data_sync_reg6_2),
        .I5(data_sync_reg6_3),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[3] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_96
   (S,
    data_out,
    Q,
    data_sync_reg6_0,
    data_sync_reg6_1,
    data_sync_reg6_2,
    \RD_ADDR_GRAY_reg[4] ,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input data_sync_reg6_2;
  input [0:0]\RD_ADDR_GRAY_reg[4] ;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[4] ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire data_sync_reg6_2;
  wire rxrecclk;

  LUT5 #(
    .INIT(32'h69969669)) 
    \WR_OCCUPANCY[3]_i_2__1 
       (.I0(Q),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .I3(data_sync_reg6_1),
        .I4(data_sync_reg6_2),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[4] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_97
   (S,
    data_out,
    Q,
    data_sync_reg6_0,
    data_sync_reg6_1,
    \RD_ADDR_GRAY_reg[5] ,
    rxrecclk);
  output [0:0]S;
  output data_out;
  input [0:0]Q;
  input data_sync_reg6_0;
  input data_sync_reg6_1;
  input [0:0]\RD_ADDR_GRAY_reg[5] ;
  input rxrecclk;

  wire [0:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[5] ;
  wire [0:0]S;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire data_sync_reg6_1;
  wire rxrecclk;

  LUT4 #(
    .INIT(16'h9669)) 
    \WR_OCCUPANCY[6]_i_4__1 
       (.I0(Q),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .I3(data_sync_reg6_1),
        .O(S));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[5] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_98
   (data_out,
    D,
    Q,
    data_sync_reg6_0,
    CO,
    S,
    \RD_ADDR_GRAY_reg[6] ,
    rxrecclk);
  output data_out;
  output [2:0]D;
  input [2:0]Q;
  input data_sync_reg6_0;
  input [0:0]CO;
  input [0:0]S;
  input [0:0]\RD_ADDR_GRAY_reg[6] ;
  input rxrecclk;

  wire [0:0]CO;
  wire [2:0]D;
  wire [2:0]Q;
  wire [0:0]\RD_ADDR_GRAY_reg[6] ;
  wire [0:0]S;
  wire \WR_OCCUPANCY[6]_i_2__1_n_0 ;
  wire \WR_OCCUPANCY[6]_i_3__1_n_0 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__1_n_2 ;
  wire \WR_OCCUPANCY_reg[6]_i_1__1_n_3 ;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire data_sync_reg6_0;
  wire rxrecclk;
  wire [3:2]\NLW_WR_OCCUPANCY_reg[6]_i_1__1_CO_UNCONNECTED ;
  wire [3:3]\NLW_WR_OCCUPANCY_reg[6]_i_1__1_O_UNCONNECTED ;

  LUT2 #(
    .INIT(4'h9)) 
    \WR_OCCUPANCY[6]_i_2__1 
       (.I0(Q[2]),
        .I1(data_out),
        .O(\WR_OCCUPANCY[6]_i_2__1_n_0 ));
  LUT3 #(
    .INIT(8'h69)) 
    \WR_OCCUPANCY[6]_i_3__1 
       (.I0(Q[1]),
        .I1(data_out),
        .I2(data_sync_reg6_0),
        .O(\WR_OCCUPANCY[6]_i_3__1_n_0 ));
  CARRY4 \WR_OCCUPANCY_reg[6]_i_1__1 
       (.CI(CO),
        .CO({\NLW_WR_OCCUPANCY_reg[6]_i_1__1_CO_UNCONNECTED [3:2],\WR_OCCUPANCY_reg[6]_i_1__1_n_2 ,\WR_OCCUPANCY_reg[6]_i_1__1_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,Q[1:0]}),
        .O({\NLW_WR_OCCUPANCY_reg[6]_i_1__1_O_UNCONNECTED [3],D}),
        .S({1'b0,\WR_OCCUPANCY[6]_i_2__1_n_0 ,\WR_OCCUPANCY[6]_i_3__1_n_0 ,S}));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(\RD_ADDR_GRAY_reg[6] ),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "qsgmii_sync_block" *) 
module qsgmii_1218_qsgmii_sync_block_99
   (DI,
    data_out,
    GRAY_TO_BIN,
    Q,
    userclk);
  output [0:0]DI;
  output data_out;
  input [0:0]GRAY_TO_BIN;
  input [0:0]Q;
  input userclk;

  wire [0:0]DI;
  wire [0:0]GRAY_TO_BIN;
  wire [0:0]Q;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire userclk;

  LUT2 #(
    .INIT(4'h6)) 
    \RD_OCCUPANCY[3]_i_5__1 
       (.I0(data_out),
        .I1(GRAY_TO_BIN),
        .O(DI));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(Q),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  (* msgon = "FALSE" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "quadsgmii_v3_4_4" *) (* c_component_name = "qsgmii_1218" *) (* c_elaboration_transient_dir = "BlankString" *) 
(* c_family = "kintex7" *) (* c_gmii_or_mii_mode = "TRUE" *) (* c_has_an = "TRUE" *) 
(* c_has_mdio = "FALSE" *) (* c_qsgmii_phy_mode = "FALSE" *) (* c_rx_gmii_clk = "TXOUTCLK" *) 
module qsgmii_1218_quadsgmii_v3_4_4
   (reset,
    signal_detect,
    reset_done,
    link_timer_value_ch0,
    link_timer_value_ch1,
    link_timer_value_ch2,
    link_timer_value_ch3,
    gt_channel_valid_ch0,
    gt_channel_valid_ch1,
    gt_channel_valid_ch2,
    gt_channel_valid_ch3,
    mgt_rx_reset,
    mgt_tx_reset,
    userclk,
    userclk2,
    rxrecclk,
    dcm_locked,
    rxchariscomma,
    rxcharisk,
    rxclkcorcnt,
    rxdata,
    rxdisperr,
    rxnotintable,
    rxrundisp,
    txbuferr,
    powerdown,
    txchardispmode,
    txchardispval,
    txcharisk,
    txdata,
    enablealign,
    gmii_txd_ch0,
    gmii_tx_en_ch0,
    gmii_tx_er_ch0,
    gmii_rxd_ch0,
    gmii_rx_dv_ch0,
    gmii_rx_er_ch0,
    gmii_isolate_ch0,
    an_interrupt_ch0,
    phyad_ch0,
    mdc_ch0,
    mdio_in_ch0,
    mdio_out_ch0,
    mdio_tri_ch0,
    configuration_vector_ch0,
    configuration_valid_ch0,
    status_vector_ch0,
    an_adv_config_vector_ch0,
    an_adv_config_val_ch0,
    an_restart_config_ch0,
    gmii_txd_ch1,
    gmii_tx_en_ch1,
    gmii_tx_er_ch1,
    gmii_rxd_ch1,
    gmii_rx_dv_ch1,
    gmii_rx_er_ch1,
    gmii_isolate_ch1,
    an_interrupt_ch1,
    phyad_ch1,
    mdc_ch1,
    mdio_in_ch1,
    mdio_out_ch1,
    mdio_tri_ch1,
    configuration_vector_ch1,
    configuration_valid_ch1,
    status_vector_ch1,
    an_adv_config_vector_ch1,
    an_adv_config_val_ch1,
    an_restart_config_ch1,
    gmii_txd_ch2,
    gmii_tx_en_ch2,
    gmii_tx_er_ch2,
    gmii_rxd_ch2,
    gmii_rx_dv_ch2,
    gmii_rx_er_ch2,
    gmii_isolate_ch2,
    an_interrupt_ch2,
    phyad_ch2,
    mdc_ch2,
    mdio_in_ch2,
    mdio_out_ch2,
    mdio_tri_ch2,
    configuration_vector_ch2,
    configuration_valid_ch2,
    status_vector_ch2,
    an_adv_config_vector_ch2,
    an_adv_config_val_ch2,
    an_restart_config_ch2,
    gmii_txd_ch3,
    gmii_tx_en_ch3,
    gmii_tx_er_ch3,
    gmii_rxd_ch3,
    gmii_rx_dv_ch3,
    gmii_rx_er_ch3,
    gmii_isolate_ch3,
    an_interrupt_ch3,
    phyad_ch3,
    mdc_ch3,
    mdio_in_ch3,
    mdio_out_ch3,
    mdio_tri_ch3,
    configuration_vector_ch3,
    configuration_valid_ch3,
    status_vector_ch3,
    an_adv_config_vector_ch3,
    an_adv_config_val_ch3,
    an_restart_config_ch3);
  input reset;
  input signal_detect;
  input reset_done;
  input [8:0]link_timer_value_ch0;
  input [8:0]link_timer_value_ch1;
  input [8:0]link_timer_value_ch2;
  input [8:0]link_timer_value_ch3;
  output gt_channel_valid_ch0;
  output gt_channel_valid_ch1;
  output gt_channel_valid_ch2;
  output gt_channel_valid_ch3;
  output mgt_rx_reset;
  output mgt_tx_reset;
  input userclk;
  input userclk2;
  input rxrecclk;
  input dcm_locked;
  input [3:0]rxchariscomma;
  input [3:0]rxcharisk;
  input [2:0]rxclkcorcnt;
  input [31:0]rxdata;
  input [3:0]rxdisperr;
  input [3:0]rxnotintable;
  input [3:0]rxrundisp;
  input txbuferr;
  output powerdown;
  output [3:0]txchardispmode;
  output [3:0]txchardispval;
  output [3:0]txcharisk;
  output [31:0]txdata;
  output enablealign;
  input [7:0]gmii_txd_ch0;
  input gmii_tx_en_ch0;
  input gmii_tx_er_ch0;
  output [7:0]gmii_rxd_ch0;
  output gmii_rx_dv_ch0;
  output gmii_rx_er_ch0;
  output gmii_isolate_ch0;
  output an_interrupt_ch0;
  input [4:0]phyad_ch0;
  input mdc_ch0;
  input mdio_in_ch0;
  output mdio_out_ch0;
  output mdio_tri_ch0;
  input [4:0]configuration_vector_ch0;
  input configuration_valid_ch0;
  output [15:0]status_vector_ch0;
  input [15:0]an_adv_config_vector_ch0;
  input an_adv_config_val_ch0;
  input an_restart_config_ch0;
  input [7:0]gmii_txd_ch1;
  input gmii_tx_en_ch1;
  input gmii_tx_er_ch1;
  output [7:0]gmii_rxd_ch1;
  output gmii_rx_dv_ch1;
  output gmii_rx_er_ch1;
  output gmii_isolate_ch1;
  output an_interrupt_ch1;
  input [4:0]phyad_ch1;
  input mdc_ch1;
  input mdio_in_ch1;
  output mdio_out_ch1;
  output mdio_tri_ch1;
  input [4:0]configuration_vector_ch1;
  input configuration_valid_ch1;
  output [15:0]status_vector_ch1;
  input [15:0]an_adv_config_vector_ch1;
  input an_adv_config_val_ch1;
  input an_restart_config_ch1;
  input [7:0]gmii_txd_ch2;
  input gmii_tx_en_ch2;
  input gmii_tx_er_ch2;
  output [7:0]gmii_rxd_ch2;
  output gmii_rx_dv_ch2;
  output gmii_rx_er_ch2;
  output gmii_isolate_ch2;
  output an_interrupt_ch2;
  input [4:0]phyad_ch2;
  input mdc_ch2;
  input mdio_in_ch2;
  output mdio_out_ch2;
  output mdio_tri_ch2;
  input [4:0]configuration_vector_ch2;
  input configuration_valid_ch2;
  output [15:0]status_vector_ch2;
  input [15:0]an_adv_config_vector_ch2;
  input an_adv_config_val_ch2;
  input an_restart_config_ch2;
  input [7:0]gmii_txd_ch3;
  input gmii_tx_en_ch3;
  input gmii_tx_er_ch3;
  output [7:0]gmii_rxd_ch3;
  output gmii_rx_dv_ch3;
  output gmii_rx_er_ch3;
  output gmii_isolate_ch3;
  output an_interrupt_ch3;
  input [4:0]phyad_ch3;
  input mdc_ch3;
  input mdio_in_ch3;
  output mdio_out_ch3;
  output mdio_tri_ch3;
  input [4:0]configuration_vector_ch3;
  input configuration_valid_ch3;
  output [15:0]status_vector_ch3;
  input [15:0]an_adv_config_vector_ch3;
  input an_adv_config_val_ch3;
  input an_restart_config_ch3;

  wire \<const0> ;
  wire [15:0]an_adv_config_vector_ch0;
  wire [15:0]an_adv_config_vector_ch1;
  wire [15:0]an_adv_config_vector_ch2;
  wire [15:0]an_adv_config_vector_ch3;
  wire an_interrupt_ch0;
  wire an_interrupt_ch1;
  wire an_interrupt_ch2;
  wire an_interrupt_ch3;
  wire an_restart_config_ch0;
  wire an_restart_config_ch1;
  wire an_restart_config_ch2;
  wire an_restart_config_ch3;
  wire [4:0]configuration_vector_ch0;
  wire [4:0]configuration_vector_ch1;
  wire [4:0]configuration_vector_ch2;
  wire [4:0]configuration_vector_ch3;
  wire dcm_locked;
  wire enablealign;
  wire gmii_rx_dv_ch0;
  wire gmii_rx_dv_ch1;
  wire gmii_rx_dv_ch2;
  wire gmii_rx_dv_ch3;
  wire gmii_rx_er_ch0;
  wire gmii_rx_er_ch1;
  wire gmii_rx_er_ch2;
  wire gmii_rx_er_ch3;
  wire [7:0]gmii_rxd_ch0;
  wire [7:0]gmii_rxd_ch1;
  wire [7:0]gmii_rxd_ch2;
  wire [7:0]gmii_rxd_ch3;
  wire gmii_tx_en_ch0;
  wire gmii_tx_en_ch1;
  wire gmii_tx_en_ch2;
  wire gmii_tx_en_ch3;
  wire gmii_tx_er_ch0;
  wire gmii_tx_er_ch1;
  wire gmii_tx_er_ch2;
  wire gmii_tx_er_ch3;
  wire [7:0]gmii_txd_ch0;
  wire [7:0]gmii_txd_ch1;
  wire [7:0]gmii_txd_ch2;
  wire [7:0]gmii_txd_ch3;
  wire [8:0]link_timer_value_ch0;
  wire [8:0]link_timer_value_ch1;
  wire [8:0]link_timer_value_ch2;
  wire [8:0]link_timer_value_ch3;
  wire mgt_rx_reset;
  wire mgt_tx_reset;
  wire powerdown;
  wire reset;
  wire reset_done;
  wire [3:0]rxchariscomma;
  wire [3:0]rxcharisk;
  wire [31:0]rxdata;
  wire [3:0]rxnotintable;
  wire rxrecclk;
  wire signal_detect;
  wire [13:0]\^status_vector_ch0 ;
  wire [13:0]\^status_vector_ch1 ;
  wire [13:0]\^status_vector_ch2 ;
  wire [13:0]\^status_vector_ch3 ;
  wire txbuferr;
  wire [3:0]txcharisk;
  wire [31:0]txdata;
  wire userclk;

  assign gmii_isolate_ch0 = \<const0> ;
  assign gmii_isolate_ch1 = \<const0> ;
  assign gmii_isolate_ch2 = \<const0> ;
  assign gmii_isolate_ch3 = \<const0> ;
  assign gt_channel_valid_ch0 = \<const0> ;
  assign gt_channel_valid_ch1 = \<const0> ;
  assign gt_channel_valid_ch2 = \<const0> ;
  assign gt_channel_valid_ch3 = \<const0> ;
  assign mdio_out_ch0 = \<const0> ;
  assign mdio_out_ch1 = \<const0> ;
  assign mdio_out_ch2 = \<const0> ;
  assign mdio_out_ch3 = \<const0> ;
  assign mdio_tri_ch0 = \<const0> ;
  assign mdio_tri_ch1 = \<const0> ;
  assign mdio_tri_ch2 = \<const0> ;
  assign mdio_tri_ch3 = \<const0> ;
  assign status_vector_ch0[15] = \<const0> ;
  assign status_vector_ch0[14] = \<const0> ;
  assign status_vector_ch0[13:9] = \^status_vector_ch0 [13:9];
  assign status_vector_ch0[8] = \<const0> ;
  assign status_vector_ch0[7:0] = \^status_vector_ch0 [7:0];
  assign status_vector_ch1[15] = \<const0> ;
  assign status_vector_ch1[14] = \<const0> ;
  assign status_vector_ch1[13:9] = \^status_vector_ch1 [13:9];
  assign status_vector_ch1[8] = \<const0> ;
  assign status_vector_ch1[7:0] = \^status_vector_ch1 [7:0];
  assign status_vector_ch2[15] = \<const0> ;
  assign status_vector_ch2[14] = \<const0> ;
  assign status_vector_ch2[13:9] = \^status_vector_ch2 [13:9];
  assign status_vector_ch2[8] = \<const0> ;
  assign status_vector_ch2[7:0] = \^status_vector_ch2 [7:0];
  assign status_vector_ch3[15] = \<const0> ;
  assign status_vector_ch3[14] = \<const0> ;
  assign status_vector_ch3[13:9] = \^status_vector_ch3 [13:9];
  assign status_vector_ch3[8] = \<const0> ;
  assign status_vector_ch3[7:0] = \^status_vector_ch3 [7:0];
  assign txchardispmode[3] = \<const0> ;
  assign txchardispmode[2] = \<const0> ;
  assign txchardispmode[1] = \<const0> ;
  assign txchardispmode[0] = \<const0> ;
  assign txchardispval[3] = \<const0> ;
  assign txchardispval[2] = \<const0> ;
  assign txchardispval[1] = \<const0> ;
  assign txchardispval[0] = \<const0> ;
  GND GND
       (.G(\<const0> ));
  qsgmii_1218_QSGMII_GEN qsgmii_inst
       (.MGT_RX_RESET(mgt_rx_reset),
        .MGT_TX_RESET(mgt_tx_reset),
        .an_adv_config_vector_ch0(an_adv_config_vector_ch0[11]),
        .an_adv_config_vector_ch1(an_adv_config_vector_ch1[11]),
        .an_adv_config_vector_ch2(an_adv_config_vector_ch2[11]),
        .an_adv_config_vector_ch3(an_adv_config_vector_ch3[11]),
        .an_interrupt_ch0(an_interrupt_ch0),
        .an_interrupt_ch1(an_interrupt_ch1),
        .an_interrupt_ch2(an_interrupt_ch2),
        .an_interrupt_ch3(an_interrupt_ch3),
        .an_restart_config_ch0(an_restart_config_ch0),
        .an_restart_config_ch1(an_restart_config_ch1),
        .an_restart_config_ch2(an_restart_config_ch2),
        .an_restart_config_ch3(an_restart_config_ch3),
        .configuration_vector_ch0(configuration_vector_ch0),
        .configuration_vector_ch1(configuration_vector_ch1),
        .configuration_vector_ch2(configuration_vector_ch2),
        .configuration_vector_ch3(configuration_vector_ch3),
        .dcm_locked(dcm_locked),
        .enablealign(enablealign),
        .gmii_rx_dv_ch0(gmii_rx_dv_ch0),
        .gmii_rx_dv_ch1(gmii_rx_dv_ch1),
        .gmii_rx_dv_ch2(gmii_rx_dv_ch2),
        .gmii_rx_dv_ch3(gmii_rx_dv_ch3),
        .gmii_rx_er_ch0(gmii_rx_er_ch0),
        .gmii_rx_er_ch1(gmii_rx_er_ch1),
        .gmii_rx_er_ch2(gmii_rx_er_ch2),
        .gmii_rx_er_ch3(gmii_rx_er_ch3),
        .gmii_rxd_ch0(gmii_rxd_ch0),
        .gmii_rxd_ch1(gmii_rxd_ch1),
        .gmii_rxd_ch2(gmii_rxd_ch2),
        .gmii_rxd_ch3(gmii_rxd_ch3),
        .gmii_tx_en_ch0(gmii_tx_en_ch0),
        .gmii_tx_en_ch1(gmii_tx_en_ch1),
        .gmii_tx_en_ch2(gmii_tx_en_ch2),
        .gmii_tx_en_ch3(gmii_tx_en_ch3),
        .gmii_tx_er_ch0(gmii_tx_er_ch0),
        .gmii_tx_er_ch1(gmii_tx_er_ch1),
        .gmii_tx_er_ch2(gmii_tx_er_ch2),
        .gmii_tx_er_ch3(gmii_tx_er_ch3),
        .gmii_txd_ch0(gmii_txd_ch0),
        .gmii_txd_ch1(gmii_txd_ch1),
        .gmii_txd_ch2(gmii_txd_ch2),
        .gmii_txd_ch3(gmii_txd_ch3),
        .link_timer_value_ch0(link_timer_value_ch0),
        .link_timer_value_ch1(link_timer_value_ch1),
        .link_timer_value_ch2(link_timer_value_ch2),
        .link_timer_value_ch3(link_timer_value_ch3),
        .powerdown(powerdown),
        .reset(reset),
        .reset_done(reset_done),
        .rxchariscomma(rxchariscomma),
        .rxcharisk(rxcharisk),
        .rxdata(rxdata),
        .rxnotintable(rxnotintable),
        .rxrecclk(rxrecclk),
        .signal_detect(signal_detect),
        .status_vector_ch0({\^status_vector_ch0 [13:9],\^status_vector_ch0 [7:0]}),
        .status_vector_ch1({\^status_vector_ch1 [13:9],\^status_vector_ch1 [7:0]}),
        .status_vector_ch2({\^status_vector_ch2 [13:9],\^status_vector_ch2 [7:0]}),
        .status_vector_ch3({\^status_vector_ch3 [13:9],\^status_vector_ch3 [7:0]}),
        .txbuferr(txbuferr),
        .txcharisk(txcharisk),
        .txdata(txdata),
        .userclk(userclk));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module qsgmii_1218_reset_sync_block
   (\MGT_RESET.RESET_INT_PIPE_reg ,
    dcm_locked,
    userclk,
    RESET_OUT);
  output \MGT_RESET.RESET_INT_PIPE_reg ;
  input dcm_locked;
  input userclk;
  input RESET_OUT;

  wire \MGT_RESET.RESET_INT_PIPE_reg ;
  wire RESET_OUT;
  wire dcm_locked;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire userclk;

  LUT2 #(
    .INIT(4'hB)) 
    \MGT_RESET.RESET_INT_PIPE_i_1 
       (.I0(reset_out),
        .I1(dcm_locked),
        .O(\MGT_RESET.RESET_INT_PIPE_reg ));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(reset_out));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module qsgmii_1218_reset_sync_block_134
   (p_6_out,
    dcm_locked,
    reset_out,
    rxrecclk,
    RESET_OUT);
  output p_6_out;
  input dcm_locked;
  input reset_out;
  input rxrecclk;
  input RESET_OUT;

  wire RESET_OUT;
  wire RESET_REG_RXRECCLK;
  wire dcm_locked;
  wire p_6_out;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire rxrecclk;

  LUT3 #(
    .INIT(8'hFD)) 
    \MGT_RESET.RESET_INT_PIPE_RXRECCLK_i_1__2 
       (.I0(dcm_locked),
        .I1(RESET_REG_RXRECCLK),
        .I2(reset_out),
        .O(p_6_out));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(RESET_REG_RXRECCLK));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module qsgmii_1218_reset_sync_block_135
   (reset_out,
    rxrecclk);
  output reset_out;
  input rxrecclk;

  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(1'b0),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(1'b0),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(1'b0),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(1'b0),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(1'b0),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(reset_out));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module qsgmii_1218_reset_sync_block_137
   (\MGT_RESET.RESET_INT_PIPE_reg ,
    dcm_locked,
    userclk,
    RESET_OUT);
  output \MGT_RESET.RESET_INT_PIPE_reg ;
  input dcm_locked;
  input userclk;
  input RESET_OUT;

  wire \MGT_RESET.RESET_INT_PIPE_reg ;
  wire RESET_OUT;
  wire dcm_locked;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire userclk;

  LUT2 #(
    .INIT(4'hB)) 
    \MGT_RESET.RESET_INT_PIPE_i_1__1 
       (.I0(reset_out),
        .I1(dcm_locked),
        .O(\MGT_RESET.RESET_INT_PIPE_reg ));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(reset_out));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module qsgmii_1218_reset_sync_block_138
   (p_6_out,
    dcm_locked,
    reset_out,
    rxrecclk,
    RESET_OUT);
  output p_6_out;
  input dcm_locked;
  input reset_out;
  input rxrecclk;
  input RESET_OUT;

  wire RESET_OUT;
  wire RESET_REG_RXRECCLK;
  wire dcm_locked;
  wire p_6_out;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire rxrecclk;

  LUT3 #(
    .INIT(8'hFD)) 
    \MGT_RESET.RESET_INT_PIPE_RXRECCLK_i_1__1 
       (.I0(dcm_locked),
        .I1(RESET_REG_RXRECCLK),
        .I2(reset_out),
        .O(p_6_out));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(RESET_REG_RXRECCLK));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module qsgmii_1218_reset_sync_block_139
   (reset_out,
    rxrecclk);
  output reset_out;
  input rxrecclk;

  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(1'b0),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(1'b0),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(1'b0),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(1'b0),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(1'b0),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(reset_out));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module qsgmii_1218_reset_sync_block_145
   (\MGT_RESET.RESET_INT_PIPE_reg ,
    dcm_locked,
    userclk,
    RESET_OUT);
  output \MGT_RESET.RESET_INT_PIPE_reg ;
  input dcm_locked;
  input userclk;
  input RESET_OUT;

  wire \MGT_RESET.RESET_INT_PIPE_reg ;
  wire RESET_OUT;
  wire dcm_locked;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire userclk;

  LUT2 #(
    .INIT(4'hB)) 
    \MGT_RESET.RESET_INT_PIPE_i_1__0 
       (.I0(reset_out),
        .I1(dcm_locked),
        .O(\MGT_RESET.RESET_INT_PIPE_reg ));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(reset_out));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module qsgmii_1218_reset_sync_block_146
   (p_6_out,
    dcm_locked,
    reset_out,
    rxrecclk,
    RESET_OUT);
  output p_6_out;
  input dcm_locked;
  input reset_out;
  input rxrecclk;
  input RESET_OUT;

  wire RESET_OUT;
  wire RESET_REG_RXRECCLK;
  wire dcm_locked;
  wire p_6_out;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire rxrecclk;

  LUT3 #(
    .INIT(8'hFD)) 
    \MGT_RESET.RESET_INT_PIPE_RXRECCLK_i_1__0 
       (.I0(dcm_locked),
        .I1(RESET_REG_RXRECCLK),
        .I2(reset_out),
        .O(p_6_out));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(RESET_REG_RXRECCLK));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module qsgmii_1218_reset_sync_block_147
   (reset_out,
    rxrecclk);
  output reset_out;
  input rxrecclk;

  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(1'b0),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(1'b0),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(1'b0),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(1'b0),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(1'b0),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(reset_out));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module qsgmii_1218_reset_sync_block_153
   (\MGT_RESET.RESET_INT_PIPE_reg ,
    dcm_locked,
    userclk,
    RESET_OUT);
  output \MGT_RESET.RESET_INT_PIPE_reg ;
  input dcm_locked;
  input userclk;
  input RESET_OUT;

  wire \MGT_RESET.RESET_INT_PIPE_reg ;
  wire RESET_OUT;
  wire dcm_locked;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire userclk;

  LUT2 #(
    .INIT(4'hB)) 
    \MGT_RESET.RESET_INT_PIPE_i_1__2 
       (.I0(reset_out),
        .I1(dcm_locked),
        .O(\MGT_RESET.RESET_INT_PIPE_reg ));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(userclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(userclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(reset_out));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module qsgmii_1218_reset_sync_block_154
   (p_6_out,
    dcm_locked,
    reset_out,
    rxrecclk,
    RESET_OUT);
  output p_6_out;
  input dcm_locked;
  input reset_out;
  input rxrecclk;
  input RESET_OUT;

  wire RESET_OUT;
  wire RESET_REG_RXRECCLK;
  wire dcm_locked;
  wire p_6_out;
  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire rxrecclk;

  LUT3 #(
    .INIT(8'hFD)) 
    \MGT_RESET.RESET_INT_PIPE_RXRECCLK_i_1 
       (.I0(dcm_locked),
        .I1(RESET_REG_RXRECCLK),
        .I2(reset_out),
        .O(p_6_out));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(RESET_OUT),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(RESET_REG_RXRECCLK));
endmodule

(* ORIG_REF_NAME = "reset_sync_block" *) 
module qsgmii_1218_reset_sync_block_155
   (reset_out,
    rxrecclk);
  output reset_out;
  input rxrecclk;

  wire reset_out;
  wire reset_sync_reg1;
  wire reset_sync_reg2;
  wire reset_sync_reg3;
  wire reset_sync_reg4;
  wire reset_sync_reg5;
  wire rxrecclk;

  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync1
       (.C(rxrecclk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(1'b0),
        .Q(reset_sync_reg1));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync2
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg1),
        .PRE(1'b0),
        .Q(reset_sync_reg2));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync3
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg2),
        .PRE(1'b0),
        .Q(reset_sync_reg3));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync4
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg3),
        .PRE(1'b0),
        .Q(reset_sync_reg4));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync5
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg4),
        .PRE(1'b0),
        .Q(reset_sync_reg5));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FDP" *) 
  FDPE #(
    .INIT(1'b1)) 
    reset_sync6
       (.C(rxrecclk),
        .CE(1'b1),
        .D(reset_sync_reg5),
        .PRE(1'b0),
        .Q(reset_out));
endmodule

(* ORIG_REF_NAME = "sync_block" *) 
module qsgmii_1218_sync_block
   (SIGNAL_DETECT_REG_reg,
    data_out,
    MASK_RUDI_BUFERR_TIMER0,
    Q,
    p_0_in,
    signal_detect,
    userclk);
  output SIGNAL_DETECT_REG_reg;
  output data_out;
  output MASK_RUDI_BUFERR_TIMER0;
  input [0:0]Q;
  input p_0_in;
  input signal_detect;
  input userclk;

  wire MASK_RUDI_BUFERR_TIMER0;
  wire [0:0]Q;
  wire SIGNAL_DETECT_REG_reg;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire p_0_in;
  wire signal_detect;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT3 #(
    .INIT(8'h40)) 
    MASK_RUDI_BUFERR_i_4__2
       (.I0(Q),
        .I1(p_0_in),
        .I2(data_out),
        .O(MASK_RUDI_BUFERR_TIMER0));
  (* SOFT_HLUTNM = "soft_lutpair258" *) 
  LUT2 #(
    .INIT(4'h2)) 
    SIGNAL_DETECT_REG_i_1__2
       (.I0(data_out),
        .I1(Q),
        .O(SIGNAL_DETECT_REG_reg));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(signal_detect),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sync_block" *) 
module qsgmii_1218_sync_block_142
   (SIGNAL_DETECT_REG_reg,
    data_out,
    MASK_RUDI_BUFERR_TIMER0,
    Q,
    p_0_in,
    signal_detect,
    userclk);
  output SIGNAL_DETECT_REG_reg;
  output data_out;
  output MASK_RUDI_BUFERR_TIMER0;
  input [0:0]Q;
  input p_0_in;
  input signal_detect;
  input userclk;

  wire MASK_RUDI_BUFERR_TIMER0;
  wire [0:0]Q;
  wire SIGNAL_DETECT_REG_reg;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire p_0_in;
  wire signal_detect;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT3 #(
    .INIT(8'h40)) 
    MASK_RUDI_BUFERR_i_4__1
       (.I0(Q),
        .I1(p_0_in),
        .I2(data_out),
        .O(MASK_RUDI_BUFERR_TIMER0));
  (* SOFT_HLUTNM = "soft_lutpair190" *) 
  LUT2 #(
    .INIT(4'h2)) 
    SIGNAL_DETECT_REG_i_1__1
       (.I0(data_out),
        .I1(Q),
        .O(SIGNAL_DETECT_REG_reg));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(signal_detect),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sync_block" *) 
module qsgmii_1218_sync_block_150
   (SIGNAL_DETECT_REG_reg,
    data_out,
    MASK_RUDI_BUFERR_TIMER0,
    Q,
    p_0_in,
    signal_detect,
    userclk);
  output SIGNAL_DETECT_REG_reg;
  output data_out;
  output MASK_RUDI_BUFERR_TIMER0;
  input [0:0]Q;
  input p_0_in;
  input signal_detect;
  input userclk;

  wire MASK_RUDI_BUFERR_TIMER0;
  wire [0:0]Q;
  wire SIGNAL_DETECT_REG_reg;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire p_0_in;
  wire signal_detect;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT3 #(
    .INIT(8'h40)) 
    MASK_RUDI_BUFERR_i_4__0
       (.I0(Q),
        .I1(p_0_in),
        .I2(data_out),
        .O(MASK_RUDI_BUFERR_TIMER0));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT2 #(
    .INIT(4'h2)) 
    SIGNAL_DETECT_REG_i_1__0
       (.I0(data_out),
        .I1(Q),
        .O(SIGNAL_DETECT_REG_reg));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(signal_detect),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sync_block" *) 
module qsgmii_1218_sync_block_158
   (SIGNAL_DETECT_REG_reg,
    data_out,
    MASK_RUDI_BUFERR_TIMER0,
    Q,
    p_0_in,
    signal_detect,
    userclk);
  output SIGNAL_DETECT_REG_reg;
  output data_out;
  output MASK_RUDI_BUFERR_TIMER0;
  input [0:0]Q;
  input p_0_in;
  input signal_detect;
  input userclk;

  wire MASK_RUDI_BUFERR_TIMER0;
  wire [0:0]Q;
  wire SIGNAL_DETECT_REG_reg;
  wire data_out;
  wire data_sync1;
  wire data_sync2;
  wire data_sync3;
  wire data_sync4;
  wire data_sync5;
  wire p_0_in;
  wire signal_detect;
  wire userclk;

  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT3 #(
    .INIT(8'h40)) 
    MASK_RUDI_BUFERR_i_4
       (.I0(Q),
        .I1(p_0_in),
        .I2(data_out),
        .O(MASK_RUDI_BUFERR_TIMER0));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT2 #(
    .INIT(4'h2)) 
    SIGNAL_DETECT_REG_i_1
       (.I0(data_out),
        .I1(Q),
        .O(SIGNAL_DETECT_REG_reg));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg1
       (.C(userclk),
        .CE(1'b1),
        .D(signal_detect),
        .Q(data_sync1),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg2
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync1),
        .Q(data_sync2),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg3
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync2),
        .Q(data_sync3),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg4
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync3),
        .Q(data_sync4),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg5
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync4),
        .Q(data_sync5),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* BOX_TYPE = "PRIMITIVE" *) 
  (* SHREG_EXTRACT = "no" *) 
  (* XILINX_LEGACY_PRIM = "FD" *) 
  FDRE #(
    .INIT(1'b0)) 
    data_sync_reg6
       (.C(userclk),
        .CE(1'b1),
        .D(data_sync5),
        .Q(data_out),
        .R(1'b0));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
